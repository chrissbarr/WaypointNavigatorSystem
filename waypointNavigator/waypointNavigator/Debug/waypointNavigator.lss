
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  0000157a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800308  00800308  00001716  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000360  00000000  00000000  000017b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a40  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  00005558  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f4c  00000000  00000000  00006822  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000994  00000000  00000000  00008770  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000012f7  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002140  00000000  00000000  0000a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000280  00000000  00000000  0000c53b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c3       	rjmp	.+1666   	; 0x6a8 <__vector_9>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
      42:	00 00       	nop
      44:	ec c0       	rjmp	.+472    	; 0x21e <__bad_interrupt>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
      56:	00 00       	nop
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c4       	rjmp	.+2378   	; 0x9a8 <__vector_23>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b0 c0       	rjmp	.+352    	; 0x21e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ae c0       	rjmp	.+348    	; 0x21e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ac c0       	rjmp	.+344    	; 0x21e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	aa c0       	rjmp	.+340    	; 0x21e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a8 c0       	rjmp	.+336    	; 0x21e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a6 c0       	rjmp	.+332    	; 0x21e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a4 c0       	rjmp	.+328    	; 0x21e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a2 c0       	rjmp	.+324    	; 0x21e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a0 c0       	rjmp	.+320    	; 0x21e <__bad_interrupt>
      de:	00 00       	nop
      e0:	9e c0       	rjmp	.+316    	; 0x21e <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <_Z6millisv+0x2>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <__vector_9+0x82>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <_Z22altimeter_start_heightv+0x44>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <i2c_rep_start+0x8>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	13 e0       	ldi	r17, 0x03	; 3
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	ea e7       	ldi	r30, 0x7A	; 122
     1f6:	f5 e1       	ldi	r31, 0x15	; 21
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a8 30       	cpi	r26, 0x08	; 8
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	a8 e0       	ldi	r26, 0x08	; 8
     20c:	b3 e0       	ldi	r27, 0x03	; 3
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a8 35       	cpi	r26, 0x58	; 88
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	2e d5       	rcall	.+2652   	; 0xc76 <main>
     21a:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     220:	00 c0       	rjmp	.+0      	; 0x222 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     222:	00 c0       	rjmp	.+0      	; 0x224 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     224:	00 c0       	rjmp	.+0      	; 0x226 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     226:	00 c0       	rjmp	.+0      	; 0x228 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     228:	00 c0       	rjmp	.+0      	; 0x22a <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     22a:	00 c0       	rjmp	.+0      	; 0x22c <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     22c:	00 00       	nop
	ret          ; 3   "
     22e:	08 95       	ret

00000230 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     230:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     232:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     234:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     236:	58 98       	cbi	0x0b, 0	; 11
	ret
     238:	08 95       	ret

0000023a <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     23a:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     23c:	f1 df       	rcall	.-30     	; 0x220 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     23e:	1d c0       	rjmp	.+58     	; 0x27a <i2c_write>
	ret
     240:	08 95       	ret

00000242 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     242:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     244:	ed df       	rcall	.-38     	; 0x220 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     246:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     248:	eb df       	rcall	.-42     	; 0x220 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     24a:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     24c:	e9 df       	rcall	.-46     	; 0x220 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     24e:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     250:	e7 df       	rcall	.-50     	; 0x220 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     252:	13 c0       	rjmp	.+38     	; 0x27a <i2c_write>
	ret
     254:	08 95       	ret

00000256 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     256:	08 2e       	mov	r0, r24

00000258 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     258:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     25a:	e2 df       	rcall	.-60     	; 0x220 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     25c:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     25e:	0d d0       	rcall	.+26     	; 0x27a <i2c_write>
	tst	r24		;if device not busy -> done
     260:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     262:	11 f0       	breq	.+4      	; 0x268 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     264:	02 d0       	rcall	.+4      	; 0x26a <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     266:	f8 cf       	rjmp	.-16     	; 0x258 <i2c_start_wait1>

00000268 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     268:	08 95       	ret

0000026a <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     26a:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     26c:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     26e:	d8 df       	rcall	.-80     	; 0x220 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     270:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     272:	d6 df       	rcall	.-84     	; 0x220 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     274:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     276:	d4 cf       	rjmp	.-88     	; 0x220 <i2c_delay_T2>
	ret
     278:	08 95       	ret

0000027a <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     27a:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     27c:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     27e:	01 c0       	rjmp	.+2      	; 0x282 <i2c_write_first>

00000280 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     280:	88 0f       	add	r24, r24

00000282 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     282:	59 f0       	breq	.+22     	; 0x29a <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     284:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     286:	18 f4       	brcc	.+6      	; 0x28e <i2c_write_low>
	nop
     288:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     28a:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     28c:	02 c0       	rjmp	.+4      	; 0x292 <i2c_write_high>

0000028e <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     28e:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     290:	00 c0       	rjmp	.+0      	; 0x292 <i2c_write_high>

00000292 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     292:	c6 df       	rcall	.-116    	; 0x220 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     294:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     296:	c4 df       	rcall	.-120    	; 0x220 <i2c_delay_T2>
	rjmp	i2c_write_bit
     298:	f3 cf       	rjmp	.-26     	; 0x280 <i2c_write_bit>

0000029a <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     29a:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     29c:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29e:	c0 df       	rcall	.-128    	; 0x220 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2a0:	50 98       	cbi	0x0a, 0	; 10

000002a2 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2a2:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <i2c_ack_wait>
	
	clr	r24		;return 0
     2a6:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2a8:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2aa:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2ac:	b9 df       	rcall	.-142    	; 0x220 <i2c_delay_T2>
	clr	r25
     2ae:	99 27       	eor	r25, r25
	ret
     2b0:	08 95       	ret

000002b2 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2b2:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <i2c_read>

000002b6 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2b6:	81 e0       	ldi	r24, 0x01	; 1

000002b8 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2b8:	71 e0       	ldi	r23, 0x01	; 1

000002ba <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2ba:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2bc:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2be:	b0 df       	rcall	.-160    	; 0x220 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2c0:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c2:	ae df       	rcall	.-164    	; 0x220 <i2c_delay_T2>

000002c4 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2c4:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2c8:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2ca:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2cc:	08 94       	sec
	
	rol	r23		;store bit
     2ce:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     2d0:	a0 f7       	brcc	.-24     	; 0x2ba <i2c_read_bit>

000002d2 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     2d2:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     2d4:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     2d6:	11 f0       	breq	.+4      	; 0x2dc <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     2d8:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     2da:	01 c0       	rjmp	.+2      	; 0x2de <i2c_put_ack_high>

000002dc <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     2dc:	51 9a       	sbi	0x0a, 1	; 10

000002de <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     2de:	a0 df       	rcall	.-192    	; 0x220 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2e0:	50 98       	cbi	0x0a, 0	; 10

000002e2 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     2e2:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     2e6:	9c df       	rcall	.-200    	; 0x220 <i2c_delay_T2>
	mov	r24,r23
     2e8:	87 2f       	mov	r24, r23
	clr	r25
     2ea:	99 27       	eor	r25, r25
	ret
     2ec:	08 95       	ret

000002ee <_Z16enableEventFlagsv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void enableEventFlags()
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     2ee:	80 ec       	ldi	r24, 0xC0	; 192
     2f0:	b2 df       	rcall	.-156    	; 0x256 <i2c_start_wait>
	i2c_write(PT_DATA_CFG);
     2f2:	83 e1       	ldi	r24, 0x13	; 19
     2f4:	c2 df       	rcall	.-124    	; 0x27a <i2c_write>
	i2c_write(0x07);
     2f6:	87 e0       	ldi	r24, 0x07	; 7
     2f8:	c0 cf       	rjmp	.-128    	; 0x27a <i2c_write>
     2fa:	08 95       	ret

000002fc <_Z8IIC_Readh>:
}

byte IIC_Read(byte regAddr)
{
     2fc:	cf 93       	push	r28
     2fe:	c8 2f       	mov	r28, r24
	// This function reads one byte over IIC
	
	i2c_rep_start(MPL3115a2+I2C_WRITE);
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	9f df       	rcall	.-194    	; 0x242 <i2c_rep_start>
	i2c_write(regAddr);
     304:	8c 2f       	mov	r24, r28
     306:	b9 df       	rcall	.-142    	; 0x27a <i2c_write>
	
	i2c_rep_start(MPL3115a2+I2C_READ);
     308:	81 ec       	ldi	r24, 0xC1	; 193
     30a:	9b df       	rcall	.-202    	; 0x242 <i2c_rep_start>
	return i2c_readNak();
     30c:	d2 df       	rcall	.-92     	; 0x2b2 <i2c_readNak>
}
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <_Z9IIC_Writehh>:

void IIC_Write(byte regAddr, byte value)
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	d8 2f       	mov	r29, r24
     318:	c6 2f       	mov	r28, r22
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     31a:	80 ec       	ldi	r24, 0xC0	; 192
     31c:	9c df       	rcall	.-200    	; 0x256 <i2c_start_wait>
	i2c_write(regAddr);
     31e:	8d 2f       	mov	r24, r29
     320:	ac df       	rcall	.-168    	; 0x27a <i2c_write>
	i2c_write(value);
     322:	8c 2f       	mov	r24, r28
     324:	aa df       	rcall	.-172    	; 0x27a <i2c_write>
	i2c_stop();
     326:	a1 df       	rcall	.-190    	; 0x26a <i2c_stop>
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <_Z24altimeter_toggle_oneShotv>:
}

void altimeter_toggle_oneShot(void) 
{ 
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     32e:	86 e2       	ldi	r24, 0x26	; 38
     330:	e5 df       	rcall	.-54     	; 0x2fc <_Z8IIC_Readh>
	
	//Clear OST bit
	tempSetting &= ~(1<<1);
     332:	68 2f       	mov	r22, r24
     334:	6d 7f       	andi	r22, 0xFD	; 253
	IIC_Write(CTRL_REG1,tempSetting);
     336:	86 e2       	ldi	r24, 0x26	; 38
     338:	ec df       	rcall	.-40     	; 0x312 <_Z9IIC_Writehh>
	
	//read CTRL_REG1
	tempSetting = IIC_Read(CTRL_REG1);
     33a:	86 e2       	ldi	r24, 0x26	; 38
     33c:	df df       	rcall	.-66     	; 0x2fc <_Z8IIC_Readh>
	
	//set OST bit
	tempSetting |= (1<<1);
     33e:	68 2f       	mov	r22, r24
     340:	62 60       	ori	r22, 0x02	; 2
	IIC_Write(CTRL_REG1,tempSetting); 
     342:	86 e2       	ldi	r24, 0x26	; 38
     344:	e6 cf       	rjmp	.-52     	; 0x312 <_Z9IIC_Writehh>
     346:	08 95       	ret

00000348 <_Z20altimeter_get_metresv>:
	
	return start_height;
}

float altimeter_get_metres(void)
{
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
	float altitude = -999;
	
	altimeter_toggle_oneShot();
     354:	ec df       	rcall	.-40     	; 0x32e <_Z24altimeter_toggle_oneShotv>
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
     356:	c9 e5       	ldi	r28, 0x59	; 89
     358:	d2 e0       	ldi	r29, 0x02	; 2
     35a:	0a c0       	rjmp	.+20     	; 0x370 <_Z20altimeter_get_metresv+0x28>
     35c:	21 97       	sbiw	r28, 0x01	; 1
	{
		if(++counter > 600) return (-999);
     35e:	20 97       	sbiw	r28, 0x00	; 0
     360:	09 f4       	brne	.+2      	; 0x364 <_Z20altimeter_get_metresv+0x1c>
     362:	4b c0       	rjmp	.+150    	; 0x3fa <_Z20altimeter_get_metresv+0xb2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     364:	8f e9       	ldi	r24, 0x9F	; 159
     366:	9f e0       	ldi	r25, 0x0F	; 15
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <_Z20altimeter_get_metresv+0x20>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <_Z20altimeter_get_metresv+0x26>
     36e:	00 00       	nop
	
	altimeter_toggle_oneShot();
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	c4 df       	rcall	.-120    	; 0x2fc <_Z8IIC_Readh>
     374:	81 ff       	sbrs	r24, 1
     376:	f2 cf       	rjmp	.-28     	; 0x35c <_Z20altimeter_get_metresv+0x14>
		if(++counter > 600) return (-999);
		_delay_ms(1);
	}
	//_delay_ms(100);
	
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     378:	80 ec       	ldi	r24, 0xC0	; 192
     37a:	6d df       	rcall	.-294    	; 0x256 <i2c_start_wait>
	i2c_write(OUT_P_MSB);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	7d df       	rcall	.-262    	; 0x27a <i2c_write>
	i2c_rep_start(MPL3115a2+I2C_READ);
     380:	81 ec       	ldi	r24, 0xC1	; 193
     382:	5f df       	rcall	.-322    	; 0x242 <i2c_rep_start>
	
	int8_t msbA,csbA,lsbA = 0x00; 
	
	msbA = i2c_readAck();
     384:	98 df       	rcall	.-208    	; 0x2b6 <i2c_readAck>
     386:	f8 2e       	mov	r15, r24
	csbA = i2c_readAck();
     388:	96 df       	rcall	.-212    	; 0x2b6 <i2c_readAck>
     38a:	d8 2f       	mov	r29, r24
	lsbA = i2c_readNak();	
     38c:	92 df       	rcall	.-220    	; 0x2b2 <i2c_readNak>
     38e:	c8 2f       	mov	r28, r24
	i2c_stop();
     390:	6c df       	rcall	.-296    	; 0x26a <i2c_stop>
	
	altimeter_toggle_oneShot();
     392:	cd df       	rcall	.-102    	; 0x32e <_Z24altimeter_toggle_oneShotv>
	
	float tempcsb = (lsbA>>4)/16.0;
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     394:	4f 2d       	mov	r20, r15
     396:	55 27       	eor	r21, r21
     398:	47 fd       	sbrc	r20, 7
     39a:	50 95       	com	r21
     39c:	74 2f       	mov	r23, r20
     39e:	66 27       	eor	r22, r22
     3a0:	2d 2f       	mov	r18, r29
     3a2:	33 27       	eor	r19, r19
     3a4:	27 fd       	sbrc	r18, 7
     3a6:	30 95       	com	r19
     3a8:	62 2b       	or	r22, r18
     3aa:	73 2b       	or	r23, r19
     3ac:	88 27       	eor	r24, r24
     3ae:	77 fd       	sbrc	r23, 7
     3b0:	80 95       	com	r24
     3b2:	98 2f       	mov	r25, r24
     3b4:	36 d5       	rcall	.+2668   	; 0xe22 <__floatsisf>
     3b6:	6b 01       	movw	r12, r22
     3b8:	7c 01       	movw	r14, r24
	lsbA = i2c_readNak();	
	i2c_stop();
	
	altimeter_toggle_oneShot();
	
	float tempcsb = (lsbA>>4)/16.0;
     3ba:	6c 2f       	mov	r22, r28
     3bc:	77 27       	eor	r23, r23
     3be:	67 fd       	sbrc	r22, 7
     3c0:	70 95       	com	r23
     3c2:	75 95       	asr	r23
     3c4:	67 95       	ror	r22
     3c6:	75 95       	asr	r23
     3c8:	67 95       	ror	r22
     3ca:	75 95       	asr	r23
     3cc:	67 95       	ror	r22
     3ce:	75 95       	asr	r23
     3d0:	67 95       	ror	r22
     3d2:	88 27       	eor	r24, r24
     3d4:	77 fd       	sbrc	r23, 7
     3d6:	80 95       	com	r24
     3d8:	98 2f       	mov	r25, r24
     3da:	23 d5       	rcall	.+2630   	; 0xe22 <__floatsisf>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e8       	ldi	r20, 0x80	; 128
     3e2:	5d e3       	ldi	r21, 0x3D	; 61
     3e4:	ce d5       	rcall	.+2972   	; 0xf82 <__mulsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	47 d4       	rcall	.+2190   	; 0xc7e <__addsf3>
	
	return altitude;
     3f0:	56 2f       	mov	r21, r22
     3f2:	47 2f       	mov	r20, r23
     3f4:	38 2f       	mov	r19, r24
     3f6:	29 2f       	mov	r18, r25
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <_Z20altimeter_get_metresv+0xba>
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
	{
		if(++counter > 600) return (-999);
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	40 ec       	ldi	r20, 0xC0	; 192
     3fe:	39 e7       	ldi	r19, 0x79	; 121
     400:	24 ec       	ldi	r18, 0xC4	; 196
	float tempcsb = (lsbA>>4)/16.0;
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
	
	return altitude;
}
     402:	65 2f       	mov	r22, r21
     404:	74 2f       	mov	r23, r20
     406:	83 2f       	mov	r24, r19
     408:	92 2f       	mov	r25, r18
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	08 95       	ret

00000418 <_Z22altimeter_start_heightv>:
	
	return success;	
}

float altimeter_start_height()
{
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
	float start_height = 0;
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	7d d0       	rcall	.+250    	; 0x524 <_Z13debug_printlnPKc>
}

float altimeter_start_height()
{
	float start_height = 0;
	int start_height_samples = 0;
     42a:	c0 e0       	ldi	r28, 0x00	; 0
     42c:	d0 e0       	ldi	r29, 0x00	; 0
	return success;	
}

float altimeter_start_height()
{
	float start_height = 0;
     42e:	c1 2c       	mov	r12, r1
     430:	d1 2c       	mov	r13, r1
     432:	76 01       	movw	r14, r12
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
	//sample the current height for 1 second
	while(millis()<3000)
     434:	09 c0       	rjmp	.+18     	; 0x448 <_Z22altimeter_start_heightv+0x30>
	{
		start_height += altimeter_get_metres();
     436:	88 df       	rcall	.-240    	; 0x348 <_Z20altimeter_get_metresv>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	c7 01       	movw	r24, r14
     43e:	b6 01       	movw	r22, r12
     440:	1e d4       	rcall	.+2108   	; 0xc7e <__addsf3>
     442:	6b 01       	movw	r12, r22
     444:	7c 01       	movw	r14, r24
		start_height_samples += 1;
     446:	21 96       	adiw	r28, 0x01	; 1
	float start_height = 0;
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
	//sample the current height for 1 second
	while(millis()<3000)
     448:	f9 d2       	rcall	.+1522   	; 0xa3c <_Z6millisv>
     44a:	68 3b       	cpi	r22, 0xB8	; 184
     44c:	7b 40       	sbci	r23, 0x0B	; 11
     44e:	81 05       	cpc	r24, r1
     450:	91 05       	cpc	r25, r1
     452:	8c f3       	brlt	.-30     	; 0x436 <_Z22altimeter_start_heightv+0x1e>
		start_height += altimeter_get_metres();
		start_height_samples += 1;
	}
	
	//average the height
	start_height = start_height / start_height_samples;
     454:	be 01       	movw	r22, r28
     456:	88 27       	eor	r24, r24
     458:	77 fd       	sbrc	r23, 7
     45a:	80 95       	com	r24
     45c:	98 2f       	mov	r25, r24
     45e:	e1 d4       	rcall	.+2498   	; 0xe22 <__floatsisf>
     460:	9b 01       	movw	r18, r22
     462:	ac 01       	movw	r20, r24
     464:	c7 01       	movw	r24, r14
     466:	b6 01       	movw	r22, r12
     468:	72 d4       	rcall	.+2276   	; 0xd4e <__divsf3>
     46a:	6b 01       	movw	r12, r22
     46c:	7c 01       	movw	r14, r24
	debug_print("Starting height initialised to: ");
     46e:	87 e3       	ldi	r24, 0x37	; 55
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	53 d0       	rcall	.+166    	; 0x51a <_Z11debug_printPKc>
	debug_printf(start_height);
     474:	c7 01       	movw	r24, r14
     476:	b6 01       	movw	r22, r12
     478:	5f d0       	rcall	.+190    	; 0x538 <_Z12debug_printff>
	debug_println(" m");
     47a:	88 e5       	ldi	r24, 0x58	; 88
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	52 d0       	rcall	.+164    	; 0x524 <_Z13debug_printlnPKc>
	
	return start_height;
}
     480:	c7 01       	movw	r24, r14
     482:	b6 01       	movw	r22, r12
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	08 95       	ret

00000492 <_Z16setModeAltimeterv>:
}

void setModeAltimeter()
{
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     492:	86 e2       	ldi	r24, 0x26	; 38
     494:	33 df       	rcall	.-410    	; 0x2fc <_Z8IIC_Readh>
	
	tempSetting |= (1<<7);	//set ALT bit
     496:	68 2f       	mov	r22, r24
     498:	60 68       	ori	r22, 0x80	; 128
	
	IIC_Write(CTRL_REG1,tempSetting);
     49a:	86 e2       	ldi	r24, 0x26	; 38
     49c:	3a cf       	rjmp	.-396    	; 0x312 <_Z9IIC_Writehh>
     49e:	08 95       	ret

000004a0 <_Z17setOversampleRateh>:
}

void setOversampleRate(uint8_t sampleRate)
{
     4a0:	cf 93       	push	r28
     4a2:	c8 2f       	mov	r28, r24
     4a4:	88 30       	cpi	r24, 0x08	; 8
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <_Z17setOversampleRateh+0xa>
     4a8:	c7 e0       	ldi	r28, 0x07	; 7
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     4aa:	86 e2       	ldi	r24, 0x26	; 38
     4ac:	27 df       	rcall	.-434    	; 0x2fc <_Z8IIC_Readh>
	
	tempSetting &= 0b11000111; //Clear out old OS bits
     4ae:	87 7c       	andi	r24, 0xC7	; 199
}

void setOversampleRate(uint8_t sampleRate)
{
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
     4b0:	cc 0f       	add	r28, r28
     4b2:	cc 0f       	add	r28, r28
     4b4:	cc 0f       	add	r28, r28
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
	
	tempSetting &= 0b11000111; //Clear out old OS bits
	tempSetting |= sampleRate; //Mask in new OS bits
     4b6:	68 2f       	mov	r22, r24
     4b8:	6c 2b       	or	r22, r28
	
	IIC_Write(CTRL_REG1,tempSetting);
     4ba:	86 e2       	ldi	r24, 0x26	; 38
     4bc:	2a df       	rcall	.-428    	; 0x312 <_Z9IIC_Writehh>
	
}
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <_Z14altimeter_initv>:
float temperature = 0.;
float start_height = 0;

bool altimeter_init()
{
	i2c_init();
     4c2:	b6 de       	rcall	.-660    	; 0x230 <i2c_init>
	bool success = true;
	
	if(IIC_Read(WHO_AM_I) == 196)
     4c4:	8c e0       	ldi	r24, 0x0C	; 12
     4c6:	1a df       	rcall	.-460    	; 0x2fc <_Z8IIC_Readh>
     4c8:	84 3c       	cpi	r24, 0xC4	; 196
     4ca:	c1 f4       	brne	.+48     	; 0x4fc <_Z14altimeter_initv+0x3a>
	{
		debug_println("Altimeter connected correctly!");
     4cc:	8b e5       	ldi	r24, 0x5B	; 91
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	29 d0       	rcall	.+82     	; 0x524 <_Z13debug_printlnPKc>
		success = false;
	}
	
	if(success)
	{
		setModeAltimeter();
     4d2:	df df       	rcall	.-66     	; 0x492 <_Z16setModeAltimeterv>
		setOversampleRate(7);
     4d4:	87 e0       	ldi	r24, 0x07	; 7
     4d6:	e4 df       	rcall	.-56     	; 0x4a0 <_Z17setOversampleRateh>
		enableEventFlags();
     4d8:	0a df       	rcall	.-492    	; 0x2ee <_Z16enableEventFlagsv>
	
		
		start_height = altimeter_start_height();
     4da:	9e df       	rcall	.-196    	; 0x418 <_Z22altimeter_start_heightv>
     4dc:	60 93 08 03 	sts	0x0308, r22
     4e0:	70 93 09 03 	sts	0x0309, r23
     4e4:	80 93 0a 03 	sts	0x030A, r24
     4e8:	90 93 0b 03 	sts	0x030B, r25
		
		if(start_height == -999)
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 ec       	ldi	r19, 0xC0	; 192
     4f0:	49 e7       	ldi	r20, 0x79	; 121
     4f2:	54 ec       	ldi	r21, 0xC4	; 196
     4f4:	28 d4       	rcall	.+2128   	; 0xd46 <__cmpsf2>
     4f6:	88 23       	and	r24, r24
     4f8:	59 f0       	breq	.+22     	; 0x510 <_Z14altimeter_initv+0x4e>
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <_Z14altimeter_initv+0x44>
	{
		debug_println("Altimeter connected correctly!");
	}
	else
	{
		debug_println("Altimeter not connected!");
     4fc:	8a e7       	ldi	r24, 0x7A	; 122
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	11 d0       	rcall	.+34     	; 0x524 <_Z13debug_printlnPKc>
		success = false;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
		
		if(start_height == -999)
			success = false;
			
		if(success)
			debug_println("Altimeter initialised correctly!");
     506:	83 e9       	ldi	r24, 0x93	; 147
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	0c d0       	rcall	.+24     	; 0x524 <_Z13debug_printlnPKc>
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	08 95       	ret
		else
			debug_println("Altimeter failed to initialise!");
     510:	84 eb       	ldi	r24, 0xB4	; 180
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	07 d0       	rcall	.+14     	; 0x524 <_Z13debug_printlnPKc>
     516:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return success;	
}
     518:	08 95       	ret

0000051a <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     51a:	bc 01       	movw	r22, r24
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	4c c3       	rjmp	.+1688   	; 0xbba <_Z15USART_putstringiPKc>
     522:	08 95       	ret

00000524 <_Z13debug_printlnPKc>:
     524:	bc 01       	movw	r22, r24
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	47 d3       	rcall	.+1678   	; 0xbba <_Z15USART_putstringiPKc>
     52c:	64 ed       	ldi	r22, 0xD4	; 212
     52e:	72 e0       	ldi	r23, 0x02	; 2
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	42 c3       	rjmp	.+1668   	; 0xbba <_Z15USART_putstringiPKc>
     536:	08 95       	ret

00000538 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	64 97       	sbiw	r28, 0x14	; 20
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     550:	8e 01       	movw	r16, r28
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
     556:	25 e0       	ldi	r18, 0x05	; 5
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	98 d5       	rcall	.+2864   	; 0x108c <dtostrf>
		debug_print(string);
     55c:	c8 01       	movw	r24, r16
     55e:	dd df       	rcall	.-70     	; 0x51a <_Z11debug_printPKc>
	}
}
     560:	64 96       	adiw	r28, 0x14	; 20
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <_Z10debug_beepv>:


//beep for 50ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep()
{
	sbi(PORTB,7);
     576:	2f 9a       	sbi	0x05, 7	; 5
     578:	2f ef       	ldi	r18, 0xFF	; 255
     57a:	80 e7       	ldi	r24, 0x70	; 112
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	80 40       	sbci	r24, 0x00	; 0
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <_Z10debug_beepv+0x8>
     586:	00 c0       	rjmp	.+0      	; 0x588 <_Z10debug_beepv+0x12>
     588:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     58a:	2f 98       	cbi	0x05, 7	; 5
     58c:	08 95       	ret

0000058e <_Z15debug_beep_longv>:
}

//beep for 250ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep_long()
{
	sbi(PORTB,7);
     58e:	2f 9a       	sbi	0x05, 7	; 5
     590:	2f ef       	ldi	r18, 0xFF	; 255
     592:	84 e3       	ldi	r24, 0x34	; 52
     594:	9c e0       	ldi	r25, 0x0C	; 12
     596:	21 50       	subi	r18, 0x01	; 1
     598:	80 40       	sbci	r24, 0x00	; 0
     59a:	90 40       	sbci	r25, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <_Z15debug_beep_longv+0x8>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <_Z15debug_beep_longv+0x12>
     5a0:	00 00       	nop
	_delay_ms(250);
	cbi(PORTB,7);
     5a2:	2f 98       	cbi	0x05, 7	; 5
     5a4:	08 95       	ret

000005a6 <_Z24quad_output_set_throttlei>:
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
     5a6:	90 93 a9 00 	sts	0x00A9, r25
     5aa:	80 93 a8 00 	sts	0x00A8, r24
	throttle_out = throttle;
     5ae:	bc 01       	movw	r22, r24
     5b0:	88 27       	eor	r24, r24
     5b2:	77 fd       	sbrc	r23, 7
     5b4:	80 95       	com	r24
     5b6:	98 2f       	mov	r25, r24
     5b8:	34 d4       	rcall	.+2152   	; 0xe22 <__floatsisf>
     5ba:	60 93 0c 03 	sts	0x030C, r22
     5be:	70 93 0d 03 	sts	0x030D, r23
     5c2:	80 93 0e 03 	sts	0x030E, r24
     5c6:	90 93 0f 03 	sts	0x030F, r25
     5ca:	08 95       	ret

000005cc <_Z16quad_output_initv>:
#include "quad_output.h"

float throttle_out;

void quad_output_init()
{
     5cc:	8f 92       	push	r8
     5ce:	9f 92       	push	r9
     5d0:	af 92       	push	r10
     5d2:	bf 92       	push	r11
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
	DDRH = 0xFF;  //set OC4x to output
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
     5ea:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
     5ec:	8f e3       	ldi	r24, 0x3F	; 63
     5ee:	9c e9       	ldi	r25, 0x9C	; 156
     5f0:	90 93 a7 00 	sts	0x00A7, r25
     5f4:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
     5f8:	38 ea       	ldi	r19, 0xA8	; 168
     5fa:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
     5fe:	22 e1       	ldi	r18, 0x12	; 18
     600:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
     604:	90 93 97 00 	sts	0x0097, r25
     608:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
     60c:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
     610:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     614:	c6 eb       	ldi	r28, 0xB6	; 182
     616:	d3 e0       	ldi	r29, 0x03	; 3
     618:	d0 93 a9 00 	sts	0x00A9, r29
     61c:	c0 93 a8 00 	sts	0x00A8, r28
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     620:	0f 2e       	mov	r0, r31
     622:	fa ea       	ldi	r31, 0xAA	; 170
     624:	8f 2e       	mov	r8, r31
     626:	91 2c       	mov	r9, r1
     628:	f0 2d       	mov	r31, r0
     62a:	f4 01       	movw	r30, r8
     62c:	d1 83       	std	Z+1, r29	; 0x01
     62e:	c0 83       	st	Z, r28
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     630:	0f 2e       	mov	r0, r31
     632:	fc ea       	ldi	r31, 0xAC	; 172
     634:	af 2e       	mov	r10, r31
     636:	b1 2c       	mov	r11, r1
     638:	f0 2d       	mov	r31, r0
     63a:	f5 01       	movw	r30, r10
     63c:	d1 83       	std	Z+1, r29	; 0x01
     63e:	c0 83       	st	Z, r28
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     640:	0f 2e       	mov	r0, r31
     642:	f8 e9       	ldi	r31, 0x98	; 152
     644:	cf 2e       	mov	r12, r31
     646:	d1 2c       	mov	r13, r1
     648:	f0 2d       	mov	r31, r0
     64a:	f6 01       	movw	r30, r12
     64c:	d1 83       	std	Z+1, r29	; 0x01
     64e:	c0 83       	st	Z, r28
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     650:	0f 2e       	mov	r0, r31
     652:	fa e9       	ldi	r31, 0x9A	; 154
     654:	ef 2e       	mov	r14, r31
     656:	f1 2c       	mov	r15, r1
     658:	f0 2d       	mov	r31, r0
     65a:	f7 01       	movw	r30, r14
     65c:	d1 83       	std	Z+1, r29	; 0x01
     65e:	c0 83       	st	Z, r28
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     660:	0c e9       	ldi	r16, 0x9C	; 156
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	f8 01       	movw	r30, r16
     666:	d1 83       	std	Z+1, r29	; 0x01
     668:	c0 83       	st	Z, r28
	
	quad_output_set_throttle(DEFAULT_PWM_OUTPUT);
     66a:	86 eb       	ldi	r24, 0xB6	; 182
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	9b df       	rcall	.-202    	; 0x5a6 <_Z24quad_output_set_throttlei>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
     670:	f4 01       	movw	r30, r8
     672:	d1 83       	std	Z+1, r29	; 0x01
     674:	c0 83       	st	Z, r28
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
     676:	f5 01       	movw	r30, r10
     678:	d1 83       	std	Z+1, r29	; 0x01
     67a:	c0 83       	st	Z, r28
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
     67c:	f6 01       	movw	r30, r12
     67e:	d1 83       	std	Z+1, r29	; 0x01
     680:	c0 83       	st	Z, r28
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
     682:	f7 01       	movw	r30, r14
     684:	d1 83       	std	Z+1, r29	; 0x01
     686:	c0 83       	st	Z, r28
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
     688:	f8 01       	movw	r30, r16
     68a:	d1 83       	std	Z+1, r29	; 0x01
     68c:	c0 83       	st	Z, r28
	quad_output_set_aileron(DEFAULT_PWM_OUTPUT);
	quad_output_set_elevator(DEFAULT_PWM_OUTPUT);
	quad_output_set_rudder(DEFAULT_PWM_OUTPUT);
	quad_output_set_gear(DEFAULT_PWM_OUTPUT);
	quad_output_set_aux(DEFAULT_PWM_OUTPUT);
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	ff 90       	pop	r15
     698:	ef 90       	pop	r14
     69a:	df 90       	pop	r13
     69c:	cf 90       	pop	r12
     69e:	bf 90       	pop	r11
     6a0:	af 90       	pop	r10
     6a2:	9f 90       	pop	r9
     6a4:	8f 90       	pop	r8
     6a6:	08 95       	ret

000006a8 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	0b b6       	in	r0, 0x3b	; 59
     6b4:	0f 92       	push	r0
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	cf 93       	push	r28
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     6d0:	83 b1       	in	r24, 0x03	; 3
     6d2:	c0 91 1d 03 	lds	r28, 0x031D
     6d6:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     6d8:	83 b1       	in	r24, 0x03	; 3
     6da:	80 93 1d 03 	sts	0x031D, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     6de:	c0 ff       	sbrs	r28, 0
     6e0:	1c c0       	rjmp	.+56     	; 0x71a <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     6e2:	18 9b       	sbis	0x03, 0	; 3
     6e4:	0a c0       	rjmp	.+20     	; 0x6fa <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     6e6:	b7 d1       	rcall	.+878    	; 0xa56 <_Z6microsv>
     6e8:	60 93 3e 03 	sts	0x033E, r22
     6ec:	70 93 3f 03 	sts	0x033F, r23
     6f0:	80 93 40 03 	sts	0x0340, r24
     6f4:	90 93 41 03 	sts	0x0341, r25
     6f8:	10 c0       	rjmp	.+32     	; 0x71a <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     6fa:	ad d1       	rcall	.+858    	; 0xa56 <_Z6microsv>
     6fc:	20 91 3e 03 	lds	r18, 0x033E
     700:	30 91 3f 03 	lds	r19, 0x033F
     704:	62 1b       	sub	r22, r18
     706:	73 0b       	sbc	r23, r19
     708:	70 93 4e 03 	sts	0x034E, r23
     70c:	60 93 4d 03 	sts	0x034D, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     710:	80 91 42 03 	lds	r24, 0x0342
     714:	81 60       	ori	r24, 0x01	; 1
     716:	80 93 42 03 	sts	0x0342, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     71a:	c1 ff       	sbrs	r28, 1
     71c:	1c c0       	rjmp	.+56     	; 0x756 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     71e:	19 9b       	sbis	0x03, 1	; 3
     720:	0a c0       	rjmp	.+20     	; 0x736 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     722:	99 d1       	rcall	.+818    	; 0xa56 <_Z6microsv>
     724:	60 93 3a 03 	sts	0x033A, r22
     728:	70 93 3b 03 	sts	0x033B, r23
     72c:	80 93 3c 03 	sts	0x033C, r24
     730:	90 93 3d 03 	sts	0x033D, r25
     734:	10 c0       	rjmp	.+32     	; 0x756 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     736:	8f d1       	rcall	.+798    	; 0xa56 <_Z6microsv>
     738:	20 91 3a 03 	lds	r18, 0x033A
     73c:	30 91 3b 03 	lds	r19, 0x033B
     740:	62 1b       	sub	r22, r18
     742:	73 0b       	sbc	r23, r19
     744:	70 93 4c 03 	sts	0x034C, r23
     748:	60 93 4b 03 	sts	0x034B, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     74c:	80 91 42 03 	lds	r24, 0x0342
     750:	82 60       	ori	r24, 0x02	; 2
     752:	80 93 42 03 	sts	0x0342, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     756:	c2 ff       	sbrs	r28, 2
     758:	1c c0       	rjmp	.+56     	; 0x792 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     75a:	1a 9b       	sbis	0x03, 2	; 3
     75c:	0a c0       	rjmp	.+20     	; 0x772 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     75e:	7b d1       	rcall	.+758    	; 0xa56 <_Z6microsv>
     760:	60 93 36 03 	sts	0x0336, r22
     764:	70 93 37 03 	sts	0x0337, r23
     768:	80 93 38 03 	sts	0x0338, r24
     76c:	90 93 39 03 	sts	0x0339, r25
     770:	10 c0       	rjmp	.+32     	; 0x792 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     772:	71 d1       	rcall	.+738    	; 0xa56 <_Z6microsv>
     774:	20 91 36 03 	lds	r18, 0x0336
     778:	30 91 37 03 	lds	r19, 0x0337
     77c:	62 1b       	sub	r22, r18
     77e:	73 0b       	sbc	r23, r19
     780:	70 93 4a 03 	sts	0x034A, r23
     784:	60 93 49 03 	sts	0x0349, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     788:	80 91 42 03 	lds	r24, 0x0342
     78c:	84 60       	ori	r24, 0x04	; 4
     78e:	80 93 42 03 	sts	0x0342, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     792:	c3 ff       	sbrs	r28, 3
     794:	1c c0       	rjmp	.+56     	; 0x7ce <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     796:	1b 9b       	sbis	0x03, 3	; 3
     798:	0a c0       	rjmp	.+20     	; 0x7ae <__vector_9+0x106>
		{
			ulRudderStart = micros();
     79a:	5d d1       	rcall	.+698    	; 0xa56 <_Z6microsv>
     79c:	60 93 32 03 	sts	0x0332, r22
     7a0:	70 93 33 03 	sts	0x0333, r23
     7a4:	80 93 34 03 	sts	0x0334, r24
     7a8:	90 93 35 03 	sts	0x0335, r25
     7ac:	10 c0       	rjmp	.+32     	; 0x7ce <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     7ae:	53 d1       	rcall	.+678    	; 0xa56 <_Z6microsv>
     7b0:	20 91 32 03 	lds	r18, 0x0332
     7b4:	30 91 33 03 	lds	r19, 0x0333
     7b8:	62 1b       	sub	r22, r18
     7ba:	73 0b       	sbc	r23, r19
     7bc:	70 93 48 03 	sts	0x0348, r23
     7c0:	60 93 47 03 	sts	0x0347, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     7c4:	80 91 42 03 	lds	r24, 0x0342
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	80 93 42 03 	sts	0x0342, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     7ce:	c4 ff       	sbrs	r28, 4
     7d0:	1c c0       	rjmp	.+56     	; 0x80a <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     7d2:	1c 9b       	sbis	0x03, 4	; 3
     7d4:	0a c0       	rjmp	.+20     	; 0x7ea <__vector_9+0x142>
		{
			ulGearStart = micros();
     7d6:	3f d1       	rcall	.+638    	; 0xa56 <_Z6microsv>
     7d8:	60 93 2e 03 	sts	0x032E, r22
     7dc:	70 93 2f 03 	sts	0x032F, r23
     7e0:	80 93 30 03 	sts	0x0330, r24
     7e4:	90 93 31 03 	sts	0x0331, r25
     7e8:	10 c0       	rjmp	.+32     	; 0x80a <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     7ea:	35 d1       	rcall	.+618    	; 0xa56 <_Z6microsv>
     7ec:	20 91 2e 03 	lds	r18, 0x032E
     7f0:	30 91 2f 03 	lds	r19, 0x032F
     7f4:	62 1b       	sub	r22, r18
     7f6:	73 0b       	sbc	r23, r19
     7f8:	70 93 46 03 	sts	0x0346, r23
     7fc:	60 93 45 03 	sts	0x0345, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     800:	80 91 42 03 	lds	r24, 0x0342
     804:	80 61       	ori	r24, 0x10	; 16
     806:	80 93 42 03 	sts	0x0342, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     80a:	c5 ff       	sbrs	r28, 5
     80c:	1c c0       	rjmp	.+56     	; 0x846 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     80e:	1d 9b       	sbis	0x03, 5	; 3
     810:	0a c0       	rjmp	.+20     	; 0x826 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     812:	21 d1       	rcall	.+578    	; 0xa56 <_Z6microsv>
     814:	60 93 2a 03 	sts	0x032A, r22
     818:	70 93 2b 03 	sts	0x032B, r23
     81c:	80 93 2c 03 	sts	0x032C, r24
     820:	90 93 2d 03 	sts	0x032D, r25
     824:	10 c0       	rjmp	.+32     	; 0x846 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     826:	17 d1       	rcall	.+558    	; 0xa56 <_Z6microsv>
     828:	20 91 2a 03 	lds	r18, 0x032A
     82c:	30 91 2b 03 	lds	r19, 0x032B
     830:	62 1b       	sub	r22, r18
     832:	73 0b       	sbc	r23, r19
     834:	70 93 44 03 	sts	0x0344, r23
     838:	60 93 43 03 	sts	0x0343, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     83c:	80 91 42 03 	lds	r24, 0x0342
     840:	80 62       	ori	r24, 0x20	; 32
     842:	80 93 42 03 	sts	0x0342, r24
		}
	}
}
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	cf 91       	pop	r28
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0b be       	out	0x3b, r0	; 59
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
     86e:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
     870:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
     872:	eb e6       	ldi	r30, 0x6B	; 107
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	81 60       	ori	r24, 0x01	; 1
     87a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
     87c:	80 81       	ld	r24, Z
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
     882:	80 81       	ld	r24, Z
     884:	84 60       	ori	r24, 0x04	; 4
     886:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
     888:	80 81       	ld	r24, Z
     88a:	88 60       	ori	r24, 0x08	; 8
     88c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
     88e:	80 81       	ld	r24, Z
     890:	80 61       	ori	r24, 0x10	; 16
     892:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
     894:	80 81       	ld	r24, Z
     896:	80 62       	ori	r24, 0x20	; 32
     898:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
     89a:	e8 e6       	ldi	r30, 0x68	; 104
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	81 60       	ori	r24, 0x01	; 1
     8a2:	80 83       	st	Z, r24
	sei(); //enable interrupts
     8a4:	78 94       	sei
     8a6:	08 95       	ret

000008a8 <_Z9rx_updatev>:
	static uint16_t unAuxIn;
	  
	// local copy of update flags
	static uint8_t rxUpdateFlags;
	  
	if(rxUpdateFlagsShared)
     8a8:	80 91 42 03 	lds	r24, 0x0342
     8ac:	88 23       	and	r24, r24
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <_Z9rx_updatev+0xa>
     8b0:	44 c0       	rjmp	.+136    	; 0x93a <_Z9rx_updatev+0x92>
	{
		cli();	//disable all interrupts. Can't have something change now!
     8b2:	f8 94       	cli
		
		rxUpdateFlags = rxUpdateFlagsShared;	//retrieve data on which channel changed from the volatile variable.
     8b4:	20 91 42 03 	lds	r18, 0x0342
     8b8:	20 93 1c 03 	sts	0x031C, r18
		
		if(rxUpdateFlags & THROTTLE_FLAG)
     8bc:	20 ff       	sbrs	r18, 0
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <_Z9rx_updatev+0x28>
		{
			unThrottleIn = unThrottleInShared;
     8c0:	80 91 4d 03 	lds	r24, 0x034D
     8c4:	90 91 4e 03 	lds	r25, 0x034E
     8c8:	90 93 1b 03 	sts	0x031B, r25
     8cc:	80 93 1a 03 	sts	0x031A, r24
		}
		
		if(rxUpdateFlags & AILERON_FLAG)
     8d0:	21 ff       	sbrs	r18, 1
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <_Z9rx_updatev+0x3c>
		{
			unAileronIn = unAileronInShared;
     8d4:	80 91 4b 03 	lds	r24, 0x034B
     8d8:	90 91 4c 03 	lds	r25, 0x034C
     8dc:	90 93 19 03 	sts	0x0319, r25
     8e0:	80 93 18 03 	sts	0x0318, r24
		}
		
		if(rxUpdateFlags & ELEVATOR_FLAG)
     8e4:	22 ff       	sbrs	r18, 2
     8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <_Z9rx_updatev+0x50>
		{
			unElevatorIn = unElevatorInShared;
     8e8:	80 91 49 03 	lds	r24, 0x0349
     8ec:	90 91 4a 03 	lds	r25, 0x034A
     8f0:	90 93 17 03 	sts	0x0317, r25
     8f4:	80 93 16 03 	sts	0x0316, r24
		}
		
		if(rxUpdateFlags & RUDDER_FLAG)
     8f8:	23 ff       	sbrs	r18, 3
     8fa:	08 c0       	rjmp	.+16     	; 0x90c <_Z9rx_updatev+0x64>
		{
			unRudderIn = unRudderInShared;
     8fc:	80 91 47 03 	lds	r24, 0x0347
     900:	90 91 48 03 	lds	r25, 0x0348
     904:	90 93 15 03 	sts	0x0315, r25
     908:	80 93 14 03 	sts	0x0314, r24
		}
		
		if(rxUpdateFlags & GEAR_FLAG)
     90c:	24 ff       	sbrs	r18, 4
     90e:	08 c0       	rjmp	.+16     	; 0x920 <_Z9rx_updatev+0x78>
		{
			unGearIn = unGearInShared;
     910:	80 91 45 03 	lds	r24, 0x0345
     914:	90 91 46 03 	lds	r25, 0x0346
     918:	90 93 13 03 	sts	0x0313, r25
     91c:	80 93 12 03 	sts	0x0312, r24
		}
		
		if(rxUpdateFlags & AUX_FLAG)
     920:	25 ff       	sbrs	r18, 5
     922:	08 c0       	rjmp	.+16     	; 0x934 <_Z9rx_updatev+0x8c>
		{
			unAuxIn = unAuxInShared;
     924:	80 91 43 03 	lds	r24, 0x0343
     928:	90 91 44 03 	lds	r25, 0x0344
     92c:	90 93 11 03 	sts	0x0311, r25
     930:	80 93 10 03 	sts	0x0310, r24
		}
		
		rxUpdateFlagsShared = 0;
     934:	10 92 42 03 	sts	0x0342, r1
		
		sei();	//all needed data is now in local variables. We can safely re-enable interrupts!
     938:	78 94       	sei
		
		}
		
		if(rxUpdateFlags)
     93a:	80 91 1c 03 	lds	r24, 0x031C
     93e:	88 23       	and	r24, r24
     940:	91 f1       	breq	.+100    	; 0x9a6 <_Z9rx_updatev+0xfe>
		{
			rxInputThrottle = unThrottleIn;
     942:	80 91 1a 03 	lds	r24, 0x031A
     946:	90 91 1b 03 	lds	r25, 0x031B
     94a:	90 93 29 03 	sts	0x0329, r25
     94e:	80 93 28 03 	sts	0x0328, r24
			rxInputAileron = unAileronIn;
     952:	80 91 18 03 	lds	r24, 0x0318
     956:	90 91 19 03 	lds	r25, 0x0319
     95a:	90 93 27 03 	sts	0x0327, r25
     95e:	80 93 26 03 	sts	0x0326, r24
			rxInputElevator = unElevatorIn;
     962:	80 91 16 03 	lds	r24, 0x0316
     966:	90 91 17 03 	lds	r25, 0x0317
     96a:	90 93 25 03 	sts	0x0325, r25
     96e:	80 93 24 03 	sts	0x0324, r24
			rxInputRudder = unRudderIn;
     972:	80 91 14 03 	lds	r24, 0x0314
     976:	90 91 15 03 	lds	r25, 0x0315
     97a:	90 93 23 03 	sts	0x0323, r25
     97e:	80 93 22 03 	sts	0x0322, r24
			rxInputGear = unGearIn;
     982:	80 91 12 03 	lds	r24, 0x0312
     986:	90 91 13 03 	lds	r25, 0x0313
     98a:	90 93 21 03 	sts	0x0321, r25
     98e:	80 93 20 03 	sts	0x0320, r24
			rxInputAux = unAuxIn;
     992:	80 91 10 03 	lds	r24, 0x0310
     996:	90 91 11 03 	lds	r25, 0x0311
     99a:	90 93 1f 03 	sts	0x031F, r25
     99e:	80 93 1e 03 	sts	0x031E, r24
				debug_print("\t");
				debug_printf(rx_get_aux());
				debug_print("\n\r");
			}
			
			rxUpdateFlags = 0;
     9a2:	10 92 1c 03 	sts	0x031C, r1
     9a6:	08 95       	ret

000009a8 <__vector_23>:
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	80 91 50 03 	lds	r24, 0x0350
     9c2:	90 91 51 03 	lds	r25, 0x0351
     9c6:	a0 91 52 03 	lds	r26, 0x0352
     9ca:	b0 91 53 03 	lds	r27, 0x0353
     9ce:	30 91 4f 03 	lds	r19, 0x034F
     9d2:	23 e0       	ldi	r18, 0x03	; 3
     9d4:	23 0f       	add	r18, r19
     9d6:	2d 37       	cpi	r18, 0x7D	; 125
     9d8:	20 f4       	brcc	.+8      	; 0x9e2 <__vector_23+0x3a>
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	a1 1d       	adc	r26, r1
     9de:	b1 1d       	adc	r27, r1
     9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__vector_23+0x44>
     9e2:	26 e8       	ldi	r18, 0x86	; 134
     9e4:	23 0f       	add	r18, r19
     9e6:	02 96       	adiw	r24, 0x02	; 2
     9e8:	a1 1d       	adc	r26, r1
     9ea:	b1 1d       	adc	r27, r1
     9ec:	20 93 4f 03 	sts	0x034F, r18
     9f0:	80 93 50 03 	sts	0x0350, r24
     9f4:	90 93 51 03 	sts	0x0351, r25
     9f8:	a0 93 52 03 	sts	0x0352, r26
     9fc:	b0 93 53 03 	sts	0x0353, r27
     a00:	80 91 54 03 	lds	r24, 0x0354
     a04:	90 91 55 03 	lds	r25, 0x0355
     a08:	a0 91 56 03 	lds	r26, 0x0356
     a0c:	b0 91 57 03 	lds	r27, 0x0357
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	a1 1d       	adc	r26, r1
     a14:	b1 1d       	adc	r27, r1
     a16:	80 93 54 03 	sts	0x0354, r24
     a1a:	90 93 55 03 	sts	0x0355, r25
     a1e:	a0 93 56 03 	sts	0x0356, r26
     a22:	b0 93 57 03 	sts	0x0357, r27
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <_Z6millisv>:
     a3c:	2f b7       	in	r18, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	60 91 50 03 	lds	r22, 0x0350
     a44:	70 91 51 03 	lds	r23, 0x0351
     a48:	80 91 52 03 	lds	r24, 0x0352
     a4c:	90 91 53 03 	lds	r25, 0x0353
     a50:	2f bf       	out	0x3f, r18	; 63
     a52:	78 94       	sei
     a54:	08 95       	ret

00000a56 <_Z6microsv>:
     a56:	3f b7       	in	r19, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	80 91 54 03 	lds	r24, 0x0354
     a5e:	90 91 55 03 	lds	r25, 0x0355
     a62:	a0 91 56 03 	lds	r26, 0x0356
     a66:	b0 91 57 03 	lds	r27, 0x0357
     a6a:	26 b5       	in	r18, 0x26	; 38
     a6c:	a8 9b       	sbis	0x15, 0	; 21
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <_Z6microsv+0x1e>
     a70:	2f 3f       	cpi	r18, 0xFF	; 255
     a72:	a9 f4       	brne	.+42     	; 0xa9e <_Z6microsv+0x48>
     a74:	3f bf       	out	0x3f, r19	; 63
     a76:	78 94       	sei
     a78:	ba 2f       	mov	r27, r26
     a7a:	a9 2f       	mov	r26, r25
     a7c:	98 2f       	mov	r25, r24
     a7e:	88 27       	eor	r24, r24
     a80:	82 0f       	add	r24, r18
     a82:	91 1d       	adc	r25, r1
     a84:	a1 1d       	adc	r26, r1
     a86:	b1 1d       	adc	r27, r1
     a88:	bc 01       	movw	r22, r24
     a8a:	cd 01       	movw	r24, r26
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	88 1f       	adc	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	66 0f       	add	r22, r22
     a96:	77 1f       	adc	r23, r23
     a98:	88 1f       	adc	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	08 95       	ret
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	e7 cf       	rjmp	.-50     	; 0xa74 <_Z6microsv+0x1e>

00000aa6 <_Z10initTimersv>:
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 6e 00 	sts	0x006E, r24
     aac:	16 bc       	out	0x26, r1	; 38
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	85 bd       	out	0x25, r24	; 37
     ab2:	08 95       	ret

00000ab4 <_Z10USART_initii>:
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	cb 01       	movw	r24, r22
     abc:	aa 27       	eor	r26, r26
     abe:	97 fd       	sbrc	r25, 7
     ac0:	a0 95       	com	r26
     ac2:	ba 2f       	mov	r27, r26
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	aa 1f       	adc	r26, r26
     aca:	bb 1f       	adc	r27, r27
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	aa 1f       	adc	r26, r26
     ad2:	bb 1f       	adc	r27, r27
     ad4:	9c 01       	movw	r18, r24
     ad6:	ad 01       	movw	r20, r26
     ad8:	22 0f       	add	r18, r18
     ada:	33 1f       	adc	r19, r19
     adc:	44 1f       	adc	r20, r20
     ade:	55 1f       	adc	r21, r21
     ae0:	22 0f       	add	r18, r18
     ae2:	33 1f       	adc	r19, r19
     ae4:	44 1f       	adc	r20, r20
     ae6:	55 1f       	adc	r21, r21
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	74 e2       	ldi	r23, 0x24	; 36
     aec:	84 ef       	ldi	r24, 0xF4	; 244
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	ab d2       	rcall	.+1366   	; 0x1048 <__udivmodsi4>
     af2:	21 50       	subi	r18, 0x01	; 1
     af4:	31 09       	sbc	r19, r1
     af6:	20 97       	sbiw	r28, 0x00	; 0
     af8:	59 f4       	brne	.+22     	; 0xb10 <_Z10USART_initii+0x5c>
     afa:	30 93 c5 00 	sts	0x00C5, r19
     afe:	20 93 c4 00 	sts	0x00C4, r18
     b02:	88 e1       	ldi	r24, 0x18	; 24
     b04:	80 93 c1 00 	sts	0x00C1, r24
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	80 93 c2 00 	sts	0x00C2, r24
     b0e:	28 c0       	rjmp	.+80     	; 0xb60 <_Z10USART_initii+0xac>
     b10:	c1 30       	cpi	r28, 0x01	; 1
     b12:	d1 05       	cpc	r29, r1
     b14:	59 f4       	brne	.+22     	; 0xb2c <_Z10USART_initii+0x78>
     b16:	30 93 cd 00 	sts	0x00CD, r19
     b1a:	20 93 cc 00 	sts	0x00CC, r18
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	80 93 c9 00 	sts	0x00C9, r24
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	80 93 ca 00 	sts	0x00CA, r24
     b2a:	1a c0       	rjmp	.+52     	; 0xb60 <_Z10USART_initii+0xac>
     b2c:	c2 30       	cpi	r28, 0x02	; 2
     b2e:	d1 05       	cpc	r29, r1
     b30:	59 f4       	brne	.+22     	; 0xb48 <_Z10USART_initii+0x94>
     b32:	30 93 d5 00 	sts	0x00D5, r19
     b36:	20 93 d4 00 	sts	0x00D4, r18
     b3a:	88 e1       	ldi	r24, 0x18	; 24
     b3c:	80 93 d1 00 	sts	0x00D1, r24
     b40:	86 e0       	ldi	r24, 0x06	; 6
     b42:	80 93 d2 00 	sts	0x00D2, r24
     b46:	0c c0       	rjmp	.+24     	; 0xb60 <_Z10USART_initii+0xac>
     b48:	23 97       	sbiw	r28, 0x03	; 3
     b4a:	51 f4       	brne	.+20     	; 0xb60 <_Z10USART_initii+0xac>
     b4c:	30 93 35 01 	sts	0x0135, r19
     b50:	20 93 34 01 	sts	0x0134, r18
     b54:	88 e1       	ldi	r24, 0x18	; 24
     b56:	80 93 31 01 	sts	0x0131, r24
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	80 93 32 01 	sts	0x0132, r24
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_Z10USART_sendih>:
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	41 f4       	brne	.+16     	; 0xb7a <_Z10USART_sendih+0x14>
     b6a:	e0 ec       	ldi	r30, 0xC0	; 192
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	85 ff       	sbrs	r24, 5
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <_Z10USART_sendih+0x8>
     b74:	60 93 c6 00 	sts	0x00C6, r22
     b78:	08 95       	ret
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	41 f4       	brne	.+16     	; 0xb90 <_Z10USART_sendih+0x2a>
     b80:	e8 ec       	ldi	r30, 0xC8	; 200
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	85 ff       	sbrs	r24, 5
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <_Z10USART_sendih+0x1e>
     b8a:	60 93 ce 00 	sts	0x00CE, r22
     b8e:	08 95       	ret
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	91 05       	cpc	r25, r1
     b94:	41 f4       	brne	.+16     	; 0xba6 <_Z10USART_sendih+0x40>
     b96:	e0 ed       	ldi	r30, 0xD0	; 208
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	85 ff       	sbrs	r24, 5
     b9e:	fd cf       	rjmp	.-6      	; 0xb9a <_Z10USART_sendih+0x34>
     ba0:	60 93 d6 00 	sts	0x00D6, r22
     ba4:	08 95       	ret
     ba6:	03 97       	sbiw	r24, 0x03	; 3
     ba8:	39 f4       	brne	.+14     	; 0xbb8 <_Z10USART_sendih+0x52>
     baa:	e0 e3       	ldi	r30, 0x30	; 48
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	80 81       	ld	r24, Z
     bb0:	85 ff       	sbrs	r24, 5
     bb2:	fd cf       	rjmp	.-6      	; 0xbae <_Z10USART_sendih+0x48>
     bb4:	60 93 36 01 	sts	0x0136, r22
     bb8:	08 95       	ret

00000bba <_Z15USART_putstringiPKc>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	8c 01       	movw	r16, r24
     bc4:	eb 01       	movw	r28, r22
     bc6:	68 81       	ld	r22, Y
     bc8:	66 23       	and	r22, r22
     bca:	31 f0       	breq	.+12     	; 0xbd8 <_Z15USART_putstringiPKc+0x1e>
     bcc:	21 96       	adiw	r28, 0x01	; 1
     bce:	c8 01       	movw	r24, r16
     bd0:	ca df       	rcall	.-108    	; 0xb66 <_Z10USART_sendih>
     bd2:	69 91       	ld	r22, Y+
     bd4:	61 11       	cpse	r22, r1
     bd6:	fb cf       	rjmp	.-10     	; 0xbce <_Z15USART_putstringiPKc+0x14>
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <_Z10initialisev>:
		
	}
}

bool initialise()
{
     be2:	cf 93       	push	r28
	bool success = true;
	
	USART_init(USART_PC,9600);
     be4:	60 e8       	ldi	r22, 0x80	; 128
     be6:	75 e2       	ldi	r23, 0x25	; 37
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	63 df       	rcall	.-314    	; 0xab4 <_Z10USART_initii>
	initTimers();
     bee:	5b df       	rcall	.-330    	; 0xaa6 <_Z10initTimersv>
	rx_init();
     bf0:	3e de       	rcall	.-900    	; 0x86e <_Z7rx_initv>
	
	if(altimeter_init()==false)
     bf2:	67 dc       	rcall	.-1842   	; 0x4c2 <_Z14altimeter_initv>
     bf4:	c8 2f       	mov	r28, r24
		success=false;

	quad_output_init();
     bf6:	ea dc       	rcall	.-1580   	; 0x5cc <_Z16quad_output_initv>
	
	if(success==false)
     bf8:	c1 11       	cpse	r28, r1
     bfa:	0e c0       	rjmp	.+28     	; 0xc18 <_Z10initialisev+0x36>
	{
		debug_println("Initialization failed!");
     bfc:	87 ed       	ldi	r24, 0xD7	; 215
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	91 dc       	rcall	.-1758   	; 0x524 <_Z13debug_printlnPKc>
		//if something is broken, we can't proceed
		while(1)
		{
			debug_beep_long();
     c02:	c5 dc       	rcall	.-1654   	; 0x58e <_Z15debug_beep_longv>
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	83 ec       	ldi	r24, 0xC3	; 195
     c08:	99 e0       	ldi	r25, 0x09	; 9
     c0a:	21 50       	subi	r18, 0x01	; 1
     c0c:	80 40       	sbci	r24, 0x00	; 0
     c0e:	90 40       	sbci	r25, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <_Z10initialisev+0x28>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <_Z10initialisev+0x32>
     c14:	00 00       	nop
     c16:	f5 cf       	rjmp	.-22     	; 0xc02 <_Z10initialisev+0x20>
			_delay_ms(200);
		}
	}
	
	debug_println("Initialization succeeded!");
     c18:	8e ee       	ldi	r24, 0xEE	; 238
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	83 dc       	rcall	.-1786   	; 0x524 <_Z13debug_printlnPKc>
	
	//beep some pattern I can recognize
	debug_beep_long();
     c1e:	b7 dc       	rcall	.-1682   	; 0x58e <_Z15debug_beep_longv>
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	84 e3       	ldi	r24, 0x34	; 52
     c24:	9c e0       	ldi	r25, 0x0C	; 12
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	80 40       	sbci	r24, 0x00	; 0
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <_Z10initialisev+0x44>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <_Z10initialisev+0x4e>
     c30:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     c32:	a1 dc       	rcall	.-1726   	; 0x576 <_Z10debug_beepv>
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	84 e3       	ldi	r24, 0x34	; 52
     c38:	9c e0       	ldi	r25, 0x0C	; 12
     c3a:	21 50       	subi	r18, 0x01	; 1
     c3c:	80 40       	sbci	r24, 0x00	; 0
     c3e:	90 40       	sbci	r25, 0x00	; 0
     c40:	e1 f7       	brne	.-8      	; 0xc3a <_Z10initialisev+0x58>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <_Z10initialisev+0x62>
     c44:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     c46:	97 dc       	rcall	.-1746   	; 0x576 <_Z10debug_beepv>
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	84 e3       	ldi	r24, 0x34	; 52
     c4c:	9c e0       	ldi	r25, 0x0C	; 12
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	80 40       	sbci	r24, 0x00	; 0
     c52:	90 40       	sbci	r25, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <_Z10initialisev+0x6c>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <_Z10initialisev+0x76>
     c58:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     c5a:	8d dc       	rcall	.-1766   	; 0x576 <_Z10debug_beepv>
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	84 e3       	ldi	r24, 0x34	; 52
     c60:	9c e0       	ldi	r25, 0x0C	; 12
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_Z10initialisev+0x80>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <_Z10initialisev+0x8a>
     c6c:	00 00       	nop
	_delay_ms(250);
	debug_beep_long();
     c6e:	8f dc       	rcall	.-1762   	; 0x58e <_Z15debug_beep_longv>
	
	return success;
}
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <main>:

bool initialise();

int main(void)
{
	initialise();
     c76:	b5 df       	rcall	.-150    	; 0xbe2 <_Z10initialisev>
	
	
	while(1)
	{
		rx_update();
     c78:	17 de       	rcall	.-978    	; 0x8a8 <_Z9rx_updatev>
     c7a:	fe cf       	rjmp	.-4      	; 0xc78 <main+0x2>

00000c7c <__subsf3>:
     c7c:	50 58       	subi	r21, 0x80	; 128

00000c7e <__addsf3>:
     c7e:	bb 27       	eor	r27, r27
     c80:	aa 27       	eor	r26, r26
     c82:	0e d0       	rcall	.+28     	; 0xca0 <__addsf3x>
     c84:	44 c1       	rjmp	.+648    	; 0xf0e <__fp_round>
     c86:	35 d1       	rcall	.+618    	; 0xef2 <__fp_pscA>
     c88:	30 f0       	brcs	.+12     	; 0xc96 <__addsf3+0x18>
     c8a:	3a d1       	rcall	.+628    	; 0xf00 <__fp_pscB>
     c8c:	20 f0       	brcs	.+8      	; 0xc96 <__addsf3+0x18>
     c8e:	31 f4       	brne	.+12     	; 0xc9c <__addsf3+0x1e>
     c90:	9f 3f       	cpi	r25, 0xFF	; 255
     c92:	11 f4       	brne	.+4      	; 0xc98 <__addsf3+0x1a>
     c94:	1e f4       	brtc	.+6      	; 0xc9c <__addsf3+0x1e>
     c96:	2a c1       	rjmp	.+596    	; 0xeec <__fp_nan>
     c98:	0e f4       	brtc	.+2      	; 0xc9c <__addsf3+0x1e>
     c9a:	e0 95       	com	r30
     c9c:	e7 fb       	bst	r30, 7
     c9e:	20 c1       	rjmp	.+576    	; 0xee0 <__fp_inf>

00000ca0 <__addsf3x>:
     ca0:	e9 2f       	mov	r30, r25
     ca2:	46 d1       	rcall	.+652    	; 0xf30 <__fp_split3>
     ca4:	80 f3       	brcs	.-32     	; 0xc86 <__addsf3+0x8>
     ca6:	ba 17       	cp	r27, r26
     ca8:	62 07       	cpc	r22, r18
     caa:	73 07       	cpc	r23, r19
     cac:	84 07       	cpc	r24, r20
     cae:	95 07       	cpc	r25, r21
     cb0:	18 f0       	brcs	.+6      	; 0xcb8 <__addsf3x+0x18>
     cb2:	71 f4       	brne	.+28     	; 0xcd0 <__addsf3x+0x30>
     cb4:	9e f5       	brtc	.+102    	; 0xd1c <__addsf3x+0x7c>
     cb6:	5e c1       	rjmp	.+700    	; 0xf74 <__fp_zero>
     cb8:	0e f4       	brtc	.+2      	; 0xcbc <__addsf3x+0x1c>
     cba:	e0 95       	com	r30
     cbc:	0b 2e       	mov	r0, r27
     cbe:	ba 2f       	mov	r27, r26
     cc0:	a0 2d       	mov	r26, r0
     cc2:	0b 01       	movw	r0, r22
     cc4:	b9 01       	movw	r22, r18
     cc6:	90 01       	movw	r18, r0
     cc8:	0c 01       	movw	r0, r24
     cca:	ca 01       	movw	r24, r20
     ccc:	a0 01       	movw	r20, r0
     cce:	11 24       	eor	r1, r1
     cd0:	ff 27       	eor	r31, r31
     cd2:	59 1b       	sub	r21, r25
     cd4:	99 f0       	breq	.+38     	; 0xcfc <__addsf3x+0x5c>
     cd6:	59 3f       	cpi	r21, 0xF9	; 249
     cd8:	50 f4       	brcc	.+20     	; 0xcee <__addsf3x+0x4e>
     cda:	50 3e       	cpi	r21, 0xE0	; 224
     cdc:	68 f1       	brcs	.+90     	; 0xd38 <__addsf3x+0x98>
     cde:	1a 16       	cp	r1, r26
     ce0:	f0 40       	sbci	r31, 0x00	; 0
     ce2:	a2 2f       	mov	r26, r18
     ce4:	23 2f       	mov	r18, r19
     ce6:	34 2f       	mov	r19, r20
     ce8:	44 27       	eor	r20, r20
     cea:	58 5f       	subi	r21, 0xF8	; 248
     cec:	f3 cf       	rjmp	.-26     	; 0xcd4 <__addsf3x+0x34>
     cee:	46 95       	lsr	r20
     cf0:	37 95       	ror	r19
     cf2:	27 95       	ror	r18
     cf4:	a7 95       	ror	r26
     cf6:	f0 40       	sbci	r31, 0x00	; 0
     cf8:	53 95       	inc	r21
     cfa:	c9 f7       	brne	.-14     	; 0xcee <__addsf3x+0x4e>
     cfc:	7e f4       	brtc	.+30     	; 0xd1c <__addsf3x+0x7c>
     cfe:	1f 16       	cp	r1, r31
     d00:	ba 0b       	sbc	r27, r26
     d02:	62 0b       	sbc	r22, r18
     d04:	73 0b       	sbc	r23, r19
     d06:	84 0b       	sbc	r24, r20
     d08:	ba f0       	brmi	.+46     	; 0xd38 <__addsf3x+0x98>
     d0a:	91 50       	subi	r25, 0x01	; 1
     d0c:	a1 f0       	breq	.+40     	; 0xd36 <__addsf3x+0x96>
     d0e:	ff 0f       	add	r31, r31
     d10:	bb 1f       	adc	r27, r27
     d12:	66 1f       	adc	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	88 1f       	adc	r24, r24
     d18:	c2 f7       	brpl	.-16     	; 0xd0a <__addsf3x+0x6a>
     d1a:	0e c0       	rjmp	.+28     	; 0xd38 <__addsf3x+0x98>
     d1c:	ba 0f       	add	r27, r26
     d1e:	62 1f       	adc	r22, r18
     d20:	73 1f       	adc	r23, r19
     d22:	84 1f       	adc	r24, r20
     d24:	48 f4       	brcc	.+18     	; 0xd38 <__addsf3x+0x98>
     d26:	87 95       	ror	r24
     d28:	77 95       	ror	r23
     d2a:	67 95       	ror	r22
     d2c:	b7 95       	ror	r27
     d2e:	f7 95       	ror	r31
     d30:	9e 3f       	cpi	r25, 0xFE	; 254
     d32:	08 f0       	brcs	.+2      	; 0xd36 <__addsf3x+0x96>
     d34:	b3 cf       	rjmp	.-154    	; 0xc9c <__addsf3+0x1e>
     d36:	93 95       	inc	r25
     d38:	88 0f       	add	r24, r24
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <__addsf3x+0x9e>
     d3c:	99 27       	eor	r25, r25
     d3e:	ee 0f       	add	r30, r30
     d40:	97 95       	ror	r25
     d42:	87 95       	ror	r24
     d44:	08 95       	ret

00000d46 <__cmpsf2>:
     d46:	a8 d0       	rcall	.+336    	; 0xe98 <__fp_cmp>
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__cmpsf2+0x6>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret

00000d4e <__divsf3>:
     d4e:	0c d0       	rcall	.+24     	; 0xd68 <__divsf3x>
     d50:	de c0       	rjmp	.+444    	; 0xf0e <__fp_round>
     d52:	d6 d0       	rcall	.+428    	; 0xf00 <__fp_pscB>
     d54:	40 f0       	brcs	.+16     	; 0xd66 <__divsf3+0x18>
     d56:	cd d0       	rcall	.+410    	; 0xef2 <__fp_pscA>
     d58:	30 f0       	brcs	.+12     	; 0xd66 <__divsf3+0x18>
     d5a:	21 f4       	brne	.+8      	; 0xd64 <__divsf3+0x16>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	19 f0       	breq	.+6      	; 0xd66 <__divsf3+0x18>
     d60:	bf c0       	rjmp	.+382    	; 0xee0 <__fp_inf>
     d62:	51 11       	cpse	r21, r1
     d64:	08 c1       	rjmp	.+528    	; 0xf76 <__fp_szero>
     d66:	c2 c0       	rjmp	.+388    	; 0xeec <__fp_nan>

00000d68 <__divsf3x>:
     d68:	e3 d0       	rcall	.+454    	; 0xf30 <__fp_split3>
     d6a:	98 f3       	brcs	.-26     	; 0xd52 <__divsf3+0x4>

00000d6c <__divsf3_pse>:
     d6c:	99 23       	and	r25, r25
     d6e:	c9 f3       	breq	.-14     	; 0xd62 <__divsf3+0x14>
     d70:	55 23       	and	r21, r21
     d72:	b1 f3       	breq	.-20     	; 0xd60 <__divsf3+0x12>
     d74:	95 1b       	sub	r25, r21
     d76:	55 0b       	sbc	r21, r21
     d78:	bb 27       	eor	r27, r27
     d7a:	aa 27       	eor	r26, r26
     d7c:	62 17       	cp	r22, r18
     d7e:	73 07       	cpc	r23, r19
     d80:	84 07       	cpc	r24, r20
     d82:	38 f0       	brcs	.+14     	; 0xd92 <__divsf3_pse+0x26>
     d84:	9f 5f       	subi	r25, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	22 0f       	add	r18, r18
     d8a:	33 1f       	adc	r19, r19
     d8c:	44 1f       	adc	r20, r20
     d8e:	aa 1f       	adc	r26, r26
     d90:	a9 f3       	breq	.-22     	; 0xd7c <__divsf3_pse+0x10>
     d92:	33 d0       	rcall	.+102    	; 0xdfa <__divsf3_pse+0x8e>
     d94:	0e 2e       	mov	r0, r30
     d96:	3a f0       	brmi	.+14     	; 0xda6 <__divsf3_pse+0x3a>
     d98:	e0 e8       	ldi	r30, 0x80	; 128
     d9a:	30 d0       	rcall	.+96     	; 0xdfc <__divsf3_pse+0x90>
     d9c:	91 50       	subi	r25, 0x01	; 1
     d9e:	50 40       	sbci	r21, 0x00	; 0
     da0:	e6 95       	lsr	r30
     da2:	00 1c       	adc	r0, r0
     da4:	ca f7       	brpl	.-14     	; 0xd98 <__divsf3_pse+0x2c>
     da6:	29 d0       	rcall	.+82     	; 0xdfa <__divsf3_pse+0x8e>
     da8:	fe 2f       	mov	r31, r30
     daa:	27 d0       	rcall	.+78     	; 0xdfa <__divsf3_pse+0x8e>
     dac:	66 0f       	add	r22, r22
     dae:	77 1f       	adc	r23, r23
     db0:	88 1f       	adc	r24, r24
     db2:	bb 1f       	adc	r27, r27
     db4:	26 17       	cp	r18, r22
     db6:	37 07       	cpc	r19, r23
     db8:	48 07       	cpc	r20, r24
     dba:	ab 07       	cpc	r26, r27
     dbc:	b0 e8       	ldi	r27, 0x80	; 128
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <__divsf3_pse+0x56>
     dc0:	bb 0b       	sbc	r27, r27
     dc2:	80 2d       	mov	r24, r0
     dc4:	bf 01       	movw	r22, r30
     dc6:	ff 27       	eor	r31, r31
     dc8:	93 58       	subi	r25, 0x83	; 131
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__divsf3_pse+0x6c>
     dce:	9e 3f       	cpi	r25, 0xFE	; 254
     dd0:	51 05       	cpc	r21, r1
     dd2:	68 f0       	brcs	.+26     	; 0xdee <__divsf3_pse+0x82>
     dd4:	85 c0       	rjmp	.+266    	; 0xee0 <__fp_inf>
     dd6:	cf c0       	rjmp	.+414    	; 0xf76 <__fp_szero>
     dd8:	5f 3f       	cpi	r21, 0xFF	; 255
     dda:	ec f3       	brlt	.-6      	; 0xdd6 <__divsf3_pse+0x6a>
     ddc:	98 3e       	cpi	r25, 0xE8	; 232
     dde:	dc f3       	brlt	.-10     	; 0xdd6 <__divsf3_pse+0x6a>
     de0:	86 95       	lsr	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f7 95       	ror	r31
     dea:	9f 5f       	subi	r25, 0xFF	; 255
     dec:	c9 f7       	brne	.-14     	; 0xde0 <__divsf3_pse+0x74>
     dee:	88 0f       	add	r24, r24
     df0:	91 1d       	adc	r25, r1
     df2:	96 95       	lsr	r25
     df4:	87 95       	ror	r24
     df6:	97 f9       	bld	r25, 7
     df8:	08 95       	ret
     dfa:	e1 e0       	ldi	r30, 0x01	; 1
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	bb 1f       	adc	r27, r27
     e04:	62 17       	cp	r22, r18
     e06:	73 07       	cpc	r23, r19
     e08:	84 07       	cpc	r24, r20
     e0a:	ba 07       	cpc	r27, r26
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__divsf3_pse+0xaa>
     e0e:	62 1b       	sub	r22, r18
     e10:	73 0b       	sbc	r23, r19
     e12:	84 0b       	sbc	r24, r20
     e14:	ba 0b       	sbc	r27, r26
     e16:	ee 1f       	adc	r30, r30
     e18:	88 f7       	brcc	.-30     	; 0xdfc <__divsf3_pse+0x90>
     e1a:	e0 95       	com	r30
     e1c:	08 95       	ret

00000e1e <__floatunsisf>:
     e1e:	e8 94       	clt
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <__floatsisf+0x12>

00000e22 <__floatsisf>:
     e22:	97 fb       	bst	r25, 7
     e24:	3e f4       	brtc	.+14     	; 0xe34 <__floatsisf+0x12>
     e26:	90 95       	com	r25
     e28:	80 95       	com	r24
     e2a:	70 95       	com	r23
     e2c:	61 95       	neg	r22
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	99 23       	and	r25, r25
     e36:	a9 f0       	breq	.+42     	; 0xe62 <__floatsisf+0x40>
     e38:	f9 2f       	mov	r31, r25
     e3a:	96 e9       	ldi	r25, 0x96	; 150
     e3c:	bb 27       	eor	r27, r27
     e3e:	93 95       	inc	r25
     e40:	f6 95       	lsr	r31
     e42:	87 95       	ror	r24
     e44:	77 95       	ror	r23
     e46:	67 95       	ror	r22
     e48:	b7 95       	ror	r27
     e4a:	f1 11       	cpse	r31, r1
     e4c:	f8 cf       	rjmp	.-16     	; 0xe3e <__floatsisf+0x1c>
     e4e:	fa f4       	brpl	.+62     	; 0xe8e <__floatsisf+0x6c>
     e50:	bb 0f       	add	r27, r27
     e52:	11 f4       	brne	.+4      	; 0xe58 <__floatsisf+0x36>
     e54:	60 ff       	sbrs	r22, 0
     e56:	1b c0       	rjmp	.+54     	; 0xe8e <__floatsisf+0x6c>
     e58:	6f 5f       	subi	r22, 0xFF	; 255
     e5a:	7f 4f       	sbci	r23, 0xFF	; 255
     e5c:	8f 4f       	sbci	r24, 0xFF	; 255
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	16 c0       	rjmp	.+44     	; 0xe8e <__floatsisf+0x6c>
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <__floatsisf+0x48>
     e66:	96 e9       	ldi	r25, 0x96	; 150
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <__floatsisf+0x6a>
     e6a:	77 23       	and	r23, r23
     e6c:	21 f0       	breq	.+8      	; 0xe76 <__floatsisf+0x54>
     e6e:	9e e8       	ldi	r25, 0x8E	; 142
     e70:	87 2f       	mov	r24, r23
     e72:	76 2f       	mov	r23, r22
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <__floatsisf+0x5e>
     e76:	66 23       	and	r22, r22
     e78:	71 f0       	breq	.+28     	; 0xe96 <__floatsisf+0x74>
     e7a:	96 e8       	ldi	r25, 0x86	; 134
     e7c:	86 2f       	mov	r24, r22
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	2a f0       	brmi	.+10     	; 0xe8e <__floatsisf+0x6c>
     e84:	9a 95       	dec	r25
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	da f7       	brpl	.-10     	; 0xe84 <__floatsisf+0x62>
     e8e:	88 0f       	add	r24, r24
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	97 f9       	bld	r25, 7
     e96:	08 95       	ret

00000e98 <__fp_cmp>:
     e98:	99 0f       	add	r25, r25
     e9a:	00 08       	sbc	r0, r0
     e9c:	55 0f       	add	r21, r21
     e9e:	aa 0b       	sbc	r26, r26
     ea0:	e0 e8       	ldi	r30, 0x80	; 128
     ea2:	fe ef       	ldi	r31, 0xFE	; 254
     ea4:	16 16       	cp	r1, r22
     ea6:	17 06       	cpc	r1, r23
     ea8:	e8 07       	cpc	r30, r24
     eaa:	f9 07       	cpc	r31, r25
     eac:	c0 f0       	brcs	.+48     	; 0xede <__fp_cmp+0x46>
     eae:	12 16       	cp	r1, r18
     eb0:	13 06       	cpc	r1, r19
     eb2:	e4 07       	cpc	r30, r20
     eb4:	f5 07       	cpc	r31, r21
     eb6:	98 f0       	brcs	.+38     	; 0xede <__fp_cmp+0x46>
     eb8:	62 1b       	sub	r22, r18
     eba:	73 0b       	sbc	r23, r19
     ebc:	84 0b       	sbc	r24, r20
     ebe:	95 0b       	sbc	r25, r21
     ec0:	39 f4       	brne	.+14     	; 0xed0 <__fp_cmp+0x38>
     ec2:	0a 26       	eor	r0, r26
     ec4:	61 f0       	breq	.+24     	; 0xede <__fp_cmp+0x46>
     ec6:	23 2b       	or	r18, r19
     ec8:	24 2b       	or	r18, r20
     eca:	25 2b       	or	r18, r21
     ecc:	21 f4       	brne	.+8      	; 0xed6 <__fp_cmp+0x3e>
     ece:	08 95       	ret
     ed0:	0a 26       	eor	r0, r26
     ed2:	09 f4       	brne	.+2      	; 0xed6 <__fp_cmp+0x3e>
     ed4:	a1 40       	sbci	r26, 0x01	; 1
     ed6:	a6 95       	lsr	r26
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	81 1d       	adc	r24, r1
     edc:	81 1d       	adc	r24, r1
     ede:	08 95       	ret

00000ee0 <__fp_inf>:
     ee0:	97 f9       	bld	r25, 7
     ee2:	9f 67       	ori	r25, 0x7F	; 127
     ee4:	80 e8       	ldi	r24, 0x80	; 128
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	08 95       	ret

00000eec <__fp_nan>:
     eec:	9f ef       	ldi	r25, 0xFF	; 255
     eee:	80 ec       	ldi	r24, 0xC0	; 192
     ef0:	08 95       	ret

00000ef2 <__fp_pscA>:
     ef2:	00 24       	eor	r0, r0
     ef4:	0a 94       	dec	r0
     ef6:	16 16       	cp	r1, r22
     ef8:	17 06       	cpc	r1, r23
     efa:	18 06       	cpc	r1, r24
     efc:	09 06       	cpc	r0, r25
     efe:	08 95       	ret

00000f00 <__fp_pscB>:
     f00:	00 24       	eor	r0, r0
     f02:	0a 94       	dec	r0
     f04:	12 16       	cp	r1, r18
     f06:	13 06       	cpc	r1, r19
     f08:	14 06       	cpc	r1, r20
     f0a:	05 06       	cpc	r0, r21
     f0c:	08 95       	ret

00000f0e <__fp_round>:
     f0e:	09 2e       	mov	r0, r25
     f10:	03 94       	inc	r0
     f12:	00 0c       	add	r0, r0
     f14:	11 f4       	brne	.+4      	; 0xf1a <__fp_round+0xc>
     f16:	88 23       	and	r24, r24
     f18:	52 f0       	brmi	.+20     	; 0xf2e <__fp_round+0x20>
     f1a:	bb 0f       	add	r27, r27
     f1c:	40 f4       	brcc	.+16     	; 0xf2e <__fp_round+0x20>
     f1e:	bf 2b       	or	r27, r31
     f20:	11 f4       	brne	.+4      	; 0xf26 <__fp_round+0x18>
     f22:	60 ff       	sbrs	r22, 0
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <__fp_round+0x20>
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	8f 4f       	sbci	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	08 95       	ret

00000f30 <__fp_split3>:
     f30:	57 fd       	sbrc	r21, 7
     f32:	90 58       	subi	r25, 0x80	; 128
     f34:	44 0f       	add	r20, r20
     f36:	55 1f       	adc	r21, r21
     f38:	59 f0       	breq	.+22     	; 0xf50 <__fp_splitA+0x10>
     f3a:	5f 3f       	cpi	r21, 0xFF	; 255
     f3c:	71 f0       	breq	.+28     	; 0xf5a <__fp_splitA+0x1a>
     f3e:	47 95       	ror	r20

00000f40 <__fp_splitA>:
     f40:	88 0f       	add	r24, r24
     f42:	97 fb       	bst	r25, 7
     f44:	99 1f       	adc	r25, r25
     f46:	61 f0       	breq	.+24     	; 0xf60 <__fp_splitA+0x20>
     f48:	9f 3f       	cpi	r25, 0xFF	; 255
     f4a:	79 f0       	breq	.+30     	; 0xf6a <__fp_splitA+0x2a>
     f4c:	87 95       	ror	r24
     f4e:	08 95       	ret
     f50:	12 16       	cp	r1, r18
     f52:	13 06       	cpc	r1, r19
     f54:	14 06       	cpc	r1, r20
     f56:	55 1f       	adc	r21, r21
     f58:	f2 cf       	rjmp	.-28     	; 0xf3e <__fp_split3+0xe>
     f5a:	46 95       	lsr	r20
     f5c:	f1 df       	rcall	.-30     	; 0xf40 <__fp_splitA>
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <__fp_splitA+0x30>
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	99 1f       	adc	r25, r25
     f68:	f1 cf       	rjmp	.-30     	; 0xf4c <__fp_splitA+0xc>
     f6a:	86 95       	lsr	r24
     f6c:	71 05       	cpc	r23, r1
     f6e:	61 05       	cpc	r22, r1
     f70:	08 94       	sec
     f72:	08 95       	ret

00000f74 <__fp_zero>:
     f74:	e8 94       	clt

00000f76 <__fp_szero>:
     f76:	bb 27       	eor	r27, r27
     f78:	66 27       	eor	r22, r22
     f7a:	77 27       	eor	r23, r23
     f7c:	cb 01       	movw	r24, r22
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret

00000f82 <__mulsf3>:
     f82:	0b d0       	rcall	.+22     	; 0xf9a <__mulsf3x>
     f84:	c4 cf       	rjmp	.-120    	; 0xf0e <__fp_round>
     f86:	b5 df       	rcall	.-150    	; 0xef2 <__fp_pscA>
     f88:	28 f0       	brcs	.+10     	; 0xf94 <__mulsf3+0x12>
     f8a:	ba df       	rcall	.-140    	; 0xf00 <__fp_pscB>
     f8c:	18 f0       	brcs	.+6      	; 0xf94 <__mulsf3+0x12>
     f8e:	95 23       	and	r25, r21
     f90:	09 f0       	breq	.+2      	; 0xf94 <__mulsf3+0x12>
     f92:	a6 cf       	rjmp	.-180    	; 0xee0 <__fp_inf>
     f94:	ab cf       	rjmp	.-170    	; 0xeec <__fp_nan>
     f96:	11 24       	eor	r1, r1
     f98:	ee cf       	rjmp	.-36     	; 0xf76 <__fp_szero>

00000f9a <__mulsf3x>:
     f9a:	ca df       	rcall	.-108    	; 0xf30 <__fp_split3>
     f9c:	a0 f3       	brcs	.-24     	; 0xf86 <__mulsf3+0x4>

00000f9e <__mulsf3_pse>:
     f9e:	95 9f       	mul	r25, r21
     fa0:	d1 f3       	breq	.-12     	; 0xf96 <__mulsf3+0x14>
     fa2:	95 0f       	add	r25, r21
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	55 1f       	adc	r21, r21
     fa8:	62 9f       	mul	r22, r18
     faa:	f0 01       	movw	r30, r0
     fac:	72 9f       	mul	r23, r18
     fae:	bb 27       	eor	r27, r27
     fb0:	f0 0d       	add	r31, r0
     fb2:	b1 1d       	adc	r27, r1
     fb4:	63 9f       	mul	r22, r19
     fb6:	aa 27       	eor	r26, r26
     fb8:	f0 0d       	add	r31, r0
     fba:	b1 1d       	adc	r27, r1
     fbc:	aa 1f       	adc	r26, r26
     fbe:	64 9f       	mul	r22, r20
     fc0:	66 27       	eor	r22, r22
     fc2:	b0 0d       	add	r27, r0
     fc4:	a1 1d       	adc	r26, r1
     fc6:	66 1f       	adc	r22, r22
     fc8:	82 9f       	mul	r24, r18
     fca:	22 27       	eor	r18, r18
     fcc:	b0 0d       	add	r27, r0
     fce:	a1 1d       	adc	r26, r1
     fd0:	62 1f       	adc	r22, r18
     fd2:	73 9f       	mul	r23, r19
     fd4:	b0 0d       	add	r27, r0
     fd6:	a1 1d       	adc	r26, r1
     fd8:	62 1f       	adc	r22, r18
     fda:	83 9f       	mul	r24, r19
     fdc:	a0 0d       	add	r26, r0
     fde:	61 1d       	adc	r22, r1
     fe0:	22 1f       	adc	r18, r18
     fe2:	74 9f       	mul	r23, r20
     fe4:	33 27       	eor	r19, r19
     fe6:	a0 0d       	add	r26, r0
     fe8:	61 1d       	adc	r22, r1
     fea:	23 1f       	adc	r18, r19
     fec:	84 9f       	mul	r24, r20
     fee:	60 0d       	add	r22, r0
     ff0:	21 1d       	adc	r18, r1
     ff2:	82 2f       	mov	r24, r18
     ff4:	76 2f       	mov	r23, r22
     ff6:	6a 2f       	mov	r22, r26
     ff8:	11 24       	eor	r1, r1
     ffa:	9f 57       	subi	r25, 0x7F	; 127
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	8a f0       	brmi	.+34     	; 0x1022 <__mulsf3_pse+0x84>
    1000:	e1 f0       	breq	.+56     	; 0x103a <__mulsf3_pse+0x9c>
    1002:	88 23       	and	r24, r24
    1004:	4a f0       	brmi	.+18     	; 0x1018 <__mulsf3_pse+0x7a>
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	bb 1f       	adc	r27, r27
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	91 50       	subi	r25, 0x01	; 1
    1014:	50 40       	sbci	r21, 0x00	; 0
    1016:	a9 f7       	brne	.-22     	; 0x1002 <__mulsf3_pse+0x64>
    1018:	9e 3f       	cpi	r25, 0xFE	; 254
    101a:	51 05       	cpc	r21, r1
    101c:	70 f0       	brcs	.+28     	; 0x103a <__mulsf3_pse+0x9c>
    101e:	60 cf       	rjmp	.-320    	; 0xee0 <__fp_inf>
    1020:	aa cf       	rjmp	.-172    	; 0xf76 <__fp_szero>
    1022:	5f 3f       	cpi	r21, 0xFF	; 255
    1024:	ec f3       	brlt	.-6      	; 0x1020 <__mulsf3_pse+0x82>
    1026:	98 3e       	cpi	r25, 0xE8	; 232
    1028:	dc f3       	brlt	.-10     	; 0x1020 <__mulsf3_pse+0x82>
    102a:	86 95       	lsr	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	b7 95       	ror	r27
    1032:	f7 95       	ror	r31
    1034:	e7 95       	ror	r30
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	c1 f7       	brne	.-16     	; 0x102a <__mulsf3_pse+0x8c>
    103a:	fe 2b       	or	r31, r30
    103c:	88 0f       	add	r24, r24
    103e:	91 1d       	adc	r25, r1
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	97 f9       	bld	r25, 7
    1046:	08 95       	ret

00001048 <__udivmodsi4>:
    1048:	a1 e2       	ldi	r26, 0x21	; 33
    104a:	1a 2e       	mov	r1, r26
    104c:	aa 1b       	sub	r26, r26
    104e:	bb 1b       	sub	r27, r27
    1050:	fd 01       	movw	r30, r26
    1052:	0d c0       	rjmp	.+26     	; 0x106e <__udivmodsi4_ep>

00001054 <__udivmodsi4_loop>:
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	ee 1f       	adc	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	a2 17       	cp	r26, r18
    105e:	b3 07       	cpc	r27, r19
    1060:	e4 07       	cpc	r30, r20
    1062:	f5 07       	cpc	r31, r21
    1064:	20 f0       	brcs	.+8      	; 0x106e <__udivmodsi4_ep>
    1066:	a2 1b       	sub	r26, r18
    1068:	b3 0b       	sbc	r27, r19
    106a:	e4 0b       	sbc	r30, r20
    106c:	f5 0b       	sbc	r31, r21

0000106e <__udivmodsi4_ep>:
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	88 1f       	adc	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	1a 94       	dec	r1
    1078:	69 f7       	brne	.-38     	; 0x1054 <__udivmodsi4_loop>
    107a:	60 95       	com	r22
    107c:	70 95       	com	r23
    107e:	80 95       	com	r24
    1080:	90 95       	com	r25
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	bd 01       	movw	r22, r26
    1088:	cf 01       	movw	r24, r30
    108a:	08 95       	ret

0000108c <dtostrf>:
    108c:	ef 92       	push	r14
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	e8 01       	movw	r28, r16
    1098:	47 ff       	sbrs	r20, 7
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <dtostrf+0x14>
    109c:	34 e1       	ldi	r19, 0x14	; 20
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <dtostrf+0x16>
    10a0:	34 e0       	ldi	r19, 0x04	; 4
    10a2:	e4 2f       	mov	r30, r20
    10a4:	ff 27       	eor	r31, r31
    10a6:	e7 fd       	sbrc	r30, 7
    10a8:	f0 95       	com	r31
    10aa:	f7 ff       	sbrs	r31, 7
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <dtostrf+0x28>
    10ae:	f1 95       	neg	r31
    10b0:	e1 95       	neg	r30
    10b2:	f1 09       	sbc	r31, r1
    10b4:	e3 2e       	mov	r14, r19
    10b6:	02 2f       	mov	r16, r18
    10b8:	2e 2f       	mov	r18, r30
    10ba:	ae 01       	movw	r20, r28
    10bc:	07 d0       	rcall	.+14     	; 0x10cc <dtoa_prf>
    10be:	ce 01       	movw	r24, r28
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ef 90       	pop	r14
    10ca:	08 95       	ret

000010cc <dtoa_prf>:
    10cc:	6f 92       	push	r6
    10ce:	7f 92       	push	r7
    10d0:	9f 92       	push	r9
    10d2:	af 92       	push	r10
    10d4:	bf 92       	push	r11
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	29 97       	sbiw	r28, 0x09	; 9
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	6a 01       	movw	r12, r20
    10f8:	b2 2e       	mov	r11, r18
    10fa:	10 2f       	mov	r17, r16
    10fc:	0c 33       	cpi	r16, 0x3C	; 60
    10fe:	20 f4       	brcc	.+8      	; 0x1108 <dtoa_prf+0x3c>
    1100:	ff 24       	eor	r15, r15
    1102:	f3 94       	inc	r15
    1104:	f0 0e       	add	r15, r16
    1106:	02 c0       	rjmp	.+4      	; 0x110c <dtoa_prf+0x40>
    1108:	4c e3       	ldi	r20, 0x3C	; 60
    110a:	f4 2e       	mov	r15, r20
    110c:	0f 2d       	mov	r16, r15
    110e:	27 e0       	ldi	r18, 0x07	; 7
    1110:	ae 01       	movw	r20, r28
    1112:	4f 5f       	subi	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	57 d1       	rcall	.+686    	; 0x13c6 <__ftoa_engine>
    1118:	79 81       	ldd	r23, Y+1	; 0x01
    111a:	27 2f       	mov	r18, r23
    111c:	29 70       	andi	r18, 0x09	; 9
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 f0       	breq	.+12     	; 0x112e <dtoa_prf+0x62>
    1122:	e1 fc       	sbrc	r14, 1
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <dtoa_prf+0x66>
    1126:	e0 fc       	sbrc	r14, 0
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <dtoa_prf+0x6a>
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <dtoa_prf+0x6c>
    112e:	6d e2       	ldi	r22, 0x2D	; 45
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <dtoa_prf+0x6c>
    1132:	6b e2       	ldi	r22, 0x2B	; 43
    1134:	01 c0       	rjmp	.+2      	; 0x1138 <dtoa_prf+0x6c>
    1136:	60 e2       	ldi	r22, 0x20	; 32
    1138:	ae 2d       	mov	r26, r14
    113a:	a0 71       	andi	r26, 0x10	; 16
    113c:	73 ff       	sbrs	r23, 3
    113e:	36 c0       	rjmp	.+108    	; 0x11ac <dtoa_prf+0xe0>
    1140:	66 23       	and	r22, r22
    1142:	11 f0       	breq	.+4      	; 0x1148 <dtoa_prf+0x7c>
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	01 c0       	rjmp	.+2      	; 0x114a <dtoa_prf+0x7e>
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	8b 15       	cp	r24, r11
    114c:	10 f4       	brcc	.+4      	; 0x1152 <dtoa_prf+0x86>
    114e:	b8 1a       	sub	r11, r24
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <dtoa_prf+0x88>
    1152:	b1 2c       	mov	r11, r1
    1154:	a1 11       	cpse	r26, r1
    1156:	0b c0       	rjmp	.+22     	; 0x116e <dtoa_prf+0xa2>
    1158:	f6 01       	movw	r30, r12
    115a:	8b 2d       	mov	r24, r11
    115c:	90 e2       	ldi	r25, 0x20	; 32
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <dtoa_prf+0x9c>
    1162:	91 93       	st	Z+, r25
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	fb cf       	rjmp	.-10     	; 0x115e <dtoa_prf+0x92>
    1168:	cb 0c       	add	r12, r11
    116a:	d1 1c       	adc	r13, r1
    116c:	b1 2c       	mov	r11, r1
    116e:	66 23       	and	r22, r22
    1170:	31 f0       	breq	.+12     	; 0x117e <dtoa_prf+0xb2>
    1172:	f6 01       	movw	r30, r12
    1174:	60 83       	st	Z, r22
    1176:	96 01       	movw	r18, r12
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	69 01       	movw	r12, r18
    117e:	c6 01       	movw	r24, r12
    1180:	03 96       	adiw	r24, 0x03	; 3
    1182:	e2 fe       	sbrs	r14, 2
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <dtoa_prf+0xc4>
    1186:	2e e4       	ldi	r18, 0x4E	; 78
    1188:	f6 01       	movw	r30, r12
    118a:	20 83       	st	Z, r18
    118c:	31 e4       	ldi	r19, 0x41	; 65
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <dtoa_prf+0xcc>
    1190:	2e e6       	ldi	r18, 0x6E	; 110
    1192:	f6 01       	movw	r30, r12
    1194:	20 83       	st	Z, r18
    1196:	31 e6       	ldi	r19, 0x61	; 97
    1198:	31 83       	std	Z+1, r19	; 0x01
    119a:	22 83       	std	Z+2, r18	; 0x02
    119c:	fc 01       	movw	r30, r24
    119e:	2b 2d       	mov	r18, r11
    11a0:	30 e2       	ldi	r19, 0x20	; 32
    11a2:	22 23       	and	r18, r18
    11a4:	f1 f1       	breq	.+124    	; 0x1222 <dtoa_prf+0x156>
    11a6:	31 93       	st	Z+, r19
    11a8:	21 50       	subi	r18, 0x01	; 1
    11aa:	fb cf       	rjmp	.-10     	; 0x11a2 <dtoa_prf+0xd6>
    11ac:	72 ff       	sbrs	r23, 2
    11ae:	40 c0       	rjmp	.+128    	; 0x1230 <dtoa_prf+0x164>
    11b0:	66 23       	and	r22, r22
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <dtoa_prf+0xec>
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <dtoa_prf+0xee>
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	8b 15       	cp	r24, r11
    11bc:	10 f4       	brcc	.+4      	; 0x11c2 <dtoa_prf+0xf6>
    11be:	b8 1a       	sub	r11, r24
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <dtoa_prf+0xf8>
    11c2:	b1 2c       	mov	r11, r1
    11c4:	a1 11       	cpse	r26, r1
    11c6:	0b c0       	rjmp	.+22     	; 0x11de <dtoa_prf+0x112>
    11c8:	f6 01       	movw	r30, r12
    11ca:	8b 2d       	mov	r24, r11
    11cc:	90 e2       	ldi	r25, 0x20	; 32
    11ce:	88 23       	and	r24, r24
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <dtoa_prf+0x10c>
    11d2:	91 93       	st	Z+, r25
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	fb cf       	rjmp	.-10     	; 0x11ce <dtoa_prf+0x102>
    11d8:	cb 0c       	add	r12, r11
    11da:	d1 1c       	adc	r13, r1
    11dc:	b1 2c       	mov	r11, r1
    11de:	66 23       	and	r22, r22
    11e0:	31 f0       	breq	.+12     	; 0x11ee <dtoa_prf+0x122>
    11e2:	f6 01       	movw	r30, r12
    11e4:	60 83       	st	Z, r22
    11e6:	96 01       	movw	r18, r12
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	69 01       	movw	r12, r18
    11ee:	c6 01       	movw	r24, r12
    11f0:	03 96       	adiw	r24, 0x03	; 3
    11f2:	e2 fe       	sbrs	r14, 2
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <dtoa_prf+0x138>
    11f6:	29 e4       	ldi	r18, 0x49	; 73
    11f8:	f6 01       	movw	r30, r12
    11fa:	20 83       	st	Z, r18
    11fc:	2e e4       	ldi	r18, 0x4E	; 78
    11fe:	21 83       	std	Z+1, r18	; 0x01
    1200:	26 e4       	ldi	r18, 0x46	; 70
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <dtoa_prf+0x144>
    1204:	29 e6       	ldi	r18, 0x69	; 105
    1206:	f6 01       	movw	r30, r12
    1208:	20 83       	st	Z, r18
    120a:	2e e6       	ldi	r18, 0x6E	; 110
    120c:	21 83       	std	Z+1, r18	; 0x01
    120e:	26 e6       	ldi	r18, 0x66	; 102
    1210:	22 83       	std	Z+2, r18	; 0x02
    1212:	fc 01       	movw	r30, r24
    1214:	2b 2d       	mov	r18, r11
    1216:	30 e2       	ldi	r19, 0x20	; 32
    1218:	22 23       	and	r18, r18
    121a:	19 f0       	breq	.+6      	; 0x1222 <dtoa_prf+0x156>
    121c:	31 93       	st	Z+, r19
    121e:	21 50       	subi	r18, 0x01	; 1
    1220:	fb cf       	rjmp	.-10     	; 0x1218 <dtoa_prf+0x14c>
    1222:	fc 01       	movw	r30, r24
    1224:	eb 0d       	add	r30, r11
    1226:	f1 1d       	adc	r31, r1
    1228:	10 82       	st	Z, r1
    122a:	8e ef       	ldi	r24, 0xFE	; 254
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	b7 c0       	rjmp	.+366    	; 0x139e <dtoa_prf+0x2d2>
    1230:	b1 e0       	ldi	r27, 0x01	; 1
    1232:	61 11       	cpse	r22, r1
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <dtoa_prf+0x16c>
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	4b 2f       	mov	r20, r27
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	18 16       	cp	r1, r24
    123e:	19 06       	cpc	r1, r25
    1240:	24 f4       	brge	.+8      	; 0x124a <dtoa_prf+0x17e>
    1242:	9c 01       	movw	r18, r24
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	02 c0       	rjmp	.+4      	; 0x124e <dtoa_prf+0x182>
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	24 0f       	add	r18, r20
    1250:	35 1f       	adc	r19, r21
    1252:	11 23       	and	r17, r17
    1254:	29 f0       	breq	.+10     	; 0x1260 <dtoa_prf+0x194>
    1256:	41 2f       	mov	r20, r17
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	4f 5f       	subi	r20, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <dtoa_prf+0x198>
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	42 0f       	add	r20, r18
    1266:	53 1f       	adc	r21, r19
    1268:	2b 2d       	mov	r18, r11
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	42 17       	cp	r20, r18
    126e:	53 07       	cpc	r21, r19
    1270:	14 f4       	brge	.+4      	; 0x1276 <dtoa_prf+0x1aa>
    1272:	b4 1a       	sub	r11, r20
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <dtoa_prf+0x1ac>
    1276:	b1 2c       	mov	r11, r1
    1278:	2e 2d       	mov	r18, r14
    127a:	28 71       	andi	r18, 0x18	; 24
    127c:	59 f4       	brne	.+22     	; 0x1294 <dtoa_prf+0x1c8>
    127e:	f6 01       	movw	r30, r12
    1280:	2b 2d       	mov	r18, r11
    1282:	30 e2       	ldi	r19, 0x20	; 32
    1284:	22 23       	and	r18, r18
    1286:	19 f0       	breq	.+6      	; 0x128e <dtoa_prf+0x1c2>
    1288:	31 93       	st	Z+, r19
    128a:	21 50       	subi	r18, 0x01	; 1
    128c:	fb cf       	rjmp	.-10     	; 0x1284 <dtoa_prf+0x1b8>
    128e:	cb 0c       	add	r12, r11
    1290:	d1 1c       	adc	r13, r1
    1292:	b1 2c       	mov	r11, r1
    1294:	bb 23       	and	r27, r27
    1296:	31 f0       	breq	.+12     	; 0x12a4 <dtoa_prf+0x1d8>
    1298:	f6 01       	movw	r30, r12
    129a:	60 83       	st	Z, r22
    129c:	96 01       	movw	r18, r12
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	69 01       	movw	r12, r18
    12a4:	a1 11       	cpse	r26, r1
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <dtoa_prf+0x1f2>
    12a8:	f6 01       	movw	r30, r12
    12aa:	2b 2d       	mov	r18, r11
    12ac:	30 e3       	ldi	r19, 0x30	; 48
    12ae:	22 23       	and	r18, r18
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <dtoa_prf+0x1ec>
    12b2:	31 93       	st	Z+, r19
    12b4:	21 50       	subi	r18, 0x01	; 1
    12b6:	fb cf       	rjmp	.-10     	; 0x12ae <dtoa_prf+0x1e2>
    12b8:	cb 0c       	add	r12, r11
    12ba:	d1 1c       	adc	r13, r1
    12bc:	b1 2c       	mov	r11, r1
    12be:	f8 0e       	add	r15, r24
    12c0:	0a 81       	ldd	r16, Y+2	; 0x02
    12c2:	37 2f       	mov	r19, r23
    12c4:	30 71       	andi	r19, 0x10	; 16
    12c6:	a3 2e       	mov	r10, r19
    12c8:	74 ff       	sbrs	r23, 4
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <dtoa_prf+0x206>
    12cc:	01 33       	cpi	r16, 0x31	; 49
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <dtoa_prf+0x206>
    12d0:	fa 94       	dec	r15
    12d2:	1f 14       	cp	r1, r15
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <dtoa_prf+0x214>
    12d6:	2f 2d       	mov	r18, r15
    12d8:	29 30       	cpi	r18, 0x09	; 9
    12da:	18 f0       	brcs	.+6      	; 0x12e2 <dtoa_prf+0x216>
    12dc:	28 e0       	ldi	r18, 0x08	; 8
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <dtoa_prf+0x216>
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	68 2f       	mov	r22, r24
    12e4:	39 2f       	mov	r19, r25
    12e6:	97 ff       	sbrs	r25, 7
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <dtoa_prf+0x222>
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	46 2f       	mov	r20, r22
    12f0:	53 2f       	mov	r21, r19
    12f2:	61 2c       	mov	r6, r1
    12f4:	71 2c       	mov	r7, r1
    12f6:	3e e2       	ldi	r19, 0x2E	; 46
    12f8:	93 2e       	mov	r9, r19
    12fa:	bc 01       	movw	r22, r24
    12fc:	62 1b       	sub	r22, r18
    12fe:	71 09       	sbc	r23, r1
    1300:	9b 01       	movw	r18, r22
    1302:	dc 01       	movw	r26, r24
    1304:	a4 1b       	sub	r26, r20
    1306:	b5 0b       	sbc	r27, r21
    1308:	e1 e0       	ldi	r30, 0x01	; 1
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ec 0f       	add	r30, r28
    130e:	fd 1f       	adc	r31, r29
    1310:	ae 0f       	add	r26, r30
    1312:	bf 1f       	adc	r27, r31
    1314:	e1 2e       	mov	r14, r17
    1316:	f1 2c       	mov	r15, r1
    1318:	f1 94       	neg	r15
    131a:	e1 94       	neg	r14
    131c:	f1 08       	sbc	r15, r1
    131e:	4f 3f       	cpi	r20, 0xFF	; 255
    1320:	ff ef       	ldi	r31, 0xFF	; 255
    1322:	5f 07       	cpc	r21, r31
    1324:	31 f4       	brne	.+12     	; 0x1332 <dtoa_prf+0x266>
    1326:	f6 01       	movw	r30, r12
    1328:	90 82       	st	Z, r9
    132a:	b6 01       	movw	r22, r12
    132c:	6f 5f       	subi	r22, 0xFF	; 255
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	6b 01       	movw	r12, r22
    1332:	84 17       	cp	r24, r20
    1334:	95 07       	cpc	r25, r21
    1336:	4c f0       	brlt	.+18     	; 0x134a <dtoa_prf+0x27e>
    1338:	24 17       	cp	r18, r20
    133a:	35 07       	cpc	r19, r21
    133c:	34 f4       	brge	.+12     	; 0x134a <dtoa_prf+0x27e>
    133e:	bd 01       	movw	r22, r26
    1340:	66 0d       	add	r22, r6
    1342:	77 1d       	adc	r23, r7
    1344:	fb 01       	movw	r30, r22
    1346:	11 81       	ldd	r17, Z+1	; 0x01
    1348:	01 c0       	rjmp	.+2      	; 0x134c <dtoa_prf+0x280>
    134a:	10 e3       	ldi	r17, 0x30	; 48
    134c:	41 50       	subi	r20, 0x01	; 1
    134e:	51 09       	sbc	r21, r1
    1350:	ff ef       	ldi	r31, 0xFF	; 255
    1352:	6f 1a       	sub	r6, r31
    1354:	7f 0a       	sbc	r7, r31
    1356:	b6 01       	movw	r22, r12
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	4e 15       	cp	r20, r14
    135e:	5f 05       	cpc	r21, r15
    1360:	24 f0       	brlt	.+8      	; 0x136a <dtoa_prf+0x29e>
    1362:	f6 01       	movw	r30, r12
    1364:	10 83       	st	Z, r17
    1366:	6b 01       	movw	r12, r22
    1368:	da cf       	rjmp	.-76     	; 0x131e <dtoa_prf+0x252>
    136a:	48 17       	cp	r20, r24
    136c:	59 07       	cpc	r21, r25
    136e:	39 f4       	brne	.+14     	; 0x137e <dtoa_prf+0x2b2>
    1370:	06 33       	cpi	r16, 0x36	; 54
    1372:	20 f4       	brcc	.+8      	; 0x137c <dtoa_prf+0x2b0>
    1374:	05 33       	cpi	r16, 0x35	; 53
    1376:	19 f4       	brne	.+6      	; 0x137e <dtoa_prf+0x2b2>
    1378:	a1 10       	cpse	r10, r1
    137a:	01 c0       	rjmp	.+2      	; 0x137e <dtoa_prf+0x2b2>
    137c:	11 e3       	ldi	r17, 0x31	; 49
    137e:	f6 01       	movw	r30, r12
    1380:	10 83       	st	Z, r17
    1382:	fb 01       	movw	r30, r22
    1384:	8b 2d       	mov	r24, r11
    1386:	90 e2       	ldi	r25, 0x20	; 32
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <dtoa_prf+0x2c6>
    138c:	91 93       	st	Z+, r25
    138e:	81 50       	subi	r24, 0x01	; 1
    1390:	fb cf       	rjmp	.-10     	; 0x1388 <dtoa_prf+0x2bc>
    1392:	fb 01       	movw	r30, r22
    1394:	eb 0d       	add	r30, r11
    1396:	f1 1d       	adc	r31, r1
    1398:	10 82       	st	Z, r1
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	29 96       	adiw	r28, 0x09	; 9
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	9f 90       	pop	r9
    13c0:	7f 90       	pop	r7
    13c2:	6f 90       	pop	r6
    13c4:	08 95       	ret

000013c6 <__ftoa_engine>:
    13c6:	28 30       	cpi	r18, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__ftoa_engine+0x6>
    13ca:	27 e0       	ldi	r18, 0x07	; 7
    13cc:	33 27       	eor	r19, r19
    13ce:	da 01       	movw	r26, r20
    13d0:	99 0f       	add	r25, r25
    13d2:	31 1d       	adc	r19, r1
    13d4:	87 fd       	sbrc	r24, 7
    13d6:	91 60       	ori	r25, 0x01	; 1
    13d8:	00 96       	adiw	r24, 0x00	; 0
    13da:	61 05       	cpc	r22, r1
    13dc:	71 05       	cpc	r23, r1
    13de:	39 f4       	brne	.+14     	; 0x13ee <__ftoa_engine+0x28>
    13e0:	32 60       	ori	r19, 0x02	; 2
    13e2:	2e 5f       	subi	r18, 0xFE	; 254
    13e4:	3d 93       	st	X+, r19
    13e6:	30 e3       	ldi	r19, 0x30	; 48
    13e8:	2a 95       	dec	r18
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <__ftoa_engine+0x1e>
    13ec:	08 95       	ret
    13ee:	9f 3f       	cpi	r25, 0xFF	; 255
    13f0:	30 f0       	brcs	.+12     	; 0x13fe <__ftoa_engine+0x38>
    13f2:	80 38       	cpi	r24, 0x80	; 128
    13f4:	71 05       	cpc	r23, r1
    13f6:	61 05       	cpc	r22, r1
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__ftoa_engine+0x36>
    13fa:	3c 5f       	subi	r19, 0xFC	; 252
    13fc:	3c 5f       	subi	r19, 0xFC	; 252
    13fe:	3d 93       	st	X+, r19
    1400:	91 30       	cpi	r25, 0x01	; 1
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__ftoa_engine+0x40>
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	91 1d       	adc	r25, r1
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	1f 93       	push	r17
    140e:	0f 93       	push	r16
    1410:	ff 92       	push	r15
    1412:	ef 92       	push	r14
    1414:	19 2f       	mov	r17, r25
    1416:	98 7f       	andi	r25, 0xF8	; 248
    1418:	96 95       	lsr	r25
    141a:	e9 2f       	mov	r30, r25
    141c:	96 95       	lsr	r25
    141e:	96 95       	lsr	r25
    1420:	e9 0f       	add	r30, r25
    1422:	ff 27       	eor	r31, r31
    1424:	e2 5c       	subi	r30, 0xC2	; 194
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	99 27       	eor	r25, r25
    142a:	33 27       	eor	r19, r19
    142c:	ee 24       	eor	r14, r14
    142e:	ff 24       	eor	r15, r15
    1430:	a7 01       	movw	r20, r14
    1432:	e7 01       	movw	r28, r14
    1434:	05 90       	lpm	r0, Z+
    1436:	08 94       	sec
    1438:	07 94       	ror	r0
    143a:	28 f4       	brcc	.+10     	; 0x1446 <__ftoa_engine+0x80>
    143c:	36 0f       	add	r19, r22
    143e:	e7 1e       	adc	r14, r23
    1440:	f8 1e       	adc	r15, r24
    1442:	49 1f       	adc	r20, r25
    1444:	51 1d       	adc	r21, r1
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	06 94       	lsr	r0
    1450:	a1 f7       	brne	.-24     	; 0x143a <__ftoa_engine+0x74>
    1452:	05 90       	lpm	r0, Z+
    1454:	07 94       	ror	r0
    1456:	28 f4       	brcc	.+10     	; 0x1462 <__ftoa_engine+0x9c>
    1458:	e7 0e       	add	r14, r23
    145a:	f8 1e       	adc	r15, r24
    145c:	49 1f       	adc	r20, r25
    145e:	56 1f       	adc	r21, r22
    1460:	c1 1d       	adc	r28, r1
    1462:	77 0f       	add	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	66 1f       	adc	r22, r22
    146a:	06 94       	lsr	r0
    146c:	a1 f7       	brne	.-24     	; 0x1456 <__ftoa_engine+0x90>
    146e:	05 90       	lpm	r0, Z+
    1470:	07 94       	ror	r0
    1472:	28 f4       	brcc	.+10     	; 0x147e <__ftoa_engine+0xb8>
    1474:	f8 0e       	add	r15, r24
    1476:	49 1f       	adc	r20, r25
    1478:	56 1f       	adc	r21, r22
    147a:	c7 1f       	adc	r28, r23
    147c:	d1 1d       	adc	r29, r1
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	66 1f       	adc	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	06 94       	lsr	r0
    1488:	a1 f7       	brne	.-24     	; 0x1472 <__ftoa_engine+0xac>
    148a:	05 90       	lpm	r0, Z+
    148c:	07 94       	ror	r0
    148e:	20 f4       	brcc	.+8      	; 0x1498 <__ftoa_engine+0xd2>
    1490:	49 0f       	add	r20, r25
    1492:	56 1f       	adc	r21, r22
    1494:	c7 1f       	adc	r28, r23
    1496:	d8 1f       	adc	r29, r24
    1498:	99 0f       	add	r25, r25
    149a:	66 1f       	adc	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	06 94       	lsr	r0
    14a2:	a9 f7       	brne	.-22     	; 0x148e <__ftoa_engine+0xc8>
    14a4:	84 91       	lpm	r24, Z
    14a6:	10 95       	com	r17
    14a8:	17 70       	andi	r17, 0x07	; 7
    14aa:	41 f0       	breq	.+16     	; 0x14bc <__ftoa_engine+0xf6>
    14ac:	d6 95       	lsr	r29
    14ae:	c7 95       	ror	r28
    14b0:	57 95       	ror	r21
    14b2:	47 95       	ror	r20
    14b4:	f7 94       	ror	r15
    14b6:	e7 94       	ror	r14
    14b8:	1a 95       	dec	r17
    14ba:	c1 f7       	brne	.-16     	; 0x14ac <__ftoa_engine+0xe6>
    14bc:	e4 ee       	ldi	r30, 0xE4	; 228
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	68 94       	set
    14c2:	15 90       	lpm	r1, Z+
    14c4:	15 91       	lpm	r17, Z+
    14c6:	35 91       	lpm	r19, Z+
    14c8:	65 91       	lpm	r22, Z+
    14ca:	95 91       	lpm	r25, Z+
    14cc:	05 90       	lpm	r0, Z+
    14ce:	7f e2       	ldi	r23, 0x2F	; 47
    14d0:	73 95       	inc	r23
    14d2:	e1 18       	sub	r14, r1
    14d4:	f1 0a       	sbc	r15, r17
    14d6:	43 0b       	sbc	r20, r19
    14d8:	56 0b       	sbc	r21, r22
    14da:	c9 0b       	sbc	r28, r25
    14dc:	d0 09       	sbc	r29, r0
    14de:	c0 f7       	brcc	.-16     	; 0x14d0 <__ftoa_engine+0x10a>
    14e0:	e1 0c       	add	r14, r1
    14e2:	f1 1e       	adc	r15, r17
    14e4:	43 1f       	adc	r20, r19
    14e6:	56 1f       	adc	r21, r22
    14e8:	c9 1f       	adc	r28, r25
    14ea:	d0 1d       	adc	r29, r0
    14ec:	7e f4       	brtc	.+30     	; 0x150c <__ftoa_engine+0x146>
    14ee:	70 33       	cpi	r23, 0x30	; 48
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <__ftoa_engine+0x130>
    14f2:	8a 95       	dec	r24
    14f4:	e6 cf       	rjmp	.-52     	; 0x14c2 <__ftoa_engine+0xfc>
    14f6:	e8 94       	clt
    14f8:	01 50       	subi	r16, 0x01	; 1
    14fa:	30 f0       	brcs	.+12     	; 0x1508 <__ftoa_engine+0x142>
    14fc:	08 0f       	add	r16, r24
    14fe:	0a f4       	brpl	.+2      	; 0x1502 <__ftoa_engine+0x13c>
    1500:	00 27       	eor	r16, r16
    1502:	02 17       	cp	r16, r18
    1504:	08 f4       	brcc	.+2      	; 0x1508 <__ftoa_engine+0x142>
    1506:	20 2f       	mov	r18, r16
    1508:	23 95       	inc	r18
    150a:	02 2f       	mov	r16, r18
    150c:	7a 33       	cpi	r23, 0x3A	; 58
    150e:	28 f0       	brcs	.+10     	; 0x151a <__ftoa_engine+0x154>
    1510:	79 e3       	ldi	r23, 0x39	; 57
    1512:	7d 93       	st	X+, r23
    1514:	2a 95       	dec	r18
    1516:	e9 f7       	brne	.-6      	; 0x1512 <__ftoa_engine+0x14c>
    1518:	10 c0       	rjmp	.+32     	; 0x153a <__ftoa_engine+0x174>
    151a:	7d 93       	st	X+, r23
    151c:	2a 95       	dec	r18
    151e:	89 f6       	brne	.-94     	; 0x14c2 <__ftoa_engine+0xfc>
    1520:	06 94       	lsr	r0
    1522:	97 95       	ror	r25
    1524:	67 95       	ror	r22
    1526:	37 95       	ror	r19
    1528:	17 95       	ror	r17
    152a:	17 94       	ror	r1
    152c:	e1 18       	sub	r14, r1
    152e:	f1 0a       	sbc	r15, r17
    1530:	43 0b       	sbc	r20, r19
    1532:	56 0b       	sbc	r21, r22
    1534:	c9 0b       	sbc	r28, r25
    1536:	d0 09       	sbc	r29, r0
    1538:	98 f0       	brcs	.+38     	; 0x1560 <__ftoa_engine+0x19a>
    153a:	23 95       	inc	r18
    153c:	7e 91       	ld	r23, -X
    153e:	73 95       	inc	r23
    1540:	7a 33       	cpi	r23, 0x3A	; 58
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__ftoa_engine+0x180>
    1544:	70 e3       	ldi	r23, 0x30	; 48
    1546:	7c 93       	st	X, r23
    1548:	20 13       	cpse	r18, r16
    154a:	b8 f7       	brcc	.-18     	; 0x153a <__ftoa_engine+0x174>
    154c:	7e 91       	ld	r23, -X
    154e:	70 61       	ori	r23, 0x10	; 16
    1550:	7d 93       	st	X+, r23
    1552:	30 f0       	brcs	.+12     	; 0x1560 <__ftoa_engine+0x19a>
    1554:	83 95       	inc	r24
    1556:	71 e3       	ldi	r23, 0x31	; 49
    1558:	7d 93       	st	X+, r23
    155a:	70 e3       	ldi	r23, 0x30	; 48
    155c:	2a 95       	dec	r18
    155e:	e1 f7       	brne	.-8      	; 0x1558 <__ftoa_engine+0x192>
    1560:	11 24       	eor	r1, r1
    1562:	ef 90       	pop	r14
    1564:	ff 90       	pop	r15
    1566:	0f 91       	pop	r16
    1568:	1f 91       	pop	r17
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	99 27       	eor	r25, r25
    1570:	87 fd       	sbrc	r24, 7
    1572:	90 95       	com	r25
    1574:	08 95       	ret

00001576 <_exit>:
    1576:	f8 94       	cli

00001578 <__stop_program>:
    1578:	ff cf       	rjmp	.-2      	; 0x1578 <__stop_program>
