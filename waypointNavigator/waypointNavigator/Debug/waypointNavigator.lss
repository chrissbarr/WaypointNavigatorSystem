
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000008aa  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080020c  0080020c  0000094a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b70  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096e  00000000  00000000  00002732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f22  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005dc  00000000  00000000  00003fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b9e  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013d3  00000000  00000000  0000513e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00006511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	f2 c0       	rjmp	.+484    	; 0x20a <__vector_9>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	81 c2       	rjmp	.+1282   	; 0x560 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 35       	cpi	r26, 0x54	; 84
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	fb d2       	rcall	.+1526   	; 0x716 <main>
 120:	c2 c3       	rjmp	.+1924   	; 0x8a6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z13debug_printlnPKc>:
		//USART_putstring(USART_PC,"\n\r");
	}
}

void debug_println(const char* debugString)
{
 124:	08 95       	ret

00000126 <_Z8gps_initv>:
{
	//enable GPS module
	//confirm communication
	//return true if successful
	return false;
}
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <_Z16quad_output_initv>:

#include "quad_output.h"

void quad_output_init()
{
	DDRH = 0xFF;  //set OC4x to output
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
 130:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9c e9       	ldi	r25, 0x9C	; 156
 136:	90 93 a7 00 	sts	0x00A7, r25
 13a:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
 13e:	38 ea       	ldi	r19, 0xA8	; 168
 140:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
 144:	22 e1       	ldi	r18, 0x12	; 18
 146:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
 14a:	90 93 97 00 	sts	0x0097, r25
 14e:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
 152:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
 156:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 15a:	86 eb       	ldi	r24, 0xB6	; 182
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	90 93 a9 00 	sts	0x00A9, r25
 162:	80 93 a8 00 	sts	0x00A8, r24
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 166:	90 93 ab 00 	sts	0x00AB, r25
 16a:	80 93 aa 00 	sts	0x00AA, r24
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 16e:	90 93 ad 00 	sts	0x00AD, r25
 172:	80 93 ac 00 	sts	0x00AC, r24
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 176:	90 93 99 00 	sts	0x0099, r25
 17a:	80 93 98 00 	sts	0x0098, r24
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 17e:	90 93 9b 00 	sts	0x009B, r25
 182:	80 93 9a 00 	sts	0x009A, r24
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
 186:	90 93 9d 00 	sts	0x009D, r25
 18a:	80 93 9c 00 	sts	0x009C, r24
 18e:	08 95       	ret

00000190 <_Z23quad_output_passthroughbbbbbb>:
}


void quad_output_passthrough(bool throttle, bool aileron, bool elevator, bool rudder, bool gear, bool aux)
{
 190:	ef 92       	push	r14
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	16 2f       	mov	r17, r22
 19c:	d4 2f       	mov	r29, r20
 19e:	c2 2f       	mov	r28, r18
	if(throttle)
 1a0:	88 23       	and	r24, r24
 1a2:	29 f0       	breq	.+10     	; 0x1ae <_Z23quad_output_passthroughbbbbbb+0x1e>
	{
		quad_output_set_throttle(rx_get_throttle());
 1a4:	b0 d1       	rcall	.+864    	; 0x506 <_Z15rx_get_throttlev>
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
 1a6:	90 93 a9 00 	sts	0x00A9, r25
 1aa:	80 93 a8 00 	sts	0x00A8, r24
{
	if(throttle)
	{
		quad_output_set_throttle(rx_get_throttle());
	}
	if(aileron)
 1ae:	11 23       	and	r17, r17
 1b0:	31 f0       	breq	.+12     	; 0x1be <_Z23quad_output_passthroughbbbbbb+0x2e>
	{
		quad_output_set_aileron(rx_get_aileron());
 1b2:	ae d1       	rcall	.+860    	; 0x510 <_Z14rx_get_aileronv>
 1b4:	bf d2       	rcall	.+1406   	; 0x734 <__fixsfsi>
	THROTTLE_OUT = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
 1b6:	70 93 ab 00 	sts	0x00AB, r23
 1ba:	60 93 aa 00 	sts	0x00AA, r22
	}
	if(aileron)
	{
		quad_output_set_aileron(rx_get_aileron());
	}
	if(elevator)
 1be:	dd 23       	and	r29, r29
 1c0:	31 f0       	breq	.+12     	; 0x1ce <_Z23quad_output_passthroughbbbbbb+0x3e>
	{
		quad_output_set_elevator(rx_get_elevator());
 1c2:	ae d1       	rcall	.+860    	; 0x520 <_Z15rx_get_elevatorv>
 1c4:	b7 d2       	rcall	.+1390   	; 0x734 <__fixsfsi>
	AILERON_OUT = aileron;
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
 1c6:	70 93 ad 00 	sts	0x00AD, r23
 1ca:	60 93 ac 00 	sts	0x00AC, r22
	}
	if(elevator)
	{
		quad_output_set_elevator(rx_get_elevator());
	}
	if(rudder)
 1ce:	cc 23       	and	r28, r28
 1d0:	31 f0       	breq	.+12     	; 0x1de <_Z23quad_output_passthroughbbbbbb+0x4e>
	{
		quad_output_set_rudder(rx_get_rudder());
 1d2:	ae d1       	rcall	.+860    	; 0x530 <_Z13rx_get_rudderv>
 1d4:	af d2       	rcall	.+1374   	; 0x734 <__fixsfsi>
	ELEVATOR_OUT = elevator;
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
 1d6:	70 93 99 00 	sts	0x0099, r23
 1da:	60 93 98 00 	sts	0x0098, r22
	}
	if(rudder)
	{
		quad_output_set_rudder(rx_get_rudder());
	}
	if(gear)
 1de:	00 23       	and	r16, r16
 1e0:	31 f0       	breq	.+12     	; 0x1ee <_Z23quad_output_passthroughbbbbbb+0x5e>
	{
		quad_output_set_gear(rx_get_gear());
 1e2:	ae d1       	rcall	.+860    	; 0x540 <_Z11rx_get_gearv>
 1e4:	a7 d2       	rcall	.+1358   	; 0x734 <__fixsfsi>
	RUDDER_OUT = rudder;
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
 1e6:	70 93 9b 00 	sts	0x009B, r23
 1ea:	60 93 9a 00 	sts	0x009A, r22
	}
	if(gear)
	{
		quad_output_set_gear(rx_get_gear());
	}
	if(aux)
 1ee:	ee 20       	and	r14, r14
 1f0:	31 f0       	breq	.+12     	; 0x1fe <_Z23quad_output_passthroughbbbbbb+0x6e>
	{
		quad_output_set_aux(rx_get_aux());
 1f2:	ae d1       	rcall	.+860    	; 0x550 <_Z10rx_get_auxv>
 1f4:	9f d2       	rcall	.+1342   	; 0x734 <__fixsfsi>
	GEAR_OUT = gear;
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
 1f6:	70 93 9d 00 	sts	0x009D, r23
 1fa:	60 93 9c 00 	sts	0x009C, r22
	}
	if(aux)
	{
		quad_output_set_aux(rx_get_aux());
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ef 90       	pop	r14
 208:	08 95       	ret

0000020a <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	0b b6       	in	r0, 0x3b	; 59
 216:	0f 92       	push	r0
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	cf 93       	push	r28
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
 232:	83 b1       	in	r24, 0x03	; 3
 234:	c0 91 19 02 	lds	r28, 0x0219
 238:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
 23a:	83 b1       	in	r24, 0x03	; 3
 23c:	80 93 19 02 	sts	0x0219, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
 240:	c0 ff       	sbrs	r28, 0
 242:	1c c0       	rjmp	.+56     	; 0x27c <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
 244:	18 9b       	sbis	0x03, 0	; 3
 246:	0a c0       	rjmp	.+20     	; 0x25c <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
 248:	d5 d1       	rcall	.+938    	; 0x5f4 <_Z6microsv>
 24a:	60 93 3a 02 	sts	0x023A, r22
 24e:	70 93 3b 02 	sts	0x023B, r23
 252:	80 93 3c 02 	sts	0x023C, r24
 256:	90 93 3d 02 	sts	0x023D, r25
 25a:	10 c0       	rjmp	.+32     	; 0x27c <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
 25c:	cb d1       	rcall	.+918    	; 0x5f4 <_Z6microsv>
 25e:	20 91 3a 02 	lds	r18, 0x023A
 262:	30 91 3b 02 	lds	r19, 0x023B
 266:	62 1b       	sub	r22, r18
 268:	73 0b       	sbc	r23, r19
 26a:	70 93 4a 02 	sts	0x024A, r23
 26e:	60 93 49 02 	sts	0x0249, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
 272:	80 91 3e 02 	lds	r24, 0x023E
 276:	81 60       	ori	r24, 0x01	; 1
 278:	80 93 3e 02 	sts	0x023E, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
 27c:	c1 ff       	sbrs	r28, 1
 27e:	1c c0       	rjmp	.+56     	; 0x2b8 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
 280:	19 9b       	sbis	0x03, 1	; 3
 282:	0a c0       	rjmp	.+20     	; 0x298 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
 284:	b7 d1       	rcall	.+878    	; 0x5f4 <_Z6microsv>
 286:	60 93 36 02 	sts	0x0236, r22
 28a:	70 93 37 02 	sts	0x0237, r23
 28e:	80 93 38 02 	sts	0x0238, r24
 292:	90 93 39 02 	sts	0x0239, r25
 296:	10 c0       	rjmp	.+32     	; 0x2b8 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
 298:	ad d1       	rcall	.+858    	; 0x5f4 <_Z6microsv>
 29a:	20 91 36 02 	lds	r18, 0x0236
 29e:	30 91 37 02 	lds	r19, 0x0237
 2a2:	62 1b       	sub	r22, r18
 2a4:	73 0b       	sbc	r23, r19
 2a6:	70 93 48 02 	sts	0x0248, r23
 2aa:	60 93 47 02 	sts	0x0247, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
 2ae:	80 91 3e 02 	lds	r24, 0x023E
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	80 93 3e 02 	sts	0x023E, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
 2b8:	c2 ff       	sbrs	r28, 2
 2ba:	1c c0       	rjmp	.+56     	; 0x2f4 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
 2bc:	1a 9b       	sbis	0x03, 2	; 3
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
 2c0:	99 d1       	rcall	.+818    	; 0x5f4 <_Z6microsv>
 2c2:	60 93 32 02 	sts	0x0232, r22
 2c6:	70 93 33 02 	sts	0x0233, r23
 2ca:	80 93 34 02 	sts	0x0234, r24
 2ce:	90 93 35 02 	sts	0x0235, r25
 2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
 2d4:	8f d1       	rcall	.+798    	; 0x5f4 <_Z6microsv>
 2d6:	20 91 32 02 	lds	r18, 0x0232
 2da:	30 91 33 02 	lds	r19, 0x0233
 2de:	62 1b       	sub	r22, r18
 2e0:	73 0b       	sbc	r23, r19
 2e2:	70 93 46 02 	sts	0x0246, r23
 2e6:	60 93 45 02 	sts	0x0245, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
 2ea:	80 91 3e 02 	lds	r24, 0x023E
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	80 93 3e 02 	sts	0x023E, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
 2f4:	c3 ff       	sbrs	r28, 3
 2f6:	1c c0       	rjmp	.+56     	; 0x330 <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
 2f8:	1b 9b       	sbis	0x03, 3	; 3
 2fa:	0a c0       	rjmp	.+20     	; 0x310 <__vector_9+0x106>
		{
			ulRudderStart = micros();
 2fc:	7b d1       	rcall	.+758    	; 0x5f4 <_Z6microsv>
 2fe:	60 93 2e 02 	sts	0x022E, r22
 302:	70 93 2f 02 	sts	0x022F, r23
 306:	80 93 30 02 	sts	0x0230, r24
 30a:	90 93 31 02 	sts	0x0231, r25
 30e:	10 c0       	rjmp	.+32     	; 0x330 <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
 310:	71 d1       	rcall	.+738    	; 0x5f4 <_Z6microsv>
 312:	20 91 2e 02 	lds	r18, 0x022E
 316:	30 91 2f 02 	lds	r19, 0x022F
 31a:	62 1b       	sub	r22, r18
 31c:	73 0b       	sbc	r23, r19
 31e:	70 93 44 02 	sts	0x0244, r23
 322:	60 93 43 02 	sts	0x0243, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
 326:	80 91 3e 02 	lds	r24, 0x023E
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	80 93 3e 02 	sts	0x023E, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
 330:	c4 ff       	sbrs	r28, 4
 332:	1c c0       	rjmp	.+56     	; 0x36c <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
 334:	1c 9b       	sbis	0x03, 4	; 3
 336:	0a c0       	rjmp	.+20     	; 0x34c <__vector_9+0x142>
		{
			ulGearStart = micros();
 338:	5d d1       	rcall	.+698    	; 0x5f4 <_Z6microsv>
 33a:	60 93 2a 02 	sts	0x022A, r22
 33e:	70 93 2b 02 	sts	0x022B, r23
 342:	80 93 2c 02 	sts	0x022C, r24
 346:	90 93 2d 02 	sts	0x022D, r25
 34a:	10 c0       	rjmp	.+32     	; 0x36c <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
 34c:	53 d1       	rcall	.+678    	; 0x5f4 <_Z6microsv>
 34e:	20 91 2a 02 	lds	r18, 0x022A
 352:	30 91 2b 02 	lds	r19, 0x022B
 356:	62 1b       	sub	r22, r18
 358:	73 0b       	sbc	r23, r19
 35a:	70 93 42 02 	sts	0x0242, r23
 35e:	60 93 41 02 	sts	0x0241, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
 362:	80 91 3e 02 	lds	r24, 0x023E
 366:	80 61       	ori	r24, 0x10	; 16
 368:	80 93 3e 02 	sts	0x023E, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
 36c:	c5 ff       	sbrs	r28, 5
 36e:	1c c0       	rjmp	.+56     	; 0x3a8 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
 370:	1d 9b       	sbis	0x03, 5	; 3
 372:	0a c0       	rjmp	.+20     	; 0x388 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
 374:	3f d1       	rcall	.+638    	; 0x5f4 <_Z6microsv>
 376:	60 93 26 02 	sts	0x0226, r22
 37a:	70 93 27 02 	sts	0x0227, r23
 37e:	80 93 28 02 	sts	0x0228, r24
 382:	90 93 29 02 	sts	0x0229, r25
 386:	10 c0       	rjmp	.+32     	; 0x3a8 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
 388:	35 d1       	rcall	.+618    	; 0x5f4 <_Z6microsv>
 38a:	20 91 26 02 	lds	r18, 0x0226
 38e:	30 91 27 02 	lds	r19, 0x0227
 392:	62 1b       	sub	r22, r18
 394:	73 0b       	sbc	r23, r19
 396:	70 93 40 02 	sts	0x0240, r23
 39a:	60 93 3f 02 	sts	0x023F, r22
			rxUpdateFlagsShared |= AUX_FLAG;
 39e:	80 91 3e 02 	lds	r24, 0x023E
 3a2:	80 62       	ori	r24, 0x20	; 32
 3a4:	80 93 3e 02 	sts	0x023E, r24
		}
	}
}
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	cf 91       	pop	r28
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0b be       	out	0x3b, r0	; 59
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <_Z7rx_initv>:

void rx_init()
{
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
 3d0:	eb e6       	ldi	r30, 0x6B	; 107
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	81 60       	ori	r24, 0x01	; 1
 3d8:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
 3da:	80 81       	ld	r24, Z
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
 3e0:	80 81       	ld	r24, Z
 3e2:	84 60       	ori	r24, 0x04	; 4
 3e4:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
 3e6:	80 81       	ld	r24, Z
 3e8:	88 60       	ori	r24, 0x08	; 8
 3ea:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
 3ec:	80 81       	ld	r24, Z
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
 3f2:	80 81       	ld	r24, Z
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
 3f8:	e8 e6       	ldi	r30, 0x68	; 104
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	81 60       	ori	r24, 0x01	; 1
 400:	80 83       	st	Z, r24
	sei(); //enable interrupts
 402:	78 94       	sei
 404:	08 95       	ret

00000406 <_Z9rx_updatev>:
	static uint16_t unAuxIn;
	  
	// local copy of update flags
	static uint8_t rxUpdateFlags;
	  
	if(rxUpdateFlagsShared)
 406:	80 91 3e 02 	lds	r24, 0x023E
 40a:	88 23       	and	r24, r24
 40c:	09 f4       	brne	.+2      	; 0x410 <_Z9rx_updatev+0xa>
 40e:	44 c0       	rjmp	.+136    	; 0x498 <_Z9rx_updatev+0x92>
	{
		cli();	//disable all interrupts. Can't have something change now!
 410:	f8 94       	cli
		
		rxUpdateFlags = rxUpdateFlagsShared;	//retrieve data on which channel changed from the volatile variable.
 412:	20 91 3e 02 	lds	r18, 0x023E
 416:	20 93 18 02 	sts	0x0218, r18
		
		if(rxUpdateFlags & THROTTLE_FLAG)
 41a:	20 ff       	sbrs	r18, 0
 41c:	08 c0       	rjmp	.+16     	; 0x42e <_Z9rx_updatev+0x28>
		{
			unThrottleIn = unThrottleInShared;
 41e:	80 91 49 02 	lds	r24, 0x0249
 422:	90 91 4a 02 	lds	r25, 0x024A
 426:	90 93 17 02 	sts	0x0217, r25
 42a:	80 93 16 02 	sts	0x0216, r24
		}
		
		if(rxUpdateFlags & AILERON_FLAG)
 42e:	21 ff       	sbrs	r18, 1
 430:	08 c0       	rjmp	.+16     	; 0x442 <_Z9rx_updatev+0x3c>
		{
			unAileronIn = unAileronInShared;
 432:	80 91 47 02 	lds	r24, 0x0247
 436:	90 91 48 02 	lds	r25, 0x0248
 43a:	90 93 15 02 	sts	0x0215, r25
 43e:	80 93 14 02 	sts	0x0214, r24
		}
		
		if(rxUpdateFlags & ELEVATOR_FLAG)
 442:	22 ff       	sbrs	r18, 2
 444:	08 c0       	rjmp	.+16     	; 0x456 <_Z9rx_updatev+0x50>
		{
			unElevatorIn = unElevatorInShared;
 446:	80 91 45 02 	lds	r24, 0x0245
 44a:	90 91 46 02 	lds	r25, 0x0246
 44e:	90 93 13 02 	sts	0x0213, r25
 452:	80 93 12 02 	sts	0x0212, r24
		}
		
		if(rxUpdateFlags & RUDDER_FLAG)
 456:	23 ff       	sbrs	r18, 3
 458:	08 c0       	rjmp	.+16     	; 0x46a <_Z9rx_updatev+0x64>
		{
			unRudderIn = unRudderInShared;
 45a:	80 91 43 02 	lds	r24, 0x0243
 45e:	90 91 44 02 	lds	r25, 0x0244
 462:	90 93 11 02 	sts	0x0211, r25
 466:	80 93 10 02 	sts	0x0210, r24
		}
		
		if(rxUpdateFlags & GEAR_FLAG)
 46a:	24 ff       	sbrs	r18, 4
 46c:	08 c0       	rjmp	.+16     	; 0x47e <_Z9rx_updatev+0x78>
		{
			unGearIn = unGearInShared;
 46e:	80 91 41 02 	lds	r24, 0x0241
 472:	90 91 42 02 	lds	r25, 0x0242
 476:	90 93 0f 02 	sts	0x020F, r25
 47a:	80 93 0e 02 	sts	0x020E, r24
		}
		
		if(rxUpdateFlags & AUX_FLAG)
 47e:	25 ff       	sbrs	r18, 5
 480:	08 c0       	rjmp	.+16     	; 0x492 <_Z9rx_updatev+0x8c>
		{
			unAuxIn = unAuxInShared;
 482:	80 91 3f 02 	lds	r24, 0x023F
 486:	90 91 40 02 	lds	r25, 0x0240
 48a:	90 93 0d 02 	sts	0x020D, r25
 48e:	80 93 0c 02 	sts	0x020C, r24
		}
		
		rxUpdateFlagsShared = 0;
 492:	10 92 3e 02 	sts	0x023E, r1
		
		sei();	//all needed data is now in local variables. We can safely re-enable interrupts!
 496:	78 94       	sei
		
		}
		
		if(rxUpdateFlags)
 498:	80 91 18 02 	lds	r24, 0x0218
 49c:	88 23       	and	r24, r24
 49e:	91 f1       	breq	.+100    	; 0x504 <_Z9rx_updatev+0xfe>
		{
			rxInputThrottle = unThrottleIn;
 4a0:	80 91 16 02 	lds	r24, 0x0216
 4a4:	90 91 17 02 	lds	r25, 0x0217
 4a8:	90 93 25 02 	sts	0x0225, r25
 4ac:	80 93 24 02 	sts	0x0224, r24
			rxInputAileron = unAileronIn;
 4b0:	80 91 14 02 	lds	r24, 0x0214
 4b4:	90 91 15 02 	lds	r25, 0x0215
 4b8:	90 93 23 02 	sts	0x0223, r25
 4bc:	80 93 22 02 	sts	0x0222, r24
			rxInputElevator = unElevatorIn;
 4c0:	80 91 12 02 	lds	r24, 0x0212
 4c4:	90 91 13 02 	lds	r25, 0x0213
 4c8:	90 93 21 02 	sts	0x0221, r25
 4cc:	80 93 20 02 	sts	0x0220, r24
			rxInputRudder = unRudderIn;
 4d0:	80 91 10 02 	lds	r24, 0x0210
 4d4:	90 91 11 02 	lds	r25, 0x0211
 4d8:	90 93 1f 02 	sts	0x021F, r25
 4dc:	80 93 1e 02 	sts	0x021E, r24
			rxInputGear = unGearIn;
 4e0:	80 91 0e 02 	lds	r24, 0x020E
 4e4:	90 91 0f 02 	lds	r25, 0x020F
 4e8:	90 93 1d 02 	sts	0x021D, r25
 4ec:	80 93 1c 02 	sts	0x021C, r24
			rxInputAux = unAuxIn;
 4f0:	80 91 0c 02 	lds	r24, 0x020C
 4f4:	90 91 0d 02 	lds	r25, 0x020D
 4f8:	90 93 1b 02 	sts	0x021B, r25
 4fc:	80 93 1a 02 	sts	0x021A, r24
				debug_print("\t");
				debug_printf(rx_get_aux());
				debug_print("\n\r");
			}
			
			rxUpdateFlags = 0;
 500:	10 92 18 02 	sts	0x0218, r1
 504:	08 95       	ret

00000506 <_Z15rx_get_throttlev>:
}

int rx_get_throttle()
{
	return rxInputThrottle;
}
 506:	80 91 24 02 	lds	r24, 0x0224
 50a:	90 91 25 02 	lds	r25, 0x0225
 50e:	08 95       	ret

00000510 <_Z14rx_get_aileronv>:

float rx_get_aileron()
{
	return rxInputAileron;
 510:	60 91 22 02 	lds	r22, 0x0222
 514:	70 91 23 02 	lds	r23, 0x0223
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	3c c1       	rjmp	.+632    	; 0x796 <__floatunsisf>
}
 51e:	08 95       	ret

00000520 <_Z15rx_get_elevatorv>:

float rx_get_elevator()
{
	return rxInputElevator;
 520:	60 91 20 02 	lds	r22, 0x0220
 524:	70 91 21 02 	lds	r23, 0x0221
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	34 c1       	rjmp	.+616    	; 0x796 <__floatunsisf>
}
 52e:	08 95       	ret

00000530 <_Z13rx_get_rudderv>:

float rx_get_rudder()
{
	return rxInputRudder;
 530:	60 91 1e 02 	lds	r22, 0x021E
 534:	70 91 1f 02 	lds	r23, 0x021F
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2c c1       	rjmp	.+600    	; 0x796 <__floatunsisf>
}
 53e:	08 95       	ret

00000540 <_Z11rx_get_gearv>:

float rx_get_gear()
{
	return rxInputGear;
 540:	60 91 1c 02 	lds	r22, 0x021C
 544:	70 91 1d 02 	lds	r23, 0x021D
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	24 c1       	rjmp	.+584    	; 0x796 <__floatunsisf>
}
 54e:	08 95       	ret

00000550 <_Z10rx_get_auxv>:

float rx_get_aux()
{
	return rxInputAux;
 550:	60 91 1a 02 	lds	r22, 0x021A
 554:	70 91 1b 02 	lds	r23, 0x021B
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	1c c1       	rjmp	.+568    	; 0x796 <__floatunsisf>
 55e:	08 95       	ret

00000560 <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	80 91 4c 02 	lds	r24, 0x024C
 57a:	90 91 4d 02 	lds	r25, 0x024D
 57e:	a0 91 4e 02 	lds	r26, 0x024E
 582:	b0 91 4f 02 	lds	r27, 0x024F
 586:	30 91 4b 02 	lds	r19, 0x024B
 58a:	23 e0       	ldi	r18, 0x03	; 3
 58c:	23 0f       	add	r18, r19
 58e:	2d 37       	cpi	r18, 0x7D	; 125
 590:	20 f4       	brcc	.+8      	; 0x59a <__vector_23+0x3a>
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	a1 1d       	adc	r26, r1
 596:	b1 1d       	adc	r27, r1
 598:	05 c0       	rjmp	.+10     	; 0x5a4 <__vector_23+0x44>
 59a:	26 e8       	ldi	r18, 0x86	; 134
 59c:	23 0f       	add	r18, r19
 59e:	02 96       	adiw	r24, 0x02	; 2
 5a0:	a1 1d       	adc	r26, r1
 5a2:	b1 1d       	adc	r27, r1
 5a4:	20 93 4b 02 	sts	0x024B, r18
 5a8:	80 93 4c 02 	sts	0x024C, r24
 5ac:	90 93 4d 02 	sts	0x024D, r25
 5b0:	a0 93 4e 02 	sts	0x024E, r26
 5b4:	b0 93 4f 02 	sts	0x024F, r27
 5b8:	80 91 50 02 	lds	r24, 0x0250
 5bc:	90 91 51 02 	lds	r25, 0x0251
 5c0:	a0 91 52 02 	lds	r26, 0x0252
 5c4:	b0 91 53 02 	lds	r27, 0x0253
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	a1 1d       	adc	r26, r1
 5cc:	b1 1d       	adc	r27, r1
 5ce:	80 93 50 02 	sts	0x0250, r24
 5d2:	90 93 51 02 	sts	0x0251, r25
 5d6:	a0 93 52 02 	sts	0x0252, r26
 5da:	b0 93 53 02 	sts	0x0253, r27
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	3f 91       	pop	r19
 5e8:	2f 91       	pop	r18
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
 5f4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 5f6:	f8 94       	cli
	m = timer0_overflow_count;
 5f8:	80 91 50 02 	lds	r24, 0x0250
 5fc:	90 91 51 02 	lds	r25, 0x0251
 600:	a0 91 52 02 	lds	r26, 0x0252
 604:	b0 91 53 02 	lds	r27, 0x0253
	t = TCNT0;
 608:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 60a:	a8 9b       	sbis	0x15, 0	; 21
 60c:	02 c0       	rjmp	.+4      	; 0x612 <_Z6microsv+0x1e>
 60e:	2f 3f       	cpi	r18, 0xFF	; 255
 610:	a9 f4       	brne	.+42     	; 0x63c <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 612:	3f bf       	out	0x3f, r19	; 63
	
	sei();
 614:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 616:	ba 2f       	mov	r27, r26
 618:	a9 2f       	mov	r26, r25
 61a:	98 2f       	mov	r25, r24
 61c:	88 27       	eor	r24, r24
 61e:	82 0f       	add	r24, r18
 620:	91 1d       	adc	r25, r1
 622:	a1 1d       	adc	r26, r1
 624:	b1 1d       	adc	r27, r1
 626:	bc 01       	movw	r22, r24
 628:	cd 01       	movw	r24, r26
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	a1 1d       	adc	r26, r1
 640:	b1 1d       	adc	r27, r1
 642:	e7 cf       	rjmp	.-50     	; 0x612 <_Z6microsv+0x1e>

00000644 <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
 64a:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	85 bd       	out	0x25, r24	; 37
 650:	08 95       	ret

00000652 <_Z10USART_initii>:
 */ 
#include "usart.h"


void USART_init(int usartNum, int baudRate)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	ec 01       	movw	r28, r24
	int baudPrescaler = (((F_CPU / (baudRate * 16UL))) - 1);
 658:	cb 01       	movw	r24, r22
 65a:	aa 27       	eor	r26, r26
 65c:	97 fd       	sbrc	r25, 7
 65e:	a0 95       	com	r26
 660:	ba 2f       	mov	r27, r26
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	aa 1f       	adc	r26, r26
 668:	bb 1f       	adc	r27, r27
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	aa 1f       	adc	r26, r26
 670:	bb 1f       	adc	r27, r27
 672:	9c 01       	movw	r18, r24
 674:	ad 01       	movw	r20, r26
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	44 1f       	adc	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	22 0f       	add	r18, r18
 680:	33 1f       	adc	r19, r19
 682:	44 1f       	adc	r20, r20
 684:	55 1f       	adc	r21, r21
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	74 e2       	ldi	r23, 0x24	; 36
 68a:	84 ef       	ldi	r24, 0xF4	; 244
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	e9 d0       	rcall	.+466    	; 0x862 <__udivmodsi4>
 690:	21 50       	subi	r18, 0x01	; 1
 692:	31 09       	sbc	r19, r1
	
	if(usartNum == 0)
 694:	20 97       	sbiw	r28, 0x00	; 0
 696:	59 f4       	brne	.+22     	; 0x6ae <_Z10USART_initii+0x5c>
	{
		UBRR0H = (uint8_t)(baudPrescaler>>8);
 698:	30 93 c5 00 	sts	0x00C5, r19
		UBRR0L = (uint8_t)(baudPrescaler);
 69c:	20 93 c4 00 	sts	0x00C4, r18
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 6a0:	88 e1       	ldi	r24, 0x18	; 24
 6a2:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	80 93 c2 00 	sts	0x00C2, r24
 6ac:	28 c0       	rjmp	.+80     	; 0x6fe <_Z10USART_initii+0xac>
	}
	else if(usartNum == 1)
 6ae:	c1 30       	cpi	r28, 0x01	; 1
 6b0:	d1 05       	cpc	r29, r1
 6b2:	59 f4       	brne	.+22     	; 0x6ca <_Z10USART_initii+0x78>
	{
		UBRR1H = (uint8_t)(baudPrescaler>>8);
 6b4:	30 93 cd 00 	sts	0x00CD, r19
		UBRR1L = (uint8_t)(baudPrescaler);
 6b8:	20 93 cc 00 	sts	0x00CC, r18
		UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 6bc:	88 e1       	ldi	r24, 0x18	; 24
 6be:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C = ((1<<UCSZ10)|(1<<UCSZ11));
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	80 93 ca 00 	sts	0x00CA, r24
 6c8:	1a c0       	rjmp	.+52     	; 0x6fe <_Z10USART_initii+0xac>
	}
	else if(usartNum == 2)
 6ca:	c2 30       	cpi	r28, 0x02	; 2
 6cc:	d1 05       	cpc	r29, r1
 6ce:	59 f4       	brne	.+22     	; 0x6e6 <_Z10USART_initii+0x94>
	{
		UBRR2H = (uint8_t)(baudPrescaler>>8);
 6d0:	30 93 d5 00 	sts	0x00D5, r19
		UBRR2L = (uint8_t)(baudPrescaler);
 6d4:	20 93 d4 00 	sts	0x00D4, r18
		UCSR2B = (1<<RXEN2)|(1<<TXEN2);
 6d8:	88 e1       	ldi	r24, 0x18	; 24
 6da:	80 93 d1 00 	sts	0x00D1, r24
		UCSR2C = ((1<<UCSZ20)|(1<<UCSZ21));
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	80 93 d2 00 	sts	0x00D2, r24
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <_Z10USART_initii+0xac>
	}
	else if(usartNum == 3)
 6e6:	23 97       	sbiw	r28, 0x03	; 3
 6e8:	51 f4       	brne	.+20     	; 0x6fe <_Z10USART_initii+0xac>
	{
		UBRR3H = (uint8_t)(baudPrescaler>>8);
 6ea:	30 93 35 01 	sts	0x0135, r19
		UBRR3L = (uint8_t)(baudPrescaler);
 6ee:	20 93 34 01 	sts	0x0134, r18
		UCSR3B = (1<<RXEN3)|(1<<TXEN3);
 6f2:	88 e1       	ldi	r24, 0x18	; 24
 6f4:	80 93 31 01 	sts	0x0131, r24
		UCSR3C = ((1<<UCSZ30)|(1<<UCSZ31));
 6f8:	86 e0       	ldi	r24, 0x06	; 6
 6fa:	80 93 32 01 	sts	0x0132, r24
	}
	
}
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <_Z10initialisev>:
    }
}

void initialise()
{
	USART_init(USART_PC,9600);
 704:	60 e8       	ldi	r22, 0x80	; 128
 706:	75 e2       	ldi	r23, 0x25	; 37
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	a2 df       	rcall	.-188    	; 0x652 <_Z10USART_initii>
	initTimers();
 70e:	9a df       	rcall	.-204    	; 0x644 <_Z10initTimersv>
	gps_init();
 710:	0a dd       	rcall	.-1516   	; 0x126 <_Z8gps_initv>
	rx_init();
 712:	5e ce       	rjmp	.-836    	; 0x3d0 <_Z7rx_initv>
 714:	08 95       	ret

00000716 <main>:
float compass_get_heading();	//returns current heading, formatted as degrees relative to North (0-360)


int main(void)
{
	initialise();
 716:	f6 df       	rcall	.-20     	; 0x704 <_Z10initialisev>
	debug_println("Starting...");
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	92 e0       	ldi	r25, 0x02	; 2
 71c:	03 dd       	rcall	.-1530   	; 0x124 <_Z13debug_printlnPKc>
	quad_output_init();
 71e:	05 dd       	rcall	.-1526   	; 0x12a <_Z16quad_output_initv>
    while(1)
    {
		rx_update();
 720:	72 de       	rcall	.-796    	; 0x406 <_Z9rx_updatev>
		quad_output_passthrough(true,true,true,true,true,true);
 722:	ee 24       	eor	r14, r14
 724:	e3 94       	inc	r14
 726:	01 e0       	ldi	r16, 0x01	; 1
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	2f dd       	rcall	.-1442   	; 0x190 <_Z23quad_output_passthroughbbbbbb>
 732:	f6 cf       	rjmp	.-20     	; 0x720 <main+0xa>

00000734 <__fixsfsi>:
 734:	04 d0       	rcall	.+8      	; 0x73e <__fixunssfsi>
 736:	68 94       	set
 738:	b1 11       	cpse	r27, r1
 73a:	8d c0       	rjmp	.+282    	; 0x856 <__fp_szero>
 73c:	08 95       	ret

0000073e <__fixunssfsi>:
 73e:	70 d0       	rcall	.+224    	; 0x820 <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x26>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	90 f0       	brcs	.+36     	; 0x76a <__fixunssfsi+0x2c>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	a0 f0       	brcs	.+40     	; 0x776 <__fixunssfsi+0x38>
 74e:	d1 f0       	breq	.+52     	; 0x784 <__fixunssfsi+0x46>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x22>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x12>
 75e:	12 c0       	rjmp	.+36     	; 0x784 <__fixunssfsi+0x46>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	81 f0       	breq	.+32     	; 0x784 <__fixunssfsi+0x46>
 764:	77 d0       	rcall	.+238    	; 0x854 <__fp_zero>
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	08 95       	ret
 76a:	74 c0       	rjmp	.+232    	; 0x854 <__fp_zero>
 76c:	67 2f       	mov	r22, r23
 76e:	78 2f       	mov	r23, r24
 770:	88 27       	eor	r24, r24
 772:	b8 5f       	subi	r27, 0xF8	; 248
 774:	39 f0       	breq	.+14     	; 0x784 <__fixunssfsi+0x46>
 776:	b9 3f       	cpi	r27, 0xF9	; 249
 778:	cc f3       	brlt	.-14     	; 0x76c <__fixunssfsi+0x2e>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b3 95       	inc	r27
 782:	d9 f7       	brne	.-10     	; 0x77a <__fixunssfsi+0x3c>
 784:	3e f4       	brtc	.+14     	; 0x794 <__fixunssfsi+0x56>
 786:	90 95       	com	r25
 788:	80 95       	com	r24
 78a:	70 95       	com	r23
 78c:	61 95       	neg	r22
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	08 95       	ret

00000796 <__floatunsisf>:
 796:	e8 94       	clt
 798:	09 c0       	rjmp	.+18     	; 0x7ac <__floatsisf+0x12>

0000079a <__floatsisf>:
 79a:	97 fb       	bst	r25, 7
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__floatsisf+0x12>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	99 23       	and	r25, r25
 7ae:	a9 f0       	breq	.+42     	; 0x7da <__floatsisf+0x40>
 7b0:	f9 2f       	mov	r31, r25
 7b2:	96 e9       	ldi	r25, 0x96	; 150
 7b4:	bb 27       	eor	r27, r27
 7b6:	93 95       	inc	r25
 7b8:	f6 95       	lsr	r31
 7ba:	87 95       	ror	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f1 11       	cpse	r31, r1
 7c4:	f8 cf       	rjmp	.-16     	; 0x7b6 <__floatsisf+0x1c>
 7c6:	fa f4       	brpl	.+62     	; 0x806 <__floatsisf+0x6c>
 7c8:	bb 0f       	add	r27, r27
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__floatsisf+0x36>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	1b c0       	rjmp	.+54     	; 0x806 <__floatsisf+0x6c>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	16 c0       	rjmp	.+44     	; 0x806 <__floatsisf+0x6c>
 7da:	88 23       	and	r24, r24
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__floatsisf+0x48>
 7de:	96 e9       	ldi	r25, 0x96	; 150
 7e0:	11 c0       	rjmp	.+34     	; 0x804 <__floatsisf+0x6a>
 7e2:	77 23       	and	r23, r23
 7e4:	21 f0       	breq	.+8      	; 0x7ee <__floatsisf+0x54>
 7e6:	9e e8       	ldi	r25, 0x8E	; 142
 7e8:	87 2f       	mov	r24, r23
 7ea:	76 2f       	mov	r23, r22
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__floatsisf+0x5e>
 7ee:	66 23       	and	r22, r22
 7f0:	71 f0       	breq	.+28     	; 0x80e <__floatsisf+0x74>
 7f2:	96 e8       	ldi	r25, 0x86	; 134
 7f4:	86 2f       	mov	r24, r22
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	2a f0       	brmi	.+10     	; 0x806 <__floatsisf+0x6c>
 7fc:	9a 95       	dec	r25
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	da f7       	brpl	.-10     	; 0x7fc <__floatsisf+0x62>
 806:	88 0f       	add	r24, r24
 808:	96 95       	lsr	r25
 80a:	87 95       	ror	r24
 80c:	97 f9       	bld	r25, 7
 80e:	08 95       	ret

00000810 <__fp_split3>:
 810:	57 fd       	sbrc	r21, 7
 812:	90 58       	subi	r25, 0x80	; 128
 814:	44 0f       	add	r20, r20
 816:	55 1f       	adc	r21, r21
 818:	59 f0       	breq	.+22     	; 0x830 <__fp_splitA+0x10>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	71 f0       	breq	.+28     	; 0x83a <__fp_splitA+0x1a>
 81e:	47 95       	ror	r20

00000820 <__fp_splitA>:
 820:	88 0f       	add	r24, r24
 822:	97 fb       	bst	r25, 7
 824:	99 1f       	adc	r25, r25
 826:	61 f0       	breq	.+24     	; 0x840 <__fp_splitA+0x20>
 828:	9f 3f       	cpi	r25, 0xFF	; 255
 82a:	79 f0       	breq	.+30     	; 0x84a <__fp_splitA+0x2a>
 82c:	87 95       	ror	r24
 82e:	08 95       	ret
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	55 1f       	adc	r21, r21
 838:	f2 cf       	rjmp	.-28     	; 0x81e <__fp_split3+0xe>
 83a:	46 95       	lsr	r20
 83c:	f1 df       	rcall	.-30     	; 0x820 <__fp_splitA>
 83e:	08 c0       	rjmp	.+16     	; 0x850 <__fp_splitA+0x30>
 840:	16 16       	cp	r1, r22
 842:	17 06       	cpc	r1, r23
 844:	18 06       	cpc	r1, r24
 846:	99 1f       	adc	r25, r25
 848:	f1 cf       	rjmp	.-30     	; 0x82c <__fp_splitA+0xc>
 84a:	86 95       	lsr	r24
 84c:	71 05       	cpc	r23, r1
 84e:	61 05       	cpc	r22, r1
 850:	08 94       	sec
 852:	08 95       	ret

00000854 <__fp_zero>:
 854:	e8 94       	clt

00000856 <__fp_szero>:
 856:	bb 27       	eor	r27, r27
 858:	66 27       	eor	r22, r22
 85a:	77 27       	eor	r23, r23
 85c:	cb 01       	movw	r24, r22
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret

00000862 <__udivmodsi4>:
 862:	a1 e2       	ldi	r26, 0x21	; 33
 864:	1a 2e       	mov	r1, r26
 866:	aa 1b       	sub	r26, r26
 868:	bb 1b       	sub	r27, r27
 86a:	fd 01       	movw	r30, r26
 86c:	0d c0       	rjmp	.+26     	; 0x888 <__udivmodsi4_ep>

0000086e <__udivmodsi4_loop>:
 86e:	aa 1f       	adc	r26, r26
 870:	bb 1f       	adc	r27, r27
 872:	ee 1f       	adc	r30, r30
 874:	ff 1f       	adc	r31, r31
 876:	a2 17       	cp	r26, r18
 878:	b3 07       	cpc	r27, r19
 87a:	e4 07       	cpc	r30, r20
 87c:	f5 07       	cpc	r31, r21
 87e:	20 f0       	brcs	.+8      	; 0x888 <__udivmodsi4_ep>
 880:	a2 1b       	sub	r26, r18
 882:	b3 0b       	sbc	r27, r19
 884:	e4 0b       	sbc	r30, r20
 886:	f5 0b       	sbc	r31, r21

00000888 <__udivmodsi4_ep>:
 888:	66 1f       	adc	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	1a 94       	dec	r1
 892:	69 f7       	brne	.-38     	; 0x86e <__udivmodsi4_loop>
 894:	60 95       	com	r22
 896:	70 95       	com	r23
 898:	80 95       	com	r24
 89a:	90 95       	com	r25
 89c:	9b 01       	movw	r18, r22
 89e:	ac 01       	movw	r20, r24
 8a0:	bd 01       	movw	r22, r26
 8a2:	cf 01       	movw	r24, r30
 8a4:	08 95       	ret

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
