
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  0000184e  000018e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800228  00800228  0000190a  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c8  00000000  00000000  000019b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a75  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015b1  00000000  00000000  000067ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000262a  00000000  00000000  00007d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c0c  00000000  00000000  0000a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000155d  00000000  00000000  0000afd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003014  00000000  00000000  0000c531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d8  00000000  00000000  0000f545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c1       	rjmp	.+522    	; 0x20c <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	7c c4       	rjmp	.+2296   	; 0x91e <__vector_9>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	60 c5       	rjmp	.+2752   	; 0xb1e <__vector_23>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <__vector_9+0x14e>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <_Z10getHeadingv+0x130>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <_Z15adxl345_getdataPdS_S_+0xf4>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <__do_clear_bss>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__zero_reg__+0x15>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <i2c_rep_start+0x8>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	d1 e2       	ldi	r29, 0x21	; 33
     214:	de bf       	out	0x3e, r29	; 62
     216:	cd bf       	out	0x3d, r28	; 61
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	0c bf       	out	0x3c, r16	; 60

0000021c <__do_copy_data>:
     21c:	12 e0       	ldi	r17, 0x02	; 2
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	ee e4       	ldi	r30, 0x4E	; 78
     224:	f8 e1       	ldi	r31, 0x18	; 24
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0b bf       	out	0x3b, r16	; 59
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__do_copy_data+0x14>
     22c:	07 90       	elpm	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	a8 32       	cpi	r26, 0x28	; 40
     232:	b1 07       	cpc	r27, r17
     234:	d9 f7       	brne	.-10     	; 0x22c <__do_copy_data+0x10>

00000236 <__do_clear_bss>:
     236:	22 e0       	ldi	r18, 0x02	; 2
     238:	a8 e2       	ldi	r26, 0x28	; 40
     23a:	b2 e0       	ldi	r27, 0x02	; 2
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	a1 37       	cpi	r26, 0x71	; 113
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
     246:	b3 d5       	rcall	.+2918   	; 0xdae <main>
     248:	0c 94 25 0c 	jmp	0x184a	; 0x184a <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     24e:	00 c0       	rjmp	.+0      	; 0x250 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     250:	00 c0       	rjmp	.+0      	; 0x252 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     252:	00 c0       	rjmp	.+0      	; 0x254 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     254:	00 c0       	rjmp	.+0      	; 0x256 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     256:	00 c0       	rjmp	.+0      	; 0x258 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     258:	00 c0       	rjmp	.+0      	; 0x25a <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     25a:	00 00       	nop
	ret          ; 3   "
     25c:	08 95       	ret

0000025e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     25e:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     260:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     262:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     264:	58 98       	cbi	0x0b, 0	; 11
	ret
     266:	08 95       	ret

00000268 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     268:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     26a:	f1 df       	rcall	.-30     	; 0x24e <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     26c:	1d c0       	rjmp	.+58     	; 0x2a8 <i2c_write>
	ret
     26e:	08 95       	ret

00000270 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     270:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     272:	ed df       	rcall	.-38     	; 0x24e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     274:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     276:	eb df       	rcall	.-42     	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     278:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     27a:	e9 df       	rcall	.-46     	; 0x24e <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     27c:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     27e:	e7 df       	rcall	.-50     	; 0x24e <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     280:	13 c0       	rjmp	.+38     	; 0x2a8 <i2c_write>
	ret
     282:	08 95       	ret

00000284 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     284:	08 2e       	mov	r0, r24

00000286 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     286:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     288:	e2 df       	rcall	.-60     	; 0x24e <i2c_delay_T2>
	mov	r24,__tmp_reg__
     28a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     28c:	0d d0       	rcall	.+26     	; 0x2a8 <i2c_write>
	tst	r24		;if device not busy -> done
     28e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     290:	11 f0       	breq	.+4      	; 0x296 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     292:	02 d0       	rcall	.+4      	; 0x298 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     294:	f8 cf       	rjmp	.-16     	; 0x286 <i2c_start_wait1>

00000296 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     296:	08 95       	ret

00000298 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     298:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     29a:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29c:	d8 df       	rcall	.-80     	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     29e:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a0:	d6 df       	rcall	.-84     	; 0x24e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     2a2:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a4:	d4 cf       	rjmp	.-88     	; 0x24e <i2c_delay_T2>
	ret
     2a6:	08 95       	ret

000002a8 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     2a8:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     2aa:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <i2c_write_first>

000002ae <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     2ae:	88 0f       	add	r24, r24

000002b0 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     2b2:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     2b4:	18 f4       	brcc	.+6      	; 0x2bc <i2c_write_low>
	nop
     2b6:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     2b8:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <i2c_write_high>

000002bc <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     2bc:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <i2c_write_high>

000002c0 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     2c0:	c6 df       	rcall	.-116    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2c2:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c4:	c4 df       	rcall	.-120    	; 0x24e <i2c_delay_T2>
	rjmp	i2c_write_bit
     2c6:	f3 cf       	rjmp	.-26     	; 0x2ae <i2c_write_bit>

000002c8 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     2c8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     2ca:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2cc:	c0 df       	rcall	.-128    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2ce:	50 98       	cbi	0x0a, 0	; 10

000002d0 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2d0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <i2c_ack_wait>
	
	clr	r24		;return 0
     2d4:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2d6:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2d8:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2da:	b9 df       	rcall	.-142    	; 0x24e <i2c_delay_T2>
	clr	r25
     2dc:	99 27       	eor	r25, r25
	ret
     2de:	08 95       	ret

000002e0 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2e0:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <i2c_read>

000002e4 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2e4:	81 e0       	ldi	r24, 0x01	; 1

000002e6 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2e6:	71 e0       	ldi	r23, 0x01	; 1

000002e8 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2e8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2ea:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2ec:	b0 df       	rcall	.-160    	; 0x24e <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2ee:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2f0:	ae df       	rcall	.-164    	; 0x24e <i2c_delay_T2>

000002f2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2f2:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2f6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2f8:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2fa:	08 94       	sec
	
	rol	r23		;store bit
     2fc:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     2fe:	a0 f7       	brcc	.-24     	; 0x2e8 <i2c_read_bit>

00000300 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     300:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     302:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     304:	11 f0       	breq	.+4      	; 0x30a <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     306:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     308:	01 c0       	rjmp	.+2      	; 0x30c <i2c_put_ack_high>

0000030a <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     30a:	51 9a       	sbi	0x0a, 1	; 10

0000030c <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     30c:	a0 df       	rcall	.-192    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     30e:	50 98       	cbi	0x0a, 0	; 10

00000310 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     310:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     312:	fe cf       	rjmp	.-4      	; 0x310 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     314:	9c df       	rcall	.-200    	; 0x24e <i2c_delay_T2>
	mov	r24,r23
     316:	87 2f       	mov	r24, r23
	clr	r25
     318:	99 27       	eor	r25, r25
	ret
     31a:	08 95       	ret

0000031c <_Z12adxl345_initv>:
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
	i2c_write(0x20);
	i2c_write(offsetz);

	i2c_stop();
}
     31c:	a0 df       	rcall	.-192    	; 0x25e <i2c_init>
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <_Z12adxl345_initv+0x4>
     324:	00 00       	nop
     326:	83 ef       	ldi	r24, 0xF3	; 243
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_Z12adxl345_initv+0xe>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <_Z12adxl345_initv+0x14>
     330:	00 00       	nop
     332:	86 ea       	ldi	r24, 0xA6	; 166
     334:	9d df       	rcall	.-198    	; 0x270 <i2c_rep_start>
     336:	81 e3       	ldi	r24, 0x31	; 49
     338:	b7 df       	rcall	.-146    	; 0x2a8 <i2c_write>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	b5 df       	rcall	.-150    	; 0x2a8 <i2c_write>
     33e:	86 ea       	ldi	r24, 0xA6	; 166
     340:	97 df       	rcall	.-210    	; 0x270 <i2c_rep_start>
     342:	8d e2       	ldi	r24, 0x2D	; 45
     344:	b1 df       	rcall	.-158    	; 0x2a8 <i2c_write>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	af df       	rcall	.-162    	; 0x2a8 <i2c_write>
     34a:	86 ea       	ldi	r24, 0xA6	; 166
     34c:	91 df       	rcall	.-222    	; 0x270 <i2c_rep_start>
     34e:	8d e2       	ldi	r24, 0x2D	; 45
     350:	ab df       	rcall	.-170    	; 0x2a8 <i2c_write>
     352:	86 e1       	ldi	r24, 0x16	; 22
     354:	a9 df       	rcall	.-174    	; 0x2a8 <i2c_write>
     356:	86 ea       	ldi	r24, 0xA6	; 166
     358:	8b df       	rcall	.-234    	; 0x270 <i2c_rep_start>
     35a:	8d e2       	ldi	r24, 0x2D	; 45
     35c:	a5 df       	rcall	.-182    	; 0x2a8 <i2c_write>
     35e:	88 e0       	ldi	r24, 0x08	; 8
     360:	a3 df       	rcall	.-186    	; 0x2a8 <i2c_write>
     362:	86 ea       	ldi	r24, 0xA6	; 166
     364:	85 df       	rcall	.-246    	; 0x270 <i2c_rep_start>
     366:	8e e2       	ldi	r24, 0x2E	; 46
     368:	9f df       	rcall	.-194    	; 0x2a8 <i2c_write>
     36a:	80 e8       	ldi	r24, 0x80	; 128
     36c:	9d df       	rcall	.-198    	; 0x2a8 <i2c_write>
     36e:	87 e8       	ldi	r24, 0x87	; 135
     370:	93 e1       	ldi	r25, 0x13	; 19
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <_Z12adxl345_initv+0x56>
     376:	00 c0       	rjmp	.+0      	; 0x378 <_Z12adxl345_initv+0x5c>
     378:	00 00       	nop
     37a:	8e cf       	rjmp	.-228    	; 0x298 <i2c_stop>
     37c:	08 95       	ret

0000037e <_Z24adxl345_waitfordatareadyv>:
 * wait for xyz data to be ready
 */
void adxl345_waitfordataready() {
	//wait until data is ready
	unsigned char status = 0;
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
     37e:	86 ea       	ldi	r24, 0xA6	; 166
     380:	81 df       	rcall	.-254    	; 0x284 <i2c_start_wait>
	do {
		i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     382:	86 ea       	ldi	r24, 0xA6	; 166
     384:	75 df       	rcall	.-278    	; 0x270 <i2c_rep_start>
		i2c_write(0x30); //status register
     386:	80 e3       	ldi	r24, 0x30	; 48
     388:	8f df       	rcall	.-226    	; 0x2a8 <i2c_write>
		i2c_rep_start(ADXL345_ADDR | I2C_READ);
     38a:	87 ea       	ldi	r24, 0xA7	; 167
     38c:	71 df       	rcall	.-286    	; 0x270 <i2c_rep_start>
		status = i2c_readNak();
     38e:	a8 df       	rcall	.-176    	; 0x2e0 <i2c_readNak>
 */
void adxl345_waitfordataready() {
	//wait until data is ready
	unsigned char status = 0;
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
	do {
     390:	88 23       	and	r24, r24
     392:	bc f7       	brge	.-18     	; 0x382 <_Z24adxl345_waitfordatareadyv+0x4>
		i2c_write(0x30); //status register
		i2c_rep_start(ADXL345_ADDR | I2C_READ);
		status = i2c_readNak();
		status &= 0b10000000;
	} while (!status);
}
     394:	08 95       	ret

00000396 <_Z15adxl345_getdataPdS_S_>:

/*
 * get xyz accellerometer values
 */
void adxl345_getdata(double *ax, double *ay, double *az) {
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	7c 01       	movw	r14, r24
     3b0:	8b 01       	movw	r16, r22
     3b2:	ea 01       	movw	r28, r20
	int16_t axraw = 0;
	int16_t ayraw = 0;
	int16_t azraw = 0;

	adxl345_waitfordataready();
     3b4:	e4 df       	rcall	.-56     	; 0x37e <_Z24adxl345_waitfordatareadyv>

	//read axis data
	int16_t temp;
	//X
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
     3b6:	86 ea       	ldi	r24, 0xA6	; 166
     3b8:	65 df       	rcall	.-310    	; 0x284 <i2c_start_wait>
	i2c_write(0x32);
     3ba:	82 e3       	ldi	r24, 0x32	; 50
     3bc:	75 df       	rcall	.-278    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3be:	87 ea       	ldi	r24, 0xA7	; 167
     3c0:	57 df       	rcall	.-338    	; 0x270 <i2c_rep_start>
	axraw = i2c_readNak();
     3c2:	8e df       	rcall	.-228    	; 0x2e0 <i2c_readNak>
     3c4:	a8 2e       	mov	r10, r24
     3c6:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3c8:	86 ea       	ldi	r24, 0xA6	; 166
     3ca:	52 df       	rcall	.-348    	; 0x270 <i2c_rep_start>
	i2c_write(0x32+1);
     3cc:	83 e3       	ldi	r24, 0x33	; 51
     3ce:	6c df       	rcall	.-296    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3d0:	87 ea       	ldi	r24, 0xA7	; 167
     3d2:	4e df       	rcall	.-356    	; 0x270 <i2c_rep_start>
	temp = i2c_readNak();
     3d4:	85 df       	rcall	.-246    	; 0x2e0 <i2c_readNak>
     3d6:	c8 2e       	mov	r12, r24
     3d8:	d1 2c       	mov	r13, r1
	axraw += (temp<<8);
     3da:	dc 2c       	mov	r13, r12
     3dc:	cc 24       	eor	r12, r12
     3de:	ca 0c       	add	r12, r10
     3e0:	db 1c       	adc	r13, r11
	//Y
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3e2:	86 ea       	ldi	r24, 0xA6	; 166
     3e4:	45 df       	rcall	.-374    	; 0x270 <i2c_rep_start>
	i2c_write(0x34);
     3e6:	84 e3       	ldi	r24, 0x34	; 52
     3e8:	5f df       	rcall	.-322    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3ea:	87 ea       	ldi	r24, 0xA7	; 167
     3ec:	41 df       	rcall	.-382    	; 0x270 <i2c_rep_start>
	ayraw = i2c_readNak();
     3ee:	78 df       	rcall	.-272    	; 0x2e0 <i2c_readNak>
     3f0:	a8 2e       	mov	r10, r24
     3f2:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3f4:	86 ea       	ldi	r24, 0xA6	; 166
     3f6:	3c df       	rcall	.-392    	; 0x270 <i2c_rep_start>
	i2c_write(0x34+1);
     3f8:	85 e3       	ldi	r24, 0x35	; 53
     3fa:	56 df       	rcall	.-340    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3fc:	87 ea       	ldi	r24, 0xA7	; 167
     3fe:	38 df       	rcall	.-400    	; 0x270 <i2c_rep_start>
	temp = i2c_readNak();
     400:	6f df       	rcall	.-290    	; 0x2e0 <i2c_readNak>
     402:	88 2e       	mov	r8, r24
     404:	91 2c       	mov	r9, r1
	ayraw += (temp<<8);
     406:	98 2c       	mov	r9, r8
     408:	88 24       	eor	r8, r8
     40a:	8a 0c       	add	r8, r10
     40c:	9b 1c       	adc	r9, r11
	//Z
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     40e:	86 ea       	ldi	r24, 0xA6	; 166
     410:	2f df       	rcall	.-418    	; 0x270 <i2c_rep_start>
	i2c_write(0x36);
     412:	86 e3       	ldi	r24, 0x36	; 54
     414:	49 df       	rcall	.-366    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     416:	87 ea       	ldi	r24, 0xA7	; 167
     418:	2b df       	rcall	.-426    	; 0x270 <i2c_rep_start>
	azraw = i2c_readNak();
     41a:	62 df       	rcall	.-316    	; 0x2e0 <i2c_readNak>
     41c:	a8 2e       	mov	r10, r24
     41e:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     420:	86 ea       	ldi	r24, 0xA6	; 166
     422:	26 df       	rcall	.-436    	; 0x270 <i2c_rep_start>
	i2c_write(0x36+1);
     424:	87 e3       	ldi	r24, 0x37	; 55
     426:	40 df       	rcall	.-384    	; 0x2a8 <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     428:	87 ea       	ldi	r24, 0xA7	; 167
     42a:	22 df       	rcall	.-444    	; 0x270 <i2c_rep_start>
	temp = i2c_readNak();
     42c:	59 df       	rcall	.-334    	; 0x2e0 <i2c_readNak>
     42e:	90 e0       	ldi	r25, 0x00	; 0
	azraw += (temp<<8);
     430:	98 2f       	mov	r25, r24
     432:	88 27       	eor	r24, r24
     434:	a8 0e       	add	r10, r24
     436:	b9 1e       	adc	r11, r25

	i2c_stop();
     438:	2f df       	rcall	.-418    	; 0x298 <i2c_stop>
	#if ADXL345_CALIBRATED == 1
	*ax = (axraw/(double)ADXL345_CALRANGEVALX) + (double)ADXL345_CALOFFSETX;
	*zy = (ayraw/(double)ADXL345_CALRANGEVALY) + (double)ADXL345_CALOFFSETY;
	*az = (azraw/(double)ADXL345_CALRANGEVALZ) + (double)ADXL345_CALOFFSETZ;
	#else
	*ax = (axraw/(double)ADXL345_RANGEVAL);
     43a:	b6 01       	movw	r22, r12
     43c:	88 27       	eor	r24, r24
     43e:	77 fd       	sbrc	r23, 7
     440:	80 95       	com	r24
     442:	98 2f       	mov	r25, r24
     444:	25 d6       	rcall	.+3146   	; 0x1090 <__floatsisf>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	40 e8       	ldi	r20, 0x80	; 128
     44c:	5b e3       	ldi	r21, 0x3B	; 59
     44e:	00 d7       	rcall	.+3584   	; 0x1250 <__mulsf3>
     450:	f7 01       	movw	r30, r14
     452:	60 83       	st	Z, r22
     454:	71 83       	std	Z+1, r23	; 0x01
     456:	82 83       	std	Z+2, r24	; 0x02
     458:	93 83       	std	Z+3, r25	; 0x03
	*ay = (ayraw/(double)ADXL345_RANGEVAL);
     45a:	b4 01       	movw	r22, r8
     45c:	88 27       	eor	r24, r24
     45e:	77 fd       	sbrc	r23, 7
     460:	80 95       	com	r24
     462:	98 2f       	mov	r25, r24
     464:	15 d6       	rcall	.+3114   	; 0x1090 <__floatsisf>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5b e3       	ldi	r21, 0x3B	; 59
     46e:	f0 d6       	rcall	.+3552   	; 0x1250 <__mulsf3>
     470:	f8 01       	movw	r30, r16
     472:	60 83       	st	Z, r22
     474:	71 83       	std	Z+1, r23	; 0x01
     476:	82 83       	std	Z+2, r24	; 0x02
     478:	93 83       	std	Z+3, r25	; 0x03
	*az = (azraw/(double)ADXL345_RANGEVAL);
     47a:	b5 01       	movw	r22, r10
     47c:	88 27       	eor	r24, r24
     47e:	77 fd       	sbrc	r23, 7
     480:	80 95       	com	r24
     482:	98 2f       	mov	r25, r24
     484:	05 d6       	rcall	.+3082   	; 0x1090 <__floatsisf>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e8       	ldi	r20, 0x80	; 128
     48c:	5b e3       	ldi	r21, 0x3B	; 59
     48e:	e0 d6       	rcall	.+3520   	; 0x1250 <__mulsf3>
     490:	68 83       	st	Y, r22
     492:	79 83       	std	Y+1, r23	; 0x01
     494:	8a 83       	std	Y+2, r24	; 0x02
     496:	9b 83       	std	Y+3, r25	; 0x03
	#endif

	//this is a simple low pass filter
	#if ADXL345_LOWPASSENABLED == 1
	if(!firstread)
     498:	80 91 00 02 	lds	r24, 0x0200
     49c:	81 11       	cpse	r24, r1
     49e:	86 c0       	rjmp	.+268    	; 0x5ac <_Z15adxl345_getdataPdS_S_+0x216>
		*ax = (0.75)*(axold) + (0.25)*(*ax);
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e4       	ldi	r20, 0x40	; 64
     4a6:	5f e3       	ldi	r21, 0x3F	; 63
     4a8:	60 91 30 02 	lds	r22, 0x0230
     4ac:	70 91 31 02 	lds	r23, 0x0231
     4b0:	80 91 32 02 	lds	r24, 0x0232
     4b4:	90 91 33 02 	lds	r25, 0x0233
     4b8:	cb d6       	rcall	.+3478   	; 0x1250 <__mulsf3>
     4ba:	4b 01       	movw	r8, r22
     4bc:	5c 01       	movw	r10, r24
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	5e e3       	ldi	r21, 0x3E	; 62
     4c6:	f7 01       	movw	r30, r14
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	bf d6       	rcall	.+3454   	; 0x1250 <__mulsf3>
     4d2:	9b 01       	movw	r18, r22
     4d4:	ac 01       	movw	r20, r24
     4d6:	c5 01       	movw	r24, r10
     4d8:	b4 01       	movw	r22, r8
     4da:	a6 d4       	rcall	.+2380   	; 0xe28 <__addsf3>
     4dc:	f7 01       	movw	r30, r14
     4de:	60 83       	st	Z, r22
     4e0:	71 83       	std	Z+1, r23	; 0x01
     4e2:	82 83       	std	Z+2, r24	; 0x02
     4e4:	93 83       	std	Z+3, r25	; 0x03
	axold = *ax;
     4e6:	60 93 30 02 	sts	0x0230, r22
     4ea:	70 93 31 02 	sts	0x0231, r23
     4ee:	80 93 32 02 	sts	0x0232, r24
     4f2:	90 93 33 02 	sts	0x0233, r25
	if(!firstread)
		*ay = (0.75)*(ayold) + (0.25)*(*ay);
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e4       	ldi	r20, 0x40	; 64
     4fc:	5f e3       	ldi	r21, 0x3F	; 63
     4fe:	60 91 2c 02 	lds	r22, 0x022C
     502:	70 91 2d 02 	lds	r23, 0x022D
     506:	80 91 2e 02 	lds	r24, 0x022E
     50a:	90 91 2f 02 	lds	r25, 0x022F
     50e:	a0 d6       	rcall	.+3392   	; 0x1250 <__mulsf3>
     510:	6b 01       	movw	r12, r22
     512:	7c 01       	movw	r14, r24
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e8       	ldi	r20, 0x80	; 128
     51a:	5e e3       	ldi	r21, 0x3E	; 62
     51c:	f8 01       	movw	r30, r16
     51e:	60 81       	ld	r22, Z
     520:	71 81       	ldd	r23, Z+1	; 0x01
     522:	82 81       	ldd	r24, Z+2	; 0x02
     524:	93 81       	ldd	r25, Z+3	; 0x03
     526:	94 d6       	rcall	.+3368   	; 0x1250 <__mulsf3>
     528:	9b 01       	movw	r18, r22
     52a:	ac 01       	movw	r20, r24
     52c:	c7 01       	movw	r24, r14
     52e:	b6 01       	movw	r22, r12
     530:	7b d4       	rcall	.+2294   	; 0xe28 <__addsf3>
     532:	f8 01       	movw	r30, r16
     534:	60 83       	st	Z, r22
     536:	71 83       	std	Z+1, r23	; 0x01
     538:	82 83       	std	Z+2, r24	; 0x02
     53a:	93 83       	std	Z+3, r25	; 0x03
	ayold = *ay;
     53c:	60 93 2c 02 	sts	0x022C, r22
     540:	70 93 2d 02 	sts	0x022D, r23
     544:	80 93 2e 02 	sts	0x022E, r24
     548:	90 93 2f 02 	sts	0x022F, r25
	if(!firstread)
		*az = (0.75)*(azold) + (0.25)*(*az);
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e4       	ldi	r20, 0x40	; 64
     552:	5f e3       	ldi	r21, 0x3F	; 63
     554:	60 91 28 02 	lds	r22, 0x0228
     558:	70 91 29 02 	lds	r23, 0x0229
     55c:	80 91 2a 02 	lds	r24, 0x022A
     560:	90 91 2b 02 	lds	r25, 0x022B
     564:	75 d6       	rcall	.+3306   	; 0x1250 <__mulsf3>
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e8       	ldi	r20, 0x80	; 128
     570:	5e e3       	ldi	r21, 0x3E	; 62
     572:	68 81       	ld	r22, Y
     574:	79 81       	ldd	r23, Y+1	; 0x01
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	9b 81       	ldd	r25, Y+3	; 0x03
     57a:	6a d6       	rcall	.+3284   	; 0x1250 <__mulsf3>
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	c7 01       	movw	r24, r14
     582:	b6 01       	movw	r22, r12
     584:	51 d4       	rcall	.+2210   	; 0xe28 <__addsf3>
     586:	68 83       	st	Y, r22
     588:	79 83       	std	Y+1, r23	; 0x01
     58a:	8a 83       	std	Y+2, r24	; 0x02
     58c:	9b 83       	std	Y+3, r25	; 0x03
	azold = *az;
     58e:	88 81       	ld	r24, Y
     590:	99 81       	ldd	r25, Y+1	; 0x01
     592:	aa 81       	ldd	r26, Y+2	; 0x02
     594:	bb 81       	ldd	r27, Y+3	; 0x03
     596:	80 93 28 02 	sts	0x0228, r24
     59a:	90 93 29 02 	sts	0x0229, r25
     59e:	a0 93 2a 02 	sts	0x022A, r26
     5a2:	b0 93 2b 02 	sts	0x022B, r27
	firstread = 0;
     5a6:	10 92 00 02 	sts	0x0200, r1
     5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <_Z15adxl345_getdataPdS_S_+0x24c>

	//this is a simple low pass filter
	#if ADXL345_LOWPASSENABLED == 1
	if(!firstread)
		*ax = (0.75)*(axold) + (0.25)*(*ax);
	axold = *ax;
     5ac:	f7 01       	movw	r30, r14
     5ae:	80 81       	ld	r24, Z
     5b0:	91 81       	ldd	r25, Z+1	; 0x01
     5b2:	a2 81       	ldd	r26, Z+2	; 0x02
     5b4:	b3 81       	ldd	r27, Z+3	; 0x03
     5b6:	80 93 30 02 	sts	0x0230, r24
     5ba:	90 93 31 02 	sts	0x0231, r25
     5be:	a0 93 32 02 	sts	0x0232, r26
     5c2:	b0 93 33 02 	sts	0x0233, r27
	if(!firstread)
		*ay = (0.75)*(ayold) + (0.25)*(*ay);
	ayold = *ay;
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	a2 81       	ldd	r26, Z+2	; 0x02
     5ce:	b3 81       	ldd	r27, Z+3	; 0x03
     5d0:	80 93 2c 02 	sts	0x022C, r24
     5d4:	90 93 2d 02 	sts	0x022D, r25
     5d8:	a0 93 2e 02 	sts	0x022E, r26
     5dc:	b0 93 2f 02 	sts	0x022F, r27
     5e0:	d6 cf       	rjmp	.-84     	; 0x58e <_Z15adxl345_getdataPdS_S_+0x1f8>
	if(!firstread)
		*az = (0.75)*(azold) + (0.25)*(*az);
	azold = *az;
	firstread = 0;
	#endif
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	bf 90       	pop	r11
     5f4:	af 90       	pop	r10
     5f6:	9f 90       	pop	r9
     5f8:	8f 90       	pop	r8
     5fa:	08 95       	ret

000005fc <_Z13init_HMC5883Lv>:
	/* hard iron estimate */
	static int16_t iVx, iVy, iVz;

void init_HMC5883L(void){

	i2c_start(HMC5883L_WRITE);
     5fc:	8c e3       	ldi	r24, 0x3C	; 60
     5fe:	34 de       	rcall	.-920    	; 0x268 <i2c_start>
	i2c_write(0x00); // set pointer to CRA
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	52 de       	rcall	.-860    	; 0x2a8 <i2c_write>
	i2c_write(0x70); // write 0x70 to CRA
     604:	80 e7       	ldi	r24, 0x70	; 112
     606:	50 de       	rcall	.-864    	; 0x2a8 <i2c_write>
	i2c_stop();
     608:	47 de       	rcall	.-882    	; 0x298 <i2c_stop>

	i2c_start(HMC5883L_WRITE);
     60a:	8c e3       	ldi	r24, 0x3C	; 60
     60c:	2d de       	rcall	.-934    	; 0x268 <i2c_start>
	i2c_write(0x01); // set pointer to CRB
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	4b de       	rcall	.-874    	; 0x2a8 <i2c_write>
	i2c_write(0xA0);
     612:	80 ea       	ldi	r24, 0xA0	; 160
     614:	49 de       	rcall	.-878    	; 0x2a8 <i2c_write>
	i2c_stop();
     616:	40 de       	rcall	.-896    	; 0x298 <i2c_stop>

	i2c_start(HMC5883L_WRITE);
     618:	8c e3       	ldi	r24, 0x3C	; 60
     61a:	26 de       	rcall	.-948    	; 0x268 <i2c_start>
	i2c_write(0x02); // set pointer to measurement mode
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	44 de       	rcall	.-888    	; 0x2a8 <i2c_write>
	i2c_write(0x00); // continuous measurement
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	42 de       	rcall	.-892    	; 0x2a8 <i2c_write>
	i2c_stop();
     624:	39 ce       	rjmp	.-910    	; 0x298 <i2c_stop>
     626:	08 95       	ret

00000628 <_Z10getHeadingv>:
}

float getHeading(void){
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15

	i2c_start_wait(HMC5883L_WRITE);
     630:	8c e3       	ldi	r24, 0x3C	; 60
     632:	28 de       	rcall	.-944    	; 0x284 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	38 de       	rcall	.-912    	; 0x2a8 <i2c_write>
	i2c_stop();
     638:	2f de       	rcall	.-930    	; 0x298 <i2c_stop>

	i2c_rep_start(HMC5883L_READ);
     63a:	8d e3       	ldi	r24, 0x3D	; 61
     63c:	19 de       	rcall	.-974    	; 0x270 <i2c_rep_start>

	mag_raw_x = ((uint8_t)i2c_readAck())<<8;
     63e:	52 de       	rcall	.-860    	; 0x2e4 <i2c_readAck>
     640:	10 92 3c 02 	sts	0x023C, r1
     644:	80 93 3d 02 	sts	0x023D, r24
	mag_raw_x |= i2c_readAck();
     648:	4d de       	rcall	.-870    	; 0x2e4 <i2c_readAck>
     64a:	20 91 3c 02 	lds	r18, 0x023C
     64e:	30 91 3d 02 	lds	r19, 0x023D
     652:	28 2b       	or	r18, r24
     654:	30 93 3d 02 	sts	0x023D, r19
     658:	20 93 3c 02 	sts	0x023C, r18

	mag_raw_z = ((uint8_t)i2c_readAck())<<8;
     65c:	43 de       	rcall	.-890    	; 0x2e4 <i2c_readAck>
     65e:	10 92 38 02 	sts	0x0238, r1
     662:	80 93 39 02 	sts	0x0239, r24
	mag_raw_z |= i2c_readAck();
     666:	3e de       	rcall	.-900    	; 0x2e4 <i2c_readAck>
     668:	20 91 38 02 	lds	r18, 0x0238
     66c:	30 91 39 02 	lds	r19, 0x0239
     670:	28 2b       	or	r18, r24
     672:	30 93 39 02 	sts	0x0239, r19
     676:	20 93 38 02 	sts	0x0238, r18

	mag_raw_y = ((uint8_t)i2c_readAck())<<8;
     67a:	34 de       	rcall	.-920    	; 0x2e4 <i2c_readAck>
     67c:	10 92 3a 02 	sts	0x023A, r1
     680:	80 93 3b 02 	sts	0x023B, r24
	mag_raw_y |= i2c_readNak();
     684:	2d de       	rcall	.-934    	; 0x2e0 <i2c_readNak>
     686:	20 91 3a 02 	lds	r18, 0x023A
     68a:	30 91 3b 02 	lds	r19, 0x023B
     68e:	a9 01       	movw	r20, r18
     690:	48 2b       	or	r20, r24
     692:	ca 01       	movw	r24, r20
     694:	90 93 3b 02 	sts	0x023B, r25
     698:	80 93 3a 02 	sts	0x023A, r24

	fixed_x = k1x * (mag_raw_x - k2x);
     69c:	60 91 3c 02 	lds	r22, 0x023C
     6a0:	70 91 3d 02 	lds	r23, 0x023D
     6a4:	20 91 05 02 	lds	r18, 0x0205
     6a8:	30 91 06 02 	lds	r19, 0x0206
     6ac:	62 1b       	sub	r22, r18
     6ae:	73 0b       	sbc	r23, r19
     6b0:	40 91 07 02 	lds	r20, 0x0207
     6b4:	50 91 08 02 	lds	r21, 0x0208
     6b8:	64 9f       	mul	r22, r20
     6ba:	90 01       	movw	r18, r0
     6bc:	65 9f       	mul	r22, r21
     6be:	30 0d       	add	r19, r0
     6c0:	74 9f       	mul	r23, r20
     6c2:	30 0d       	add	r19, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	30 93 37 02 	sts	0x0237, r19
     6ca:	20 93 36 02 	sts	0x0236, r18
	fixed_y = k1y * (mag_raw_y - k2y);
     6ce:	20 91 01 02 	lds	r18, 0x0201
     6d2:	30 91 02 02 	lds	r19, 0x0202
     6d6:	82 1b       	sub	r24, r18
     6d8:	93 0b       	sbc	r25, r19
     6da:	40 91 03 02 	lds	r20, 0x0203
     6de:	50 91 04 02 	lds	r21, 0x0204
     6e2:	84 9f       	mul	r24, r20
     6e4:	90 01       	movw	r18, r0
     6e6:	85 9f       	mul	r24, r21
     6e8:	30 0d       	add	r19, r0
     6ea:	94 9f       	mul	r25, r20
     6ec:	30 0d       	add	r19, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	30 93 35 02 	sts	0x0235, r19
     6f4:	20 93 34 02 	sts	0x0234, r18
	
	i2c_stop();
     6f8:	cf dd       	rcall	.-1122   	; 0x298 <i2c_stop>
	
	float heading = atan2(fixed_y,fixed_x);
     6fa:	60 91 36 02 	lds	r22, 0x0236
     6fe:	70 91 37 02 	lds	r23, 0x0237
     702:	88 27       	eor	r24, r24
     704:	77 fd       	sbrc	r23, 7
     706:	80 95       	com	r24
     708:	98 2f       	mov	r25, r24
     70a:	c2 d4       	rcall	.+2436   	; 0x1090 <__floatsisf>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
     710:	60 91 34 02 	lds	r22, 0x0234
     714:	70 91 35 02 	lds	r23, 0x0235
     718:	88 27       	eor	r24, r24
     71a:	77 fd       	sbrc	r23, 7
     71c:	80 95       	com	r24
     71e:	98 2f       	mov	r25, r24
     720:	b7 d4       	rcall	.+2414   	; 0x1090 <__floatsisf>
     722:	a7 01       	movw	r20, r14
     724:	96 01       	movw	r18, r12
     726:	f3 d3       	rcall	.+2022   	; 0xf0e <atan2>
     728:	6b 01       	movw	r12, r22
     72a:	7c 01       	movw	r14, r24
	float heading_dec = heading+DECLINATION;
	
	
	if(heading < 0)
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	a9 01       	movw	r20, r18
     732:	40 d4       	rcall	.+2176   	; 0xfb4 <__cmpsf2>
     734:	88 23       	and	r24, r24
     736:	4c f4       	brge	.+18     	; 0x74a <_Z10getHeadingv+0x122>
		heading += 2*PI;
     738:	2b ed       	ldi	r18, 0xDB	; 219
     73a:	3f e0       	ldi	r19, 0x0F	; 15
     73c:	49 ec       	ldi	r20, 0xC9	; 201
     73e:	50 e4       	ldi	r21, 0x40	; 64
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	71 d3       	rcall	.+1762   	; 0xe28 <__addsf3>
     746:	6b 01       	movw	r12, r22
     748:	7c 01       	movw	r14, r24
	
	if(heading>2*PI)
     74a:	2b ed       	ldi	r18, 0xDB	; 219
     74c:	3f e0       	ldi	r19, 0x0F	; 15
     74e:	49 ec       	ldi	r20, 0xC9	; 201
     750:	50 e4       	ldi	r21, 0x40	; 64
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	71 d5       	rcall	.+2786   	; 0x123a <__gesf2>
     758:	18 16       	cp	r1, r24
     75a:	4c f4       	brge	.+18     	; 0x76e <_Z10getHeadingv+0x146>
		heading-=2*PI;
     75c:	2b ed       	ldi	r18, 0xDB	; 219
     75e:	3f e0       	ldi	r19, 0x0F	; 15
     760:	49 ec       	ldi	r20, 0xC9	; 201
     762:	50 e4       	ldi	r21, 0x40	; 64
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	5e d3       	rcall	.+1724   	; 0xe26 <__subsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
	
	if(heading_dec>2*PI)
	heading_dec-=2*PI;
	
		
	float heading_degrees = heading * 180 / PI;
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	44 e3       	ldi	r20, 0x34	; 52
     774:	53 e4       	ldi	r21, 0x43	; 67
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	6a d5       	rcall	.+2772   	; 0x1250 <__mulsf3>
     77c:	2b ed       	ldi	r18, 0xDB	; 219
     77e:	3f e0       	ldi	r19, 0x0F	; 15
     780:	49 e4       	ldi	r20, 0x49	; 73
     782:	50 e4       	ldi	r21, 0x40	; 64
     784:	1b d4       	rcall	.+2102   	; 0xfbc <__divsf3>
	debug_println("");
	*/
	
	
	return heading_degrees;
}
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	08 95       	ret

00000790 <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     790:	bc 01       	movw	r22, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	bf c2       	rjmp	.+1406   	; 0xd16 <_Z15USART_putstringiPKc>
     798:	08 95       	ret

0000079a <_Z13debug_printlnPKc>:
     79a:	bc 01       	movw	r22, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	ba d2       	rcall	.+1396   	; 0xd16 <_Z15USART_putstringiPKc>
     7a2:	69 e0       	ldi	r22, 0x09	; 9
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	b5 c2       	rjmp	.+1386   	; 0xd16 <_Z15USART_putstringiPKc>
     7ac:	08 95       	ret

000007ae <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	64 97       	sbiw	r28, 0x14	; 20
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     7c6:	8e 01       	movw	r16, r28
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	25 e0       	ldi	r18, 0x05	; 5
     7ce:	4a e0       	ldi	r20, 0x0A	; 10
     7d0:	c7 d5       	rcall	.+2958   	; 0x1360 <dtostrf>
		debug_print(string);
     7d2:	c8 01       	movw	r24, r16
     7d4:	dd df       	rcall	.-70     	; 0x790 <_Z11debug_printPKc>
	}
}
     7d6:	64 96       	adiw	r28, 0x14	; 20
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <_Z10debug_beepv>:


//beep for 50ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep()
{
	sbi(PORTB,7);
     7ec:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	80 e7       	ldi	r24, 0x70	; 112
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	90 40       	sbci	r25, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <_Z10debug_beepv+0x8>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <_Z10debug_beepv+0x12>
     7fe:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     800:	2f 98       	cbi	0x05, 7	; 5
     802:	08 95       	ret

00000804 <_Z15debug_beep_longv>:
}

//beep for 250ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep_long()
{
	sbi(PORTB,7);
     804:	2f 9a       	sbi	0x05, 7	; 5
     806:	2f ef       	ldi	r18, 0xFF	; 255
     808:	84 e3       	ldi	r24, 0x34	; 52
     80a:	9c e0       	ldi	r25, 0x0C	; 12
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	80 40       	sbci	r24, 0x00	; 0
     810:	90 40       	sbci	r25, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <_Z15debug_beep_longv+0x8>
     814:	00 c0       	rjmp	.+0      	; 0x816 <_Z15debug_beep_longv+0x12>
     816:	00 00       	nop
	_delay_ms(250);
	cbi(PORTB,7);
     818:	2f 98       	cbi	0x05, 7	; 5
     81a:	08 95       	ret

0000081c <_Z24quad_output_set_throttlei>:
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
     81c:	90 93 a9 00 	sts	0x00A9, r25
     820:	80 93 a8 00 	sts	0x00A8, r24
	throttle_out = throttle;
     824:	bc 01       	movw	r22, r24
     826:	88 27       	eor	r24, r24
     828:	77 fd       	sbrc	r23, 7
     82a:	80 95       	com	r24
     82c:	98 2f       	mov	r25, r24
     82e:	30 d4       	rcall	.+2144   	; 0x1090 <__floatsisf>
     830:	60 93 3e 02 	sts	0x023E, r22
     834:	70 93 3f 02 	sts	0x023F, r23
     838:	80 93 40 02 	sts	0x0240, r24
     83c:	90 93 41 02 	sts	0x0241, r25
     840:	08 95       	ret

00000842 <_Z16quad_output_initv>:
#include "quad_output.h"

float throttle_out;

void quad_output_init()
{
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
	DDRH = 0xFF;  //set OC4x to output
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
     860:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
     862:	8f e3       	ldi	r24, 0x3F	; 63
     864:	9c e9       	ldi	r25, 0x9C	; 156
     866:	90 93 a7 00 	sts	0x00A7, r25
     86a:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
     86e:	38 ea       	ldi	r19, 0xA8	; 168
     870:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
     874:	22 e1       	ldi	r18, 0x12	; 18
     876:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
     87a:	90 93 97 00 	sts	0x0097, r25
     87e:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
     882:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
     886:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     88a:	c6 eb       	ldi	r28, 0xB6	; 182
     88c:	d3 e0       	ldi	r29, 0x03	; 3
     88e:	d0 93 a9 00 	sts	0x00A9, r29
     892:	c0 93 a8 00 	sts	0x00A8, r28
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     896:	0f 2e       	mov	r0, r31
     898:	fa ea       	ldi	r31, 0xAA	; 170
     89a:	8f 2e       	mov	r8, r31
     89c:	91 2c       	mov	r9, r1
     89e:	f0 2d       	mov	r31, r0
     8a0:	f4 01       	movw	r30, r8
     8a2:	d1 83       	std	Z+1, r29	; 0x01
     8a4:	c0 83       	st	Z, r28
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     8a6:	0f 2e       	mov	r0, r31
     8a8:	fc ea       	ldi	r31, 0xAC	; 172
     8aa:	af 2e       	mov	r10, r31
     8ac:	b1 2c       	mov	r11, r1
     8ae:	f0 2d       	mov	r31, r0
     8b0:	f5 01       	movw	r30, r10
     8b2:	d1 83       	std	Z+1, r29	; 0x01
     8b4:	c0 83       	st	Z, r28
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     8b6:	0f 2e       	mov	r0, r31
     8b8:	f8 e9       	ldi	r31, 0x98	; 152
     8ba:	cf 2e       	mov	r12, r31
     8bc:	d1 2c       	mov	r13, r1
     8be:	f0 2d       	mov	r31, r0
     8c0:	f6 01       	movw	r30, r12
     8c2:	d1 83       	std	Z+1, r29	; 0x01
     8c4:	c0 83       	st	Z, r28
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fa e9       	ldi	r31, 0x9A	; 154
     8ca:	ef 2e       	mov	r14, r31
     8cc:	f1 2c       	mov	r15, r1
     8ce:	f0 2d       	mov	r31, r0
     8d0:	f7 01       	movw	r30, r14
     8d2:	d1 83       	std	Z+1, r29	; 0x01
     8d4:	c0 83       	st	Z, r28
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     8d6:	0c e9       	ldi	r16, 0x9C	; 156
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	f8 01       	movw	r30, r16
     8dc:	d1 83       	std	Z+1, r29	; 0x01
     8de:	c0 83       	st	Z, r28
	
	quad_output_set_throttle(DEFAULT_PWM_OUTPUT);
     8e0:	86 eb       	ldi	r24, 0xB6	; 182
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	9b df       	rcall	.-202    	; 0x81c <_Z24quad_output_set_throttlei>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
     8e6:	f4 01       	movw	r30, r8
     8e8:	d1 83       	std	Z+1, r29	; 0x01
     8ea:	c0 83       	st	Z, r28
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
     8ec:	f5 01       	movw	r30, r10
     8ee:	d1 83       	std	Z+1, r29	; 0x01
     8f0:	c0 83       	st	Z, r28
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
     8f2:	f6 01       	movw	r30, r12
     8f4:	d1 83       	std	Z+1, r29	; 0x01
     8f6:	c0 83       	st	Z, r28
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
     8f8:	f7 01       	movw	r30, r14
     8fa:	d1 83       	std	Z+1, r29	; 0x01
     8fc:	c0 83       	st	Z, r28
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
     8fe:	f8 01       	movw	r30, r16
     900:	d1 83       	std	Z+1, r29	; 0x01
     902:	c0 83       	st	Z, r28
	quad_output_set_aileron(DEFAULT_PWM_OUTPUT);
	quad_output_set_elevator(DEFAULT_PWM_OUTPUT);
	quad_output_set_rudder(DEFAULT_PWM_OUTPUT);
	quad_output_set_gear(DEFAULT_PWM_OUTPUT);
	quad_output_set_aux(DEFAULT_PWM_OUTPUT);
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	08 95       	ret

0000091e <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	2f 93       	push	r18
     92e:	3f 93       	push	r19
     930:	4f 93       	push	r20
     932:	5f 93       	push	r21
     934:	6f 93       	push	r22
     936:	7f 93       	push	r23
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	af 93       	push	r26
     93e:	bf 93       	push	r27
     940:	cf 93       	push	r28
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     946:	83 b1       	in	r24, 0x03	; 3
     948:	c0 91 42 02 	lds	r28, 0x0242
     94c:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     94e:	83 b1       	in	r24, 0x03	; 3
     950:	80 93 42 02 	sts	0x0242, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     954:	c0 ff       	sbrs	r28, 0
     956:	1c c0       	rjmp	.+56     	; 0x990 <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     958:	18 9b       	sbis	0x03, 0	; 3
     95a:	0a c0       	rjmp	.+20     	; 0x970 <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     95c:	2a d1       	rcall	.+596    	; 0xbb2 <_Z6microsv>
     95e:	60 93 57 02 	sts	0x0257, r22
     962:	70 93 58 02 	sts	0x0258, r23
     966:	80 93 59 02 	sts	0x0259, r24
     96a:	90 93 5a 02 	sts	0x025A, r25
     96e:	10 c0       	rjmp	.+32     	; 0x990 <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     970:	20 d1       	rcall	.+576    	; 0xbb2 <_Z6microsv>
     972:	20 91 57 02 	lds	r18, 0x0257
     976:	30 91 58 02 	lds	r19, 0x0258
     97a:	62 1b       	sub	r22, r18
     97c:	73 0b       	sbc	r23, r19
     97e:	70 93 67 02 	sts	0x0267, r23
     982:	60 93 66 02 	sts	0x0266, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     986:	80 91 5b 02 	lds	r24, 0x025B
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	80 93 5b 02 	sts	0x025B, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     990:	c1 ff       	sbrs	r28, 1
     992:	1c c0       	rjmp	.+56     	; 0x9cc <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     994:	19 9b       	sbis	0x03, 1	; 3
     996:	0a c0       	rjmp	.+20     	; 0x9ac <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     998:	0c d1       	rcall	.+536    	; 0xbb2 <_Z6microsv>
     99a:	60 93 53 02 	sts	0x0253, r22
     99e:	70 93 54 02 	sts	0x0254, r23
     9a2:	80 93 55 02 	sts	0x0255, r24
     9a6:	90 93 56 02 	sts	0x0256, r25
     9aa:	10 c0       	rjmp	.+32     	; 0x9cc <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     9ac:	02 d1       	rcall	.+516    	; 0xbb2 <_Z6microsv>
     9ae:	20 91 53 02 	lds	r18, 0x0253
     9b2:	30 91 54 02 	lds	r19, 0x0254
     9b6:	62 1b       	sub	r22, r18
     9b8:	73 0b       	sbc	r23, r19
     9ba:	70 93 65 02 	sts	0x0265, r23
     9be:	60 93 64 02 	sts	0x0264, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     9c2:	80 91 5b 02 	lds	r24, 0x025B
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	80 93 5b 02 	sts	0x025B, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     9cc:	c2 ff       	sbrs	r28, 2
     9ce:	1c c0       	rjmp	.+56     	; 0xa08 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     9d0:	1a 9b       	sbis	0x03, 2	; 3
     9d2:	0a c0       	rjmp	.+20     	; 0x9e8 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     9d4:	ee d0       	rcall	.+476    	; 0xbb2 <_Z6microsv>
     9d6:	60 93 4f 02 	sts	0x024F, r22
     9da:	70 93 50 02 	sts	0x0250, r23
     9de:	80 93 51 02 	sts	0x0251, r24
     9e2:	90 93 52 02 	sts	0x0252, r25
     9e6:	10 c0       	rjmp	.+32     	; 0xa08 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     9e8:	e4 d0       	rcall	.+456    	; 0xbb2 <_Z6microsv>
     9ea:	20 91 4f 02 	lds	r18, 0x024F
     9ee:	30 91 50 02 	lds	r19, 0x0250
     9f2:	62 1b       	sub	r22, r18
     9f4:	73 0b       	sbc	r23, r19
     9f6:	70 93 63 02 	sts	0x0263, r23
     9fa:	60 93 62 02 	sts	0x0262, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     9fe:	80 91 5b 02 	lds	r24, 0x025B
     a02:	84 60       	ori	r24, 0x04	; 4
     a04:	80 93 5b 02 	sts	0x025B, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     a08:	c3 ff       	sbrs	r28, 3
     a0a:	1c c0       	rjmp	.+56     	; 0xa44 <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     a0c:	1b 9b       	sbis	0x03, 3	; 3
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <__vector_9+0x106>
		{
			ulRudderStart = micros();
     a10:	d0 d0       	rcall	.+416    	; 0xbb2 <_Z6microsv>
     a12:	60 93 4b 02 	sts	0x024B, r22
     a16:	70 93 4c 02 	sts	0x024C, r23
     a1a:	80 93 4d 02 	sts	0x024D, r24
     a1e:	90 93 4e 02 	sts	0x024E, r25
     a22:	10 c0       	rjmp	.+32     	; 0xa44 <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     a24:	c6 d0       	rcall	.+396    	; 0xbb2 <_Z6microsv>
     a26:	20 91 4b 02 	lds	r18, 0x024B
     a2a:	30 91 4c 02 	lds	r19, 0x024C
     a2e:	62 1b       	sub	r22, r18
     a30:	73 0b       	sbc	r23, r19
     a32:	70 93 61 02 	sts	0x0261, r23
     a36:	60 93 60 02 	sts	0x0260, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     a3a:	80 91 5b 02 	lds	r24, 0x025B
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	80 93 5b 02 	sts	0x025B, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     a44:	c4 ff       	sbrs	r28, 4
     a46:	1c c0       	rjmp	.+56     	; 0xa80 <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     a48:	1c 9b       	sbis	0x03, 4	; 3
     a4a:	0a c0       	rjmp	.+20     	; 0xa60 <__vector_9+0x142>
		{
			ulGearStart = micros();
     a4c:	b2 d0       	rcall	.+356    	; 0xbb2 <_Z6microsv>
     a4e:	60 93 47 02 	sts	0x0247, r22
     a52:	70 93 48 02 	sts	0x0248, r23
     a56:	80 93 49 02 	sts	0x0249, r24
     a5a:	90 93 4a 02 	sts	0x024A, r25
     a5e:	10 c0       	rjmp	.+32     	; 0xa80 <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     a60:	a8 d0       	rcall	.+336    	; 0xbb2 <_Z6microsv>
     a62:	20 91 47 02 	lds	r18, 0x0247
     a66:	30 91 48 02 	lds	r19, 0x0248
     a6a:	62 1b       	sub	r22, r18
     a6c:	73 0b       	sbc	r23, r19
     a6e:	70 93 5f 02 	sts	0x025F, r23
     a72:	60 93 5e 02 	sts	0x025E, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     a76:	80 91 5b 02 	lds	r24, 0x025B
     a7a:	80 61       	ori	r24, 0x10	; 16
     a7c:	80 93 5b 02 	sts	0x025B, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     a80:	c5 ff       	sbrs	r28, 5
     a82:	1c c0       	rjmp	.+56     	; 0xabc <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     a84:	1d 9b       	sbis	0x03, 5	; 3
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     a88:	94 d0       	rcall	.+296    	; 0xbb2 <_Z6microsv>
     a8a:	60 93 43 02 	sts	0x0243, r22
     a8e:	70 93 44 02 	sts	0x0244, r23
     a92:	80 93 45 02 	sts	0x0245, r24
     a96:	90 93 46 02 	sts	0x0246, r25
     a9a:	10 c0       	rjmp	.+32     	; 0xabc <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     a9c:	8a d0       	rcall	.+276    	; 0xbb2 <_Z6microsv>
     a9e:	20 91 43 02 	lds	r18, 0x0243
     aa2:	30 91 44 02 	lds	r19, 0x0244
     aa6:	62 1b       	sub	r22, r18
     aa8:	73 0b       	sbc	r23, r19
     aaa:	70 93 5d 02 	sts	0x025D, r23
     aae:	60 93 5c 02 	sts	0x025C, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     ab2:	80 91 5b 02 	lds	r24, 0x025B
     ab6:	80 62       	ori	r24, 0x20	; 32
     ab8:	80 93 5b 02 	sts	0x025B, r24
		}
	}
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	cf 91       	pop	r28
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	0f 90       	pop	r0
     ad8:	0b be       	out	0x3b, r0	; 59
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
     ae4:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
     ae6:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
     ae8:	eb e6       	ldi	r30, 0x6B	; 107
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
     af2:	80 81       	ld	r24, Z
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
     af8:	80 81       	ld	r24, Z
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
     afe:	80 81       	ld	r24, Z
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
     b04:	80 81       	ld	r24, Z
     b06:	80 61       	ori	r24, 0x10	; 16
     b08:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
     b0a:	80 81       	ld	r24, Z
     b0c:	80 62       	ori	r24, 0x20	; 32
     b0e:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
     b10:	e8 e6       	ldi	r30, 0x68	; 104
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 83       	st	Z, r24
	sei(); //enable interrupts
     b1a:	78 94       	sei
     b1c:	08 95       	ret

00000b1e <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	af 93       	push	r26
     b32:	bf 93       	push	r27
     b34:	80 91 69 02 	lds	r24, 0x0269
     b38:	90 91 6a 02 	lds	r25, 0x026A
     b3c:	a0 91 6b 02 	lds	r26, 0x026B
     b40:	b0 91 6c 02 	lds	r27, 0x026C
     b44:	30 91 68 02 	lds	r19, 0x0268
     b48:	23 e0       	ldi	r18, 0x03	; 3
     b4a:	23 0f       	add	r18, r19
     b4c:	2d 37       	cpi	r18, 0x7D	; 125
     b4e:	20 f4       	brcc	.+8      	; 0xb58 <__vector_23+0x3a>
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	a1 1d       	adc	r26, r1
     b54:	b1 1d       	adc	r27, r1
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <__vector_23+0x44>
     b58:	26 e8       	ldi	r18, 0x86	; 134
     b5a:	23 0f       	add	r18, r19
     b5c:	02 96       	adiw	r24, 0x02	; 2
     b5e:	a1 1d       	adc	r26, r1
     b60:	b1 1d       	adc	r27, r1
     b62:	20 93 68 02 	sts	0x0268, r18
     b66:	80 93 69 02 	sts	0x0269, r24
     b6a:	90 93 6a 02 	sts	0x026A, r25
     b6e:	a0 93 6b 02 	sts	0x026B, r26
     b72:	b0 93 6c 02 	sts	0x026C, r27
     b76:	80 91 6d 02 	lds	r24, 0x026D
     b7a:	90 91 6e 02 	lds	r25, 0x026E
     b7e:	a0 91 6f 02 	lds	r26, 0x026F
     b82:	b0 91 70 02 	lds	r27, 0x0270
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	a1 1d       	adc	r26, r1
     b8a:	b1 1d       	adc	r27, r1
     b8c:	80 93 6d 02 	sts	0x026D, r24
     b90:	90 93 6e 02 	sts	0x026E, r25
     b94:	a0 93 6f 02 	sts	0x026F, r26
     b98:	b0 93 70 02 	sts	0x0270, r27
     b9c:	bf 91       	pop	r27
     b9e:	af 91       	pop	r26
     ba0:	9f 91       	pop	r25
     ba2:	8f 91       	pop	r24
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
     bb2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     bb4:	f8 94       	cli
	m = timer0_overflow_count;
     bb6:	80 91 6d 02 	lds	r24, 0x026D
     bba:	90 91 6e 02 	lds	r25, 0x026E
     bbe:	a0 91 6f 02 	lds	r26, 0x026F
     bc2:	b0 91 70 02 	lds	r27, 0x0270
	t = TCNT0;
     bc6:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     bc8:	a8 9b       	sbis	0x15, 0	; 21
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <_Z6microsv+0x1e>
     bcc:	2f 3f       	cpi	r18, 0xFF	; 255
     bce:	a9 f4       	brne	.+42     	; 0xbfa <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     bd0:	3f bf       	out	0x3f, r19	; 63
	
	sei();
     bd2:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     bd4:	ba 2f       	mov	r27, r26
     bd6:	a9 2f       	mov	r26, r25
     bd8:	98 2f       	mov	r25, r24
     bda:	88 27       	eor	r24, r24
     bdc:	82 0f       	add	r24, r18
     bde:	91 1d       	adc	r25, r1
     be0:	a1 1d       	adc	r26, r1
     be2:	b1 1d       	adc	r27, r1
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	66 0f       	add	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	a1 1d       	adc	r26, r1
     bfe:	b1 1d       	adc	r27, r1
     c00:	e7 cf       	rjmp	.-50     	; 0xbd0 <_Z6microsv+0x1e>

00000c02 <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
     c08:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	85 bd       	out	0x25, r24	; 37
     c0e:	08 95       	ret

00000c10 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	cb 01       	movw	r24, r22
     c18:	aa 27       	eor	r26, r26
     c1a:	97 fd       	sbrc	r25, 7
     c1c:	a0 95       	com	r26
     c1e:	ba 2f       	mov	r27, r26
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	aa 1f       	adc	r26, r26
     c26:	bb 1f       	adc	r27, r27
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	9c 01       	movw	r18, r24
     c32:	ad 01       	movw	r20, r26
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	44 1f       	adc	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	44 1f       	adc	r20, r20
     c42:	55 1f       	adc	r21, r21
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	74 e2       	ldi	r23, 0x24	; 36
     c48:	84 ef       	ldi	r24, 0xF4	; 244
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	67 d3       	rcall	.+1742   	; 0x131c <__udivmodsi4>
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	31 09       	sbc	r19, r1
     c52:	20 97       	sbiw	r28, 0x00	; 0
     c54:	59 f4       	brne	.+22     	; 0xc6c <_Z10USART_initii+0x5c>
     c56:	30 93 c5 00 	sts	0x00C5, r19
     c5a:	20 93 c4 00 	sts	0x00C4, r18
     c5e:	88 e1       	ldi	r24, 0x18	; 24
     c60:	80 93 c1 00 	sts	0x00C1, r24
     c64:	86 e0       	ldi	r24, 0x06	; 6
     c66:	80 93 c2 00 	sts	0x00C2, r24
     c6a:	28 c0       	rjmp	.+80     	; 0xcbc <_Z10USART_initii+0xac>
     c6c:	c1 30       	cpi	r28, 0x01	; 1
     c6e:	d1 05       	cpc	r29, r1
     c70:	59 f4       	brne	.+22     	; 0xc88 <_Z10USART_initii+0x78>
     c72:	30 93 cd 00 	sts	0x00CD, r19
     c76:	20 93 cc 00 	sts	0x00CC, r18
     c7a:	88 e1       	ldi	r24, 0x18	; 24
     c7c:	80 93 c9 00 	sts	0x00C9, r24
     c80:	86 e0       	ldi	r24, 0x06	; 6
     c82:	80 93 ca 00 	sts	0x00CA, r24
     c86:	1a c0       	rjmp	.+52     	; 0xcbc <_Z10USART_initii+0xac>
     c88:	c2 30       	cpi	r28, 0x02	; 2
     c8a:	d1 05       	cpc	r29, r1
     c8c:	59 f4       	brne	.+22     	; 0xca4 <_Z10USART_initii+0x94>
     c8e:	30 93 d5 00 	sts	0x00D5, r19
     c92:	20 93 d4 00 	sts	0x00D4, r18
     c96:	88 e1       	ldi	r24, 0x18	; 24
     c98:	80 93 d1 00 	sts	0x00D1, r24
     c9c:	86 e0       	ldi	r24, 0x06	; 6
     c9e:	80 93 d2 00 	sts	0x00D2, r24
     ca2:	0c c0       	rjmp	.+24     	; 0xcbc <_Z10USART_initii+0xac>
     ca4:	23 97       	sbiw	r28, 0x03	; 3
     ca6:	51 f4       	brne	.+20     	; 0xcbc <_Z10USART_initii+0xac>
     ca8:	30 93 35 01 	sts	0x0135, r19
     cac:	20 93 34 01 	sts	0x0134, r18
     cb0:	88 e1       	ldi	r24, 0x18	; 24
     cb2:	80 93 31 01 	sts	0x0131, r24
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	80 93 32 01 	sts	0x0132, r24
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <_Z10USART_sendih>:
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	41 f4       	brne	.+16     	; 0xcd6 <_Z10USART_sendih+0x14>
     cc6:	e0 ec       	ldi	r30, 0xC0	; 192
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	85 ff       	sbrs	r24, 5
     cce:	fd cf       	rjmp	.-6      	; 0xcca <_Z10USART_sendih+0x8>
     cd0:	60 93 c6 00 	sts	0x00C6, r22
     cd4:	08 95       	ret
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	41 f4       	brne	.+16     	; 0xcec <_Z10USART_sendih+0x2a>
     cdc:	e8 ec       	ldi	r30, 0xC8	; 200
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	85 ff       	sbrs	r24, 5
     ce4:	fd cf       	rjmp	.-6      	; 0xce0 <_Z10USART_sendih+0x1e>
     ce6:	60 93 ce 00 	sts	0x00CE, r22
     cea:	08 95       	ret
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	91 05       	cpc	r25, r1
     cf0:	41 f4       	brne	.+16     	; 0xd02 <_Z10USART_sendih+0x40>
     cf2:	e0 ed       	ldi	r30, 0xD0	; 208
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	85 ff       	sbrs	r24, 5
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <_Z10USART_sendih+0x34>
     cfc:	60 93 d6 00 	sts	0x00D6, r22
     d00:	08 95       	ret
     d02:	03 97       	sbiw	r24, 0x03	; 3
     d04:	39 f4       	brne	.+14     	; 0xd14 <_Z10USART_sendih+0x52>
     d06:	e0 e3       	ldi	r30, 0x30	; 48
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	80 81       	ld	r24, Z
     d0c:	85 ff       	sbrs	r24, 5
     d0e:	fd cf       	rjmp	.-6      	; 0xd0a <_Z10USART_sendih+0x48>
     d10:	60 93 36 01 	sts	0x0136, r22
     d14:	08 95       	ret

00000d16 <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	8c 01       	movw	r16, r24
     d20:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     d22:	68 81       	ld	r22, Y
     d24:	66 23       	and	r22, r22
     d26:	31 f0       	breq	.+12     	; 0xd34 <_Z15USART_putstringiPKc+0x1e>
     d28:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
     d2a:	c8 01       	movw	r24, r16
     d2c:	ca df       	rcall	.-108    	; 0xcc2 <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     d2e:	69 91       	ld	r22, Y+
     d30:	61 11       	cpse	r22, r1
     d32:	fb cf       	rjmp	.-10     	; 0xd2a <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <_Z10initialisev>:

bool initialise()
{
	bool success = true;
	
	USART_init(USART_PC,9600);
     d3e:	60 e8       	ldi	r22, 0x80	; 128
     d40:	75 e2       	ldi	r23, 0x25	; 37
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	64 df       	rcall	.-312    	; 0xc10 <_Z10USART_initii>
	initTimers();
     d48:	5c df       	rcall	.-328    	; 0xc02 <_Z10initTimersv>
	rx_init();
     d4a:	cc de       	rcall	.-616    	; 0xae4 <_Z7rx_initv>
	/*
	if(altimeter_init()==false)
		success=false;
		*/

	quad_output_init();
     d4c:	7a dd       	rcall	.-1292   	; 0x842 <_Z16quad_output_initv>
			_delay_ms(200);
		}
	}
	*/
	
	i2c_init();
     d4e:	87 da       	rcall	.-2802   	; 0x25e <i2c_init>
	
	init_HMC5883L();
     d50:	55 dc       	rcall	.-1878   	; 0x5fc <_Z13init_HMC5883Lv>
	
	debug_println("Initialization succeeded!");
     d52:	8c e0       	ldi	r24, 0x0C	; 12
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	21 dd       	rcall	.-1470   	; 0x79a <_Z13debug_printlnPKc>
	
	//beep some pattern I can recognize
	debug_beep_long();
     d58:	55 dd       	rcall	.-1366   	; 0x804 <_Z15debug_beep_longv>
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	84 e3       	ldi	r24, 0x34	; 52
     d5e:	9c e0       	ldi	r25, 0x0C	; 12
     d60:	21 50       	subi	r18, 0x01	; 1
     d62:	80 40       	sbci	r24, 0x00	; 0
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <_Z10initialisev+0x22>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <_Z10initialisev+0x2c>
     d6a:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d6c:	3f dd       	rcall	.-1410   	; 0x7ec <_Z10debug_beepv>
     d6e:	2f ef       	ldi	r18, 0xFF	; 255
     d70:	84 e3       	ldi	r24, 0x34	; 52
     d72:	9c e0       	ldi	r25, 0x0C	; 12
     d74:	21 50       	subi	r18, 0x01	; 1
     d76:	80 40       	sbci	r24, 0x00	; 0
     d78:	90 40       	sbci	r25, 0x00	; 0
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <_Z10initialisev+0x36>
     d7c:	00 c0       	rjmp	.+0      	; 0xd7e <_Z10initialisev+0x40>
     d7e:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d80:	35 dd       	rcall	.-1430   	; 0x7ec <_Z10debug_beepv>
     d82:	2f ef       	ldi	r18, 0xFF	; 255
     d84:	84 e3       	ldi	r24, 0x34	; 52
     d86:	9c e0       	ldi	r25, 0x0C	; 12
     d88:	21 50       	subi	r18, 0x01	; 1
     d8a:	80 40       	sbci	r24, 0x00	; 0
     d8c:	90 40       	sbci	r25, 0x00	; 0
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <_Z10initialisev+0x4a>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <_Z10initialisev+0x54>
     d92:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d94:	2b dd       	rcall	.-1450   	; 0x7ec <_Z10debug_beepv>
     d96:	2f ef       	ldi	r18, 0xFF	; 255
     d98:	84 e3       	ldi	r24, 0x34	; 52
     d9a:	9c e0       	ldi	r25, 0x0C	; 12
     d9c:	21 50       	subi	r18, 0x01	; 1
     d9e:	80 40       	sbci	r24, 0x00	; 0
     da0:	90 40       	sbci	r25, 0x00	; 0
     da2:	e1 f7       	brne	.-8      	; 0xd9c <_Z10initialisev+0x5e>
     da4:	00 c0       	rjmp	.+0      	; 0xda6 <_Z10initialisev+0x68>
     da6:	00 00       	nop
	_delay_ms(250);
	debug_beep_long();
     da8:	2d dd       	rcall	.-1446   	; 0x804 <_Z15debug_beep_longv>
	
	return success;
}
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	08 95       	ret

00000dae <main>:
#include <stdio.h>

bool initialise();

int main(void)
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	2c 97       	sbiw	r28, 0x0c	; 12
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	initialise();
     dc2:	bd df       	rcall	.-134    	; 0xd3e <_Z10initialisev>
	
	adxl345_init();
     dc4:	ab da       	rcall	.-2730   	; 0x31c <_Z12adxl345_initv>
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	89 e6       	ldi	r24, 0x69	; 105
     dca:	98 e1       	ldi	r25, 0x18	; 24
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	80 40       	sbci	r24, 0x00	; 0
     dd0:	90 40       	sbci	r25, 0x00	; 0
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <main+0x1e>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <main+0x28>
     dd6:	00 00       	nop
		//rx_update();
		_delay_ms(500);
		double accel_x, accel_y, accel_z;
	
		
		adxl345_getdata(&accel_x,&accel_y,&accel_z);
     dd8:	ae 01       	movw	r20, r28
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	be 01       	movw	r22, r28
     de0:	6b 5f       	subi	r22, 0xFB	; 251
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
     de4:	ce 01       	movw	r24, r28
     de6:	09 96       	adiw	r24, 0x09	; 9
     de8:	d6 da       	rcall	.-2644   	; 0x396 <_Z15adxl345_getdataPdS_S_>
		debug_printf(accel_x);
     dea:	69 85       	ldd	r22, Y+9	; 0x09
     dec:	7a 85       	ldd	r23, Y+10	; 0x0a
     dee:	8b 85       	ldd	r24, Y+11	; 0x0b
     df0:	9c 85       	ldd	r25, Y+12	; 0x0c
     df2:	dd dc       	rcall	.-1606   	; 0x7ae <_Z12debug_printff>
		debug_print("\t");
     df4:	86 e2       	ldi	r24, 0x26	; 38
     df6:	92 e0       	ldi	r25, 0x02	; 2
     df8:	cb dc       	rcall	.-1642   	; 0x790 <_Z11debug_printPKc>
		debug_printf(accel_y);
     dfa:	6d 81       	ldd	r22, Y+5	; 0x05
     dfc:	7e 81       	ldd	r23, Y+6	; 0x06
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	d5 dc       	rcall	.-1622   	; 0x7ae <_Z12debug_printff>
		debug_print("\t");
     e04:	86 e2       	ldi	r24, 0x26	; 38
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	c3 dc       	rcall	.-1658   	; 0x790 <_Z11debug_printPKc>
		debug_printf(accel_z);
     e0a:	69 81       	ldd	r22, Y+1	; 0x01
     e0c:	7a 81       	ldd	r23, Y+2	; 0x02
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	cd dc       	rcall	.-1638   	; 0x7ae <_Z12debug_printff>
		debug_print("\t");
     e14:	86 e2       	ldi	r24, 0x26	; 38
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	bb dc       	rcall	.-1674   	; 0x790 <_Z11debug_printPKc>
		debug_printf(getHeading());
     e1a:	06 dc       	rcall	.-2036   	; 0x628 <_Z10getHeadingv>
     e1c:	c8 dc       	rcall	.-1648   	; 0x7ae <_Z12debug_printff>
		debug_println("");
     e1e:	87 e2       	ldi	r24, 0x27	; 39
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	bb dc       	rcall	.-1674   	; 0x79a <_Z13debug_printlnPKc>
     e24:	d0 cf       	rjmp	.-96     	; 0xdc6 <main+0x18>

00000e26 <__subsf3>:
     e26:	50 58       	subi	r21, 0x80	; 128

00000e28 <__addsf3>:
     e28:	bb 27       	eor	r27, r27
     e2a:	aa 27       	eor	r26, r26
     e2c:	0e d0       	rcall	.+28     	; 0xe4a <__addsf3x>
     e2e:	cb c1       	rjmp	.+918    	; 0x11c6 <__fp_round>
     e30:	bc d1       	rcall	.+888    	; 0x11aa <__fp_pscA>
     e32:	30 f0       	brcs	.+12     	; 0xe40 <__addsf3+0x18>
     e34:	c1 d1       	rcall	.+898    	; 0x11b8 <__fp_pscB>
     e36:	20 f0       	brcs	.+8      	; 0xe40 <__addsf3+0x18>
     e38:	31 f4       	brne	.+12     	; 0xe46 <__addsf3+0x1e>
     e3a:	9f 3f       	cpi	r25, 0xFF	; 255
     e3c:	11 f4       	brne	.+4      	; 0xe42 <__addsf3+0x1a>
     e3e:	1e f4       	brtc	.+6      	; 0xe46 <__addsf3+0x1e>
     e40:	8c c1       	rjmp	.+792    	; 0x115a <__fp_nan>
     e42:	0e f4       	brtc	.+2      	; 0xe46 <__addsf3+0x1e>
     e44:	e0 95       	com	r30
     e46:	e7 fb       	bst	r30, 7
     e48:	82 c1       	rjmp	.+772    	; 0x114e <__fp_inf>

00000e4a <__addsf3x>:
     e4a:	e9 2f       	mov	r30, r25
     e4c:	cd d1       	rcall	.+922    	; 0x11e8 <__fp_split3>
     e4e:	80 f3       	brcs	.-32     	; 0xe30 <__addsf3+0x8>
     e50:	ba 17       	cp	r27, r26
     e52:	62 07       	cpc	r22, r18
     e54:	73 07       	cpc	r23, r19
     e56:	84 07       	cpc	r24, r20
     e58:	95 07       	cpc	r25, r21
     e5a:	18 f0       	brcs	.+6      	; 0xe62 <__addsf3x+0x18>
     e5c:	71 f4       	brne	.+28     	; 0xe7a <__addsf3x+0x30>
     e5e:	9e f5       	brtc	.+102    	; 0xec6 <__addsf3x+0x7c>
     e60:	e5 c1       	rjmp	.+970    	; 0x122c <__fp_zero>
     e62:	0e f4       	brtc	.+2      	; 0xe66 <__addsf3x+0x1c>
     e64:	e0 95       	com	r30
     e66:	0b 2e       	mov	r0, r27
     e68:	ba 2f       	mov	r27, r26
     e6a:	a0 2d       	mov	r26, r0
     e6c:	0b 01       	movw	r0, r22
     e6e:	b9 01       	movw	r22, r18
     e70:	90 01       	movw	r18, r0
     e72:	0c 01       	movw	r0, r24
     e74:	ca 01       	movw	r24, r20
     e76:	a0 01       	movw	r20, r0
     e78:	11 24       	eor	r1, r1
     e7a:	ff 27       	eor	r31, r31
     e7c:	59 1b       	sub	r21, r25
     e7e:	99 f0       	breq	.+38     	; 0xea6 <__addsf3x+0x5c>
     e80:	59 3f       	cpi	r21, 0xF9	; 249
     e82:	50 f4       	brcc	.+20     	; 0xe98 <__addsf3x+0x4e>
     e84:	50 3e       	cpi	r21, 0xE0	; 224
     e86:	68 f1       	brcs	.+90     	; 0xee2 <__addsf3x+0x98>
     e88:	1a 16       	cp	r1, r26
     e8a:	f0 40       	sbci	r31, 0x00	; 0
     e8c:	a2 2f       	mov	r26, r18
     e8e:	23 2f       	mov	r18, r19
     e90:	34 2f       	mov	r19, r20
     e92:	44 27       	eor	r20, r20
     e94:	58 5f       	subi	r21, 0xF8	; 248
     e96:	f3 cf       	rjmp	.-26     	; 0xe7e <__addsf3x+0x34>
     e98:	46 95       	lsr	r20
     e9a:	37 95       	ror	r19
     e9c:	27 95       	ror	r18
     e9e:	a7 95       	ror	r26
     ea0:	f0 40       	sbci	r31, 0x00	; 0
     ea2:	53 95       	inc	r21
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <__addsf3x+0x4e>
     ea6:	7e f4       	brtc	.+30     	; 0xec6 <__addsf3x+0x7c>
     ea8:	1f 16       	cp	r1, r31
     eaa:	ba 0b       	sbc	r27, r26
     eac:	62 0b       	sbc	r22, r18
     eae:	73 0b       	sbc	r23, r19
     eb0:	84 0b       	sbc	r24, r20
     eb2:	ba f0       	brmi	.+46     	; 0xee2 <__addsf3x+0x98>
     eb4:	91 50       	subi	r25, 0x01	; 1
     eb6:	a1 f0       	breq	.+40     	; 0xee0 <__addsf3x+0x96>
     eb8:	ff 0f       	add	r31, r31
     eba:	bb 1f       	adc	r27, r27
     ebc:	66 1f       	adc	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	c2 f7       	brpl	.-16     	; 0xeb4 <__addsf3x+0x6a>
     ec4:	0e c0       	rjmp	.+28     	; 0xee2 <__addsf3x+0x98>
     ec6:	ba 0f       	add	r27, r26
     ec8:	62 1f       	adc	r22, r18
     eca:	73 1f       	adc	r23, r19
     ecc:	84 1f       	adc	r24, r20
     ece:	48 f4       	brcc	.+18     	; 0xee2 <__addsf3x+0x98>
     ed0:	87 95       	ror	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	b7 95       	ror	r27
     ed8:	f7 95       	ror	r31
     eda:	9e 3f       	cpi	r25, 0xFE	; 254
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__addsf3x+0x96>
     ede:	b3 cf       	rjmp	.-154    	; 0xe46 <__addsf3+0x1e>
     ee0:	93 95       	inc	r25
     ee2:	88 0f       	add	r24, r24
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <__addsf3x+0x9e>
     ee6:	99 27       	eor	r25, r25
     ee8:	ee 0f       	add	r30, r30
     eea:	97 95       	ror	r25
     eec:	87 95       	ror	r24
     eee:	08 95       	ret
     ef0:	5c d1       	rcall	.+696    	; 0x11aa <__fp_pscA>
     ef2:	58 f0       	brcs	.+22     	; 0xf0a <__addsf3x+0xc0>
     ef4:	80 e8       	ldi	r24, 0x80	; 128
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	09 f4       	brne	.+2      	; 0xefc <__addsf3x+0xb2>
     efa:	9e ef       	ldi	r25, 0xFE	; 254
     efc:	5d d1       	rcall	.+698    	; 0x11b8 <__fp_pscB>
     efe:	28 f0       	brcs	.+10     	; 0xf0a <__addsf3x+0xc0>
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	51 e0       	ldi	r21, 0x01	; 1
     f04:	59 f4       	brne	.+22     	; 0xf1c <atan2+0xe>
     f06:	5e ef       	ldi	r21, 0xFE	; 254
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <atan2+0xe>
     f0a:	27 c1       	rjmp	.+590    	; 0x115a <__fp_nan>
     f0c:	8f c1       	rjmp	.+798    	; 0x122c <__fp_zero>

00000f0e <atan2>:
     f0e:	e9 2f       	mov	r30, r25
     f10:	e0 78       	andi	r30, 0x80	; 128
     f12:	6a d1       	rcall	.+724    	; 0x11e8 <__fp_split3>
     f14:	68 f3       	brcs	.-38     	; 0xef0 <__addsf3x+0xa6>
     f16:	09 2e       	mov	r0, r25
     f18:	05 2a       	or	r0, r21
     f1a:	c1 f3       	breq	.-16     	; 0xf0c <__addsf3x+0xc2>
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	59 07       	cpc	r21, r25
     f24:	38 f0       	brcs	.+14     	; 0xf34 <atan2+0x26>
     f26:	0e 2e       	mov	r0, r30
     f28:	07 f8       	bld	r0, 7
     f2a:	e0 25       	eor	r30, r0
     f2c:	69 f0       	breq	.+26     	; 0xf48 <atan2+0x3a>
     f2e:	e0 25       	eor	r30, r0
     f30:	e0 64       	ori	r30, 0x40	; 64
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <atan2+0x3a>
     f34:	ef 63       	ori	r30, 0x3F	; 63
     f36:	07 f8       	bld	r0, 7
     f38:	00 94       	com	r0
     f3a:	07 fa       	bst	r0, 7
     f3c:	db 01       	movw	r26, r22
     f3e:	b9 01       	movw	r22, r18
     f40:	9d 01       	movw	r18, r26
     f42:	dc 01       	movw	r26, r24
     f44:	ca 01       	movw	r24, r20
     f46:	ad 01       	movw	r20, r26
     f48:	ef 93       	push	r30
     f4a:	47 d0       	rcall	.+142    	; 0xfda <__divsf3_pse>
     f4c:	3c d1       	rcall	.+632    	; 0x11c6 <__fp_round>
     f4e:	0a d0       	rcall	.+20     	; 0xf64 <atan>
     f50:	5f 91       	pop	r21
     f52:	55 23       	and	r21, r21
     f54:	31 f0       	breq	.+12     	; 0xf62 <atan2+0x54>
     f56:	2b ed       	ldi	r18, 0xDB	; 219
     f58:	3f e0       	ldi	r19, 0x0F	; 15
     f5a:	49 e4       	ldi	r20, 0x49	; 73
     f5c:	50 fd       	sbrc	r21, 0
     f5e:	49 ec       	ldi	r20, 0xC9	; 201
     f60:	63 cf       	rjmp	.-314    	; 0xe28 <__addsf3>
     f62:	08 95       	ret

00000f64 <atan>:
     f64:	df 93       	push	r29
     f66:	dd 27       	eor	r29, r29
     f68:	b9 2f       	mov	r27, r25
     f6a:	bf 77       	andi	r27, 0x7F	; 127
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	5f e3       	ldi	r21, 0x3F	; 63
     f70:	16 16       	cp	r1, r22
     f72:	17 06       	cpc	r1, r23
     f74:	48 07       	cpc	r20, r24
     f76:	5b 07       	cpc	r21, r27
     f78:	10 f4       	brcc	.+4      	; 0xf7e <atan+0x1a>
     f7a:	d9 2f       	mov	r29, r25
     f7c:	62 d1       	rcall	.+708    	; 0x1242 <inverse>
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	7f 93       	push	r23
     f84:	6f 93       	push	r22
     f86:	c7 d1       	rcall	.+910    	; 0x1316 <square>
     f88:	e4 ee       	ldi	r30, 0xE4	; 228
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	e9 d0       	rcall	.+466    	; 0x1160 <__fp_powser>
     f8e:	1b d1       	rcall	.+566    	; 0x11c6 <__fp_round>
     f90:	2f 91       	pop	r18
     f92:	3f 91       	pop	r19
     f94:	4f 91       	pop	r20
     f96:	5f 91       	pop	r21
     f98:	67 d1       	rcall	.+718    	; 0x1268 <__mulsf3x>
     f9a:	dd 23       	and	r29, r29
     f9c:	49 f0       	breq	.+18     	; 0xfb0 <atan+0x4c>
     f9e:	90 58       	subi	r25, 0x80	; 128
     fa0:	a2 ea       	ldi	r26, 0xA2	; 162
     fa2:	2a ed       	ldi	r18, 0xDA	; 218
     fa4:	3f e0       	ldi	r19, 0x0F	; 15
     fa6:	49 ec       	ldi	r20, 0xC9	; 201
     fa8:	5f e3       	ldi	r21, 0x3F	; 63
     faa:	d0 78       	andi	r29, 0x80	; 128
     fac:	5d 27       	eor	r21, r29
     fae:	4d df       	rcall	.-358    	; 0xe4a <__addsf3x>
     fb0:	df 91       	pop	r29
     fb2:	09 c1       	rjmp	.+530    	; 0x11c6 <__fp_round>

00000fb4 <__cmpsf2>:
     fb4:	a8 d0       	rcall	.+336    	; 0x1106 <__fp_cmp>
     fb6:	08 f4       	brcc	.+2      	; 0xfba <__cmpsf2+0x6>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	08 95       	ret

00000fbc <__divsf3>:
     fbc:	0c d0       	rcall	.+24     	; 0xfd6 <__divsf3x>
     fbe:	03 c1       	rjmp	.+518    	; 0x11c6 <__fp_round>
     fc0:	fb d0       	rcall	.+502    	; 0x11b8 <__fp_pscB>
     fc2:	40 f0       	brcs	.+16     	; 0xfd4 <__divsf3+0x18>
     fc4:	f2 d0       	rcall	.+484    	; 0x11aa <__fp_pscA>
     fc6:	30 f0       	brcs	.+12     	; 0xfd4 <__divsf3+0x18>
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <__divsf3+0x16>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__divsf3+0x18>
     fce:	bf c0       	rjmp	.+382    	; 0x114e <__fp_inf>
     fd0:	51 11       	cpse	r21, r1
     fd2:	2d c1       	rjmp	.+602    	; 0x122e <__fp_szero>
     fd4:	c2 c0       	rjmp	.+388    	; 0x115a <__fp_nan>

00000fd6 <__divsf3x>:
     fd6:	08 d1       	rcall	.+528    	; 0x11e8 <__fp_split3>
     fd8:	98 f3       	brcs	.-26     	; 0xfc0 <__divsf3+0x4>

00000fda <__divsf3_pse>:
     fda:	99 23       	and	r25, r25
     fdc:	c9 f3       	breq	.-14     	; 0xfd0 <__divsf3+0x14>
     fde:	55 23       	and	r21, r21
     fe0:	b1 f3       	breq	.-20     	; 0xfce <__divsf3+0x12>
     fe2:	95 1b       	sub	r25, r21
     fe4:	55 0b       	sbc	r21, r21
     fe6:	bb 27       	eor	r27, r27
     fe8:	aa 27       	eor	r26, r26
     fea:	62 17       	cp	r22, r18
     fec:	73 07       	cpc	r23, r19
     fee:	84 07       	cpc	r24, r20
     ff0:	38 f0       	brcs	.+14     	; 0x1000 <__divsf3_pse+0x26>
     ff2:	9f 5f       	subi	r25, 0xFF	; 255
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	44 1f       	adc	r20, r20
     ffc:	aa 1f       	adc	r26, r26
     ffe:	a9 f3       	breq	.-22     	; 0xfea <__divsf3_pse+0x10>
    1000:	33 d0       	rcall	.+102    	; 0x1068 <__divsf3_pse+0x8e>
    1002:	0e 2e       	mov	r0, r30
    1004:	3a f0       	brmi	.+14     	; 0x1014 <__divsf3_pse+0x3a>
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	30 d0       	rcall	.+96     	; 0x106a <__divsf3_pse+0x90>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	50 40       	sbci	r21, 0x00	; 0
    100e:	e6 95       	lsr	r30
    1010:	00 1c       	adc	r0, r0
    1012:	ca f7       	brpl	.-14     	; 0x1006 <__divsf3_pse+0x2c>
    1014:	29 d0       	rcall	.+82     	; 0x1068 <__divsf3_pse+0x8e>
    1016:	fe 2f       	mov	r31, r30
    1018:	27 d0       	rcall	.+78     	; 0x1068 <__divsf3_pse+0x8e>
    101a:	66 0f       	add	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	bb 1f       	adc	r27, r27
    1022:	26 17       	cp	r18, r22
    1024:	37 07       	cpc	r19, r23
    1026:	48 07       	cpc	r20, r24
    1028:	ab 07       	cpc	r26, r27
    102a:	b0 e8       	ldi	r27, 0x80	; 128
    102c:	09 f0       	breq	.+2      	; 0x1030 <__divsf3_pse+0x56>
    102e:	bb 0b       	sbc	r27, r27
    1030:	80 2d       	mov	r24, r0
    1032:	bf 01       	movw	r22, r30
    1034:	ff 27       	eor	r31, r31
    1036:	93 58       	subi	r25, 0x83	; 131
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	2a f0       	brmi	.+10     	; 0x1046 <__divsf3_pse+0x6c>
    103c:	9e 3f       	cpi	r25, 0xFE	; 254
    103e:	51 05       	cpc	r21, r1
    1040:	68 f0       	brcs	.+26     	; 0x105c <__divsf3_pse+0x82>
    1042:	85 c0       	rjmp	.+266    	; 0x114e <__fp_inf>
    1044:	f4 c0       	rjmp	.+488    	; 0x122e <__fp_szero>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	ec f3       	brlt	.-6      	; 0x1044 <__divsf3_pse+0x6a>
    104a:	98 3e       	cpi	r25, 0xE8	; 232
    104c:	dc f3       	brlt	.-10     	; 0x1044 <__divsf3_pse+0x6a>
    104e:	86 95       	lsr	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f7 95       	ror	r31
    1058:	9f 5f       	subi	r25, 0xFF	; 255
    105a:	c9 f7       	brne	.-14     	; 0x104e <__divsf3_pse+0x74>
    105c:	88 0f       	add	r24, r24
    105e:	91 1d       	adc	r25, r1
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	97 f9       	bld	r25, 7
    1066:	08 95       	ret
    1068:	e1 e0       	ldi	r30, 0x01	; 1
    106a:	66 0f       	add	r22, r22
    106c:	77 1f       	adc	r23, r23
    106e:	88 1f       	adc	r24, r24
    1070:	bb 1f       	adc	r27, r27
    1072:	62 17       	cp	r22, r18
    1074:	73 07       	cpc	r23, r19
    1076:	84 07       	cpc	r24, r20
    1078:	ba 07       	cpc	r27, r26
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__divsf3_pse+0xaa>
    107c:	62 1b       	sub	r22, r18
    107e:	73 0b       	sbc	r23, r19
    1080:	84 0b       	sbc	r24, r20
    1082:	ba 0b       	sbc	r27, r26
    1084:	ee 1f       	adc	r30, r30
    1086:	88 f7       	brcc	.-30     	; 0x106a <__divsf3_pse+0x90>
    1088:	e0 95       	com	r30
    108a:	08 95       	ret

0000108c <__floatunsisf>:
    108c:	e8 94       	clt
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <__floatsisf+0x12>

00001090 <__floatsisf>:
    1090:	97 fb       	bst	r25, 7
    1092:	3e f4       	brtc	.+14     	; 0x10a2 <__floatsisf+0x12>
    1094:	90 95       	com	r25
    1096:	80 95       	com	r24
    1098:	70 95       	com	r23
    109a:	61 95       	neg	r22
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	8f 4f       	sbci	r24, 0xFF	; 255
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	99 23       	and	r25, r25
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <__floatsisf+0x40>
    10a6:	f9 2f       	mov	r31, r25
    10a8:	96 e9       	ldi	r25, 0x96	; 150
    10aa:	bb 27       	eor	r27, r27
    10ac:	93 95       	inc	r25
    10ae:	f6 95       	lsr	r31
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	f1 11       	cpse	r31, r1
    10ba:	f8 cf       	rjmp	.-16     	; 0x10ac <__floatsisf+0x1c>
    10bc:	fa f4       	brpl	.+62     	; 0x10fc <__floatsisf+0x6c>
    10be:	bb 0f       	add	r27, r27
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <__floatsisf+0x36>
    10c2:	60 ff       	sbrs	r22, 0
    10c4:	1b c0       	rjmp	.+54     	; 0x10fc <__floatsisf+0x6c>
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <__floatsisf+0x6c>
    10d0:	88 23       	and	r24, r24
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <__floatsisf+0x48>
    10d4:	96 e9       	ldi	r25, 0x96	; 150
    10d6:	11 c0       	rjmp	.+34     	; 0x10fa <__floatsisf+0x6a>
    10d8:	77 23       	and	r23, r23
    10da:	21 f0       	breq	.+8      	; 0x10e4 <__floatsisf+0x54>
    10dc:	9e e8       	ldi	r25, 0x8E	; 142
    10de:	87 2f       	mov	r24, r23
    10e0:	76 2f       	mov	r23, r22
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__floatsisf+0x5e>
    10e4:	66 23       	and	r22, r22
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__floatsisf+0x74>
    10e8:	96 e8       	ldi	r25, 0x86	; 134
    10ea:	86 2f       	mov	r24, r22
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	2a f0       	brmi	.+10     	; 0x10fc <__floatsisf+0x6c>
    10f2:	9a 95       	dec	r25
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	da f7       	brpl	.-10     	; 0x10f2 <__floatsisf+0x62>
    10fc:	88 0f       	add	r24, r24
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret

00001106 <__fp_cmp>:
    1106:	99 0f       	add	r25, r25
    1108:	00 08       	sbc	r0, r0
    110a:	55 0f       	add	r21, r21
    110c:	aa 0b       	sbc	r26, r26
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	fe ef       	ldi	r31, 0xFE	; 254
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	e8 07       	cpc	r30, r24
    1118:	f9 07       	cpc	r31, r25
    111a:	c0 f0       	brcs	.+48     	; 0x114c <__fp_cmp+0x46>
    111c:	12 16       	cp	r1, r18
    111e:	13 06       	cpc	r1, r19
    1120:	e4 07       	cpc	r30, r20
    1122:	f5 07       	cpc	r31, r21
    1124:	98 f0       	brcs	.+38     	; 0x114c <__fp_cmp+0x46>
    1126:	62 1b       	sub	r22, r18
    1128:	73 0b       	sbc	r23, r19
    112a:	84 0b       	sbc	r24, r20
    112c:	95 0b       	sbc	r25, r21
    112e:	39 f4       	brne	.+14     	; 0x113e <__fp_cmp+0x38>
    1130:	0a 26       	eor	r0, r26
    1132:	61 f0       	breq	.+24     	; 0x114c <__fp_cmp+0x46>
    1134:	23 2b       	or	r18, r19
    1136:	24 2b       	or	r18, r20
    1138:	25 2b       	or	r18, r21
    113a:	21 f4       	brne	.+8      	; 0x1144 <__fp_cmp+0x3e>
    113c:	08 95       	ret
    113e:	0a 26       	eor	r0, r26
    1140:	09 f4       	brne	.+2      	; 0x1144 <__fp_cmp+0x3e>
    1142:	a1 40       	sbci	r26, 0x01	; 1
    1144:	a6 95       	lsr	r26
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	81 1d       	adc	r24, r1
    114a:	81 1d       	adc	r24, r1
    114c:	08 95       	ret

0000114e <__fp_inf>:
    114e:	97 f9       	bld	r25, 7
    1150:	9f 67       	ori	r25, 0x7F	; 127
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	08 95       	ret

0000115a <__fp_nan>:
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	80 ec       	ldi	r24, 0xC0	; 192
    115e:	08 95       	ret

00001160 <__fp_powser>:
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	1f 93       	push	r17
    1166:	0f 93       	push	r16
    1168:	ff 92       	push	r15
    116a:	ef 92       	push	r14
    116c:	df 92       	push	r13
    116e:	7b 01       	movw	r14, r22
    1170:	8c 01       	movw	r16, r24
    1172:	68 94       	set
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <__fp_powser+0x20>
    1176:	da 2e       	mov	r13, r26
    1178:	ef 01       	movw	r28, r30
    117a:	76 d0       	rcall	.+236    	; 0x1268 <__mulsf3x>
    117c:	fe 01       	movw	r30, r28
    117e:	e8 94       	clt
    1180:	a5 91       	lpm	r26, Z+
    1182:	25 91       	lpm	r18, Z+
    1184:	35 91       	lpm	r19, Z+
    1186:	45 91       	lpm	r20, Z+
    1188:	55 91       	lpm	r21, Z+
    118a:	ae f3       	brts	.-22     	; 0x1176 <__fp_powser+0x16>
    118c:	ef 01       	movw	r28, r30
    118e:	5d de       	rcall	.-838    	; 0xe4a <__addsf3x>
    1190:	fe 01       	movw	r30, r28
    1192:	97 01       	movw	r18, r14
    1194:	a8 01       	movw	r20, r16
    1196:	da 94       	dec	r13
    1198:	79 f7       	brne	.-34     	; 0x1178 <__fp_powser+0x18>
    119a:	df 90       	pop	r13
    119c:	ef 90       	pop	r14
    119e:	ff 90       	pop	r15
    11a0:	0f 91       	pop	r16
    11a2:	1f 91       	pop	r17
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <__fp_pscA>:
    11aa:	00 24       	eor	r0, r0
    11ac:	0a 94       	dec	r0
    11ae:	16 16       	cp	r1, r22
    11b0:	17 06       	cpc	r1, r23
    11b2:	18 06       	cpc	r1, r24
    11b4:	09 06       	cpc	r0, r25
    11b6:	08 95       	ret

000011b8 <__fp_pscB>:
    11b8:	00 24       	eor	r0, r0
    11ba:	0a 94       	dec	r0
    11bc:	12 16       	cp	r1, r18
    11be:	13 06       	cpc	r1, r19
    11c0:	14 06       	cpc	r1, r20
    11c2:	05 06       	cpc	r0, r21
    11c4:	08 95       	ret

000011c6 <__fp_round>:
    11c6:	09 2e       	mov	r0, r25
    11c8:	03 94       	inc	r0
    11ca:	00 0c       	add	r0, r0
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <__fp_round+0xc>
    11ce:	88 23       	and	r24, r24
    11d0:	52 f0       	brmi	.+20     	; 0x11e6 <__fp_round+0x20>
    11d2:	bb 0f       	add	r27, r27
    11d4:	40 f4       	brcc	.+16     	; 0x11e6 <__fp_round+0x20>
    11d6:	bf 2b       	or	r27, r31
    11d8:	11 f4       	brne	.+4      	; 0x11de <__fp_round+0x18>
    11da:	60 ff       	sbrs	r22, 0
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <__fp_round+0x20>
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	08 95       	ret

000011e8 <__fp_split3>:
    11e8:	57 fd       	sbrc	r21, 7
    11ea:	90 58       	subi	r25, 0x80	; 128
    11ec:	44 0f       	add	r20, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	59 f0       	breq	.+22     	; 0x1208 <__fp_splitA+0x10>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	71 f0       	breq	.+28     	; 0x1212 <__fp_splitA+0x1a>
    11f6:	47 95       	ror	r20

000011f8 <__fp_splitA>:
    11f8:	88 0f       	add	r24, r24
    11fa:	97 fb       	bst	r25, 7
    11fc:	99 1f       	adc	r25, r25
    11fe:	61 f0       	breq	.+24     	; 0x1218 <__fp_splitA+0x20>
    1200:	9f 3f       	cpi	r25, 0xFF	; 255
    1202:	79 f0       	breq	.+30     	; 0x1222 <__fp_splitA+0x2a>
    1204:	87 95       	ror	r24
    1206:	08 95       	ret
    1208:	12 16       	cp	r1, r18
    120a:	13 06       	cpc	r1, r19
    120c:	14 06       	cpc	r1, r20
    120e:	55 1f       	adc	r21, r21
    1210:	f2 cf       	rjmp	.-28     	; 0x11f6 <__fp_split3+0xe>
    1212:	46 95       	lsr	r20
    1214:	f1 df       	rcall	.-30     	; 0x11f8 <__fp_splitA>
    1216:	08 c0       	rjmp	.+16     	; 0x1228 <__fp_splitA+0x30>
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	18 06       	cpc	r1, r24
    121e:	99 1f       	adc	r25, r25
    1220:	f1 cf       	rjmp	.-30     	; 0x1204 <__fp_splitA+0xc>
    1222:	86 95       	lsr	r24
    1224:	71 05       	cpc	r23, r1
    1226:	61 05       	cpc	r22, r1
    1228:	08 94       	sec
    122a:	08 95       	ret

0000122c <__fp_zero>:
    122c:	e8 94       	clt

0000122e <__fp_szero>:
    122e:	bb 27       	eor	r27, r27
    1230:	66 27       	eor	r22, r22
    1232:	77 27       	eor	r23, r23
    1234:	cb 01       	movw	r24, r22
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret

0000123a <__gesf2>:
    123a:	65 df       	rcall	.-310    	; 0x1106 <__fp_cmp>
    123c:	08 f4       	brcc	.+2      	; 0x1240 <__gesf2+0x6>
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	08 95       	ret

00001242 <inverse>:
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	80 e8       	ldi	r24, 0x80	; 128
    124c:	9f e3       	ldi	r25, 0x3F	; 63
    124e:	b6 ce       	rjmp	.-660    	; 0xfbc <__divsf3>

00001250 <__mulsf3>:
    1250:	0b d0       	rcall	.+22     	; 0x1268 <__mulsf3x>
    1252:	b9 cf       	rjmp	.-142    	; 0x11c6 <__fp_round>
    1254:	aa df       	rcall	.-172    	; 0x11aa <__fp_pscA>
    1256:	28 f0       	brcs	.+10     	; 0x1262 <__mulsf3+0x12>
    1258:	af df       	rcall	.-162    	; 0x11b8 <__fp_pscB>
    125a:	18 f0       	brcs	.+6      	; 0x1262 <__mulsf3+0x12>
    125c:	95 23       	and	r25, r21
    125e:	09 f0       	breq	.+2      	; 0x1262 <__mulsf3+0x12>
    1260:	76 cf       	rjmp	.-276    	; 0x114e <__fp_inf>
    1262:	7b cf       	rjmp	.-266    	; 0x115a <__fp_nan>
    1264:	11 24       	eor	r1, r1
    1266:	e3 cf       	rjmp	.-58     	; 0x122e <__fp_szero>

00001268 <__mulsf3x>:
    1268:	bf df       	rcall	.-130    	; 0x11e8 <__fp_split3>
    126a:	a0 f3       	brcs	.-24     	; 0x1254 <__mulsf3+0x4>

0000126c <__mulsf3_pse>:
    126c:	95 9f       	mul	r25, r21
    126e:	d1 f3       	breq	.-12     	; 0x1264 <__mulsf3+0x14>
    1270:	95 0f       	add	r25, r21
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	55 1f       	adc	r21, r21
    1276:	62 9f       	mul	r22, r18
    1278:	f0 01       	movw	r30, r0
    127a:	72 9f       	mul	r23, r18
    127c:	bb 27       	eor	r27, r27
    127e:	f0 0d       	add	r31, r0
    1280:	b1 1d       	adc	r27, r1
    1282:	63 9f       	mul	r22, r19
    1284:	aa 27       	eor	r26, r26
    1286:	f0 0d       	add	r31, r0
    1288:	b1 1d       	adc	r27, r1
    128a:	aa 1f       	adc	r26, r26
    128c:	64 9f       	mul	r22, r20
    128e:	66 27       	eor	r22, r22
    1290:	b0 0d       	add	r27, r0
    1292:	a1 1d       	adc	r26, r1
    1294:	66 1f       	adc	r22, r22
    1296:	82 9f       	mul	r24, r18
    1298:	22 27       	eor	r18, r18
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	62 1f       	adc	r22, r18
    12a0:	73 9f       	mul	r23, r19
    12a2:	b0 0d       	add	r27, r0
    12a4:	a1 1d       	adc	r26, r1
    12a6:	62 1f       	adc	r22, r18
    12a8:	83 9f       	mul	r24, r19
    12aa:	a0 0d       	add	r26, r0
    12ac:	61 1d       	adc	r22, r1
    12ae:	22 1f       	adc	r18, r18
    12b0:	74 9f       	mul	r23, r20
    12b2:	33 27       	eor	r19, r19
    12b4:	a0 0d       	add	r26, r0
    12b6:	61 1d       	adc	r22, r1
    12b8:	23 1f       	adc	r18, r19
    12ba:	84 9f       	mul	r24, r20
    12bc:	60 0d       	add	r22, r0
    12be:	21 1d       	adc	r18, r1
    12c0:	82 2f       	mov	r24, r18
    12c2:	76 2f       	mov	r23, r22
    12c4:	6a 2f       	mov	r22, r26
    12c6:	11 24       	eor	r1, r1
    12c8:	9f 57       	subi	r25, 0x7F	; 127
    12ca:	50 40       	sbci	r21, 0x00	; 0
    12cc:	8a f0       	brmi	.+34     	; 0x12f0 <__mulsf3_pse+0x84>
    12ce:	e1 f0       	breq	.+56     	; 0x1308 <__mulsf3_pse+0x9c>
    12d0:	88 23       	and	r24, r24
    12d2:	4a f0       	brmi	.+18     	; 0x12e6 <__mulsf3_pse+0x7a>
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	bb 1f       	adc	r27, r27
    12da:	66 1f       	adc	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	a9 f7       	brne	.-22     	; 0x12d0 <__mulsf3_pse+0x64>
    12e6:	9e 3f       	cpi	r25, 0xFE	; 254
    12e8:	51 05       	cpc	r21, r1
    12ea:	70 f0       	brcs	.+28     	; 0x1308 <__mulsf3_pse+0x9c>
    12ec:	30 cf       	rjmp	.-416    	; 0x114e <__fp_inf>
    12ee:	9f cf       	rjmp	.-194    	; 0x122e <__fp_szero>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	ec f3       	brlt	.-6      	; 0x12ee <__mulsf3_pse+0x82>
    12f4:	98 3e       	cpi	r25, 0xE8	; 232
    12f6:	dc f3       	brlt	.-10     	; 0x12ee <__mulsf3_pse+0x82>
    12f8:	86 95       	lsr	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f7 95       	ror	r31
    1302:	e7 95       	ror	r30
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	c1 f7       	brne	.-16     	; 0x12f8 <__mulsf3_pse+0x8c>
    1308:	fe 2b       	or	r31, r30
    130a:	88 0f       	add	r24, r24
    130c:	91 1d       	adc	r25, r1
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <square>:
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	9a cf       	rjmp	.-204    	; 0x1250 <__mulsf3>

0000131c <__udivmodsi4>:
    131c:	a1 e2       	ldi	r26, 0x21	; 33
    131e:	1a 2e       	mov	r1, r26
    1320:	aa 1b       	sub	r26, r26
    1322:	bb 1b       	sub	r27, r27
    1324:	fd 01       	movw	r30, r26
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <__udivmodsi4_ep>

00001328 <__udivmodsi4_loop>:
    1328:	aa 1f       	adc	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	ee 1f       	adc	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	a2 17       	cp	r26, r18
    1332:	b3 07       	cpc	r27, r19
    1334:	e4 07       	cpc	r30, r20
    1336:	f5 07       	cpc	r31, r21
    1338:	20 f0       	brcs	.+8      	; 0x1342 <__udivmodsi4_ep>
    133a:	a2 1b       	sub	r26, r18
    133c:	b3 0b       	sbc	r27, r19
    133e:	e4 0b       	sbc	r30, r20
    1340:	f5 0b       	sbc	r31, r21

00001342 <__udivmodsi4_ep>:
    1342:	66 1f       	adc	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a 94       	dec	r1
    134c:	69 f7       	brne	.-38     	; 0x1328 <__udivmodsi4_loop>
    134e:	60 95       	com	r22
    1350:	70 95       	com	r23
    1352:	80 95       	com	r24
    1354:	90 95       	com	r25
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	bd 01       	movw	r22, r26
    135c:	cf 01       	movw	r24, r30
    135e:	08 95       	ret

00001360 <dtostrf>:
    1360:	ef 92       	push	r14
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	e8 01       	movw	r28, r16
    136c:	47 ff       	sbrs	r20, 7
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <dtostrf+0x14>
    1370:	34 e1       	ldi	r19, 0x14	; 20
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <dtostrf+0x16>
    1374:	34 e0       	ldi	r19, 0x04	; 4
    1376:	e4 2f       	mov	r30, r20
    1378:	ff 27       	eor	r31, r31
    137a:	e7 fd       	sbrc	r30, 7
    137c:	f0 95       	com	r31
    137e:	f7 ff       	sbrs	r31, 7
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <dtostrf+0x28>
    1382:	f1 95       	neg	r31
    1384:	e1 95       	neg	r30
    1386:	f1 09       	sbc	r31, r1
    1388:	e3 2e       	mov	r14, r19
    138a:	02 2f       	mov	r16, r18
    138c:	2e 2f       	mov	r18, r30
    138e:	ae 01       	movw	r20, r28
    1390:	07 d0       	rcall	.+14     	; 0x13a0 <dtoa_prf>
    1392:	ce 01       	movw	r24, r28
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <dtoa_prf>:
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	29 97       	sbiw	r28, 0x09	; 9
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	6a 01       	movw	r12, r20
    13cc:	b2 2e       	mov	r11, r18
    13ce:	10 2f       	mov	r17, r16
    13d0:	0c 33       	cpi	r16, 0x3C	; 60
    13d2:	20 f4       	brcc	.+8      	; 0x13dc <dtoa_prf+0x3c>
    13d4:	ff 24       	eor	r15, r15
    13d6:	f3 94       	inc	r15
    13d8:	f0 0e       	add	r15, r16
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <dtoa_prf+0x40>
    13dc:	4c e3       	ldi	r20, 0x3C	; 60
    13de:	f4 2e       	mov	r15, r20
    13e0:	0f 2d       	mov	r16, r15
    13e2:	27 e0       	ldi	r18, 0x07	; 7
    13e4:	ae 01       	movw	r20, r28
    13e6:	4f 5f       	subi	r20, 0xFF	; 255
    13e8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ea:	57 d1       	rcall	.+686    	; 0x169a <__ftoa_engine>
    13ec:	79 81       	ldd	r23, Y+1	; 0x01
    13ee:	27 2f       	mov	r18, r23
    13f0:	29 70       	andi	r18, 0x09	; 9
    13f2:	21 30       	cpi	r18, 0x01	; 1
    13f4:	31 f0       	breq	.+12     	; 0x1402 <dtoa_prf+0x62>
    13f6:	e1 fc       	sbrc	r14, 1
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <dtoa_prf+0x66>
    13fa:	e0 fc       	sbrc	r14, 0
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <dtoa_prf+0x6a>
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	05 c0       	rjmp	.+10     	; 0x140c <dtoa_prf+0x6c>
    1402:	6d e2       	ldi	r22, 0x2D	; 45
    1404:	03 c0       	rjmp	.+6      	; 0x140c <dtoa_prf+0x6c>
    1406:	6b e2       	ldi	r22, 0x2B	; 43
    1408:	01 c0       	rjmp	.+2      	; 0x140c <dtoa_prf+0x6c>
    140a:	60 e2       	ldi	r22, 0x20	; 32
    140c:	ae 2d       	mov	r26, r14
    140e:	a0 71       	andi	r26, 0x10	; 16
    1410:	73 ff       	sbrs	r23, 3
    1412:	36 c0       	rjmp	.+108    	; 0x1480 <dtoa_prf+0xe0>
    1414:	66 23       	and	r22, r22
    1416:	11 f0       	breq	.+4      	; 0x141c <dtoa_prf+0x7c>
    1418:	84 e0       	ldi	r24, 0x04	; 4
    141a:	01 c0       	rjmp	.+2      	; 0x141e <dtoa_prf+0x7e>
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	8b 15       	cp	r24, r11
    1420:	10 f4       	brcc	.+4      	; 0x1426 <dtoa_prf+0x86>
    1422:	b8 1a       	sub	r11, r24
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <dtoa_prf+0x88>
    1426:	b1 2c       	mov	r11, r1
    1428:	a1 11       	cpse	r26, r1
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <dtoa_prf+0xa2>
    142c:	f6 01       	movw	r30, r12
    142e:	8b 2d       	mov	r24, r11
    1430:	90 e2       	ldi	r25, 0x20	; 32
    1432:	88 23       	and	r24, r24
    1434:	19 f0       	breq	.+6      	; 0x143c <dtoa_prf+0x9c>
    1436:	91 93       	st	Z+, r25
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	fb cf       	rjmp	.-10     	; 0x1432 <dtoa_prf+0x92>
    143c:	cb 0c       	add	r12, r11
    143e:	d1 1c       	adc	r13, r1
    1440:	b1 2c       	mov	r11, r1
    1442:	66 23       	and	r22, r22
    1444:	31 f0       	breq	.+12     	; 0x1452 <dtoa_prf+0xb2>
    1446:	f6 01       	movw	r30, r12
    1448:	60 83       	st	Z, r22
    144a:	96 01       	movw	r18, r12
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	69 01       	movw	r12, r18
    1452:	c6 01       	movw	r24, r12
    1454:	03 96       	adiw	r24, 0x03	; 3
    1456:	e2 fe       	sbrs	r14, 2
    1458:	05 c0       	rjmp	.+10     	; 0x1464 <dtoa_prf+0xc4>
    145a:	2e e4       	ldi	r18, 0x4E	; 78
    145c:	f6 01       	movw	r30, r12
    145e:	20 83       	st	Z, r18
    1460:	31 e4       	ldi	r19, 0x41	; 65
    1462:	04 c0       	rjmp	.+8      	; 0x146c <dtoa_prf+0xcc>
    1464:	2e e6       	ldi	r18, 0x6E	; 110
    1466:	f6 01       	movw	r30, r12
    1468:	20 83       	st	Z, r18
    146a:	31 e6       	ldi	r19, 0x61	; 97
    146c:	31 83       	std	Z+1, r19	; 0x01
    146e:	22 83       	std	Z+2, r18	; 0x02
    1470:	fc 01       	movw	r30, r24
    1472:	2b 2d       	mov	r18, r11
    1474:	30 e2       	ldi	r19, 0x20	; 32
    1476:	22 23       	and	r18, r18
    1478:	f1 f1       	breq	.+124    	; 0x14f6 <dtoa_prf+0x156>
    147a:	31 93       	st	Z+, r19
    147c:	21 50       	subi	r18, 0x01	; 1
    147e:	fb cf       	rjmp	.-10     	; 0x1476 <dtoa_prf+0xd6>
    1480:	72 ff       	sbrs	r23, 2
    1482:	40 c0       	rjmp	.+128    	; 0x1504 <dtoa_prf+0x164>
    1484:	66 23       	and	r22, r22
    1486:	11 f0       	breq	.+4      	; 0x148c <dtoa_prf+0xec>
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	01 c0       	rjmp	.+2      	; 0x148e <dtoa_prf+0xee>
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	8b 15       	cp	r24, r11
    1490:	10 f4       	brcc	.+4      	; 0x1496 <dtoa_prf+0xf6>
    1492:	b8 1a       	sub	r11, r24
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <dtoa_prf+0xf8>
    1496:	b1 2c       	mov	r11, r1
    1498:	a1 11       	cpse	r26, r1
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <dtoa_prf+0x112>
    149c:	f6 01       	movw	r30, r12
    149e:	8b 2d       	mov	r24, r11
    14a0:	90 e2       	ldi	r25, 0x20	; 32
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <dtoa_prf+0x10c>
    14a6:	91 93       	st	Z+, r25
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	fb cf       	rjmp	.-10     	; 0x14a2 <dtoa_prf+0x102>
    14ac:	cb 0c       	add	r12, r11
    14ae:	d1 1c       	adc	r13, r1
    14b0:	b1 2c       	mov	r11, r1
    14b2:	66 23       	and	r22, r22
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <dtoa_prf+0x122>
    14b6:	f6 01       	movw	r30, r12
    14b8:	60 83       	st	Z, r22
    14ba:	96 01       	movw	r18, r12
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	69 01       	movw	r12, r18
    14c2:	c6 01       	movw	r24, r12
    14c4:	03 96       	adiw	r24, 0x03	; 3
    14c6:	e2 fe       	sbrs	r14, 2
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <dtoa_prf+0x138>
    14ca:	29 e4       	ldi	r18, 0x49	; 73
    14cc:	f6 01       	movw	r30, r12
    14ce:	20 83       	st	Z, r18
    14d0:	2e e4       	ldi	r18, 0x4E	; 78
    14d2:	21 83       	std	Z+1, r18	; 0x01
    14d4:	26 e4       	ldi	r18, 0x46	; 70
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <dtoa_prf+0x144>
    14d8:	29 e6       	ldi	r18, 0x69	; 105
    14da:	f6 01       	movw	r30, r12
    14dc:	20 83       	st	Z, r18
    14de:	2e e6       	ldi	r18, 0x6E	; 110
    14e0:	21 83       	std	Z+1, r18	; 0x01
    14e2:	26 e6       	ldi	r18, 0x66	; 102
    14e4:	22 83       	std	Z+2, r18	; 0x02
    14e6:	fc 01       	movw	r30, r24
    14e8:	2b 2d       	mov	r18, r11
    14ea:	30 e2       	ldi	r19, 0x20	; 32
    14ec:	22 23       	and	r18, r18
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <dtoa_prf+0x156>
    14f0:	31 93       	st	Z+, r19
    14f2:	21 50       	subi	r18, 0x01	; 1
    14f4:	fb cf       	rjmp	.-10     	; 0x14ec <dtoa_prf+0x14c>
    14f6:	fc 01       	movw	r30, r24
    14f8:	eb 0d       	add	r30, r11
    14fa:	f1 1d       	adc	r31, r1
    14fc:	10 82       	st	Z, r1
    14fe:	8e ef       	ldi	r24, 0xFE	; 254
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	b7 c0       	rjmp	.+366    	; 0x1672 <dtoa_prf+0x2d2>
    1504:	b1 e0       	ldi	r27, 0x01	; 1
    1506:	61 11       	cpse	r22, r1
    1508:	01 c0       	rjmp	.+2      	; 0x150c <dtoa_prf+0x16c>
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	4b 2f       	mov	r20, r27
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	18 16       	cp	r1, r24
    1512:	19 06       	cpc	r1, r25
    1514:	24 f4       	brge	.+8      	; 0x151e <dtoa_prf+0x17e>
    1516:	9c 01       	movw	r18, r24
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <dtoa_prf+0x182>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	24 0f       	add	r18, r20
    1524:	35 1f       	adc	r19, r21
    1526:	11 23       	and	r17, r17
    1528:	29 f0       	breq	.+10     	; 0x1534 <dtoa_prf+0x194>
    152a:	41 2f       	mov	r20, r17
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	4f 5f       	subi	r20, 0xFF	; 255
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <dtoa_prf+0x198>
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	42 0f       	add	r20, r18
    153a:	53 1f       	adc	r21, r19
    153c:	2b 2d       	mov	r18, r11
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	42 17       	cp	r20, r18
    1542:	53 07       	cpc	r21, r19
    1544:	14 f4       	brge	.+4      	; 0x154a <dtoa_prf+0x1aa>
    1546:	b4 1a       	sub	r11, r20
    1548:	01 c0       	rjmp	.+2      	; 0x154c <dtoa_prf+0x1ac>
    154a:	b1 2c       	mov	r11, r1
    154c:	2e 2d       	mov	r18, r14
    154e:	28 71       	andi	r18, 0x18	; 24
    1550:	59 f4       	brne	.+22     	; 0x1568 <dtoa_prf+0x1c8>
    1552:	f6 01       	movw	r30, r12
    1554:	2b 2d       	mov	r18, r11
    1556:	30 e2       	ldi	r19, 0x20	; 32
    1558:	22 23       	and	r18, r18
    155a:	19 f0       	breq	.+6      	; 0x1562 <dtoa_prf+0x1c2>
    155c:	31 93       	st	Z+, r19
    155e:	21 50       	subi	r18, 0x01	; 1
    1560:	fb cf       	rjmp	.-10     	; 0x1558 <dtoa_prf+0x1b8>
    1562:	cb 0c       	add	r12, r11
    1564:	d1 1c       	adc	r13, r1
    1566:	b1 2c       	mov	r11, r1
    1568:	bb 23       	and	r27, r27
    156a:	31 f0       	breq	.+12     	; 0x1578 <dtoa_prf+0x1d8>
    156c:	f6 01       	movw	r30, r12
    156e:	60 83       	st	Z, r22
    1570:	96 01       	movw	r18, r12
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	69 01       	movw	r12, r18
    1578:	a1 11       	cpse	r26, r1
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <dtoa_prf+0x1f2>
    157c:	f6 01       	movw	r30, r12
    157e:	2b 2d       	mov	r18, r11
    1580:	30 e3       	ldi	r19, 0x30	; 48
    1582:	22 23       	and	r18, r18
    1584:	19 f0       	breq	.+6      	; 0x158c <dtoa_prf+0x1ec>
    1586:	31 93       	st	Z+, r19
    1588:	21 50       	subi	r18, 0x01	; 1
    158a:	fb cf       	rjmp	.-10     	; 0x1582 <dtoa_prf+0x1e2>
    158c:	cb 0c       	add	r12, r11
    158e:	d1 1c       	adc	r13, r1
    1590:	b1 2c       	mov	r11, r1
    1592:	f8 0e       	add	r15, r24
    1594:	0a 81       	ldd	r16, Y+2	; 0x02
    1596:	37 2f       	mov	r19, r23
    1598:	30 71       	andi	r19, 0x10	; 16
    159a:	a3 2e       	mov	r10, r19
    159c:	74 ff       	sbrs	r23, 4
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <dtoa_prf+0x206>
    15a0:	01 33       	cpi	r16, 0x31	; 49
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <dtoa_prf+0x206>
    15a4:	fa 94       	dec	r15
    15a6:	1f 14       	cp	r1, r15
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <dtoa_prf+0x214>
    15aa:	2f 2d       	mov	r18, r15
    15ac:	29 30       	cpi	r18, 0x09	; 9
    15ae:	18 f0       	brcs	.+6      	; 0x15b6 <dtoa_prf+0x216>
    15b0:	28 e0       	ldi	r18, 0x08	; 8
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <dtoa_prf+0x216>
    15b4:	21 e0       	ldi	r18, 0x01	; 1
    15b6:	68 2f       	mov	r22, r24
    15b8:	39 2f       	mov	r19, r25
    15ba:	97 ff       	sbrs	r25, 7
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <dtoa_prf+0x222>
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	46 2f       	mov	r20, r22
    15c4:	53 2f       	mov	r21, r19
    15c6:	61 2c       	mov	r6, r1
    15c8:	71 2c       	mov	r7, r1
    15ca:	3e e2       	ldi	r19, 0x2E	; 46
    15cc:	93 2e       	mov	r9, r19
    15ce:	bc 01       	movw	r22, r24
    15d0:	62 1b       	sub	r22, r18
    15d2:	71 09       	sbc	r23, r1
    15d4:	9b 01       	movw	r18, r22
    15d6:	dc 01       	movw	r26, r24
    15d8:	a4 1b       	sub	r26, r20
    15da:	b5 0b       	sbc	r27, r21
    15dc:	e1 e0       	ldi	r30, 0x01	; 1
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ec 0f       	add	r30, r28
    15e2:	fd 1f       	adc	r31, r29
    15e4:	ae 0f       	add	r26, r30
    15e6:	bf 1f       	adc	r27, r31
    15e8:	e1 2e       	mov	r14, r17
    15ea:	f1 2c       	mov	r15, r1
    15ec:	f1 94       	neg	r15
    15ee:	e1 94       	neg	r14
    15f0:	f1 08       	sbc	r15, r1
    15f2:	4f 3f       	cpi	r20, 0xFF	; 255
    15f4:	ff ef       	ldi	r31, 0xFF	; 255
    15f6:	5f 07       	cpc	r21, r31
    15f8:	31 f4       	brne	.+12     	; 0x1606 <dtoa_prf+0x266>
    15fa:	f6 01       	movw	r30, r12
    15fc:	90 82       	st	Z, r9
    15fe:	b6 01       	movw	r22, r12
    1600:	6f 5f       	subi	r22, 0xFF	; 255
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	6b 01       	movw	r12, r22
    1606:	84 17       	cp	r24, r20
    1608:	95 07       	cpc	r25, r21
    160a:	4c f0       	brlt	.+18     	; 0x161e <dtoa_prf+0x27e>
    160c:	24 17       	cp	r18, r20
    160e:	35 07       	cpc	r19, r21
    1610:	34 f4       	brge	.+12     	; 0x161e <dtoa_prf+0x27e>
    1612:	bd 01       	movw	r22, r26
    1614:	66 0d       	add	r22, r6
    1616:	77 1d       	adc	r23, r7
    1618:	fb 01       	movw	r30, r22
    161a:	11 81       	ldd	r17, Z+1	; 0x01
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <dtoa_prf+0x280>
    161e:	10 e3       	ldi	r17, 0x30	; 48
    1620:	41 50       	subi	r20, 0x01	; 1
    1622:	51 09       	sbc	r21, r1
    1624:	ff ef       	ldi	r31, 0xFF	; 255
    1626:	6f 1a       	sub	r6, r31
    1628:	7f 0a       	sbc	r7, r31
    162a:	b6 01       	movw	r22, r12
    162c:	6f 5f       	subi	r22, 0xFF	; 255
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	4e 15       	cp	r20, r14
    1632:	5f 05       	cpc	r21, r15
    1634:	24 f0       	brlt	.+8      	; 0x163e <dtoa_prf+0x29e>
    1636:	f6 01       	movw	r30, r12
    1638:	10 83       	st	Z, r17
    163a:	6b 01       	movw	r12, r22
    163c:	da cf       	rjmp	.-76     	; 0x15f2 <dtoa_prf+0x252>
    163e:	48 17       	cp	r20, r24
    1640:	59 07       	cpc	r21, r25
    1642:	39 f4       	brne	.+14     	; 0x1652 <dtoa_prf+0x2b2>
    1644:	06 33       	cpi	r16, 0x36	; 54
    1646:	20 f4       	brcc	.+8      	; 0x1650 <dtoa_prf+0x2b0>
    1648:	05 33       	cpi	r16, 0x35	; 53
    164a:	19 f4       	brne	.+6      	; 0x1652 <dtoa_prf+0x2b2>
    164c:	a1 10       	cpse	r10, r1
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <dtoa_prf+0x2b2>
    1650:	11 e3       	ldi	r17, 0x31	; 49
    1652:	f6 01       	movw	r30, r12
    1654:	10 83       	st	Z, r17
    1656:	fb 01       	movw	r30, r22
    1658:	8b 2d       	mov	r24, r11
    165a:	90 e2       	ldi	r25, 0x20	; 32
    165c:	88 23       	and	r24, r24
    165e:	19 f0       	breq	.+6      	; 0x1666 <dtoa_prf+0x2c6>
    1660:	91 93       	st	Z+, r25
    1662:	81 50       	subi	r24, 0x01	; 1
    1664:	fb cf       	rjmp	.-10     	; 0x165c <dtoa_prf+0x2bc>
    1666:	fb 01       	movw	r30, r22
    1668:	eb 0d       	add	r30, r11
    166a:	f1 1d       	adc	r31, r1
    166c:	10 82       	st	Z, r1
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	29 96       	adiw	r28, 0x09	; 9
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	08 95       	ret

0000169a <__ftoa_engine>:
    169a:	28 30       	cpi	r18, 0x08	; 8
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <__ftoa_engine+0x6>
    169e:	27 e0       	ldi	r18, 0x07	; 7
    16a0:	33 27       	eor	r19, r19
    16a2:	da 01       	movw	r26, r20
    16a4:	99 0f       	add	r25, r25
    16a6:	31 1d       	adc	r19, r1
    16a8:	87 fd       	sbrc	r24, 7
    16aa:	91 60       	ori	r25, 0x01	; 1
    16ac:	00 96       	adiw	r24, 0x00	; 0
    16ae:	61 05       	cpc	r22, r1
    16b0:	71 05       	cpc	r23, r1
    16b2:	39 f4       	brne	.+14     	; 0x16c2 <__ftoa_engine+0x28>
    16b4:	32 60       	ori	r19, 0x02	; 2
    16b6:	2e 5f       	subi	r18, 0xFE	; 254
    16b8:	3d 93       	st	X+, r19
    16ba:	30 e3       	ldi	r19, 0x30	; 48
    16bc:	2a 95       	dec	r18
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <__ftoa_engine+0x1e>
    16c0:	08 95       	ret
    16c2:	9f 3f       	cpi	r25, 0xFF	; 255
    16c4:	30 f0       	brcs	.+12     	; 0x16d2 <__ftoa_engine+0x38>
    16c6:	80 38       	cpi	r24, 0x80	; 128
    16c8:	71 05       	cpc	r23, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__ftoa_engine+0x36>
    16ce:	3c 5f       	subi	r19, 0xFC	; 252
    16d0:	3c 5f       	subi	r19, 0xFC	; 252
    16d2:	3d 93       	st	X+, r19
    16d4:	91 30       	cpi	r25, 0x01	; 1
    16d6:	08 f0       	brcs	.+2      	; 0x16da <__ftoa_engine+0x40>
    16d8:	80 68       	ori	r24, 0x80	; 128
    16da:	91 1d       	adc	r25, r1
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	1f 93       	push	r17
    16e2:	0f 93       	push	r16
    16e4:	ff 92       	push	r15
    16e6:	ef 92       	push	r14
    16e8:	19 2f       	mov	r17, r25
    16ea:	98 7f       	andi	r25, 0xF8	; 248
    16ec:	96 95       	lsr	r25
    16ee:	e9 2f       	mov	r30, r25
    16f0:	96 95       	lsr	r25
    16f2:	96 95       	lsr	r25
    16f4:	e9 0f       	add	r30, r25
    16f6:	ff 27       	eor	r31, r31
    16f8:	e4 59       	subi	r30, 0x94	; 148
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	99 27       	eor	r25, r25
    16fe:	33 27       	eor	r19, r19
    1700:	ee 24       	eor	r14, r14
    1702:	ff 24       	eor	r15, r15
    1704:	a7 01       	movw	r20, r14
    1706:	e7 01       	movw	r28, r14
    1708:	05 90       	lpm	r0, Z+
    170a:	08 94       	sec
    170c:	07 94       	ror	r0
    170e:	28 f4       	brcc	.+10     	; 0x171a <__ftoa_engine+0x80>
    1710:	36 0f       	add	r19, r22
    1712:	e7 1e       	adc	r14, r23
    1714:	f8 1e       	adc	r15, r24
    1716:	49 1f       	adc	r20, r25
    1718:	51 1d       	adc	r21, r1
    171a:	66 0f       	add	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	88 1f       	adc	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	06 94       	lsr	r0
    1724:	a1 f7       	brne	.-24     	; 0x170e <__ftoa_engine+0x74>
    1726:	05 90       	lpm	r0, Z+
    1728:	07 94       	ror	r0
    172a:	28 f4       	brcc	.+10     	; 0x1736 <__ftoa_engine+0x9c>
    172c:	e7 0e       	add	r14, r23
    172e:	f8 1e       	adc	r15, r24
    1730:	49 1f       	adc	r20, r25
    1732:	56 1f       	adc	r21, r22
    1734:	c1 1d       	adc	r28, r1
    1736:	77 0f       	add	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	66 1f       	adc	r22, r22
    173e:	06 94       	lsr	r0
    1740:	a1 f7       	brne	.-24     	; 0x172a <__ftoa_engine+0x90>
    1742:	05 90       	lpm	r0, Z+
    1744:	07 94       	ror	r0
    1746:	28 f4       	brcc	.+10     	; 0x1752 <__ftoa_engine+0xb8>
    1748:	f8 0e       	add	r15, r24
    174a:	49 1f       	adc	r20, r25
    174c:	56 1f       	adc	r21, r22
    174e:	c7 1f       	adc	r28, r23
    1750:	d1 1d       	adc	r29, r1
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	66 1f       	adc	r22, r22
    1758:	77 1f       	adc	r23, r23
    175a:	06 94       	lsr	r0
    175c:	a1 f7       	brne	.-24     	; 0x1746 <__ftoa_engine+0xac>
    175e:	05 90       	lpm	r0, Z+
    1760:	07 94       	ror	r0
    1762:	20 f4       	brcc	.+8      	; 0x176c <__ftoa_engine+0xd2>
    1764:	49 0f       	add	r20, r25
    1766:	56 1f       	adc	r21, r22
    1768:	c7 1f       	adc	r28, r23
    176a:	d8 1f       	adc	r29, r24
    176c:	99 0f       	add	r25, r25
    176e:	66 1f       	adc	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	06 94       	lsr	r0
    1776:	a9 f7       	brne	.-22     	; 0x1762 <__ftoa_engine+0xc8>
    1778:	84 91       	lpm	r24, Z
    177a:	10 95       	com	r17
    177c:	17 70       	andi	r17, 0x07	; 7
    177e:	41 f0       	breq	.+16     	; 0x1790 <__ftoa_engine+0xf6>
    1780:	d6 95       	lsr	r29
    1782:	c7 95       	ror	r28
    1784:	57 95       	ror	r21
    1786:	47 95       	ror	r20
    1788:	f7 94       	ror	r15
    178a:	e7 94       	ror	r14
    178c:	1a 95       	dec	r17
    178e:	c1 f7       	brne	.-16     	; 0x1780 <__ftoa_engine+0xe6>
    1790:	e2 e1       	ldi	r30, 0x12	; 18
    1792:	f1 e0       	ldi	r31, 0x01	; 1
    1794:	68 94       	set
    1796:	15 90       	lpm	r1, Z+
    1798:	15 91       	lpm	r17, Z+
    179a:	35 91       	lpm	r19, Z+
    179c:	65 91       	lpm	r22, Z+
    179e:	95 91       	lpm	r25, Z+
    17a0:	05 90       	lpm	r0, Z+
    17a2:	7f e2       	ldi	r23, 0x2F	; 47
    17a4:	73 95       	inc	r23
    17a6:	e1 18       	sub	r14, r1
    17a8:	f1 0a       	sbc	r15, r17
    17aa:	43 0b       	sbc	r20, r19
    17ac:	56 0b       	sbc	r21, r22
    17ae:	c9 0b       	sbc	r28, r25
    17b0:	d0 09       	sbc	r29, r0
    17b2:	c0 f7       	brcc	.-16     	; 0x17a4 <__ftoa_engine+0x10a>
    17b4:	e1 0c       	add	r14, r1
    17b6:	f1 1e       	adc	r15, r17
    17b8:	43 1f       	adc	r20, r19
    17ba:	56 1f       	adc	r21, r22
    17bc:	c9 1f       	adc	r28, r25
    17be:	d0 1d       	adc	r29, r0
    17c0:	7e f4       	brtc	.+30     	; 0x17e0 <__ftoa_engine+0x146>
    17c2:	70 33       	cpi	r23, 0x30	; 48
    17c4:	11 f4       	brne	.+4      	; 0x17ca <__ftoa_engine+0x130>
    17c6:	8a 95       	dec	r24
    17c8:	e6 cf       	rjmp	.-52     	; 0x1796 <__ftoa_engine+0xfc>
    17ca:	e8 94       	clt
    17cc:	01 50       	subi	r16, 0x01	; 1
    17ce:	30 f0       	brcs	.+12     	; 0x17dc <__ftoa_engine+0x142>
    17d0:	08 0f       	add	r16, r24
    17d2:	0a f4       	brpl	.+2      	; 0x17d6 <__ftoa_engine+0x13c>
    17d4:	00 27       	eor	r16, r16
    17d6:	02 17       	cp	r16, r18
    17d8:	08 f4       	brcc	.+2      	; 0x17dc <__ftoa_engine+0x142>
    17da:	20 2f       	mov	r18, r16
    17dc:	23 95       	inc	r18
    17de:	02 2f       	mov	r16, r18
    17e0:	7a 33       	cpi	r23, 0x3A	; 58
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <__ftoa_engine+0x154>
    17e4:	79 e3       	ldi	r23, 0x39	; 57
    17e6:	7d 93       	st	X+, r23
    17e8:	2a 95       	dec	r18
    17ea:	e9 f7       	brne	.-6      	; 0x17e6 <__ftoa_engine+0x14c>
    17ec:	10 c0       	rjmp	.+32     	; 0x180e <__ftoa_engine+0x174>
    17ee:	7d 93       	st	X+, r23
    17f0:	2a 95       	dec	r18
    17f2:	89 f6       	brne	.-94     	; 0x1796 <__ftoa_engine+0xfc>
    17f4:	06 94       	lsr	r0
    17f6:	97 95       	ror	r25
    17f8:	67 95       	ror	r22
    17fa:	37 95       	ror	r19
    17fc:	17 95       	ror	r17
    17fe:	17 94       	ror	r1
    1800:	e1 18       	sub	r14, r1
    1802:	f1 0a       	sbc	r15, r17
    1804:	43 0b       	sbc	r20, r19
    1806:	56 0b       	sbc	r21, r22
    1808:	c9 0b       	sbc	r28, r25
    180a:	d0 09       	sbc	r29, r0
    180c:	98 f0       	brcs	.+38     	; 0x1834 <__ftoa_engine+0x19a>
    180e:	23 95       	inc	r18
    1810:	7e 91       	ld	r23, -X
    1812:	73 95       	inc	r23
    1814:	7a 33       	cpi	r23, 0x3A	; 58
    1816:	08 f0       	brcs	.+2      	; 0x181a <__ftoa_engine+0x180>
    1818:	70 e3       	ldi	r23, 0x30	; 48
    181a:	7c 93       	st	X, r23
    181c:	20 13       	cpse	r18, r16
    181e:	b8 f7       	brcc	.-18     	; 0x180e <__ftoa_engine+0x174>
    1820:	7e 91       	ld	r23, -X
    1822:	70 61       	ori	r23, 0x10	; 16
    1824:	7d 93       	st	X+, r23
    1826:	30 f0       	brcs	.+12     	; 0x1834 <__ftoa_engine+0x19a>
    1828:	83 95       	inc	r24
    182a:	71 e3       	ldi	r23, 0x31	; 49
    182c:	7d 93       	st	X+, r23
    182e:	70 e3       	ldi	r23, 0x30	; 48
    1830:	2a 95       	dec	r18
    1832:	e1 f7       	brne	.-8      	; 0x182c <__ftoa_engine+0x192>
    1834:	11 24       	eor	r1, r1
    1836:	ef 90       	pop	r14
    1838:	ff 90       	pop	r15
    183a:	0f 91       	pop	r16
    183c:	1f 91       	pop	r17
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	99 27       	eor	r25, r25
    1844:	87 fd       	sbrc	r24, 7
    1846:	90 95       	com	r25
    1848:	08 95       	ret

0000184a <_exit>:
    184a:	f8 94       	cli

0000184c <__stop_program>:
    184c:	ff cf       	rjmp	.-2      	; 0x184c <__stop_program>
