
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  0000189c  00001930  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000189c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000060  0080032e  0080032e  00001a5e  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000300  00000000  00000000  00001ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e35  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fc8  00000000  00000000  00004c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a63  00000000  00000000  00005bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000814  00000000  00000000  00007638  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001000  00000000  00000000  00007e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c91  00000000  00000000  00008e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000230  00000000  00000000  0000aadd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
       6:	00 00       	nop
       8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
       a:	00 00       	nop
       c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
       e:	00 00       	nop
      10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
      12:	00 00       	nop
      14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
      1e:	00 00       	nop
      20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c3       	rjmp	.+1780   	; 0x71a <__vector_9>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
      42:	00 00       	nop
      44:	ec c0       	rjmp	.+472    	; 0x21e <__bad_interrupt>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
      56:	00 00       	nop
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0b c5       	rjmp	.+2582   	; 0xa74 <__vector_23>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b0 c0       	rjmp	.+352    	; 0x21e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ae c0       	rjmp	.+348    	; 0x21e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ac c0       	rjmp	.+344    	; 0x21e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	aa c0       	rjmp	.+340    	; 0x21e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a8 c0       	rjmp	.+336    	; 0x21e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a6 c0       	rjmp	.+332    	; 0x21e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a4 c0       	rjmp	.+328    	; 0x21e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a2 c0       	rjmp	.+324    	; 0x21e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a0 c0       	rjmp	.+320    	; 0x21e <__bad_interrupt>
      de:	00 00       	nop
      e0:	9e c0       	rjmp	.+316    	; 0x21e <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <_Z15rx_get_elevatorv+0xa>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <__vector_9+0x10>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <_Z22altimeter_start_heightv+0x32>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <i2c_rep_start+0x8>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	13 e0       	ldi	r17, 0x03	; 3
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	ec e9       	ldi	r30, 0x9C	; 156
     1f6:	f8 e1       	ldi	r31, 0x18	; 24
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	ae 32       	cpi	r26, 0x2E	; 46
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	ae e2       	ldi	r26, 0x2E	; 46
     20c:	b3 e0       	ldi	r27, 0x03	; 3
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ae 38       	cpi	r26, 0x8E	; 142
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	3c d6       	rcall	.+3192   	; 0xe92 <main>
     21a:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <i2c_delay_T2>:
     220:	00 c0       	rjmp	.+0      	; 0x222 <i2c_delay_T2+0x2>
     222:	00 c0       	rjmp	.+0      	; 0x224 <i2c_delay_T2+0x4>
     224:	00 c0       	rjmp	.+0      	; 0x226 <i2c_delay_T2+0x6>
     226:	00 c0       	rjmp	.+0      	; 0x228 <i2c_delay_T2+0x8>
     228:	00 c0       	rjmp	.+0      	; 0x22a <i2c_delay_T2+0xa>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <i2c_delay_T2+0xc>
     22c:	00 00       	nop
     22e:	08 95       	ret

00000230 <i2c_init>:
     230:	51 98       	cbi	0x0a, 1	; 10
     232:	50 98       	cbi	0x0a, 0	; 10
     234:	59 98       	cbi	0x0b, 1	; 11
     236:	58 98       	cbi	0x0b, 0	; 11
     238:	08 95       	ret

0000023a <i2c_start>:
     23a:	51 9a       	sbi	0x0a, 1	; 10
     23c:	f1 df       	rcall	.-30     	; 0x220 <i2c_delay_T2>
     23e:	1d c0       	rjmp	.+58     	; 0x27a <i2c_write>
     240:	08 95       	ret

00000242 <i2c_rep_start>:
     242:	50 9a       	sbi	0x0a, 0	; 10
     244:	ed df       	rcall	.-38     	; 0x220 <i2c_delay_T2>
     246:	51 98       	cbi	0x0a, 1	; 10
     248:	eb df       	rcall	.-42     	; 0x220 <i2c_delay_T2>
     24a:	50 98       	cbi	0x0a, 0	; 10
     24c:	e9 df       	rcall	.-46     	; 0x220 <i2c_delay_T2>
     24e:	51 9a       	sbi	0x0a, 1	; 10
     250:	e7 df       	rcall	.-50     	; 0x220 <i2c_delay_T2>
     252:	13 c0       	rjmp	.+38     	; 0x27a <i2c_write>
     254:	08 95       	ret

00000256 <i2c_start_wait>:
     256:	08 2e       	mov	r0, r24

00000258 <i2c_start_wait1>:
     258:	51 9a       	sbi	0x0a, 1	; 10
     25a:	e2 df       	rcall	.-60     	; 0x220 <i2c_delay_T2>
     25c:	80 2d       	mov	r24, r0
     25e:	0d d0       	rcall	.+26     	; 0x27a <i2c_write>
     260:	88 23       	and	r24, r24
     262:	11 f0       	breq	.+4      	; 0x268 <i2c_start_wait_done>
     264:	02 d0       	rcall	.+4      	; 0x26a <i2c_stop>
     266:	f8 cf       	rjmp	.-16     	; 0x258 <i2c_start_wait1>

00000268 <i2c_start_wait_done>:
     268:	08 95       	ret

0000026a <i2c_stop>:
     26a:	50 9a       	sbi	0x0a, 0	; 10
     26c:	51 9a       	sbi	0x0a, 1	; 10
     26e:	d8 df       	rcall	.-80     	; 0x220 <i2c_delay_T2>
     270:	50 98       	cbi	0x0a, 0	; 10
     272:	d6 df       	rcall	.-84     	; 0x220 <i2c_delay_T2>
     274:	51 98       	cbi	0x0a, 1	; 10
     276:	d4 cf       	rjmp	.-88     	; 0x220 <i2c_delay_T2>
     278:	08 95       	ret

0000027a <i2c_write>:
     27a:	08 94       	sec
     27c:	88 1f       	adc	r24, r24
     27e:	01 c0       	rjmp	.+2      	; 0x282 <i2c_write_first>

00000280 <i2c_write_bit>:
     280:	88 0f       	add	r24, r24

00000282 <i2c_write_first>:
     282:	59 f0       	breq	.+22     	; 0x29a <i2c_get_ack>
     284:	50 9a       	sbi	0x0a, 0	; 10
     286:	18 f4       	brcc	.+6      	; 0x28e <i2c_write_low>
     288:	00 00       	nop
     28a:	51 98       	cbi	0x0a, 1	; 10
     28c:	02 c0       	rjmp	.+4      	; 0x292 <i2c_write_high>

0000028e <i2c_write_low>:
     28e:	51 9a       	sbi	0x0a, 1	; 10
     290:	00 c0       	rjmp	.+0      	; 0x292 <i2c_write_high>

00000292 <i2c_write_high>:
     292:	c6 df       	rcall	.-116    	; 0x220 <i2c_delay_T2>
     294:	50 98       	cbi	0x0a, 0	; 10
     296:	c4 df       	rcall	.-120    	; 0x220 <i2c_delay_T2>
     298:	f3 cf       	rjmp	.-26     	; 0x280 <i2c_write_bit>

0000029a <i2c_get_ack>:
     29a:	50 9a       	sbi	0x0a, 0	; 10
     29c:	51 98       	cbi	0x0a, 1	; 10
     29e:	c0 df       	rcall	.-128    	; 0x220 <i2c_delay_T2>
     2a0:	50 98       	cbi	0x0a, 0	; 10

000002a2 <i2c_ack_wait>:
     2a2:	48 9b       	sbis	0x09, 0	; 9
     2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <i2c_ack_wait>
     2a6:	88 27       	eor	r24, r24
     2a8:	49 99       	sbic	0x09, 1	; 9
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	b9 df       	rcall	.-142    	; 0x220 <i2c_delay_T2>
     2ae:	99 27       	eor	r25, r25
     2b0:	08 95       	ret

000002b2 <i2c_readNak>:
     2b2:	88 27       	eor	r24, r24
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <i2c_read>

000002b6 <i2c_readAck>:
     2b6:	81 e0       	ldi	r24, 0x01	; 1

000002b8 <i2c_read>:
     2b8:	71 e0       	ldi	r23, 0x01	; 1

000002ba <i2c_read_bit>:
     2ba:	50 9a       	sbi	0x0a, 0	; 10
     2bc:	51 98       	cbi	0x0a, 1	; 10
     2be:	b0 df       	rcall	.-160    	; 0x220 <i2c_delay_T2>
     2c0:	50 98       	cbi	0x0a, 0	; 10
     2c2:	ae df       	rcall	.-164    	; 0x220 <i2c_delay_T2>

000002c4 <i2c_read_stretch>:
     2c4:	48 9b       	sbis	0x09, 0	; 9
     2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <i2c_read_stretch>
     2c8:	88 94       	clc
     2ca:	49 99       	sbic	0x09, 1	; 9
     2cc:	08 94       	sec
     2ce:	77 1f       	adc	r23, r23
     2d0:	a0 f7       	brcc	.-24     	; 0x2ba <i2c_read_bit>

000002d2 <i2c_put_ack>:
     2d2:	50 9a       	sbi	0x0a, 0	; 10
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	11 f0       	breq	.+4      	; 0x2dc <i2c_put_ack_low>
     2d8:	51 98       	cbi	0x0a, 1	; 10
     2da:	01 c0       	rjmp	.+2      	; 0x2de <i2c_put_ack_high>

000002dc <i2c_put_ack_low>:
     2dc:	51 9a       	sbi	0x0a, 1	; 10

000002de <i2c_put_ack_high>:
     2de:	a0 df       	rcall	.-192    	; 0x220 <i2c_delay_T2>
     2e0:	50 98       	cbi	0x0a, 0	; 10

000002e2 <i2c_put_ack_wait>:
     2e2:	48 9b       	sbis	0x09, 0	; 9
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <i2c_put_ack_wait>
     2e6:	9c df       	rcall	.-200    	; 0x220 <i2c_delay_T2>
     2e8:	87 2f       	mov	r24, r23
     2ea:	99 27       	eor	r25, r25
     2ec:	08 95       	ret

000002ee <_Z26altimeter_get_start_heightv>:
}

//getter for start height
float altimeter_get_start_height()
{
	return start_height;
     2ee:	60 91 2e 03 	lds	r22, 0x032E
     2f2:	70 91 2f 03 	lds	r23, 0x032F
     2f6:	80 91 30 03 	lds	r24, 0x0330
     2fa:	90 91 31 03 	lds	r25, 0x0331
}
     2fe:	08 95       	ret

00000300 <_Z16enableEventFlagsv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void enableEventFlags()
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	a9 df       	rcall	.-174    	; 0x256 <i2c_start_wait>
	i2c_write(PT_DATA_CFG);
     304:	83 e1       	ldi	r24, 0x13	; 19
     306:	b9 df       	rcall	.-142    	; 0x27a <i2c_write>
	i2c_write(0x07);
     308:	87 e0       	ldi	r24, 0x07	; 7
     30a:	b7 cf       	rjmp	.-146    	; 0x27a <i2c_write>
     30c:	08 95       	ret

0000030e <_Z8IIC_Readh>:
}

byte IIC_Read(byte regAddr)
{
     30e:	cf 93       	push	r28
     310:	c8 2f       	mov	r28, r24
	// This function reads one byte over IIC
	
	i2c_rep_start(MPL3115a2+I2C_WRITE);
     312:	80 ec       	ldi	r24, 0xC0	; 192
     314:	96 df       	rcall	.-212    	; 0x242 <i2c_rep_start>
	i2c_write(regAddr);
     316:	8c 2f       	mov	r24, r28
     318:	b0 df       	rcall	.-160    	; 0x27a <i2c_write>
	
	i2c_rep_start(MPL3115a2+I2C_READ);
     31a:	81 ec       	ldi	r24, 0xC1	; 193
     31c:	92 df       	rcall	.-220    	; 0x242 <i2c_rep_start>
	return i2c_readNak();
     31e:	c9 df       	rcall	.-110    	; 0x2b2 <i2c_readNak>
}
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <_Z9IIC_Writehh>:

void IIC_Write(byte regAddr, byte value)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	d8 2f       	mov	r29, r24
     32a:	c6 2f       	mov	r28, r22
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     32c:	80 ec       	ldi	r24, 0xC0	; 192
     32e:	93 df       	rcall	.-218    	; 0x256 <i2c_start_wait>
	i2c_write(regAddr);
     330:	8d 2f       	mov	r24, r29
     332:	a3 df       	rcall	.-186    	; 0x27a <i2c_write>
	i2c_write(value);
     334:	8c 2f       	mov	r24, r28
     336:	a1 df       	rcall	.-190    	; 0x27a <i2c_write>
	i2c_stop();
     338:	98 df       	rcall	.-208    	; 0x26a <i2c_stop>
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <_Z24altimeter_toggle_oneShotv>:
}

void altimeter_toggle_oneShot(void) 
{ 
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     340:	86 e2       	ldi	r24, 0x26	; 38
     342:	e5 df       	rcall	.-54     	; 0x30e <_Z8IIC_Readh>
	
	//Clear OST bit
	tempSetting &= ~(1<<1);
     344:	68 2f       	mov	r22, r24
     346:	6d 7f       	andi	r22, 0xFD	; 253
	IIC_Write(CTRL_REG1,tempSetting);
     348:	86 e2       	ldi	r24, 0x26	; 38
     34a:	ec df       	rcall	.-40     	; 0x324 <_Z9IIC_Writehh>
	
	//read CTRL_REG1
	tempSetting = IIC_Read(CTRL_REG1);
     34c:	86 e2       	ldi	r24, 0x26	; 38
     34e:	df df       	rcall	.-66     	; 0x30e <_Z8IIC_Readh>
	
	//set OST bit
	tempSetting |= (1<<1);
     350:	68 2f       	mov	r22, r24
     352:	62 60       	ori	r22, 0x02	; 2
	IIC_Write(CTRL_REG1,tempSetting); 
     354:	86 e2       	ldi	r24, 0x26	; 38
     356:	e6 cf       	rjmp	.-52     	; 0x324 <_Z9IIC_Writehh>
     358:	08 95       	ret

0000035a <_Z20altimeter_get_metresv>:
	
	return start_height;
}

float altimeter_get_metres(void)
{
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	float altitude = -999;
	
	altimeter_toggle_oneShot();
     366:	ec df       	rcall	.-40     	; 0x340 <_Z24altimeter_toggle_oneShotv>
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
     368:	c9 e5       	ldi	r28, 0x59	; 89
     36a:	d2 e0       	ldi	r29, 0x02	; 2
     36c:	0a c0       	rjmp	.+20     	; 0x382 <_Z20altimeter_get_metresv+0x28>
     36e:	21 97       	sbiw	r28, 0x01	; 1
	{
		if(++counter > 600) return (-999);
     370:	20 97       	sbiw	r28, 0x00	; 0
     372:	09 f4       	brne	.+2      	; 0x376 <_Z20altimeter_get_metresv+0x1c>
     374:	4b c0       	rjmp	.+150    	; 0x40c <_Z20altimeter_get_metresv+0xb2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     376:	8f e9       	ldi	r24, 0x9F	; 159
     378:	9f e0       	ldi	r25, 0x0F	; 15
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <_Z20altimeter_get_metresv+0x20>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <_Z20altimeter_get_metresv+0x26>
     380:	00 00       	nop
	
	altimeter_toggle_oneShot();
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	c4 df       	rcall	.-120    	; 0x30e <_Z8IIC_Readh>
     386:	81 ff       	sbrs	r24, 1
     388:	f2 cf       	rjmp	.-28     	; 0x36e <_Z20altimeter_get_metresv+0x14>
		if(++counter > 600) return (-999);
		_delay_ms(1);
	}
	//_delay_ms(100);
	
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     38a:	80 ec       	ldi	r24, 0xC0	; 192
     38c:	64 df       	rcall	.-312    	; 0x256 <i2c_start_wait>
	i2c_write(OUT_P_MSB);
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	74 df       	rcall	.-280    	; 0x27a <i2c_write>
	i2c_rep_start(MPL3115a2+I2C_READ);
     392:	81 ec       	ldi	r24, 0xC1	; 193
     394:	56 df       	rcall	.-340    	; 0x242 <i2c_rep_start>
	
	int8_t msbA,csbA,lsbA = 0x00; 
	
	msbA = i2c_readAck();
     396:	8f df       	rcall	.-226    	; 0x2b6 <i2c_readAck>
     398:	f8 2e       	mov	r15, r24
	csbA = i2c_readAck();
     39a:	8d df       	rcall	.-230    	; 0x2b6 <i2c_readAck>
     39c:	d8 2f       	mov	r29, r24
	lsbA = i2c_readNak();	
     39e:	89 df       	rcall	.-238    	; 0x2b2 <i2c_readNak>
     3a0:	c8 2f       	mov	r28, r24
	i2c_stop();
     3a2:	63 df       	rcall	.-314    	; 0x26a <i2c_stop>
	
	altimeter_toggle_oneShot();
     3a4:	cd df       	rcall	.-102    	; 0x340 <_Z24altimeter_toggle_oneShotv>
	
	float tempcsb = (lsbA>>4)/16.0;
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     3a6:	4f 2d       	mov	r20, r15
     3a8:	55 27       	eor	r21, r21
     3aa:	47 fd       	sbrc	r20, 7
     3ac:	50 95       	com	r21
     3ae:	74 2f       	mov	r23, r20
     3b0:	66 27       	eor	r22, r22
     3b2:	2d 2f       	mov	r18, r29
     3b4:	33 27       	eor	r19, r19
     3b6:	27 fd       	sbrc	r18, 7
     3b8:	30 95       	com	r19
     3ba:	62 2b       	or	r22, r18
     3bc:	73 2b       	or	r23, r19
     3be:	88 27       	eor	r24, r24
     3c0:	77 fd       	sbrc	r23, 7
     3c2:	80 95       	com	r24
     3c4:	98 2f       	mov	r25, r24
     3c6:	ba d6       	rcall	.+3444   	; 0x113c <__floatsisf>
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
	lsbA = i2c_readNak();	
	i2c_stop();
	
	altimeter_toggle_oneShot();
	
	float tempcsb = (lsbA>>4)/16.0;
     3cc:	6c 2f       	mov	r22, r28
     3ce:	77 27       	eor	r23, r23
     3d0:	67 fd       	sbrc	r22, 7
     3d2:	70 95       	com	r23
     3d4:	75 95       	asr	r23
     3d6:	67 95       	ror	r22
     3d8:	75 95       	asr	r23
     3da:	67 95       	ror	r22
     3dc:	75 95       	asr	r23
     3de:	67 95       	ror	r22
     3e0:	75 95       	asr	r23
     3e2:	67 95       	ror	r22
     3e4:	88 27       	eor	r24, r24
     3e6:	77 fd       	sbrc	r23, 7
     3e8:	80 95       	com	r24
     3ea:	98 2f       	mov	r25, r24
     3ec:	a7 d6       	rcall	.+3406   	; 0x113c <__floatsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	40 e8       	ldi	r20, 0x80	; 128
     3f4:	5d e3       	ldi	r21, 0x3D	; 61
     3f6:	56 d7       	rcall	.+3756   	; 0x12a4 <__mulsf3>
     3f8:	9b 01       	movw	r18, r22
     3fa:	ac 01       	movw	r20, r24
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	9a d5       	rcall	.+2868   	; 0xf36 <__addsf3>
	
	return altitude;
     402:	56 2f       	mov	r21, r22
     404:	47 2f       	mov	r20, r23
     406:	38 2f       	mov	r19, r24
     408:	29 2f       	mov	r18, r25
     40a:	04 c0       	rjmp	.+8      	; 0x414 <_Z20altimeter_get_metresv+0xba>
	
	int counter = 0;
	
	while((IIC_Read(STATUS) & (1<<1)) == 0)
	{
		if(++counter > 600) return (-999);
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	40 ec       	ldi	r20, 0xC0	; 192
     410:	39 e7       	ldi	r19, 0x79	; 121
     412:	24 ec       	ldi	r18, 0xC4	; 196
	float tempcsb = (lsbA>>4)/16.0;
	
	altitude = (float)( (msbA << 8) | csbA) + tempcsb;
	
	return altitude;
}
     414:	65 2f       	mov	r22, r21
     416:	74 2f       	mov	r23, r20
     418:	83 2f       	mov	r24, r19
     41a:	92 2f       	mov	r25, r18
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <_Z22altimeter_start_heightv>:
	
	return success;	
}

float altimeter_start_height()
{
     42a:	cf 92       	push	r12
     42c:	df 92       	push	r13
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
	float start_height = 0;
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	7d d0       	rcall	.+250    	; 0x536 <_Z13debug_printlnPKc>
}

float altimeter_start_height()
{
	float start_height = 0;
	int start_height_samples = 0;
     43c:	c0 e0       	ldi	r28, 0x00	; 0
     43e:	d0 e0       	ldi	r29, 0x00	; 0
	return success;	
}

float altimeter_start_height()
{
	float start_height = 0;
     440:	c1 2c       	mov	r12, r1
     442:	d1 2c       	mov	r13, r1
     444:	76 01       	movw	r14, r12
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
	//sample the current height for 1 second
	while(millis()<3000)
     446:	09 c0       	rjmp	.+18     	; 0x45a <_Z22altimeter_start_heightv+0x30>
	{
		start_height += altimeter_get_metres();
     448:	88 df       	rcall	.-240    	; 0x35a <_Z20altimeter_get_metresv>
     44a:	9b 01       	movw	r18, r22
     44c:	ac 01       	movw	r20, r24
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	71 d5       	rcall	.+2786   	; 0xf36 <__addsf3>
     454:	6b 01       	movw	r12, r22
     456:	7c 01       	movw	r14, r24
		start_height_samples += 1;
     458:	21 96       	adiw	r28, 0x01	; 1
	float start_height = 0;
	int start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 1s...");
	//sample the current height for 1 second
	while(millis()<3000)
     45a:	56 d3       	rcall	.+1708   	; 0xb08 <_Z6millisv>
     45c:	68 3b       	cpi	r22, 0xB8	; 184
     45e:	7b 40       	sbci	r23, 0x0B	; 11
     460:	81 05       	cpc	r24, r1
     462:	91 05       	cpc	r25, r1
     464:	8c f3       	brlt	.-30     	; 0x448 <_Z22altimeter_start_heightv+0x1e>
		start_height += altimeter_get_metres();
		start_height_samples += 1;
	}
	
	//average the height
	start_height = start_height / start_height_samples;
     466:	be 01       	movw	r22, r28
     468:	88 27       	eor	r24, r24
     46a:	77 fd       	sbrc	r23, 7
     46c:	80 95       	com	r24
     46e:	98 2f       	mov	r25, r24
     470:	65 d6       	rcall	.+3274   	; 0x113c <__floatsisf>
     472:	9b 01       	movw	r18, r22
     474:	ac 01       	movw	r20, r24
     476:	c7 01       	movw	r24, r14
     478:	b6 01       	movw	r22, r12
     47a:	c5 d5       	rcall	.+2954   	; 0x1006 <__divsf3>
     47c:	6b 01       	movw	r12, r22
     47e:	7c 01       	movw	r14, r24
	debug_print("Starting height initialised to: ");
     480:	87 e3       	ldi	r24, 0x37	; 55
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	53 d0       	rcall	.+166    	; 0x52c <_Z11debug_printPKc>
	debug_printf(start_height);
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	5f d0       	rcall	.+190    	; 0x54a <_Z12debug_printff>
	debug_println(" m");
     48c:	88 e5       	ldi	r24, 0x58	; 88
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	52 d0       	rcall	.+164    	; 0x536 <_Z13debug_printlnPKc>
	
	return start_height;
}
     492:	c7 01       	movw	r24, r14
     494:	b6 01       	movw	r22, r12
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	08 95       	ret

000004a4 <_Z16setModeAltimeterv>:
}

void setModeAltimeter()
{
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     4a4:	86 e2       	ldi	r24, 0x26	; 38
     4a6:	33 df       	rcall	.-410    	; 0x30e <_Z8IIC_Readh>
	
	tempSetting |= (1<<7);	//set ALT bit
     4a8:	68 2f       	mov	r22, r24
     4aa:	60 68       	ori	r22, 0x80	; 128
	
	IIC_Write(CTRL_REG1,tempSetting);
     4ac:	86 e2       	ldi	r24, 0x26	; 38
     4ae:	3a cf       	rjmp	.-396    	; 0x324 <_Z9IIC_Writehh>
     4b0:	08 95       	ret

000004b2 <_Z17setOversampleRateh>:
}

void setOversampleRate(uint8_t sampleRate)
{
     4b2:	cf 93       	push	r28
     4b4:	c8 2f       	mov	r28, r24
     4b6:	88 30       	cpi	r24, 0x08	; 8
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <_Z17setOversampleRateh+0xa>
     4ba:	c7 e0       	ldi	r28, 0x07	; 7
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     4bc:	86 e2       	ldi	r24, 0x26	; 38
     4be:	27 df       	rcall	.-434    	; 0x30e <_Z8IIC_Readh>
	
	tempSetting &= 0b11000111; //Clear out old OS bits
     4c0:	87 7c       	andi	r24, 0xC7	; 199
}

void setOversampleRate(uint8_t sampleRate)
{
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
     4c2:	cc 0f       	add	r28, r28
     4c4:	cc 0f       	add	r28, r28
     4c6:	cc 0f       	add	r28, r28
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
	
	tempSetting &= 0b11000111; //Clear out old OS bits
	tempSetting |= sampleRate; //Mask in new OS bits
     4c8:	68 2f       	mov	r22, r24
     4ca:	6c 2b       	or	r22, r28
	
	IIC_Write(CTRL_REG1,tempSetting);
     4cc:	86 e2       	ldi	r24, 0x26	; 38
     4ce:	2a df       	rcall	.-428    	; 0x324 <_Z9IIC_Writehh>
	
}
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <_Z14altimeter_initv>:
float temperature = 0.;
float start_height = 0;

bool altimeter_init()
{
	i2c_init();
     4d4:	ad de       	rcall	.-678    	; 0x230 <i2c_init>
	bool success = true;
	
	if(IIC_Read(WHO_AM_I) == 196)
     4d6:	8c e0       	ldi	r24, 0x0C	; 12
     4d8:	1a df       	rcall	.-460    	; 0x30e <_Z8IIC_Readh>
     4da:	84 3c       	cpi	r24, 0xC4	; 196
     4dc:	c1 f4       	brne	.+48     	; 0x50e <_Z14altimeter_initv+0x3a>
	{
		debug_println("Altimeter connected correctly!");
     4de:	8b e5       	ldi	r24, 0x5B	; 91
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	29 d0       	rcall	.+82     	; 0x536 <_Z13debug_printlnPKc>
		success = false;
	}
	
	if(success)
	{
		setModeAltimeter();
     4e4:	df df       	rcall	.-66     	; 0x4a4 <_Z16setModeAltimeterv>
		setOversampleRate(7);
     4e6:	87 e0       	ldi	r24, 0x07	; 7
     4e8:	e4 df       	rcall	.-56     	; 0x4b2 <_Z17setOversampleRateh>
		enableEventFlags();
     4ea:	0a df       	rcall	.-492    	; 0x300 <_Z16enableEventFlagsv>
	
		
		start_height = altimeter_start_height();
     4ec:	9e df       	rcall	.-196    	; 0x42a <_Z22altimeter_start_heightv>
     4ee:	60 93 2e 03 	sts	0x032E, r22
     4f2:	70 93 2f 03 	sts	0x032F, r23
     4f6:	80 93 30 03 	sts	0x0330, r24
     4fa:	90 93 31 03 	sts	0x0331, r25
		
		if(start_height == -999)
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 ec       	ldi	r19, 0xC0	; 192
     502:	49 e7       	ldi	r20, 0x79	; 121
     504:	54 ec       	ldi	r21, 0xC4	; 196
     506:	7b d5       	rcall	.+2806   	; 0xffe <__cmpsf2>
     508:	88 23       	and	r24, r24
     50a:	59 f0       	breq	.+22     	; 0x522 <_Z14altimeter_initv+0x4e>
     50c:	05 c0       	rjmp	.+10     	; 0x518 <_Z14altimeter_initv+0x44>
	{
		debug_println("Altimeter connected correctly!");
	}
	else
	{
		debug_println("Altimeter not connected!");
     50e:	8a e7       	ldi	r24, 0x7A	; 122
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	11 d0       	rcall	.+34     	; 0x536 <_Z13debug_printlnPKc>
		success = false;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	08 95       	ret
		
		if(start_height == -999)
			success = false;
			
		if(success)
			debug_println("Altimeter initialised correctly!");
     518:	83 e9       	ldi	r24, 0x93	; 147
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	0c d0       	rcall	.+24     	; 0x536 <_Z13debug_printlnPKc>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	08 95       	ret
		else
			debug_println("Altimeter failed to initialise!");
     522:	84 eb       	ldi	r24, 0xB4	; 180
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	07 d0       	rcall	.+14     	; 0x536 <_Z13debug_printlnPKc>
     528:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return success;	
}
     52a:	08 95       	ret

0000052c <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     52c:	bc 01       	movw	r22, r24
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a9 c3       	rjmp	.+1874   	; 0xc86 <_Z15USART_putstringiPKc>
     534:	08 95       	ret

00000536 <_Z13debug_printlnPKc>:
     536:	bc 01       	movw	r22, r24
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	a4 d3       	rcall	.+1864   	; 0xc86 <_Z15USART_putstringiPKc>
     53e:	64 ed       	ldi	r22, 0xD4	; 212
     540:	72 e0       	ldi	r23, 0x02	; 2
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9f c3       	rjmp	.+1854   	; 0xc86 <_Z15USART_putstringiPKc>
     548:	08 95       	ret

0000054a <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	64 97       	sbiw	r28, 0x14	; 20
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     562:	8e 01       	movw	r16, r28
     564:	0f 5f       	subi	r16, 0xFF	; 255
     566:	1f 4f       	sbci	r17, 0xFF	; 255
     568:	25 e0       	ldi	r18, 0x05	; 5
     56a:	4a e0       	ldi	r20, 0x0A	; 10
     56c:	20 d7       	rcall	.+3648   	; 0x13ae <dtostrf>
		debug_print(string);
     56e:	c8 01       	movw	r24, r16
     570:	dd df       	rcall	.-70     	; 0x52c <_Z11debug_printPKc>
	}
}
     572:	64 96       	adiw	r28, 0x14	; 20
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <_Z24quad_output_set_throttlei>:
	RUDDER_OUT = rudder;
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
     588:	90 93 a9 00 	sts	0x00A9, r25
     58c:	80 93 a8 00 	sts	0x00A8, r24
     590:	bc 01       	movw	r22, r24
     592:	88 27       	eor	r24, r24
     594:	77 fd       	sbrc	r23, 7
     596:	80 95       	com	r24
     598:	98 2f       	mov	r25, r24
     59a:	d0 d5       	rcall	.+2976   	; 0x113c <__floatsisf>
     59c:	60 93 32 03 	sts	0x0332, r22
     5a0:	70 93 33 03 	sts	0x0333, r23
     5a4:	80 93 34 03 	sts	0x0334, r24
     5a8:	90 93 35 03 	sts	0x0335, r25
     5ac:	08 95       	ret

000005ae <_Z16quad_output_initv>:
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	80 93 01 01 	sts	0x0101, r24
     5cc:	8d b9       	out	0x0d, r24	; 13
     5ce:	8f e3       	ldi	r24, 0x3F	; 63
     5d0:	9c e9       	ldi	r25, 0x9C	; 156
     5d2:	90 93 a7 00 	sts	0x00A7, r25
     5d6:	80 93 a6 00 	sts	0x00A6, r24
     5da:	38 ea       	ldi	r19, 0xA8	; 168
     5dc:	30 93 a0 00 	sts	0x00A0, r19
     5e0:	22 e1       	ldi	r18, 0x12	; 18
     5e2:	20 93 a1 00 	sts	0x00A1, r18
     5e6:	90 93 97 00 	sts	0x0097, r25
     5ea:	80 93 96 00 	sts	0x0096, r24
     5ee:	30 93 90 00 	sts	0x0090, r19
     5f2:	20 93 91 00 	sts	0x0091, r18
     5f6:	c6 eb       	ldi	r28, 0xB6	; 182
     5f8:	d3 e0       	ldi	r29, 0x03	; 3
     5fa:	d0 93 a9 00 	sts	0x00A9, r29
     5fe:	c0 93 a8 00 	sts	0x00A8, r28
     602:	0f 2e       	mov	r0, r31
     604:	fa ea       	ldi	r31, 0xAA	; 170
     606:	8f 2e       	mov	r8, r31
     608:	91 2c       	mov	r9, r1
     60a:	f0 2d       	mov	r31, r0
     60c:	f4 01       	movw	r30, r8
     60e:	d1 83       	std	Z+1, r29	; 0x01
     610:	c0 83       	st	Z, r28
     612:	0f 2e       	mov	r0, r31
     614:	fc ea       	ldi	r31, 0xAC	; 172
     616:	af 2e       	mov	r10, r31
     618:	b1 2c       	mov	r11, r1
     61a:	f0 2d       	mov	r31, r0
     61c:	f5 01       	movw	r30, r10
     61e:	d1 83       	std	Z+1, r29	; 0x01
     620:	c0 83       	st	Z, r28
     622:	0f 2e       	mov	r0, r31
     624:	f8 e9       	ldi	r31, 0x98	; 152
     626:	cf 2e       	mov	r12, r31
     628:	d1 2c       	mov	r13, r1
     62a:	f0 2d       	mov	r31, r0
     62c:	f6 01       	movw	r30, r12
     62e:	d1 83       	std	Z+1, r29	; 0x01
     630:	c0 83       	st	Z, r28
     632:	0f 2e       	mov	r0, r31
     634:	fa e9       	ldi	r31, 0x9A	; 154
     636:	ef 2e       	mov	r14, r31
     638:	f1 2c       	mov	r15, r1
     63a:	f0 2d       	mov	r31, r0
     63c:	f7 01       	movw	r30, r14
     63e:	d1 83       	std	Z+1, r29	; 0x01
     640:	c0 83       	st	Z, r28
     642:	0c e9       	ldi	r16, 0x9C	; 156
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	f8 01       	movw	r30, r16
     648:	d1 83       	std	Z+1, r29	; 0x01
     64a:	c0 83       	st	Z, r28
     64c:	86 eb       	ldi	r24, 0xB6	; 182
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	9b df       	rcall	.-202    	; 0x588 <_Z24quad_output_set_throttlei>
     652:	f4 01       	movw	r30, r8
     654:	d1 83       	std	Z+1, r29	; 0x01
     656:	c0 83       	st	Z, r28
     658:	f5 01       	movw	r30, r10
     65a:	d1 83       	std	Z+1, r29	; 0x01
     65c:	c0 83       	st	Z, r28
     65e:	f6 01       	movw	r30, r12
     660:	d1 83       	std	Z+1, r29	; 0x01
     662:	c0 83       	st	Z, r28
     664:	f7 01       	movw	r30, r14
     666:	d1 83       	std	Z+1, r29	; 0x01
     668:	c0 83       	st	Z, r28
     66a:	f8 01       	movw	r30, r16
     66c:	d1 83       	std	Z+1, r29	; 0x01
     66e:	c0 83       	st	Z, r28
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	08 95       	ret

0000068a <_Z23quad_output_passthroughbbbbbb>:
     68a:	ef 92       	push	r14
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	16 2f       	mov	r17, r22
     696:	d4 2f       	mov	r29, r20
     698:	c2 2f       	mov	r28, r18
     69a:	88 23       	and	r24, r24
     69c:	11 f0       	breq	.+4      	; 0x6a2 <_Z23quad_output_passthroughbbbbbb+0x18>
     69e:	bd d1       	rcall	.+890    	; 0xa1a <_Z15rx_get_throttlev>
     6a0:	73 df       	rcall	.-282    	; 0x588 <_Z24quad_output_set_throttlei>
     6a2:	11 23       	and	r17, r17
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <_Z23quad_output_passthroughbbbbbb+0x28>
     6a6:	be d1       	rcall	.+892    	; 0xa24 <_Z14rx_get_aileronv>
     6a8:	16 d5       	rcall	.+2604   	; 0x10d6 <__fixsfsi>
     6aa:	70 93 ab 00 	sts	0x00AB, r23
     6ae:	60 93 aa 00 	sts	0x00AA, r22
     6b2:	dd 23       	and	r29, r29
     6b4:	31 f0       	breq	.+12     	; 0x6c2 <_Z23quad_output_passthroughbbbbbb+0x38>
     6b6:	be d1       	rcall	.+892    	; 0xa34 <_Z15rx_get_elevatorv>
     6b8:	0e d5       	rcall	.+2588   	; 0x10d6 <__fixsfsi>
     6ba:	70 93 ad 00 	sts	0x00AD, r23
     6be:	60 93 ac 00 	sts	0x00AC, r22
     6c2:	cc 23       	and	r28, r28
     6c4:	31 f0       	breq	.+12     	; 0x6d2 <_Z23quad_output_passthroughbbbbbb+0x48>
     6c6:	be d1       	rcall	.+892    	; 0xa44 <_Z13rx_get_rudderv>
     6c8:	06 d5       	rcall	.+2572   	; 0x10d6 <__fixsfsi>
     6ca:	70 93 99 00 	sts	0x0099, r23
     6ce:	60 93 98 00 	sts	0x0098, r22
     6d2:	00 23       	and	r16, r16
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <_Z23quad_output_passthroughbbbbbb+0x58>
     6d6:	be d1       	rcall	.+892    	; 0xa54 <_Z11rx_get_gearv>
     6d8:	fe d4       	rcall	.+2556   	; 0x10d6 <__fixsfsi>
     6da:	70 93 9b 00 	sts	0x009B, r23
     6de:	60 93 9a 00 	sts	0x009A, r22
     6e2:	ee 20       	and	r14, r14
     6e4:	31 f0       	breq	.+12     	; 0x6f2 <_Z23quad_output_passthroughbbbbbb+0x68>
     6e6:	be d1       	rcall	.+892    	; 0xa64 <_Z10rx_get_auxv>
     6e8:	f6 d4       	rcall	.+2540   	; 0x10d6 <__fixsfsi>
     6ea:	70 93 9d 00 	sts	0x009D, r23
     6ee:	60 93 9c 00 	sts	0x009C, r22
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <_Z19quad_output_set_auxi>:
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
     6fe:	90 93 9d 00 	sts	0x009D, r25
     702:	80 93 9c 00 	sts	0x009C, r24
     706:	08 95       	ret

00000708 <_Z24quad_output_get_throttlev>:


//getters for outputs
float quad_output_get_throttle()
{
	return throttle_out;
     708:	60 91 32 03 	lds	r22, 0x0332
     70c:	70 91 33 03 	lds	r23, 0x0333
     710:	80 91 34 03 	lds	r24, 0x0334
     714:	90 91 35 03 	lds	r25, 0x0335
     718:	08 95       	ret

0000071a <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	0b b6       	in	r0, 0x3b	; 59
     726:	0f 92       	push	r0
     728:	2f 93       	push	r18
     72a:	3f 93       	push	r19
     72c:	4f 93       	push	r20
     72e:	5f 93       	push	r21
     730:	6f 93       	push	r22
     732:	7f 93       	push	r23
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	af 93       	push	r26
     73a:	bf 93       	push	r27
     73c:	cf 93       	push	r28
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     742:	83 b1       	in	r24, 0x03	; 3
     744:	c0 91 43 03 	lds	r28, 0x0343
     748:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     74a:	83 b1       	in	r24, 0x03	; 3
     74c:	80 93 43 03 	sts	0x0343, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     750:	c0 ff       	sbrs	r28, 0
     752:	1c c0       	rjmp	.+56     	; 0x78c <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     754:	18 9b       	sbis	0x03, 0	; 3
     756:	0a c0       	rjmp	.+20     	; 0x76c <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     758:	e4 d1       	rcall	.+968    	; 0xb22 <_Z6microsv>
     75a:	60 93 64 03 	sts	0x0364, r22
     75e:	70 93 65 03 	sts	0x0365, r23
     762:	80 93 66 03 	sts	0x0366, r24
     766:	90 93 67 03 	sts	0x0367, r25
     76a:	10 c0       	rjmp	.+32     	; 0x78c <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     76c:	da d1       	rcall	.+948    	; 0xb22 <_Z6microsv>
     76e:	20 91 64 03 	lds	r18, 0x0364
     772:	30 91 65 03 	lds	r19, 0x0365
     776:	62 1b       	sub	r22, r18
     778:	73 0b       	sbc	r23, r19
     77a:	70 93 74 03 	sts	0x0374, r23
     77e:	60 93 73 03 	sts	0x0373, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     782:	80 91 68 03 	lds	r24, 0x0368
     786:	81 60       	ori	r24, 0x01	; 1
     788:	80 93 68 03 	sts	0x0368, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     78c:	c1 ff       	sbrs	r28, 1
     78e:	1c c0       	rjmp	.+56     	; 0x7c8 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     790:	19 9b       	sbis	0x03, 1	; 3
     792:	0a c0       	rjmp	.+20     	; 0x7a8 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     794:	c6 d1       	rcall	.+908    	; 0xb22 <_Z6microsv>
     796:	60 93 60 03 	sts	0x0360, r22
     79a:	70 93 61 03 	sts	0x0361, r23
     79e:	80 93 62 03 	sts	0x0362, r24
     7a2:	90 93 63 03 	sts	0x0363, r25
     7a6:	10 c0       	rjmp	.+32     	; 0x7c8 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     7a8:	bc d1       	rcall	.+888    	; 0xb22 <_Z6microsv>
     7aa:	20 91 60 03 	lds	r18, 0x0360
     7ae:	30 91 61 03 	lds	r19, 0x0361
     7b2:	62 1b       	sub	r22, r18
     7b4:	73 0b       	sbc	r23, r19
     7b6:	70 93 72 03 	sts	0x0372, r23
     7ba:	60 93 71 03 	sts	0x0371, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     7be:	80 91 68 03 	lds	r24, 0x0368
     7c2:	82 60       	ori	r24, 0x02	; 2
     7c4:	80 93 68 03 	sts	0x0368, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     7c8:	c2 ff       	sbrs	r28, 2
     7ca:	1c c0       	rjmp	.+56     	; 0x804 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     7cc:	1a 9b       	sbis	0x03, 2	; 3
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     7d0:	a8 d1       	rcall	.+848    	; 0xb22 <_Z6microsv>
     7d2:	60 93 5c 03 	sts	0x035C, r22
     7d6:	70 93 5d 03 	sts	0x035D, r23
     7da:	80 93 5e 03 	sts	0x035E, r24
     7de:	90 93 5f 03 	sts	0x035F, r25
     7e2:	10 c0       	rjmp	.+32     	; 0x804 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     7e4:	9e d1       	rcall	.+828    	; 0xb22 <_Z6microsv>
     7e6:	20 91 5c 03 	lds	r18, 0x035C
     7ea:	30 91 5d 03 	lds	r19, 0x035D
     7ee:	62 1b       	sub	r22, r18
     7f0:	73 0b       	sbc	r23, r19
     7f2:	70 93 70 03 	sts	0x0370, r23
     7f6:	60 93 6f 03 	sts	0x036F, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     7fa:	80 91 68 03 	lds	r24, 0x0368
     7fe:	84 60       	ori	r24, 0x04	; 4
     800:	80 93 68 03 	sts	0x0368, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     804:	c3 ff       	sbrs	r28, 3
     806:	1c c0       	rjmp	.+56     	; 0x840 <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     808:	1b 9b       	sbis	0x03, 3	; 3
     80a:	0a c0       	rjmp	.+20     	; 0x820 <__vector_9+0x106>
		{
			ulRudderStart = micros();
     80c:	8a d1       	rcall	.+788    	; 0xb22 <_Z6microsv>
     80e:	60 93 58 03 	sts	0x0358, r22
     812:	70 93 59 03 	sts	0x0359, r23
     816:	80 93 5a 03 	sts	0x035A, r24
     81a:	90 93 5b 03 	sts	0x035B, r25
     81e:	10 c0       	rjmp	.+32     	; 0x840 <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     820:	80 d1       	rcall	.+768    	; 0xb22 <_Z6microsv>
     822:	20 91 58 03 	lds	r18, 0x0358
     826:	30 91 59 03 	lds	r19, 0x0359
     82a:	62 1b       	sub	r22, r18
     82c:	73 0b       	sbc	r23, r19
     82e:	70 93 6e 03 	sts	0x036E, r23
     832:	60 93 6d 03 	sts	0x036D, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     836:	80 91 68 03 	lds	r24, 0x0368
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	80 93 68 03 	sts	0x0368, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     840:	c4 ff       	sbrs	r28, 4
     842:	1c c0       	rjmp	.+56     	; 0x87c <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     844:	1c 9b       	sbis	0x03, 4	; 3
     846:	0a c0       	rjmp	.+20     	; 0x85c <__vector_9+0x142>
		{
			ulGearStart = micros();
     848:	6c d1       	rcall	.+728    	; 0xb22 <_Z6microsv>
     84a:	60 93 54 03 	sts	0x0354, r22
     84e:	70 93 55 03 	sts	0x0355, r23
     852:	80 93 56 03 	sts	0x0356, r24
     856:	90 93 57 03 	sts	0x0357, r25
     85a:	10 c0       	rjmp	.+32     	; 0x87c <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     85c:	62 d1       	rcall	.+708    	; 0xb22 <_Z6microsv>
     85e:	20 91 54 03 	lds	r18, 0x0354
     862:	30 91 55 03 	lds	r19, 0x0355
     866:	62 1b       	sub	r22, r18
     868:	73 0b       	sbc	r23, r19
     86a:	70 93 6c 03 	sts	0x036C, r23
     86e:	60 93 6b 03 	sts	0x036B, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     872:	80 91 68 03 	lds	r24, 0x0368
     876:	80 61       	ori	r24, 0x10	; 16
     878:	80 93 68 03 	sts	0x0368, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     87c:	c5 ff       	sbrs	r28, 5
     87e:	1c c0       	rjmp	.+56     	; 0x8b8 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     880:	1d 9b       	sbis	0x03, 5	; 3
     882:	0a c0       	rjmp	.+20     	; 0x898 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     884:	4e d1       	rcall	.+668    	; 0xb22 <_Z6microsv>
     886:	60 93 50 03 	sts	0x0350, r22
     88a:	70 93 51 03 	sts	0x0351, r23
     88e:	80 93 52 03 	sts	0x0352, r24
     892:	90 93 53 03 	sts	0x0353, r25
     896:	10 c0       	rjmp	.+32     	; 0x8b8 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     898:	44 d1       	rcall	.+648    	; 0xb22 <_Z6microsv>
     89a:	20 91 50 03 	lds	r18, 0x0350
     89e:	30 91 51 03 	lds	r19, 0x0351
     8a2:	62 1b       	sub	r22, r18
     8a4:	73 0b       	sbc	r23, r19
     8a6:	70 93 6a 03 	sts	0x036A, r23
     8aa:	60 93 69 03 	sts	0x0369, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     8ae:	80 91 68 03 	lds	r24, 0x0368
     8b2:	80 62       	ori	r24, 0x20	; 32
     8b4:	80 93 68 03 	sts	0x0368, r24
		}
	}
}
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	cf 91       	pop	r28
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0b be       	out	0x3b, r0	; 59
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
     8e0:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
     8e2:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
     8e4:	eb e6       	ldi	r30, 0x6B	; 107
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	81 60       	ori	r24, 0x01	; 1
     8ec:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
     8ee:	80 81       	ld	r24, Z
     8f0:	82 60       	ori	r24, 0x02	; 2
     8f2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
     8f4:	80 81       	ld	r24, Z
     8f6:	84 60       	ori	r24, 0x04	; 4
     8f8:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
     8fa:	80 81       	ld	r24, Z
     8fc:	88 60       	ori	r24, 0x08	; 8
     8fe:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
     900:	80 81       	ld	r24, Z
     902:	80 61       	ori	r24, 0x10	; 16
     904:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
     906:	80 81       	ld	r24, Z
     908:	80 62       	ori	r24, 0x20	; 32
     90a:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
     90c:	e8 e6       	ldi	r30, 0x68	; 104
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	81 60       	ori	r24, 0x01	; 1
     914:	80 83       	st	Z, r24
	sei(); //enable interrupts
     916:	78 94       	sei
     918:	08 95       	ret

0000091a <_Z9rx_updatev>:
	static uint16_t unAuxIn;
	  
	// local copy of update flags
	static uint8_t rxUpdateFlags;
	  
	if(rxUpdateFlagsShared)
     91a:	80 91 68 03 	lds	r24, 0x0368
     91e:	88 23       	and	r24, r24
     920:	09 f4       	brne	.+2      	; 0x924 <_Z9rx_updatev+0xa>
     922:	44 c0       	rjmp	.+136    	; 0x9ac <_Z9rx_updatev+0x92>
	{
		cli();	//disable all interrupts. Can't have something change now!
     924:	f8 94       	cli
		
		rxUpdateFlags = rxUpdateFlagsShared;	//retrieve data on which channel changed from the volatile variable.
     926:	20 91 68 03 	lds	r18, 0x0368
     92a:	20 93 42 03 	sts	0x0342, r18
		
		if(rxUpdateFlags & THROTTLE_FLAG)
     92e:	20 ff       	sbrs	r18, 0
     930:	08 c0       	rjmp	.+16     	; 0x942 <_Z9rx_updatev+0x28>
		{
			unThrottleIn = unThrottleInShared;
     932:	80 91 73 03 	lds	r24, 0x0373
     936:	90 91 74 03 	lds	r25, 0x0374
     93a:	90 93 41 03 	sts	0x0341, r25
     93e:	80 93 40 03 	sts	0x0340, r24
		}
		
		if(rxUpdateFlags & AILERON_FLAG)
     942:	21 ff       	sbrs	r18, 1
     944:	08 c0       	rjmp	.+16     	; 0x956 <_Z9rx_updatev+0x3c>
		{
			unAileronIn = unAileronInShared;
     946:	80 91 71 03 	lds	r24, 0x0371
     94a:	90 91 72 03 	lds	r25, 0x0372
     94e:	90 93 3f 03 	sts	0x033F, r25
     952:	80 93 3e 03 	sts	0x033E, r24
		}
		
		if(rxUpdateFlags & ELEVATOR_FLAG)
     956:	22 ff       	sbrs	r18, 2
     958:	08 c0       	rjmp	.+16     	; 0x96a <_Z9rx_updatev+0x50>
		{
			unElevatorIn = unElevatorInShared;
     95a:	80 91 6f 03 	lds	r24, 0x036F
     95e:	90 91 70 03 	lds	r25, 0x0370
     962:	90 93 3d 03 	sts	0x033D, r25
     966:	80 93 3c 03 	sts	0x033C, r24
		}
		
		if(rxUpdateFlags & RUDDER_FLAG)
     96a:	23 ff       	sbrs	r18, 3
     96c:	08 c0       	rjmp	.+16     	; 0x97e <_Z9rx_updatev+0x64>
		{
			unRudderIn = unRudderInShared;
     96e:	80 91 6d 03 	lds	r24, 0x036D
     972:	90 91 6e 03 	lds	r25, 0x036E
     976:	90 93 3b 03 	sts	0x033B, r25
     97a:	80 93 3a 03 	sts	0x033A, r24
		}
		
		if(rxUpdateFlags & GEAR_FLAG)
     97e:	24 ff       	sbrs	r18, 4
     980:	08 c0       	rjmp	.+16     	; 0x992 <_Z9rx_updatev+0x78>
		{
			unGearIn = unGearInShared;
     982:	80 91 6b 03 	lds	r24, 0x036B
     986:	90 91 6c 03 	lds	r25, 0x036C
     98a:	90 93 39 03 	sts	0x0339, r25
     98e:	80 93 38 03 	sts	0x0338, r24
		}
		
		if(rxUpdateFlags & AUX_FLAG)
     992:	25 ff       	sbrs	r18, 5
     994:	08 c0       	rjmp	.+16     	; 0x9a6 <_Z9rx_updatev+0x8c>
		{
			unAuxIn = unAuxInShared;
     996:	80 91 69 03 	lds	r24, 0x0369
     99a:	90 91 6a 03 	lds	r25, 0x036A
     99e:	90 93 37 03 	sts	0x0337, r25
     9a2:	80 93 36 03 	sts	0x0336, r24
		}
		
		rxUpdateFlagsShared = 0;
     9a6:	10 92 68 03 	sts	0x0368, r1
		
		sei();	//all needed data is now in local variables. We can safely re-enable interrupts!
     9aa:	78 94       	sei
		
		}
		
		if(rxUpdateFlags)
     9ac:	80 91 42 03 	lds	r24, 0x0342
     9b0:	88 23       	and	r24, r24
     9b2:	91 f1       	breq	.+100    	; 0xa18 <_Z9rx_updatev+0xfe>
		{
			rxInputThrottle = unThrottleIn;
     9b4:	80 91 40 03 	lds	r24, 0x0340
     9b8:	90 91 41 03 	lds	r25, 0x0341
     9bc:	90 93 4f 03 	sts	0x034F, r25
     9c0:	80 93 4e 03 	sts	0x034E, r24
			rxInputAileron = unAileronIn;
     9c4:	80 91 3e 03 	lds	r24, 0x033E
     9c8:	90 91 3f 03 	lds	r25, 0x033F
     9cc:	90 93 4d 03 	sts	0x034D, r25
     9d0:	80 93 4c 03 	sts	0x034C, r24
			rxInputElevator = unElevatorIn;
     9d4:	80 91 3c 03 	lds	r24, 0x033C
     9d8:	90 91 3d 03 	lds	r25, 0x033D
     9dc:	90 93 4b 03 	sts	0x034B, r25
     9e0:	80 93 4a 03 	sts	0x034A, r24
			rxInputRudder = unRudderIn;
     9e4:	80 91 3a 03 	lds	r24, 0x033A
     9e8:	90 91 3b 03 	lds	r25, 0x033B
     9ec:	90 93 49 03 	sts	0x0349, r25
     9f0:	80 93 48 03 	sts	0x0348, r24
			rxInputGear = unGearIn;
     9f4:	80 91 38 03 	lds	r24, 0x0338
     9f8:	90 91 39 03 	lds	r25, 0x0339
     9fc:	90 93 47 03 	sts	0x0347, r25
     a00:	80 93 46 03 	sts	0x0346, r24
			rxInputAux = unAuxIn;
     a04:	80 91 36 03 	lds	r24, 0x0336
     a08:	90 91 37 03 	lds	r25, 0x0337
     a0c:	90 93 45 03 	sts	0x0345, r25
     a10:	80 93 44 03 	sts	0x0344, r24
				debug_print("\t");
				debug_printf(rx_get_aux());
				debug_print("\n\r");
			}
			
			rxUpdateFlags = 0;
     a14:	10 92 42 03 	sts	0x0342, r1
     a18:	08 95       	ret

00000a1a <_Z15rx_get_throttlev>:
}

int rx_get_throttle()
{
	return rxInputThrottle;
}
     a1a:	80 91 4e 03 	lds	r24, 0x034E
     a1e:	90 91 4f 03 	lds	r25, 0x034F
     a22:	08 95       	ret

00000a24 <_Z14rx_get_aileronv>:

float rx_get_aileron()
{
	return rxInputAileron;
     a24:	60 91 4c 03 	lds	r22, 0x034C
     a28:	70 91 4d 03 	lds	r23, 0x034D
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	83 c3       	rjmp	.+1798   	; 0x1138 <__floatunsisf>
}
     a32:	08 95       	ret

00000a34 <_Z15rx_get_elevatorv>:

float rx_get_elevator()
{
	return rxInputElevator;
     a34:	60 91 4a 03 	lds	r22, 0x034A
     a38:	70 91 4b 03 	lds	r23, 0x034B
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	7b c3       	rjmp	.+1782   	; 0x1138 <__floatunsisf>
}
     a42:	08 95       	ret

00000a44 <_Z13rx_get_rudderv>:

float rx_get_rudder()
{
	return rxInputRudder;
     a44:	60 91 48 03 	lds	r22, 0x0348
     a48:	70 91 49 03 	lds	r23, 0x0349
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	73 c3       	rjmp	.+1766   	; 0x1138 <__floatunsisf>
}
     a52:	08 95       	ret

00000a54 <_Z11rx_get_gearv>:

float rx_get_gear()
{
	return rxInputGear;
     a54:	60 91 46 03 	lds	r22, 0x0346
     a58:	70 91 47 03 	lds	r23, 0x0347
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	6b c3       	rjmp	.+1750   	; 0x1138 <__floatunsisf>
}
     a62:	08 95       	ret

00000a64 <_Z10rx_get_auxv>:

float rx_get_aux()
{
	return rxInputAux;
     a64:	60 91 44 03 	lds	r22, 0x0344
     a68:	70 91 45 03 	lds	r23, 0x0345
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	63 c3       	rjmp	.+1734   	; 0x1138 <__floatunsisf>
     a72:	08 95       	ret

00000a74 <__vector_23>:
long lastIRTime = 0;


//This timer is used for the millis() and micros() functions.
ISR(TIMER0_OVF_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a8a:	80 91 76 03 	lds	r24, 0x0376
     a8e:	90 91 77 03 	lds	r25, 0x0377
     a92:	a0 91 78 03 	lds	r26, 0x0378
     a96:	b0 91 79 03 	lds	r27, 0x0379
	unsigned char f = timer0_fract;
     a9a:	30 91 75 03 	lds	r19, 0x0375

	m += MILLIS_INC;
	f += FRACT_INC;
     a9e:	23 e0       	ldi	r18, 0x03	; 3
     aa0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     aa2:	2d 37       	cpi	r18, 0x7D	; 125
     aa4:	20 f4       	brcc	.+8      	; 0xaae <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	a1 1d       	adc	r26, r1
     aaa:	b1 1d       	adc	r27, r1
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     aae:	26 e8       	ldi	r18, 0x86	; 134
     ab0:	23 0f       	add	r18, r19
		m += 1;
     ab2:	02 96       	adiw	r24, 0x02	; 2
     ab4:	a1 1d       	adc	r26, r1
     ab6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     ab8:	20 93 75 03 	sts	0x0375, r18
	timer0_millis = m;
     abc:	80 93 76 03 	sts	0x0376, r24
     ac0:	90 93 77 03 	sts	0x0377, r25
     ac4:	a0 93 78 03 	sts	0x0378, r26
     ac8:	b0 93 79 03 	sts	0x0379, r27
	timer0_overflow_count++;
     acc:	80 91 7a 03 	lds	r24, 0x037A
     ad0:	90 91 7b 03 	lds	r25, 0x037B
     ad4:	a0 91 7c 03 	lds	r26, 0x037C
     ad8:	b0 91 7d 03 	lds	r27, 0x037D
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	a1 1d       	adc	r26, r1
     ae0:	b1 1d       	adc	r27, r1
     ae2:	80 93 7a 03 	sts	0x037A, r24
     ae6:	90 93 7b 03 	sts	0x037B, r25
     aea:	a0 93 7c 03 	sts	0x037C, r26
     aee:	b0 93 7d 03 	sts	0x037D, r27
}
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <_Z6millisv>:

long  millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     b08:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     b0a:	f8 94       	cli
	m = timer0_millis;
     b0c:	60 91 76 03 	lds	r22, 0x0376
     b10:	70 91 77 03 	lds	r23, 0x0377
     b14:	80 91 78 03 	lds	r24, 0x0378
     b18:	90 91 79 03 	lds	r25, 0x0379
	SREG = oldSREG;
     b1c:	2f bf       	out	0x3f, r18	; 63
	sei();
     b1e:	78 94       	sei

	return m;
}
     b20:	08 95       	ret

00000b22 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
     b22:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     b24:	f8 94       	cli
	m = timer0_overflow_count;
     b26:	80 91 7a 03 	lds	r24, 0x037A
     b2a:	90 91 7b 03 	lds	r25, 0x037B
     b2e:	a0 91 7c 03 	lds	r26, 0x037C
     b32:	b0 91 7d 03 	lds	r27, 0x037D
	t = TCNT0;
     b36:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     b38:	a8 9b       	sbis	0x15, 0	; 21
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <_Z6microsv+0x1e>
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	a9 f4       	brne	.+42     	; 0xb6a <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b40:	3f bf       	out	0x3f, r19	; 63
	
	sei();
     b42:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b44:	ba 2f       	mov	r27, r26
     b46:	a9 2f       	mov	r26, r25
     b48:	98 2f       	mov	r25, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	82 0f       	add	r24, r18
     b4e:	91 1d       	adc	r25, r1
     b50:	a1 1d       	adc	r26, r1
     b52:	b1 1d       	adc	r27, r1
     b54:	bc 01       	movw	r22, r24
     b56:	cd 01       	movw	r24, r26
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	88 1f       	adc	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	66 0f       	add	r22, r22
     b62:	77 1f       	adc	r23, r23
     b64:	88 1f       	adc	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	a1 1d       	adc	r26, r1
     b6e:	b1 1d       	adc	r27, r1
     b70:	e7 cf       	rjmp	.-50     	; 0xb40 <_Z6microsv+0x1e>

00000b72 <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
     b78:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	85 bd       	out	0x25, r24	; 37
     b7e:	08 95       	ret

00000b80 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	ec 01       	movw	r28, r24
     b86:	cb 01       	movw	r24, r22
     b88:	aa 27       	eor	r26, r26
     b8a:	97 fd       	sbrc	r25, 7
     b8c:	a0 95       	com	r26
     b8e:	ba 2f       	mov	r27, r26
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	aa 1f       	adc	r26, r26
     b9e:	bb 1f       	adc	r27, r27
     ba0:	9c 01       	movw	r18, r24
     ba2:	ad 01       	movw	r20, r26
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	44 1f       	adc	r20, r20
     baa:	55 1f       	adc	r21, r21
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	44 1f       	adc	r20, r20
     bb2:	55 1f       	adc	r21, r21
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	74 e2       	ldi	r23, 0x24	; 36
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	d6 d3       	rcall	.+1964   	; 0x136a <__udivmodsi4>
     bbe:	21 50       	subi	r18, 0x01	; 1
     bc0:	31 09       	sbc	r19, r1
     bc2:	20 97       	sbiw	r28, 0x00	; 0
     bc4:	59 f4       	brne	.+22     	; 0xbdc <_Z10USART_initii+0x5c>
     bc6:	30 93 c5 00 	sts	0x00C5, r19
     bca:	20 93 c4 00 	sts	0x00C4, r18
     bce:	88 e1       	ldi	r24, 0x18	; 24
     bd0:	80 93 c1 00 	sts	0x00C1, r24
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	80 93 c2 00 	sts	0x00C2, r24
     bda:	28 c0       	rjmp	.+80     	; 0xc2c <_Z10USART_initii+0xac>
     bdc:	c1 30       	cpi	r28, 0x01	; 1
     bde:	d1 05       	cpc	r29, r1
     be0:	59 f4       	brne	.+22     	; 0xbf8 <_Z10USART_initii+0x78>
     be2:	30 93 cd 00 	sts	0x00CD, r19
     be6:	20 93 cc 00 	sts	0x00CC, r18
     bea:	88 e1       	ldi	r24, 0x18	; 24
     bec:	80 93 c9 00 	sts	0x00C9, r24
     bf0:	86 e0       	ldi	r24, 0x06	; 6
     bf2:	80 93 ca 00 	sts	0x00CA, r24
     bf6:	1a c0       	rjmp	.+52     	; 0xc2c <_Z10USART_initii+0xac>
     bf8:	c2 30       	cpi	r28, 0x02	; 2
     bfa:	d1 05       	cpc	r29, r1
     bfc:	59 f4       	brne	.+22     	; 0xc14 <_Z10USART_initii+0x94>
     bfe:	30 93 d5 00 	sts	0x00D5, r19
     c02:	20 93 d4 00 	sts	0x00D4, r18
     c06:	88 e1       	ldi	r24, 0x18	; 24
     c08:	80 93 d1 00 	sts	0x00D1, r24
     c0c:	86 e0       	ldi	r24, 0x06	; 6
     c0e:	80 93 d2 00 	sts	0x00D2, r24
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <_Z10USART_initii+0xac>
     c14:	23 97       	sbiw	r28, 0x03	; 3
     c16:	51 f4       	brne	.+20     	; 0xc2c <_Z10USART_initii+0xac>
     c18:	30 93 35 01 	sts	0x0135, r19
     c1c:	20 93 34 01 	sts	0x0134, r18
     c20:	88 e1       	ldi	r24, 0x18	; 24
     c22:	80 93 31 01 	sts	0x0131, r24
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	80 93 32 01 	sts	0x0132, r24
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <_Z10USART_sendih>:
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	41 f4       	brne	.+16     	; 0xc46 <_Z10USART_sendih+0x14>
     c36:	e0 ec       	ldi	r30, 0xC0	; 192
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	85 ff       	sbrs	r24, 5
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <_Z10USART_sendih+0x8>
     c40:	60 93 c6 00 	sts	0x00C6, r22
     c44:	08 95       	ret
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	41 f4       	brne	.+16     	; 0xc5c <_Z10USART_sendih+0x2a>
     c4c:	e8 ec       	ldi	r30, 0xC8	; 200
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	85 ff       	sbrs	r24, 5
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <_Z10USART_sendih+0x1e>
     c56:	60 93 ce 00 	sts	0x00CE, r22
     c5a:	08 95       	ret
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	91 05       	cpc	r25, r1
     c60:	41 f4       	brne	.+16     	; 0xc72 <_Z10USART_sendih+0x40>
     c62:	e0 ed       	ldi	r30, 0xD0	; 208
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	85 ff       	sbrs	r24, 5
     c6a:	fd cf       	rjmp	.-6      	; 0xc66 <_Z10USART_sendih+0x34>
     c6c:	60 93 d6 00 	sts	0x00D6, r22
     c70:	08 95       	ret
     c72:	03 97       	sbiw	r24, 0x03	; 3
     c74:	39 f4       	brne	.+14     	; 0xc84 <_Z10USART_sendih+0x52>
     c76:	e0 e3       	ldi	r30, 0x30	; 48
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	80 81       	ld	r24, Z
     c7c:	85 ff       	sbrs	r24, 5
     c7e:	fd cf       	rjmp	.-6      	; 0xc7a <_Z10USART_sendih+0x48>
     c80:	60 93 36 01 	sts	0x0136, r22
     c84:	08 95       	ret

00000c86 <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	8c 01       	movw	r16, r24
     c90:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     c92:	68 81       	ld	r22, Y
     c94:	66 23       	and	r22, r22
     c96:	31 f0       	breq	.+12     	; 0xca4 <_Z15USART_putstringiPKc+0x1e>
     c98:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
     c9a:	c8 01       	movw	r24, r16
     c9c:	ca df       	rcall	.-108    	; 0xc32 <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     c9e:	69 91       	ld	r22, Y+
     ca0:	61 11       	cpse	r22, r1
     ca2:	fb cf       	rjmp	.-10     	; 0xc9a <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <_Z4beepv>:
	_delay_ms(1000);
}

void beep()
{
	sbi(PORTB,7);
     cae:	2f 9a       	sbi	0x05, 7	; 5
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	80 e7       	ldi	r24, 0x70	; 112
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	80 40       	sbci	r24, 0x00	; 0
     cba:	90 40       	sbci	r25, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <_Z4beepv+0x8>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <_Z4beepv+0x12>
     cc0:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     cc2:	2f 98       	cbi	0x05, 7	; 5
     cc4:	08 95       	ret

00000cc6 <_Z10initialisev>:

bool initialise()
{
	bool success = true;
	
	USART_init(USART_PC,9600);
     cc6:	60 e8       	ldi	r22, 0x80	; 128
     cc8:	75 e2       	ldi	r23, 0x25	; 37
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	58 df       	rcall	.-336    	; 0xb80 <_Z10USART_initii>
	initTimers();
     cd0:	50 df       	rcall	.-352    	; 0xb72 <_Z10initTimersv>
	rx_init();
     cd2:	06 de       	rcall	.-1012   	; 0x8e0 <_Z7rx_initv>
	

	if(altimeter_init()==false)
     cd4:	ff db       	rcall	.-2050   	; 0x4d4 <_Z14altimeter_initv>
     cd6:	81 11       	cpse	r24, r1
     cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <_Z10initialisev+0x30>
	{
		while(1)
		{
			beep();
     cda:	e9 df       	rcall	.-46     	; 0xcae <_Z4beepv>
			beep();
     cdc:	e8 df       	rcall	.-48     	; 0xcae <_Z4beepv>
			beep();
     cde:	e7 df       	rcall	.-50     	; 0xcae <_Z4beepv>
			beep();
     ce0:	e6 df       	rcall	.-52     	; 0xcae <_Z4beepv>
     ce2:	2f ef       	ldi	r18, 0xFF	; 255
     ce4:	83 ec       	ldi	r24, 0xC3	; 195
     ce6:	99 e0       	ldi	r25, 0x09	; 9
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <_Z10initialisev+0x22>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <_Z10initialisev+0x2c>
     cf2:	00 00       	nop
     cf4:	f2 cf       	rjmp	.-28     	; 0xcda <_Z10initialisev+0x14>
			_delay_ms(200);
		}
	}
	quad_output_init();
     cf6:	5b dc       	rcall	.-1866   	; 0x5ae <_Z16quad_output_initv>
	
	
	debug_println("Initialization complete!");
     cf8:	87 ed       	ldi	r24, 0xD7	; 215
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	1c dc       	rcall	.-1992   	; 0x536 <_Z13debug_printlnPKc>
	beep();
     cfe:	d7 df       	rcall	.-82     	; 0xcae <_Z4beepv>
	beep();
     d00:	d6 df       	rcall	.-84     	; 0xcae <_Z4beepv>
	beep();
     d02:	d5 df       	rcall	.-86     	; 0xcae <_Z4beepv>
	return success;
}
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret

00000d08 <_Z15regulate_heightf>:

float regulate_height(float targetHeight)
{
     d08:	4f 92       	push	r4
     d0a:	5f 92       	push	r5
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 d0       	rcall	.+0      	; 0xd26 <_Z15regulate_heightf+0x1e>
     d26:	1f 92       	push	r1
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	4b 01       	movw	r8, r22
     d2e:	5c 01       	movw	r10, r24
	float dt = (current_time-previous_time)/1000;
     d30:	c0 90 86 03 	lds	r12, 0x0386
     d34:	d0 90 87 03 	lds	r13, 0x0387
     d38:	e0 90 88 03 	lds	r14, 0x0388
     d3c:	f0 90 89 03 	lds	r15, 0x0389
     d40:	20 91 82 03 	lds	r18, 0x0382
     d44:	30 91 83 03 	lds	r19, 0x0383
     d48:	40 91 84 03 	lds	r20, 0x0384
     d4c:	50 91 85 03 	lds	r21, 0x0385
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	ef d0       	rcall	.+478    	; 0xf34 <__subsf3>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a e7       	ldi	r20, 0x7A	; 122
     d5c:	54 e4       	ldi	r21, 0x44	; 68
     d5e:	53 d1       	rcall	.+678    	; 0x1006 <__divsf3>
     d60:	2b 01       	movw	r4, r22
     d62:	3c 01       	movw	r6, r24
	previous_time = current_time;
     d64:	c0 92 82 03 	sts	0x0382, r12
     d68:	d0 92 83 03 	sts	0x0383, r13
     d6c:	e0 92 84 03 	sts	0x0384, r14
     d70:	f0 92 85 03 	sts	0x0385, r15
	current_time = millis();
     d74:	c9 de       	rcall	.-622    	; 0xb08 <_Z6millisv>
     d76:	e2 d1       	rcall	.+964    	; 0x113c <__floatsisf>
     d78:	60 93 86 03 	sts	0x0386, r22
     d7c:	70 93 87 03 	sts	0x0387, r23
     d80:	80 93 88 03 	sts	0x0388, r24
     d84:	90 93 89 03 	sts	0x0389, r25
	float P = 10;
	float I = 0;
	float D = 0;
	
	float currentHeight = altimeter_get_metres();
     d88:	e8 da       	rcall	.-2608   	; 0x35a <_Z20altimeter_get_metresv>
     d8a:	6b 01       	movw	r12, r22
     d8c:	7c 01       	movw	r14, r24
	debug_print("Target height: ");
     d8e:	80 ef       	ldi	r24, 0xF0	; 240
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	cc db       	rcall	.-2152   	; 0x52c <_Z11debug_printPKc>
	debug_printf(targetHeight);
     d94:	c5 01       	movw	r24, r10
     d96:	b4 01       	movw	r22, r8
     d98:	d8 db       	rcall	.-2128   	; 0x54a <_Z12debug_printff>
	debug_print("m\t Current height: ");
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	c6 db       	rcall	.-2164   	; 0x52c <_Z11debug_printPKc>
	debug_printf(currentHeight);
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	d2 db       	rcall	.-2140   	; 0x54a <_Z12debug_printff>
	debug_println("m.");
     da6:	84 e1       	ldi	r24, 0x14	; 20
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	c5 db       	rcall	.-2166   	; 0x536 <_Z13debug_printlnPKc>
	float throttle = quad_output_get_throttle();
     dac:	ad dc       	rcall	.-1702   	; 0x708 <_Z24quad_output_get_throttlev>
     dae:	69 83       	std	Y+1, r22	; 0x01
     db0:	7a 83       	std	Y+2, r23	; 0x02
     db2:	8b 83       	std	Y+3, r24	; 0x03
     db4:	9c 83       	std	Y+4, r25	; 0x04
	
	float error = (targetHeight - currentHeight)*dt;
     db6:	a7 01       	movw	r20, r14
     db8:	96 01       	movw	r18, r12
     dba:	c5 01       	movw	r24, r10
     dbc:	b4 01       	movw	r22, r8
     dbe:	ba d0       	rcall	.+372    	; 0xf34 <__subsf3>
     dc0:	a3 01       	movw	r20, r6
     dc2:	92 01       	movw	r18, r4
     dc4:	6f d2       	rcall	.+1246   	; 0x12a4 <__mulsf3>
     dc6:	6b 01       	movw	r12, r22
     dc8:	7c 01       	movw	r14, r24
	
	integral += (error);
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	60 91 7e 03 	lds	r22, 0x037E
     dd2:	70 91 7f 03 	lds	r23, 0x037F
     dd6:	80 91 80 03 	lds	r24, 0x0380
     dda:	90 91 81 03 	lds	r25, 0x0381
     dde:	ab d0       	rcall	.+342    	; 0xf36 <__addsf3>
     de0:	60 93 7e 03 	sts	0x037E, r22
     de4:	70 93 7f 03 	sts	0x037F, r23
     de8:	80 93 80 03 	sts	0x0380, r24
     dec:	90 93 81 03 	sts	0x0381, r25
	
	if(error<0)
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	a9 01       	movw	r20, r18
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	01 d1       	rcall	.+514    	; 0xffe <__cmpsf2>
     dfc:	88 23       	and	r24, r24
     dfe:	0c f4       	brge	.+2      	; 0xe02 <_Z15regulate_heightf+0xfa>
		beep();
     e00:	56 df       	rcall	.-340    	; 0xcae <_Z4beepv>
		
	throttle += (P*error)+integral*I;
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e2       	ldi	r20, 0x20	; 32
     e08:	51 e4       	ldi	r21, 0x41	; 65
     e0a:	c7 01       	movw	r24, r14
     e0c:	b6 01       	movw	r22, r12
     e0e:	4a d2       	rcall	.+1172   	; 0x12a4 <__mulsf3>
     e10:	6b 01       	movw	r12, r22
     e12:	7c 01       	movw	r14, r24
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	60 91 7e 03 	lds	r22, 0x037E
     e1e:	70 91 7f 03 	lds	r23, 0x037F
     e22:	80 91 80 03 	lds	r24, 0x0380
     e26:	90 91 81 03 	lds	r25, 0x0381
     e2a:	3c d2       	rcall	.+1144   	; 0x12a4 <__mulsf3>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	80 d0       	rcall	.+256    	; 0xf36 <__addsf3>
     e36:	29 81       	ldd	r18, Y+1	; 0x01
     e38:	3a 81       	ldd	r19, Y+2	; 0x02
     e3a:	4b 81       	ldd	r20, Y+3	; 0x03
     e3c:	5c 81       	ldd	r21, Y+4	; 0x04
     e3e:	7b d0       	rcall	.+246    	; 0xf36 <__addsf3>
     e40:	6b 01       	movw	r12, r22
     e42:	7c 01       	movw	r14, r24
	
	if(throttle>1600)
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	48 ec       	ldi	r20, 0xC8	; 200
     e4a:	54 e4       	ldi	r21, 0x44	; 68
     e4c:	27 d2       	rcall	.+1102   	; 0x129c <__gesf2>
     e4e:	18 16       	cp	r1, r24
     e50:	44 f4       	brge	.+16     	; 0xe62 <_Z15regulate_heightf+0x15a>
		throttle=1600;
     e52:	0f 2e       	mov	r0, r31
     e54:	c1 2c       	mov	r12, r1
     e56:	d1 2c       	mov	r13, r1
     e58:	f8 ec       	ldi	r31, 0xC8	; 200
     e5a:	ef 2e       	mov	r14, r31
     e5c:	f4 e4       	ldi	r31, 0x44	; 68
     e5e:	ff 2e       	mov	r15, r31
     e60:	f0 2d       	mov	r31, r0
	
	quad_output_set_throttle(throttle);
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	37 d1       	rcall	.+622    	; 0x10d6 <__fixsfsi>
     e68:	cb 01       	movw	r24, r22
     e6a:	8e db       	rcall	.-2276   	; 0x588 <_Z24quad_output_set_throttlei>
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	8f 90       	pop	r8
     e88:	7f 90       	pop	r7
     e8a:	6f 90       	pop	r6
     e8c:	5f 90       	pop	r5
     e8e:	4f 90       	pop	r4
     e90:	08 95       	ret

00000e92 <main>:
float previous_time = 0;
float integral = 0;

int main(void)
{
	initialise();
     e92:	19 df       	rcall	.-462    	; 0xcc6 <_Z10initialisev>
	
	target_height = altimeter_get_start_height()+2;
     e94:	2c da       	rcall	.-2984   	; 0x2ee <_Z26altimeter_get_start_heightv>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e4       	ldi	r21, 0x40	; 64
     e9e:	4b d0       	rcall	.+150    	; 0xf36 <__addsf3>
     ea0:	60 93 8a 03 	sts	0x038A, r22
     ea4:	70 93 8b 03 	sts	0x038B, r23
     ea8:	80 93 8c 03 	sts	0x038C, r24
     eac:	90 93 8d 03 	sts	0x038D, r25
	//arm_quad();
	
	while(1)
	{
		rx_update();
     eb0:	34 dd       	rcall	.-1432   	; 0x91a <_Z9rx_updatev>
		if(rx_get_aux()>1300 && rx_get_aux()<1600)
     eb2:	d8 dd       	rcall	.-1104   	; 0xa64 <_Z10rx_get_auxv>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e8       	ldi	r19, 0x80	; 128
     eb8:	42 ea       	ldi	r20, 0xA2	; 162
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	ef d1       	rcall	.+990    	; 0x129c <__gesf2>
     ebe:	18 16       	cp	r1, r24
     ec0:	cc f4       	brge	.+50     	; 0xef4 <main+0x62>
     ec2:	d0 dd       	rcall	.-1120   	; 0xa64 <_Z10rx_get_auxv>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	48 ec       	ldi	r20, 0xC8	; 200
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	98 d0       	rcall	.+304    	; 0xffe <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	8c f4       	brge	.+34     	; 0xef4 <main+0x62>
		{
			//debug_println("regulating height!");
			regulate_height(target_height);
     ed2:	60 91 8a 03 	lds	r22, 0x038A
     ed6:	70 91 8b 03 	lds	r23, 0x038B
     eda:	80 91 8c 03 	lds	r24, 0x038C
     ede:	90 91 8d 03 	lds	r25, 0x038D
     ee2:	12 df       	rcall	.-476    	; 0xd08 <_Z15regulate_heightf>
			quad_output_passthrough(false,true,true,true,true,false);
     ee4:	e1 2c       	mov	r14, r1
     ee6:	01 e0       	ldi	r16, 0x01	; 1
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	cc db       	rcall	.-2152   	; 0x68a <_Z23quad_output_passthroughbbbbbb>
     ef2:	1c c0       	rjmp	.+56     	; 0xf2c <main+0x9a>
			/*
			if(target_height<altimeter_get_start_height())
				target_height=altimeter_get_start_height();
			*/
		}
		else if(rx_get_aux()>1600)
     ef4:	b7 dd       	rcall	.-1170   	; 0xa64 <_Z10rx_get_auxv>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	48 ec       	ldi	r20, 0xC8	; 200
     efc:	54 e4       	ldi	r21, 0x44	; 68
     efe:	ce d1       	rcall	.+924    	; 0x129c <__gesf2>
     f00:	18 16       	cp	r1, r24
     f02:	54 f4       	brge	.+20     	; 0xf18 <main+0x86>
		{
			target_height = altimeter_get_metres();
     f04:	2a da       	rcall	.-2988   	; 0x35a <_Z20altimeter_get_metresv>
     f06:	60 93 8a 03 	sts	0x038A, r22
     f0a:	70 93 8b 03 	sts	0x038B, r23
     f0e:	80 93 8c 03 	sts	0x038C, r24
     f12:	90 93 8d 03 	sts	0x038D, r25
     f16:	0a c0       	rjmp	.+20     	; 0xf2c <main+0x9a>
		}
		else
		{
			debug_println("Not regulating height!");
     f18:	87 e1       	ldi	r24, 0x17	; 23
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0c db       	rcall	.-2536   	; 0x536 <_Z13debug_printlnPKc>
			quad_output_passthrough(true,true,true,true,true,false);
     f1e:	e1 2c       	mov	r14, r1
     f20:	01 e0       	ldi	r16, 0x01	; 1
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	af db       	rcall	.-2210   	; 0x68a <_Z23quad_output_passthroughbbbbbb>
		}
		
		quad_output_set_aux(1000);	//keep flight controller in self level mode
     f2c:	88 ee       	ldi	r24, 0xE8	; 232
     f2e:	93 e0       	ldi	r25, 0x03	; 3
     f30:	e6 db       	rcall	.-2100   	; 0x6fe <_Z19quad_output_set_auxi>
float target_height;
float current_time = 0;
float previous_time = 0;
float integral = 0;

int main(void)
     f32:	be cf       	rjmp	.-132    	; 0xeb0 <main+0x1e>

00000f34 <__subsf3>:
     f34:	50 58       	subi	r21, 0x80	; 128

00000f36 <__addsf3>:
     f36:	bb 27       	eor	r27, r27
     f38:	aa 27       	eor	r26, r26
     f3a:	0e d0       	rcall	.+28     	; 0xf58 <__addsf3x>
     f3c:	75 c1       	rjmp	.+746    	; 0x1228 <__fp_round>
     f3e:	66 d1       	rcall	.+716    	; 0x120c <__fp_pscA>
     f40:	30 f0       	brcs	.+12     	; 0xf4e <__addsf3+0x18>
     f42:	6b d1       	rcall	.+726    	; 0x121a <__fp_pscB>
     f44:	20 f0       	brcs	.+8      	; 0xf4e <__addsf3+0x18>
     f46:	31 f4       	brne	.+12     	; 0xf54 <__addsf3+0x1e>
     f48:	9f 3f       	cpi	r25, 0xFF	; 255
     f4a:	11 f4       	brne	.+4      	; 0xf50 <__addsf3+0x1a>
     f4c:	1e f4       	brtc	.+6      	; 0xf54 <__addsf3+0x1e>
     f4e:	5b c1       	rjmp	.+694    	; 0x1206 <__fp_nan>
     f50:	0e f4       	brtc	.+2      	; 0xf54 <__addsf3+0x1e>
     f52:	e0 95       	com	r30
     f54:	e7 fb       	bst	r30, 7
     f56:	51 c1       	rjmp	.+674    	; 0x11fa <__fp_inf>

00000f58 <__addsf3x>:
     f58:	e9 2f       	mov	r30, r25
     f5a:	77 d1       	rcall	.+750    	; 0x124a <__fp_split3>
     f5c:	80 f3       	brcs	.-32     	; 0xf3e <__addsf3+0x8>
     f5e:	ba 17       	cp	r27, r26
     f60:	62 07       	cpc	r22, r18
     f62:	73 07       	cpc	r23, r19
     f64:	84 07       	cpc	r24, r20
     f66:	95 07       	cpc	r25, r21
     f68:	18 f0       	brcs	.+6      	; 0xf70 <__addsf3x+0x18>
     f6a:	71 f4       	brne	.+28     	; 0xf88 <__addsf3x+0x30>
     f6c:	9e f5       	brtc	.+102    	; 0xfd4 <__addsf3x+0x7c>
     f6e:	8f c1       	rjmp	.+798    	; 0x128e <__fp_zero>
     f70:	0e f4       	brtc	.+2      	; 0xf74 <__addsf3x+0x1c>
     f72:	e0 95       	com	r30
     f74:	0b 2e       	mov	r0, r27
     f76:	ba 2f       	mov	r27, r26
     f78:	a0 2d       	mov	r26, r0
     f7a:	0b 01       	movw	r0, r22
     f7c:	b9 01       	movw	r22, r18
     f7e:	90 01       	movw	r18, r0
     f80:	0c 01       	movw	r0, r24
     f82:	ca 01       	movw	r24, r20
     f84:	a0 01       	movw	r20, r0
     f86:	11 24       	eor	r1, r1
     f88:	ff 27       	eor	r31, r31
     f8a:	59 1b       	sub	r21, r25
     f8c:	99 f0       	breq	.+38     	; 0xfb4 <__addsf3x+0x5c>
     f8e:	59 3f       	cpi	r21, 0xF9	; 249
     f90:	50 f4       	brcc	.+20     	; 0xfa6 <__addsf3x+0x4e>
     f92:	50 3e       	cpi	r21, 0xE0	; 224
     f94:	68 f1       	brcs	.+90     	; 0xff0 <__addsf3x+0x98>
     f96:	1a 16       	cp	r1, r26
     f98:	f0 40       	sbci	r31, 0x00	; 0
     f9a:	a2 2f       	mov	r26, r18
     f9c:	23 2f       	mov	r18, r19
     f9e:	34 2f       	mov	r19, r20
     fa0:	44 27       	eor	r20, r20
     fa2:	58 5f       	subi	r21, 0xF8	; 248
     fa4:	f3 cf       	rjmp	.-26     	; 0xf8c <__addsf3x+0x34>
     fa6:	46 95       	lsr	r20
     fa8:	37 95       	ror	r19
     faa:	27 95       	ror	r18
     fac:	a7 95       	ror	r26
     fae:	f0 40       	sbci	r31, 0x00	; 0
     fb0:	53 95       	inc	r21
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__addsf3x+0x4e>
     fb4:	7e f4       	brtc	.+30     	; 0xfd4 <__addsf3x+0x7c>
     fb6:	1f 16       	cp	r1, r31
     fb8:	ba 0b       	sbc	r27, r26
     fba:	62 0b       	sbc	r22, r18
     fbc:	73 0b       	sbc	r23, r19
     fbe:	84 0b       	sbc	r24, r20
     fc0:	ba f0       	brmi	.+46     	; 0xff0 <__addsf3x+0x98>
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	a1 f0       	breq	.+40     	; 0xfee <__addsf3x+0x96>
     fc6:	ff 0f       	add	r31, r31
     fc8:	bb 1f       	adc	r27, r27
     fca:	66 1f       	adc	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	c2 f7       	brpl	.-16     	; 0xfc2 <__addsf3x+0x6a>
     fd2:	0e c0       	rjmp	.+28     	; 0xff0 <__addsf3x+0x98>
     fd4:	ba 0f       	add	r27, r26
     fd6:	62 1f       	adc	r22, r18
     fd8:	73 1f       	adc	r23, r19
     fda:	84 1f       	adc	r24, r20
     fdc:	48 f4       	brcc	.+18     	; 0xff0 <__addsf3x+0x98>
     fde:	87 95       	ror	r24
     fe0:	77 95       	ror	r23
     fe2:	67 95       	ror	r22
     fe4:	b7 95       	ror	r27
     fe6:	f7 95       	ror	r31
     fe8:	9e 3f       	cpi	r25, 0xFE	; 254
     fea:	08 f0       	brcs	.+2      	; 0xfee <__addsf3x+0x96>
     fec:	b3 cf       	rjmp	.-154    	; 0xf54 <__addsf3+0x1e>
     fee:	93 95       	inc	r25
     ff0:	88 0f       	add	r24, r24
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__addsf3x+0x9e>
     ff4:	99 27       	eor	r25, r25
     ff6:	ee 0f       	add	r30, r30
     ff8:	97 95       	ror	r25
     ffa:	87 95       	ror	r24
     ffc:	08 95       	ret

00000ffe <__cmpsf2>:
     ffe:	d9 d0       	rcall	.+434    	; 0x11b2 <__fp_cmp>
    1000:	08 f4       	brcc	.+2      	; 0x1004 <__cmpsf2+0x6>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	08 95       	ret

00001006 <__divsf3>:
    1006:	0c d0       	rcall	.+24     	; 0x1020 <__divsf3x>
    1008:	0f c1       	rjmp	.+542    	; 0x1228 <__fp_round>
    100a:	07 d1       	rcall	.+526    	; 0x121a <__fp_pscB>
    100c:	40 f0       	brcs	.+16     	; 0x101e <__divsf3+0x18>
    100e:	fe d0       	rcall	.+508    	; 0x120c <__fp_pscA>
    1010:	30 f0       	brcs	.+12     	; 0x101e <__divsf3+0x18>
    1012:	21 f4       	brne	.+8      	; 0x101c <__divsf3+0x16>
    1014:	5f 3f       	cpi	r21, 0xFF	; 255
    1016:	19 f0       	breq	.+6      	; 0x101e <__divsf3+0x18>
    1018:	f0 c0       	rjmp	.+480    	; 0x11fa <__fp_inf>
    101a:	51 11       	cpse	r21, r1
    101c:	39 c1       	rjmp	.+626    	; 0x1290 <__fp_szero>
    101e:	f3 c0       	rjmp	.+486    	; 0x1206 <__fp_nan>

00001020 <__divsf3x>:
    1020:	14 d1       	rcall	.+552    	; 0x124a <__fp_split3>
    1022:	98 f3       	brcs	.-26     	; 0x100a <__divsf3+0x4>

00001024 <__divsf3_pse>:
    1024:	99 23       	and	r25, r25
    1026:	c9 f3       	breq	.-14     	; 0x101a <__divsf3+0x14>
    1028:	55 23       	and	r21, r21
    102a:	b1 f3       	breq	.-20     	; 0x1018 <__divsf3+0x12>
    102c:	95 1b       	sub	r25, r21
    102e:	55 0b       	sbc	r21, r21
    1030:	bb 27       	eor	r27, r27
    1032:	aa 27       	eor	r26, r26
    1034:	62 17       	cp	r22, r18
    1036:	73 07       	cpc	r23, r19
    1038:	84 07       	cpc	r24, r20
    103a:	38 f0       	brcs	.+14     	; 0x104a <__divsf3_pse+0x26>
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	44 1f       	adc	r20, r20
    1046:	aa 1f       	adc	r26, r26
    1048:	a9 f3       	breq	.-22     	; 0x1034 <__divsf3_pse+0x10>
    104a:	33 d0       	rcall	.+102    	; 0x10b2 <__divsf3_pse+0x8e>
    104c:	0e 2e       	mov	r0, r30
    104e:	3a f0       	brmi	.+14     	; 0x105e <__divsf3_pse+0x3a>
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	30 d0       	rcall	.+96     	; 0x10b4 <__divsf3_pse+0x90>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	e6 95       	lsr	r30
    105a:	00 1c       	adc	r0, r0
    105c:	ca f7       	brpl	.-14     	; 0x1050 <__divsf3_pse+0x2c>
    105e:	29 d0       	rcall	.+82     	; 0x10b2 <__divsf3_pse+0x8e>
    1060:	fe 2f       	mov	r31, r30
    1062:	27 d0       	rcall	.+78     	; 0x10b2 <__divsf3_pse+0x8e>
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	bb 1f       	adc	r27, r27
    106c:	26 17       	cp	r18, r22
    106e:	37 07       	cpc	r19, r23
    1070:	48 07       	cpc	r20, r24
    1072:	ab 07       	cpc	r26, r27
    1074:	b0 e8       	ldi	r27, 0x80	; 128
    1076:	09 f0       	breq	.+2      	; 0x107a <__divsf3_pse+0x56>
    1078:	bb 0b       	sbc	r27, r27
    107a:	80 2d       	mov	r24, r0
    107c:	bf 01       	movw	r22, r30
    107e:	ff 27       	eor	r31, r31
    1080:	93 58       	subi	r25, 0x83	; 131
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	2a f0       	brmi	.+10     	; 0x1090 <__divsf3_pse+0x6c>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	68 f0       	brcs	.+26     	; 0x10a6 <__divsf3_pse+0x82>
    108c:	b6 c0       	rjmp	.+364    	; 0x11fa <__fp_inf>
    108e:	00 c1       	rjmp	.+512    	; 0x1290 <__fp_szero>
    1090:	5f 3f       	cpi	r21, 0xFF	; 255
    1092:	ec f3       	brlt	.-6      	; 0x108e <__divsf3_pse+0x6a>
    1094:	98 3e       	cpi	r25, 0xE8	; 232
    1096:	dc f3       	brlt	.-10     	; 0x108e <__divsf3_pse+0x6a>
    1098:	86 95       	lsr	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b7 95       	ror	r27
    10a0:	f7 95       	ror	r31
    10a2:	9f 5f       	subi	r25, 0xFF	; 255
    10a4:	c9 f7       	brne	.-14     	; 0x1098 <__divsf3_pse+0x74>
    10a6:	88 0f       	add	r24, r24
    10a8:	91 1d       	adc	r25, r1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	97 f9       	bld	r25, 7
    10b0:	08 95       	ret
    10b2:	e1 e0       	ldi	r30, 0x01	; 1
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	bb 1f       	adc	r27, r27
    10bc:	62 17       	cp	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	ba 07       	cpc	r27, r26
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__divsf3_pse+0xaa>
    10c6:	62 1b       	sub	r22, r18
    10c8:	73 0b       	sbc	r23, r19
    10ca:	84 0b       	sbc	r24, r20
    10cc:	ba 0b       	sbc	r27, r26
    10ce:	ee 1f       	adc	r30, r30
    10d0:	88 f7       	brcc	.-30     	; 0x10b4 <__divsf3_pse+0x90>
    10d2:	e0 95       	com	r30
    10d4:	08 95       	ret

000010d6 <__fixsfsi>:
    10d6:	04 d0       	rcall	.+8      	; 0x10e0 <__fixunssfsi>
    10d8:	68 94       	set
    10da:	b1 11       	cpse	r27, r1
    10dc:	d9 c0       	rjmp	.+434    	; 0x1290 <__fp_szero>
    10de:	08 95       	ret

000010e0 <__fixunssfsi>:
    10e0:	bc d0       	rcall	.+376    	; 0x125a <__fp_splitA>
    10e2:	88 f0       	brcs	.+34     	; 0x1106 <__fixunssfsi+0x26>
    10e4:	9f 57       	subi	r25, 0x7F	; 127
    10e6:	90 f0       	brcs	.+36     	; 0x110c <__fixunssfsi+0x2c>
    10e8:	b9 2f       	mov	r27, r25
    10ea:	99 27       	eor	r25, r25
    10ec:	b7 51       	subi	r27, 0x17	; 23
    10ee:	a0 f0       	brcs	.+40     	; 0x1118 <__fixunssfsi+0x38>
    10f0:	d1 f0       	breq	.+52     	; 0x1126 <__fixunssfsi+0x46>
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	1a f0       	brmi	.+6      	; 0x1102 <__fixunssfsi+0x22>
    10fc:	ba 95       	dec	r27
    10fe:	c9 f7       	brne	.-14     	; 0x10f2 <__fixunssfsi+0x12>
    1100:	12 c0       	rjmp	.+36     	; 0x1126 <__fixunssfsi+0x46>
    1102:	b1 30       	cpi	r27, 0x01	; 1
    1104:	81 f0       	breq	.+32     	; 0x1126 <__fixunssfsi+0x46>
    1106:	c3 d0       	rcall	.+390    	; 0x128e <__fp_zero>
    1108:	b1 e0       	ldi	r27, 0x01	; 1
    110a:	08 95       	ret
    110c:	c0 c0       	rjmp	.+384    	; 0x128e <__fp_zero>
    110e:	67 2f       	mov	r22, r23
    1110:	78 2f       	mov	r23, r24
    1112:	88 27       	eor	r24, r24
    1114:	b8 5f       	subi	r27, 0xF8	; 248
    1116:	39 f0       	breq	.+14     	; 0x1126 <__fixunssfsi+0x46>
    1118:	b9 3f       	cpi	r27, 0xF9	; 249
    111a:	cc f3       	brlt	.-14     	; 0x110e <__fixunssfsi+0x2e>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b3 95       	inc	r27
    1124:	d9 f7       	brne	.-10     	; 0x111c <__fixunssfsi+0x3c>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__fixunssfsi+0x56>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__floatunsisf>:
    1138:	e8 94       	clt
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__floatsisf+0x12>

0000113c <__floatsisf>:
    113c:	97 fb       	bst	r25, 7
    113e:	3e f4       	brtc	.+14     	; 0x114e <__floatsisf+0x12>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	99 23       	and	r25, r25
    1150:	a9 f0       	breq	.+42     	; 0x117c <__floatsisf+0x40>
    1152:	f9 2f       	mov	r31, r25
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	bb 27       	eor	r27, r27
    1158:	93 95       	inc	r25
    115a:	f6 95       	lsr	r31
    115c:	87 95       	ror	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f1 11       	cpse	r31, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <__floatsisf+0x1c>
    1168:	fa f4       	brpl	.+62     	; 0x11a8 <__floatsisf+0x6c>
    116a:	bb 0f       	add	r27, r27
    116c:	11 f4       	brne	.+4      	; 0x1172 <__floatsisf+0x36>
    116e:	60 ff       	sbrs	r22, 0
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <__floatsisf+0x6c>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__floatsisf+0x6c>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <__floatsisf+0x48>
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <__floatsisf+0x6a>
    1184:	77 23       	and	r23, r23
    1186:	21 f0       	breq	.+8      	; 0x1190 <__floatsisf+0x54>
    1188:	9e e8       	ldi	r25, 0x8E	; 142
    118a:	87 2f       	mov	r24, r23
    118c:	76 2f       	mov	r23, r22
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__floatsisf+0x5e>
    1190:	66 23       	and	r22, r22
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__floatsisf+0x74>
    1194:	96 e8       	ldi	r25, 0x86	; 134
    1196:	86 2f       	mov	r24, r22
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__floatsisf+0x6c>
    119e:	9a 95       	dec	r25
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <__floatsisf+0x62>
    11a8:	88 0f       	add	r24, r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__fp_cmp>:
    11b2:	99 0f       	add	r25, r25
    11b4:	00 08       	sbc	r0, r0
    11b6:	55 0f       	add	r21, r21
    11b8:	aa 0b       	sbc	r26, r26
    11ba:	e0 e8       	ldi	r30, 0x80	; 128
    11bc:	fe ef       	ldi	r31, 0xFE	; 254
    11be:	16 16       	cp	r1, r22
    11c0:	17 06       	cpc	r1, r23
    11c2:	e8 07       	cpc	r30, r24
    11c4:	f9 07       	cpc	r31, r25
    11c6:	c0 f0       	brcs	.+48     	; 0x11f8 <__fp_cmp+0x46>
    11c8:	12 16       	cp	r1, r18
    11ca:	13 06       	cpc	r1, r19
    11cc:	e4 07       	cpc	r30, r20
    11ce:	f5 07       	cpc	r31, r21
    11d0:	98 f0       	brcs	.+38     	; 0x11f8 <__fp_cmp+0x46>
    11d2:	62 1b       	sub	r22, r18
    11d4:	73 0b       	sbc	r23, r19
    11d6:	84 0b       	sbc	r24, r20
    11d8:	95 0b       	sbc	r25, r21
    11da:	39 f4       	brne	.+14     	; 0x11ea <__fp_cmp+0x38>
    11dc:	0a 26       	eor	r0, r26
    11de:	61 f0       	breq	.+24     	; 0x11f8 <__fp_cmp+0x46>
    11e0:	23 2b       	or	r18, r19
    11e2:	24 2b       	or	r18, r20
    11e4:	25 2b       	or	r18, r21
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <__fp_cmp+0x3e>
    11e8:	08 95       	ret
    11ea:	0a 26       	eor	r0, r26
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__fp_cmp+0x3e>
    11ee:	a1 40       	sbci	r26, 0x01	; 1
    11f0:	a6 95       	lsr	r26
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	81 1d       	adc	r24, r1
    11f6:	81 1d       	adc	r24, r1
    11f8:	08 95       	ret

000011fa <__fp_inf>:
    11fa:	97 f9       	bld	r25, 7
    11fc:	9f 67       	ori	r25, 0x7F	; 127
    11fe:	80 e8       	ldi	r24, 0x80	; 128
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	08 95       	ret

00001206 <__fp_nan>:
    1206:	9f ef       	ldi	r25, 0xFF	; 255
    1208:	80 ec       	ldi	r24, 0xC0	; 192
    120a:	08 95       	ret

0000120c <__fp_pscA>:
    120c:	00 24       	eor	r0, r0
    120e:	0a 94       	dec	r0
    1210:	16 16       	cp	r1, r22
    1212:	17 06       	cpc	r1, r23
    1214:	18 06       	cpc	r1, r24
    1216:	09 06       	cpc	r0, r25
    1218:	08 95       	ret

0000121a <__fp_pscB>:
    121a:	00 24       	eor	r0, r0
    121c:	0a 94       	dec	r0
    121e:	12 16       	cp	r1, r18
    1220:	13 06       	cpc	r1, r19
    1222:	14 06       	cpc	r1, r20
    1224:	05 06       	cpc	r0, r21
    1226:	08 95       	ret

00001228 <__fp_round>:
    1228:	09 2e       	mov	r0, r25
    122a:	03 94       	inc	r0
    122c:	00 0c       	add	r0, r0
    122e:	11 f4       	brne	.+4      	; 0x1234 <__fp_round+0xc>
    1230:	88 23       	and	r24, r24
    1232:	52 f0       	brmi	.+20     	; 0x1248 <__fp_round+0x20>
    1234:	bb 0f       	add	r27, r27
    1236:	40 f4       	brcc	.+16     	; 0x1248 <__fp_round+0x20>
    1238:	bf 2b       	or	r27, r31
    123a:	11 f4       	brne	.+4      	; 0x1240 <__fp_round+0x18>
    123c:	60 ff       	sbrs	r22, 0
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <__fp_round+0x20>
    1240:	6f 5f       	subi	r22, 0xFF	; 255
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	08 95       	ret

0000124a <__fp_split3>:
    124a:	57 fd       	sbrc	r21, 7
    124c:	90 58       	subi	r25, 0x80	; 128
    124e:	44 0f       	add	r20, r20
    1250:	55 1f       	adc	r21, r21
    1252:	59 f0       	breq	.+22     	; 0x126a <__fp_splitA+0x10>
    1254:	5f 3f       	cpi	r21, 0xFF	; 255
    1256:	71 f0       	breq	.+28     	; 0x1274 <__fp_splitA+0x1a>
    1258:	47 95       	ror	r20

0000125a <__fp_splitA>:
    125a:	88 0f       	add	r24, r24
    125c:	97 fb       	bst	r25, 7
    125e:	99 1f       	adc	r25, r25
    1260:	61 f0       	breq	.+24     	; 0x127a <__fp_splitA+0x20>
    1262:	9f 3f       	cpi	r25, 0xFF	; 255
    1264:	79 f0       	breq	.+30     	; 0x1284 <__fp_splitA+0x2a>
    1266:	87 95       	ror	r24
    1268:	08 95       	ret
    126a:	12 16       	cp	r1, r18
    126c:	13 06       	cpc	r1, r19
    126e:	14 06       	cpc	r1, r20
    1270:	55 1f       	adc	r21, r21
    1272:	f2 cf       	rjmp	.-28     	; 0x1258 <__fp_split3+0xe>
    1274:	46 95       	lsr	r20
    1276:	f1 df       	rcall	.-30     	; 0x125a <__fp_splitA>
    1278:	08 c0       	rjmp	.+16     	; 0x128a <__fp_splitA+0x30>
    127a:	16 16       	cp	r1, r22
    127c:	17 06       	cpc	r1, r23
    127e:	18 06       	cpc	r1, r24
    1280:	99 1f       	adc	r25, r25
    1282:	f1 cf       	rjmp	.-30     	; 0x1266 <__fp_splitA+0xc>
    1284:	86 95       	lsr	r24
    1286:	71 05       	cpc	r23, r1
    1288:	61 05       	cpc	r22, r1
    128a:	08 94       	sec
    128c:	08 95       	ret

0000128e <__fp_zero>:
    128e:	e8 94       	clt

00001290 <__fp_szero>:
    1290:	bb 27       	eor	r27, r27
    1292:	66 27       	eor	r22, r22
    1294:	77 27       	eor	r23, r23
    1296:	cb 01       	movw	r24, r22
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret

0000129c <__gesf2>:
    129c:	8a df       	rcall	.-236    	; 0x11b2 <__fp_cmp>
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <__gesf2+0x6>
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	08 95       	ret

000012a4 <__mulsf3>:
    12a4:	0b d0       	rcall	.+22     	; 0x12bc <__mulsf3x>
    12a6:	c0 cf       	rjmp	.-128    	; 0x1228 <__fp_round>
    12a8:	b1 df       	rcall	.-158    	; 0x120c <__fp_pscA>
    12aa:	28 f0       	brcs	.+10     	; 0x12b6 <__mulsf3+0x12>
    12ac:	b6 df       	rcall	.-148    	; 0x121a <__fp_pscB>
    12ae:	18 f0       	brcs	.+6      	; 0x12b6 <__mulsf3+0x12>
    12b0:	95 23       	and	r25, r21
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__mulsf3+0x12>
    12b4:	a2 cf       	rjmp	.-188    	; 0x11fa <__fp_inf>
    12b6:	a7 cf       	rjmp	.-178    	; 0x1206 <__fp_nan>
    12b8:	11 24       	eor	r1, r1
    12ba:	ea cf       	rjmp	.-44     	; 0x1290 <__fp_szero>

000012bc <__mulsf3x>:
    12bc:	c6 df       	rcall	.-116    	; 0x124a <__fp_split3>
    12be:	a0 f3       	brcs	.-24     	; 0x12a8 <__mulsf3+0x4>

000012c0 <__mulsf3_pse>:
    12c0:	95 9f       	mul	r25, r21
    12c2:	d1 f3       	breq	.-12     	; 0x12b8 <__mulsf3+0x14>
    12c4:	95 0f       	add	r25, r21
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	55 1f       	adc	r21, r21
    12ca:	62 9f       	mul	r22, r18
    12cc:	f0 01       	movw	r30, r0
    12ce:	72 9f       	mul	r23, r18
    12d0:	bb 27       	eor	r27, r27
    12d2:	f0 0d       	add	r31, r0
    12d4:	b1 1d       	adc	r27, r1
    12d6:	63 9f       	mul	r22, r19
    12d8:	aa 27       	eor	r26, r26
    12da:	f0 0d       	add	r31, r0
    12dc:	b1 1d       	adc	r27, r1
    12de:	aa 1f       	adc	r26, r26
    12e0:	64 9f       	mul	r22, r20
    12e2:	66 27       	eor	r22, r22
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	66 1f       	adc	r22, r22
    12ea:	82 9f       	mul	r24, r18
    12ec:	22 27       	eor	r18, r18
    12ee:	b0 0d       	add	r27, r0
    12f0:	a1 1d       	adc	r26, r1
    12f2:	62 1f       	adc	r22, r18
    12f4:	73 9f       	mul	r23, r19
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	62 1f       	adc	r22, r18
    12fc:	83 9f       	mul	r24, r19
    12fe:	a0 0d       	add	r26, r0
    1300:	61 1d       	adc	r22, r1
    1302:	22 1f       	adc	r18, r18
    1304:	74 9f       	mul	r23, r20
    1306:	33 27       	eor	r19, r19
    1308:	a0 0d       	add	r26, r0
    130a:	61 1d       	adc	r22, r1
    130c:	23 1f       	adc	r18, r19
    130e:	84 9f       	mul	r24, r20
    1310:	60 0d       	add	r22, r0
    1312:	21 1d       	adc	r18, r1
    1314:	82 2f       	mov	r24, r18
    1316:	76 2f       	mov	r23, r22
    1318:	6a 2f       	mov	r22, r26
    131a:	11 24       	eor	r1, r1
    131c:	9f 57       	subi	r25, 0x7F	; 127
    131e:	50 40       	sbci	r21, 0x00	; 0
    1320:	8a f0       	brmi	.+34     	; 0x1344 <__mulsf3_pse+0x84>
    1322:	e1 f0       	breq	.+56     	; 0x135c <__mulsf3_pse+0x9c>
    1324:	88 23       	and	r24, r24
    1326:	4a f0       	brmi	.+18     	; 0x133a <__mulsf3_pse+0x7a>
    1328:	ee 0f       	add	r30, r30
    132a:	ff 1f       	adc	r31, r31
    132c:	bb 1f       	adc	r27, r27
    132e:	66 1f       	adc	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	a9 f7       	brne	.-22     	; 0x1324 <__mulsf3_pse+0x64>
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	51 05       	cpc	r21, r1
    133e:	70 f0       	brcs	.+28     	; 0x135c <__mulsf3_pse+0x9c>
    1340:	5c cf       	rjmp	.-328    	; 0x11fa <__fp_inf>
    1342:	a6 cf       	rjmp	.-180    	; 0x1290 <__fp_szero>
    1344:	5f 3f       	cpi	r21, 0xFF	; 255
    1346:	ec f3       	brlt	.-6      	; 0x1342 <__mulsf3_pse+0x82>
    1348:	98 3e       	cpi	r25, 0xE8	; 232
    134a:	dc f3       	brlt	.-10     	; 0x1342 <__mulsf3_pse+0x82>
    134c:	86 95       	lsr	r24
    134e:	77 95       	ror	r23
    1350:	67 95       	ror	r22
    1352:	b7 95       	ror	r27
    1354:	f7 95       	ror	r31
    1356:	e7 95       	ror	r30
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	c1 f7       	brne	.-16     	; 0x134c <__mulsf3_pse+0x8c>
    135c:	fe 2b       	or	r31, r30
    135e:	88 0f       	add	r24, r24
    1360:	91 1d       	adc	r25, r1
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	97 f9       	bld	r25, 7
    1368:	08 95       	ret

0000136a <__udivmodsi4>:
    136a:	a1 e2       	ldi	r26, 0x21	; 33
    136c:	1a 2e       	mov	r1, r26
    136e:	aa 1b       	sub	r26, r26
    1370:	bb 1b       	sub	r27, r27
    1372:	fd 01       	movw	r30, r26
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <__udivmodsi4_ep>

00001376 <__udivmodsi4_loop>:
    1376:	aa 1f       	adc	r26, r26
    1378:	bb 1f       	adc	r27, r27
    137a:	ee 1f       	adc	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	a2 17       	cp	r26, r18
    1380:	b3 07       	cpc	r27, r19
    1382:	e4 07       	cpc	r30, r20
    1384:	f5 07       	cpc	r31, r21
    1386:	20 f0       	brcs	.+8      	; 0x1390 <__udivmodsi4_ep>
    1388:	a2 1b       	sub	r26, r18
    138a:	b3 0b       	sbc	r27, r19
    138c:	e4 0b       	sbc	r30, r20
    138e:	f5 0b       	sbc	r31, r21

00001390 <__udivmodsi4_ep>:
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	1a 94       	dec	r1
    139a:	69 f7       	brne	.-38     	; 0x1376 <__udivmodsi4_loop>
    139c:	60 95       	com	r22
    139e:	70 95       	com	r23
    13a0:	80 95       	com	r24
    13a2:	90 95       	com	r25
    13a4:	9b 01       	movw	r18, r22
    13a6:	ac 01       	movw	r20, r24
    13a8:	bd 01       	movw	r22, r26
    13aa:	cf 01       	movw	r24, r30
    13ac:	08 95       	ret

000013ae <dtostrf>:
    13ae:	ef 92       	push	r14
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	e8 01       	movw	r28, r16
    13ba:	47 ff       	sbrs	r20, 7
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <dtostrf+0x14>
    13be:	34 e1       	ldi	r19, 0x14	; 20
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <dtostrf+0x16>
    13c2:	34 e0       	ldi	r19, 0x04	; 4
    13c4:	e4 2f       	mov	r30, r20
    13c6:	ff 27       	eor	r31, r31
    13c8:	e7 fd       	sbrc	r30, 7
    13ca:	f0 95       	com	r31
    13cc:	f7 ff       	sbrs	r31, 7
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <dtostrf+0x28>
    13d0:	f1 95       	neg	r31
    13d2:	e1 95       	neg	r30
    13d4:	f1 09       	sbc	r31, r1
    13d6:	e3 2e       	mov	r14, r19
    13d8:	02 2f       	mov	r16, r18
    13da:	2e 2f       	mov	r18, r30
    13dc:	ae 01       	movw	r20, r28
    13de:	07 d0       	rcall	.+14     	; 0x13ee <dtoa_prf>
    13e0:	ce 01       	movw	r24, r28
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <dtoa_prf>:
    13ee:	6f 92       	push	r6
    13f0:	7f 92       	push	r7
    13f2:	9f 92       	push	r9
    13f4:	af 92       	push	r10
    13f6:	bf 92       	push	r11
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	29 97       	sbiw	r28, 0x09	; 9
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	6a 01       	movw	r12, r20
    141a:	b2 2e       	mov	r11, r18
    141c:	10 2f       	mov	r17, r16
    141e:	0c 33       	cpi	r16, 0x3C	; 60
    1420:	20 f4       	brcc	.+8      	; 0x142a <dtoa_prf+0x3c>
    1422:	ff 24       	eor	r15, r15
    1424:	f3 94       	inc	r15
    1426:	f0 0e       	add	r15, r16
    1428:	02 c0       	rjmp	.+4      	; 0x142e <dtoa_prf+0x40>
    142a:	4c e3       	ldi	r20, 0x3C	; 60
    142c:	f4 2e       	mov	r15, r20
    142e:	0f 2d       	mov	r16, r15
    1430:	27 e0       	ldi	r18, 0x07	; 7
    1432:	ae 01       	movw	r20, r28
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	57 d1       	rcall	.+686    	; 0x16e8 <__ftoa_engine>
    143a:	79 81       	ldd	r23, Y+1	; 0x01
    143c:	27 2f       	mov	r18, r23
    143e:	29 70       	andi	r18, 0x09	; 9
    1440:	21 30       	cpi	r18, 0x01	; 1
    1442:	31 f0       	breq	.+12     	; 0x1450 <dtoa_prf+0x62>
    1444:	e1 fc       	sbrc	r14, 1
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <dtoa_prf+0x66>
    1448:	e0 fc       	sbrc	r14, 0
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <dtoa_prf+0x6a>
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	05 c0       	rjmp	.+10     	; 0x145a <dtoa_prf+0x6c>
    1450:	6d e2       	ldi	r22, 0x2D	; 45
    1452:	03 c0       	rjmp	.+6      	; 0x145a <dtoa_prf+0x6c>
    1454:	6b e2       	ldi	r22, 0x2B	; 43
    1456:	01 c0       	rjmp	.+2      	; 0x145a <dtoa_prf+0x6c>
    1458:	60 e2       	ldi	r22, 0x20	; 32
    145a:	ae 2d       	mov	r26, r14
    145c:	a0 71       	andi	r26, 0x10	; 16
    145e:	73 ff       	sbrs	r23, 3
    1460:	36 c0       	rjmp	.+108    	; 0x14ce <dtoa_prf+0xe0>
    1462:	66 23       	and	r22, r22
    1464:	11 f0       	breq	.+4      	; 0x146a <dtoa_prf+0x7c>
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	01 c0       	rjmp	.+2      	; 0x146c <dtoa_prf+0x7e>
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	8b 15       	cp	r24, r11
    146e:	10 f4       	brcc	.+4      	; 0x1474 <dtoa_prf+0x86>
    1470:	b8 1a       	sub	r11, r24
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <dtoa_prf+0x88>
    1474:	b1 2c       	mov	r11, r1
    1476:	a1 11       	cpse	r26, r1
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <dtoa_prf+0xa2>
    147a:	f6 01       	movw	r30, r12
    147c:	8b 2d       	mov	r24, r11
    147e:	90 e2       	ldi	r25, 0x20	; 32
    1480:	88 23       	and	r24, r24
    1482:	19 f0       	breq	.+6      	; 0x148a <dtoa_prf+0x9c>
    1484:	91 93       	st	Z+, r25
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	fb cf       	rjmp	.-10     	; 0x1480 <dtoa_prf+0x92>
    148a:	cb 0c       	add	r12, r11
    148c:	d1 1c       	adc	r13, r1
    148e:	b1 2c       	mov	r11, r1
    1490:	66 23       	and	r22, r22
    1492:	31 f0       	breq	.+12     	; 0x14a0 <dtoa_prf+0xb2>
    1494:	f6 01       	movw	r30, r12
    1496:	60 83       	st	Z, r22
    1498:	96 01       	movw	r18, r12
    149a:	2f 5f       	subi	r18, 0xFF	; 255
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	69 01       	movw	r12, r18
    14a0:	c6 01       	movw	r24, r12
    14a2:	03 96       	adiw	r24, 0x03	; 3
    14a4:	e2 fe       	sbrs	r14, 2
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <dtoa_prf+0xc4>
    14a8:	2e e4       	ldi	r18, 0x4E	; 78
    14aa:	f6 01       	movw	r30, r12
    14ac:	20 83       	st	Z, r18
    14ae:	31 e4       	ldi	r19, 0x41	; 65
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <dtoa_prf+0xcc>
    14b2:	2e e6       	ldi	r18, 0x6E	; 110
    14b4:	f6 01       	movw	r30, r12
    14b6:	20 83       	st	Z, r18
    14b8:	31 e6       	ldi	r19, 0x61	; 97
    14ba:	31 83       	std	Z+1, r19	; 0x01
    14bc:	22 83       	std	Z+2, r18	; 0x02
    14be:	fc 01       	movw	r30, r24
    14c0:	2b 2d       	mov	r18, r11
    14c2:	30 e2       	ldi	r19, 0x20	; 32
    14c4:	22 23       	and	r18, r18
    14c6:	f1 f1       	breq	.+124    	; 0x1544 <dtoa_prf+0x156>
    14c8:	31 93       	st	Z+, r19
    14ca:	21 50       	subi	r18, 0x01	; 1
    14cc:	fb cf       	rjmp	.-10     	; 0x14c4 <dtoa_prf+0xd6>
    14ce:	72 ff       	sbrs	r23, 2
    14d0:	40 c0       	rjmp	.+128    	; 0x1552 <dtoa_prf+0x164>
    14d2:	66 23       	and	r22, r22
    14d4:	11 f0       	breq	.+4      	; 0x14da <dtoa_prf+0xec>
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <dtoa_prf+0xee>
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	8b 15       	cp	r24, r11
    14de:	10 f4       	brcc	.+4      	; 0x14e4 <dtoa_prf+0xf6>
    14e0:	b8 1a       	sub	r11, r24
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <dtoa_prf+0xf8>
    14e4:	b1 2c       	mov	r11, r1
    14e6:	a1 11       	cpse	r26, r1
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <dtoa_prf+0x112>
    14ea:	f6 01       	movw	r30, r12
    14ec:	8b 2d       	mov	r24, r11
    14ee:	90 e2       	ldi	r25, 0x20	; 32
    14f0:	88 23       	and	r24, r24
    14f2:	19 f0       	breq	.+6      	; 0x14fa <dtoa_prf+0x10c>
    14f4:	91 93       	st	Z+, r25
    14f6:	81 50       	subi	r24, 0x01	; 1
    14f8:	fb cf       	rjmp	.-10     	; 0x14f0 <dtoa_prf+0x102>
    14fa:	cb 0c       	add	r12, r11
    14fc:	d1 1c       	adc	r13, r1
    14fe:	b1 2c       	mov	r11, r1
    1500:	66 23       	and	r22, r22
    1502:	31 f0       	breq	.+12     	; 0x1510 <dtoa_prf+0x122>
    1504:	f6 01       	movw	r30, r12
    1506:	60 83       	st	Z, r22
    1508:	96 01       	movw	r18, r12
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	69 01       	movw	r12, r18
    1510:	c6 01       	movw	r24, r12
    1512:	03 96       	adiw	r24, 0x03	; 3
    1514:	e2 fe       	sbrs	r14, 2
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <dtoa_prf+0x138>
    1518:	29 e4       	ldi	r18, 0x49	; 73
    151a:	f6 01       	movw	r30, r12
    151c:	20 83       	st	Z, r18
    151e:	2e e4       	ldi	r18, 0x4E	; 78
    1520:	21 83       	std	Z+1, r18	; 0x01
    1522:	26 e4       	ldi	r18, 0x46	; 70
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <dtoa_prf+0x144>
    1526:	29 e6       	ldi	r18, 0x69	; 105
    1528:	f6 01       	movw	r30, r12
    152a:	20 83       	st	Z, r18
    152c:	2e e6       	ldi	r18, 0x6E	; 110
    152e:	21 83       	std	Z+1, r18	; 0x01
    1530:	26 e6       	ldi	r18, 0x66	; 102
    1532:	22 83       	std	Z+2, r18	; 0x02
    1534:	fc 01       	movw	r30, r24
    1536:	2b 2d       	mov	r18, r11
    1538:	30 e2       	ldi	r19, 0x20	; 32
    153a:	22 23       	and	r18, r18
    153c:	19 f0       	breq	.+6      	; 0x1544 <dtoa_prf+0x156>
    153e:	31 93       	st	Z+, r19
    1540:	21 50       	subi	r18, 0x01	; 1
    1542:	fb cf       	rjmp	.-10     	; 0x153a <dtoa_prf+0x14c>
    1544:	fc 01       	movw	r30, r24
    1546:	eb 0d       	add	r30, r11
    1548:	f1 1d       	adc	r31, r1
    154a:	10 82       	st	Z, r1
    154c:	8e ef       	ldi	r24, 0xFE	; 254
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	b7 c0       	rjmp	.+366    	; 0x16c0 <dtoa_prf+0x2d2>
    1552:	b1 e0       	ldi	r27, 0x01	; 1
    1554:	61 11       	cpse	r22, r1
    1556:	01 c0       	rjmp	.+2      	; 0x155a <dtoa_prf+0x16c>
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	4b 2f       	mov	r20, r27
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	18 16       	cp	r1, r24
    1560:	19 06       	cpc	r1, r25
    1562:	24 f4       	brge	.+8      	; 0x156c <dtoa_prf+0x17e>
    1564:	9c 01       	movw	r18, r24
    1566:	2f 5f       	subi	r18, 0xFF	; 255
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <dtoa_prf+0x182>
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	24 0f       	add	r18, r20
    1572:	35 1f       	adc	r19, r21
    1574:	11 23       	and	r17, r17
    1576:	29 f0       	breq	.+10     	; 0x1582 <dtoa_prf+0x194>
    1578:	41 2f       	mov	r20, r17
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	4f 5f       	subi	r20, 0xFF	; 255
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <dtoa_prf+0x198>
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	42 0f       	add	r20, r18
    1588:	53 1f       	adc	r21, r19
    158a:	2b 2d       	mov	r18, r11
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	42 17       	cp	r20, r18
    1590:	53 07       	cpc	r21, r19
    1592:	14 f4       	brge	.+4      	; 0x1598 <dtoa_prf+0x1aa>
    1594:	b4 1a       	sub	r11, r20
    1596:	01 c0       	rjmp	.+2      	; 0x159a <dtoa_prf+0x1ac>
    1598:	b1 2c       	mov	r11, r1
    159a:	2e 2d       	mov	r18, r14
    159c:	28 71       	andi	r18, 0x18	; 24
    159e:	59 f4       	brne	.+22     	; 0x15b6 <dtoa_prf+0x1c8>
    15a0:	f6 01       	movw	r30, r12
    15a2:	2b 2d       	mov	r18, r11
    15a4:	30 e2       	ldi	r19, 0x20	; 32
    15a6:	22 23       	and	r18, r18
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <dtoa_prf+0x1c2>
    15aa:	31 93       	st	Z+, r19
    15ac:	21 50       	subi	r18, 0x01	; 1
    15ae:	fb cf       	rjmp	.-10     	; 0x15a6 <dtoa_prf+0x1b8>
    15b0:	cb 0c       	add	r12, r11
    15b2:	d1 1c       	adc	r13, r1
    15b4:	b1 2c       	mov	r11, r1
    15b6:	bb 23       	and	r27, r27
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <dtoa_prf+0x1d8>
    15ba:	f6 01       	movw	r30, r12
    15bc:	60 83       	st	Z, r22
    15be:	96 01       	movw	r18, r12
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	69 01       	movw	r12, r18
    15c6:	a1 11       	cpse	r26, r1
    15c8:	0b c0       	rjmp	.+22     	; 0x15e0 <dtoa_prf+0x1f2>
    15ca:	f6 01       	movw	r30, r12
    15cc:	2b 2d       	mov	r18, r11
    15ce:	30 e3       	ldi	r19, 0x30	; 48
    15d0:	22 23       	and	r18, r18
    15d2:	19 f0       	breq	.+6      	; 0x15da <dtoa_prf+0x1ec>
    15d4:	31 93       	st	Z+, r19
    15d6:	21 50       	subi	r18, 0x01	; 1
    15d8:	fb cf       	rjmp	.-10     	; 0x15d0 <dtoa_prf+0x1e2>
    15da:	cb 0c       	add	r12, r11
    15dc:	d1 1c       	adc	r13, r1
    15de:	b1 2c       	mov	r11, r1
    15e0:	f8 0e       	add	r15, r24
    15e2:	0a 81       	ldd	r16, Y+2	; 0x02
    15e4:	37 2f       	mov	r19, r23
    15e6:	30 71       	andi	r19, 0x10	; 16
    15e8:	a3 2e       	mov	r10, r19
    15ea:	74 ff       	sbrs	r23, 4
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <dtoa_prf+0x206>
    15ee:	01 33       	cpi	r16, 0x31	; 49
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <dtoa_prf+0x206>
    15f2:	fa 94       	dec	r15
    15f4:	1f 14       	cp	r1, r15
    15f6:	2c f4       	brge	.+10     	; 0x1602 <dtoa_prf+0x214>
    15f8:	2f 2d       	mov	r18, r15
    15fa:	29 30       	cpi	r18, 0x09	; 9
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <dtoa_prf+0x216>
    15fe:	28 e0       	ldi	r18, 0x08	; 8
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <dtoa_prf+0x216>
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	68 2f       	mov	r22, r24
    1606:	39 2f       	mov	r19, r25
    1608:	97 ff       	sbrs	r25, 7
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <dtoa_prf+0x222>
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	46 2f       	mov	r20, r22
    1612:	53 2f       	mov	r21, r19
    1614:	61 2c       	mov	r6, r1
    1616:	71 2c       	mov	r7, r1
    1618:	3e e2       	ldi	r19, 0x2E	; 46
    161a:	93 2e       	mov	r9, r19
    161c:	bc 01       	movw	r22, r24
    161e:	62 1b       	sub	r22, r18
    1620:	71 09       	sbc	r23, r1
    1622:	9b 01       	movw	r18, r22
    1624:	dc 01       	movw	r26, r24
    1626:	a4 1b       	sub	r26, r20
    1628:	b5 0b       	sbc	r27, r21
    162a:	e1 e0       	ldi	r30, 0x01	; 1
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	ec 0f       	add	r30, r28
    1630:	fd 1f       	adc	r31, r29
    1632:	ae 0f       	add	r26, r30
    1634:	bf 1f       	adc	r27, r31
    1636:	e1 2e       	mov	r14, r17
    1638:	f1 2c       	mov	r15, r1
    163a:	f1 94       	neg	r15
    163c:	e1 94       	neg	r14
    163e:	f1 08       	sbc	r15, r1
    1640:	4f 3f       	cpi	r20, 0xFF	; 255
    1642:	ff ef       	ldi	r31, 0xFF	; 255
    1644:	5f 07       	cpc	r21, r31
    1646:	31 f4       	brne	.+12     	; 0x1654 <dtoa_prf+0x266>
    1648:	f6 01       	movw	r30, r12
    164a:	90 82       	st	Z, r9
    164c:	b6 01       	movw	r22, r12
    164e:	6f 5f       	subi	r22, 0xFF	; 255
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	6b 01       	movw	r12, r22
    1654:	84 17       	cp	r24, r20
    1656:	95 07       	cpc	r25, r21
    1658:	4c f0       	brlt	.+18     	; 0x166c <dtoa_prf+0x27e>
    165a:	24 17       	cp	r18, r20
    165c:	35 07       	cpc	r19, r21
    165e:	34 f4       	brge	.+12     	; 0x166c <dtoa_prf+0x27e>
    1660:	bd 01       	movw	r22, r26
    1662:	66 0d       	add	r22, r6
    1664:	77 1d       	adc	r23, r7
    1666:	fb 01       	movw	r30, r22
    1668:	11 81       	ldd	r17, Z+1	; 0x01
    166a:	01 c0       	rjmp	.+2      	; 0x166e <dtoa_prf+0x280>
    166c:	10 e3       	ldi	r17, 0x30	; 48
    166e:	41 50       	subi	r20, 0x01	; 1
    1670:	51 09       	sbc	r21, r1
    1672:	ff ef       	ldi	r31, 0xFF	; 255
    1674:	6f 1a       	sub	r6, r31
    1676:	7f 0a       	sbc	r7, r31
    1678:	b6 01       	movw	r22, r12
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	4e 15       	cp	r20, r14
    1680:	5f 05       	cpc	r21, r15
    1682:	24 f0       	brlt	.+8      	; 0x168c <dtoa_prf+0x29e>
    1684:	f6 01       	movw	r30, r12
    1686:	10 83       	st	Z, r17
    1688:	6b 01       	movw	r12, r22
    168a:	da cf       	rjmp	.-76     	; 0x1640 <dtoa_prf+0x252>
    168c:	48 17       	cp	r20, r24
    168e:	59 07       	cpc	r21, r25
    1690:	39 f4       	brne	.+14     	; 0x16a0 <dtoa_prf+0x2b2>
    1692:	06 33       	cpi	r16, 0x36	; 54
    1694:	20 f4       	brcc	.+8      	; 0x169e <dtoa_prf+0x2b0>
    1696:	05 33       	cpi	r16, 0x35	; 53
    1698:	19 f4       	brne	.+6      	; 0x16a0 <dtoa_prf+0x2b2>
    169a:	a1 10       	cpse	r10, r1
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <dtoa_prf+0x2b2>
    169e:	11 e3       	ldi	r17, 0x31	; 49
    16a0:	f6 01       	movw	r30, r12
    16a2:	10 83       	st	Z, r17
    16a4:	fb 01       	movw	r30, r22
    16a6:	8b 2d       	mov	r24, r11
    16a8:	90 e2       	ldi	r25, 0x20	; 32
    16aa:	88 23       	and	r24, r24
    16ac:	19 f0       	breq	.+6      	; 0x16b4 <dtoa_prf+0x2c6>
    16ae:	91 93       	st	Z+, r25
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	fb cf       	rjmp	.-10     	; 0x16aa <dtoa_prf+0x2bc>
    16b4:	fb 01       	movw	r30, r22
    16b6:	eb 0d       	add	r30, r11
    16b8:	f1 1d       	adc	r31, r1
    16ba:	10 82       	st	Z, r1
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	29 96       	adiw	r28, 0x09	; 9
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	df 90       	pop	r13
    16da:	cf 90       	pop	r12
    16dc:	bf 90       	pop	r11
    16de:	af 90       	pop	r10
    16e0:	9f 90       	pop	r9
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	08 95       	ret

000016e8 <__ftoa_engine>:
    16e8:	28 30       	cpi	r18, 0x08	; 8
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <__ftoa_engine+0x6>
    16ec:	27 e0       	ldi	r18, 0x07	; 7
    16ee:	33 27       	eor	r19, r19
    16f0:	da 01       	movw	r26, r20
    16f2:	99 0f       	add	r25, r25
    16f4:	31 1d       	adc	r19, r1
    16f6:	87 fd       	sbrc	r24, 7
    16f8:	91 60       	ori	r25, 0x01	; 1
    16fa:	00 96       	adiw	r24, 0x00	; 0
    16fc:	61 05       	cpc	r22, r1
    16fe:	71 05       	cpc	r23, r1
    1700:	39 f4       	brne	.+14     	; 0x1710 <__ftoa_engine+0x28>
    1702:	32 60       	ori	r19, 0x02	; 2
    1704:	2e 5f       	subi	r18, 0xFE	; 254
    1706:	3d 93       	st	X+, r19
    1708:	30 e3       	ldi	r19, 0x30	; 48
    170a:	2a 95       	dec	r18
    170c:	e1 f7       	brne	.-8      	; 0x1706 <__ftoa_engine+0x1e>
    170e:	08 95       	ret
    1710:	9f 3f       	cpi	r25, 0xFF	; 255
    1712:	30 f0       	brcs	.+12     	; 0x1720 <__ftoa_engine+0x38>
    1714:	80 38       	cpi	r24, 0x80	; 128
    1716:	71 05       	cpc	r23, r1
    1718:	61 05       	cpc	r22, r1
    171a:	09 f0       	breq	.+2      	; 0x171e <__ftoa_engine+0x36>
    171c:	3c 5f       	subi	r19, 0xFC	; 252
    171e:	3c 5f       	subi	r19, 0xFC	; 252
    1720:	3d 93       	st	X+, r19
    1722:	91 30       	cpi	r25, 0x01	; 1
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__ftoa_engine+0x40>
    1726:	80 68       	ori	r24, 0x80	; 128
    1728:	91 1d       	adc	r25, r1
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	1f 93       	push	r17
    1730:	0f 93       	push	r16
    1732:	ff 92       	push	r15
    1734:	ef 92       	push	r14
    1736:	19 2f       	mov	r17, r25
    1738:	98 7f       	andi	r25, 0xF8	; 248
    173a:	96 95       	lsr	r25
    173c:	e9 2f       	mov	r30, r25
    173e:	96 95       	lsr	r25
    1740:	96 95       	lsr	r25
    1742:	e9 0f       	add	r30, r25
    1744:	ff 27       	eor	r31, r31
    1746:	e2 5c       	subi	r30, 0xC2	; 194
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	99 27       	eor	r25, r25
    174c:	33 27       	eor	r19, r19
    174e:	ee 24       	eor	r14, r14
    1750:	ff 24       	eor	r15, r15
    1752:	a7 01       	movw	r20, r14
    1754:	e7 01       	movw	r28, r14
    1756:	05 90       	lpm	r0, Z+
    1758:	08 94       	sec
    175a:	07 94       	ror	r0
    175c:	28 f4       	brcc	.+10     	; 0x1768 <__ftoa_engine+0x80>
    175e:	36 0f       	add	r19, r22
    1760:	e7 1e       	adc	r14, r23
    1762:	f8 1e       	adc	r15, r24
    1764:	49 1f       	adc	r20, r25
    1766:	51 1d       	adc	r21, r1
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	06 94       	lsr	r0
    1772:	a1 f7       	brne	.-24     	; 0x175c <__ftoa_engine+0x74>
    1774:	05 90       	lpm	r0, Z+
    1776:	07 94       	ror	r0
    1778:	28 f4       	brcc	.+10     	; 0x1784 <__ftoa_engine+0x9c>
    177a:	e7 0e       	add	r14, r23
    177c:	f8 1e       	adc	r15, r24
    177e:	49 1f       	adc	r20, r25
    1780:	56 1f       	adc	r21, r22
    1782:	c1 1d       	adc	r28, r1
    1784:	77 0f       	add	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	66 1f       	adc	r22, r22
    178c:	06 94       	lsr	r0
    178e:	a1 f7       	brne	.-24     	; 0x1778 <__ftoa_engine+0x90>
    1790:	05 90       	lpm	r0, Z+
    1792:	07 94       	ror	r0
    1794:	28 f4       	brcc	.+10     	; 0x17a0 <__ftoa_engine+0xb8>
    1796:	f8 0e       	add	r15, r24
    1798:	49 1f       	adc	r20, r25
    179a:	56 1f       	adc	r21, r22
    179c:	c7 1f       	adc	r28, r23
    179e:	d1 1d       	adc	r29, r1
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	66 1f       	adc	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	06 94       	lsr	r0
    17aa:	a1 f7       	brne	.-24     	; 0x1794 <__ftoa_engine+0xac>
    17ac:	05 90       	lpm	r0, Z+
    17ae:	07 94       	ror	r0
    17b0:	20 f4       	brcc	.+8      	; 0x17ba <__ftoa_engine+0xd2>
    17b2:	49 0f       	add	r20, r25
    17b4:	56 1f       	adc	r21, r22
    17b6:	c7 1f       	adc	r28, r23
    17b8:	d8 1f       	adc	r29, r24
    17ba:	99 0f       	add	r25, r25
    17bc:	66 1f       	adc	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	06 94       	lsr	r0
    17c4:	a9 f7       	brne	.-22     	; 0x17b0 <__ftoa_engine+0xc8>
    17c6:	84 91       	lpm	r24, Z
    17c8:	10 95       	com	r17
    17ca:	17 70       	andi	r17, 0x07	; 7
    17cc:	41 f0       	breq	.+16     	; 0x17de <__ftoa_engine+0xf6>
    17ce:	d6 95       	lsr	r29
    17d0:	c7 95       	ror	r28
    17d2:	57 95       	ror	r21
    17d4:	47 95       	ror	r20
    17d6:	f7 94       	ror	r15
    17d8:	e7 94       	ror	r14
    17da:	1a 95       	dec	r17
    17dc:	c1 f7       	brne	.-16     	; 0x17ce <__ftoa_engine+0xe6>
    17de:	e4 ee       	ldi	r30, 0xE4	; 228
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	68 94       	set
    17e4:	15 90       	lpm	r1, Z+
    17e6:	15 91       	lpm	r17, Z+
    17e8:	35 91       	lpm	r19, Z+
    17ea:	65 91       	lpm	r22, Z+
    17ec:	95 91       	lpm	r25, Z+
    17ee:	05 90       	lpm	r0, Z+
    17f0:	7f e2       	ldi	r23, 0x2F	; 47
    17f2:	73 95       	inc	r23
    17f4:	e1 18       	sub	r14, r1
    17f6:	f1 0a       	sbc	r15, r17
    17f8:	43 0b       	sbc	r20, r19
    17fa:	56 0b       	sbc	r21, r22
    17fc:	c9 0b       	sbc	r28, r25
    17fe:	d0 09       	sbc	r29, r0
    1800:	c0 f7       	brcc	.-16     	; 0x17f2 <__ftoa_engine+0x10a>
    1802:	e1 0c       	add	r14, r1
    1804:	f1 1e       	adc	r15, r17
    1806:	43 1f       	adc	r20, r19
    1808:	56 1f       	adc	r21, r22
    180a:	c9 1f       	adc	r28, r25
    180c:	d0 1d       	adc	r29, r0
    180e:	7e f4       	brtc	.+30     	; 0x182e <__ftoa_engine+0x146>
    1810:	70 33       	cpi	r23, 0x30	; 48
    1812:	11 f4       	brne	.+4      	; 0x1818 <__ftoa_engine+0x130>
    1814:	8a 95       	dec	r24
    1816:	e6 cf       	rjmp	.-52     	; 0x17e4 <__ftoa_engine+0xfc>
    1818:	e8 94       	clt
    181a:	01 50       	subi	r16, 0x01	; 1
    181c:	30 f0       	brcs	.+12     	; 0x182a <__ftoa_engine+0x142>
    181e:	08 0f       	add	r16, r24
    1820:	0a f4       	brpl	.+2      	; 0x1824 <__ftoa_engine+0x13c>
    1822:	00 27       	eor	r16, r16
    1824:	02 17       	cp	r16, r18
    1826:	08 f4       	brcc	.+2      	; 0x182a <__ftoa_engine+0x142>
    1828:	20 2f       	mov	r18, r16
    182a:	23 95       	inc	r18
    182c:	02 2f       	mov	r16, r18
    182e:	7a 33       	cpi	r23, 0x3A	; 58
    1830:	28 f0       	brcs	.+10     	; 0x183c <__ftoa_engine+0x154>
    1832:	79 e3       	ldi	r23, 0x39	; 57
    1834:	7d 93       	st	X+, r23
    1836:	2a 95       	dec	r18
    1838:	e9 f7       	brne	.-6      	; 0x1834 <__ftoa_engine+0x14c>
    183a:	10 c0       	rjmp	.+32     	; 0x185c <__ftoa_engine+0x174>
    183c:	7d 93       	st	X+, r23
    183e:	2a 95       	dec	r18
    1840:	89 f6       	brne	.-94     	; 0x17e4 <__ftoa_engine+0xfc>
    1842:	06 94       	lsr	r0
    1844:	97 95       	ror	r25
    1846:	67 95       	ror	r22
    1848:	37 95       	ror	r19
    184a:	17 95       	ror	r17
    184c:	17 94       	ror	r1
    184e:	e1 18       	sub	r14, r1
    1850:	f1 0a       	sbc	r15, r17
    1852:	43 0b       	sbc	r20, r19
    1854:	56 0b       	sbc	r21, r22
    1856:	c9 0b       	sbc	r28, r25
    1858:	d0 09       	sbc	r29, r0
    185a:	98 f0       	brcs	.+38     	; 0x1882 <__ftoa_engine+0x19a>
    185c:	23 95       	inc	r18
    185e:	7e 91       	ld	r23, -X
    1860:	73 95       	inc	r23
    1862:	7a 33       	cpi	r23, 0x3A	; 58
    1864:	08 f0       	brcs	.+2      	; 0x1868 <__ftoa_engine+0x180>
    1866:	70 e3       	ldi	r23, 0x30	; 48
    1868:	7c 93       	st	X, r23
    186a:	20 13       	cpse	r18, r16
    186c:	b8 f7       	brcc	.-18     	; 0x185c <__ftoa_engine+0x174>
    186e:	7e 91       	ld	r23, -X
    1870:	70 61       	ori	r23, 0x10	; 16
    1872:	7d 93       	st	X+, r23
    1874:	30 f0       	brcs	.+12     	; 0x1882 <__ftoa_engine+0x19a>
    1876:	83 95       	inc	r24
    1878:	71 e3       	ldi	r23, 0x31	; 49
    187a:	7d 93       	st	X+, r23
    187c:	70 e3       	ldi	r23, 0x30	; 48
    187e:	2a 95       	dec	r18
    1880:	e1 f7       	brne	.-8      	; 0x187a <__ftoa_engine+0x192>
    1882:	11 24       	eor	r1, r1
    1884:	ef 90       	pop	r14
    1886:	ff 90       	pop	r15
    1888:	0f 91       	pop	r16
    188a:	1f 91       	pop	r17
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	99 27       	eor	r25, r25
    1892:	87 fd       	sbrc	r24, 7
    1894:	90 95       	com	r25
    1896:	08 95       	ret

00001898 <_exit>:
    1898:	f8 94       	cli

0000189a <__stop_program>:
    189a:	ff cf       	rjmp	.-2      	; 0x189a <__stop_program>
