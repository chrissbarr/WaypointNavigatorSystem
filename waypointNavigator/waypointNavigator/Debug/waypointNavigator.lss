
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800206  00800206  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000055b  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059a  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000360  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c5  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e3 d0       	rcall	.+454    	; 0x2e6 <main>
 120:	18 c1       	rjmp	.+560    	; 0x352 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_23>:

long lastIRTime = 0;


ISR(TIMER0_OVF_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 13a:	80 91 07 02 	lds	r24, 0x0207
 13e:	90 91 08 02 	lds	r25, 0x0208
 142:	a0 91 09 02 	lds	r26, 0x0209
 146:	b0 91 0a 02 	lds	r27, 0x020A
	unsigned char f = timer0_fract;
 14a:	30 91 06 02 	lds	r19, 0x0206

	m += MILLIS_INC;
	f += FRACT_INC;
 14e:	23 e0       	ldi	r18, 0x03	; 3
 150:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 152:	2d 37       	cpi	r18, 0x7D	; 125
 154:	20 f4       	brcc	.+8      	; 0x15e <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	a1 1d       	adc	r26, r1
 15a:	b1 1d       	adc	r27, r1
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 15e:	26 e8       	ldi	r18, 0x86	; 134
 160:	23 0f       	add	r18, r19
		m += 1;
 162:	02 96       	adiw	r24, 0x02	; 2
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 168:	20 93 06 02 	sts	0x0206, r18
	timer0_millis = m;
 16c:	80 93 07 02 	sts	0x0207, r24
 170:	90 93 08 02 	sts	0x0208, r25
 174:	a0 93 09 02 	sts	0x0209, r26
 178:	b0 93 0a 02 	sts	0x020A, r27
	timer0_overflow_count++;
 17c:	80 91 0b 02 	lds	r24, 0x020B
 180:	90 91 0c 02 	lds	r25, 0x020C
 184:	a0 91 0d 02 	lds	r26, 0x020D
 188:	b0 91 0e 02 	lds	r27, 0x020E
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 0b 02 	sts	0x020B, r24
 196:	90 93 0c 02 	sts	0x020C, r25
 19a:	a0 93 0d 02 	sts	0x020D, r26
 19e:	b0 93 0e 02 	sts	0x020E, r27
}
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	aa 27       	eor	r26, r26
 1c2:	97 fd       	sbrc	r25, 7
 1c4:	a0 95       	com	r26
 1c6:	ba 2f       	mov	r27, r26
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	aa 1f       	adc	r26, r26
 1ce:	bb 1f       	adc	r27, r27
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	aa 1f       	adc	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	9c 01       	movw	r18, r24
 1da:	ad 01       	movw	r20, r26
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	44 1f       	adc	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	44 1f       	adc	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	74 e2       	ldi	r23, 0x24	; 36
 1f0:	84 ef       	ldi	r24, 0xF4	; 244
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	8c d0       	rcall	.+280    	; 0x30e <__udivmodsi4>
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	31 09       	sbc	r19, r1
 1fa:	20 97       	sbiw	r28, 0x00	; 0
 1fc:	59 f4       	brne	.+22     	; 0x214 <_Z10USART_initii+0x5c>
 1fe:	30 93 c5 00 	sts	0x00C5, r19
 202:	20 93 c4 00 	sts	0x00C4, r18
 206:	88 e1       	ldi	r24, 0x18	; 24
 208:	80 93 c1 00 	sts	0x00C1, r24
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	80 93 c2 00 	sts	0x00C2, r24
 212:	28 c0       	rjmp	.+80     	; 0x264 <_Z10USART_initii+0xac>
 214:	c1 30       	cpi	r28, 0x01	; 1
 216:	d1 05       	cpc	r29, r1
 218:	59 f4       	brne	.+22     	; 0x230 <_Z10USART_initii+0x78>
 21a:	30 93 cd 00 	sts	0x00CD, r19
 21e:	20 93 cc 00 	sts	0x00CC, r18
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	80 93 c9 00 	sts	0x00C9, r24
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 ca 00 	sts	0x00CA, r24
 22e:	1a c0       	rjmp	.+52     	; 0x264 <_Z10USART_initii+0xac>
 230:	c2 30       	cpi	r28, 0x02	; 2
 232:	d1 05       	cpc	r29, r1
 234:	59 f4       	brne	.+22     	; 0x24c <_Z10USART_initii+0x94>
 236:	30 93 d5 00 	sts	0x00D5, r19
 23a:	20 93 d4 00 	sts	0x00D4, r18
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	80 93 d1 00 	sts	0x00D1, r24
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	80 93 d2 00 	sts	0x00D2, r24
 24a:	0c c0       	rjmp	.+24     	; 0x264 <_Z10USART_initii+0xac>
 24c:	23 97       	sbiw	r28, 0x03	; 3
 24e:	51 f4       	brne	.+20     	; 0x264 <_Z10USART_initii+0xac>
 250:	30 93 35 01 	sts	0x0135, r19
 254:	20 93 34 01 	sts	0x0134, r18
 258:	88 e1       	ldi	r24, 0x18	; 24
 25a:	80 93 31 01 	sts	0x0131, r24
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	80 93 32 01 	sts	0x0132, r24
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <_Z10USART_sendih>:
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	41 f4       	brne	.+16     	; 0x27e <_Z10USART_sendih+0x14>
 26e:	e0 ec       	ldi	r30, 0xC0	; 192
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	85 ff       	sbrs	r24, 5
 276:	fd cf       	rjmp	.-6      	; 0x272 <_Z10USART_sendih+0x8>
 278:	60 93 c6 00 	sts	0x00C6, r22
 27c:	08 95       	ret
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	91 05       	cpc	r25, r1
 282:	41 f4       	brne	.+16     	; 0x294 <_Z10USART_sendih+0x2a>
 284:	e8 ec       	ldi	r30, 0xC8	; 200
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	85 ff       	sbrs	r24, 5
 28c:	fd cf       	rjmp	.-6      	; 0x288 <_Z10USART_sendih+0x1e>
 28e:	60 93 ce 00 	sts	0x00CE, r22
 292:	08 95       	ret
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	41 f4       	brne	.+16     	; 0x2aa <_Z10USART_sendih+0x40>
 29a:	e0 ed       	ldi	r30, 0xD0	; 208
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	85 ff       	sbrs	r24, 5
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <_Z10USART_sendih+0x34>
 2a4:	60 93 d6 00 	sts	0x00D6, r22
 2a8:	08 95       	ret
 2aa:	03 97       	sbiw	r24, 0x03	; 3
 2ac:	39 f4       	brne	.+14     	; 0x2bc <_Z10USART_sendih+0x52>
 2ae:	e0 e3       	ldi	r30, 0x30	; 48
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	80 81       	ld	r24, Z
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <_Z10USART_sendih+0x48>
 2b8:	60 93 36 01 	sts	0x0136, r22
 2bc:	08 95       	ret

000002be <_Z15USART_putstringiPKc>:

void USART_putstring(int usartNum, const char* StringPtr){
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	8c 01       	movw	r16, r24
 2c8:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 2ca:	68 81       	ld	r22, Y
 2cc:	66 23       	and	r22, r22
 2ce:	31 f0       	breq	.+12     	; 0x2dc <_Z15USART_putstringiPKc+0x1e>
 2d0:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
 2d2:	c8 01       	movw	r24, r16
 2d4:	ca df       	rcall	.-108    	; 0x26a <_Z10USART_sendih>
	
}

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 2d6:	69 91       	ld	r22, Y+
 2d8:	61 11       	cpse	r22, r1
 2da:	fb cf       	rjmp	.-10     	; 0x2d2 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <main>:
float waypoint_get_angle(float lat1, float long1, float lat2, float long2);	//return an angle or heading from first pair to second pair of coordinates


int main(void)
{
	USART_init(USART_PC,9600);
 2e6:	60 e8       	ldi	r22, 0x80	; 128
 2e8:	75 e2       	ldi	r23, 0x25	; 37
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	64 df       	rcall	.-312    	; 0x1b8 <_Z10USART_initii>


    while(1)
    {
		USART_putstring(USART_PC,"test");    //Pass the string to the USART_putstring function and sends it over the serial
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	72 e0       	ldi	r23, 0x02	; 2
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	e2 df       	rcall	.-60     	; 0x2be <_Z15USART_putstringiPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 e2       	ldi	r24, 0x23	; 35
 2fe:	94 ef       	ldi	r25, 0xF4	; 244
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x1a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x24>
 30a:	00 00       	nop
 30c:	f1 cf       	rjmp	.-30     	; 0x2f0 <main+0xa>

0000030e <__udivmodsi4>:
 30e:	a1 e2       	ldi	r26, 0x21	; 33
 310:	1a 2e       	mov	r1, r26
 312:	aa 1b       	sub	r26, r26
 314:	bb 1b       	sub	r27, r27
 316:	fd 01       	movw	r30, r26
 318:	0d c0       	rjmp	.+26     	; 0x334 <__udivmodsi4_ep>

0000031a <__udivmodsi4_loop>:
 31a:	aa 1f       	adc	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	ee 1f       	adc	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	a2 17       	cp	r26, r18
 324:	b3 07       	cpc	r27, r19
 326:	e4 07       	cpc	r30, r20
 328:	f5 07       	cpc	r31, r21
 32a:	20 f0       	brcs	.+8      	; 0x334 <__udivmodsi4_ep>
 32c:	a2 1b       	sub	r26, r18
 32e:	b3 0b       	sbc	r27, r19
 330:	e4 0b       	sbc	r30, r20
 332:	f5 0b       	sbc	r31, r21

00000334 <__udivmodsi4_ep>:
 334:	66 1f       	adc	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	1a 94       	dec	r1
 33e:	69 f7       	brne	.-38     	; 0x31a <__udivmodsi4_loop>
 340:	60 95       	com	r22
 342:	70 95       	com	r23
 344:	80 95       	com	r24
 346:	90 95       	com	r25
 348:	9b 01       	movw	r18, r22
 34a:	ac 01       	movw	r20, r24
 34c:	bd 01       	movw	r22, r26
 34e:	cf 01       	movw	r24, r30
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
