
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  000011f2  00001286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800234  00800234  000012ba  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00001330  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000026eb  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e6f  00000000  00000000  00003ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017e3  00000000  00000000  00004b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000700  00000000  00000000  00006338  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e81  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017e6  00000000  00000000  000078b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  0000909f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	0b c1       	rjmp	.+534    	; 0x21c <__bad_interrupt>
       6:	00 00       	nop
       8:	09 c1       	rjmp	.+530    	; 0x21c <__bad_interrupt>
       a:	00 00       	nop
       c:	07 c1       	rjmp	.+526    	; 0x21c <__bad_interrupt>
       e:	00 00       	nop
      10:	05 c1       	rjmp	.+522    	; 0x21c <__bad_interrupt>
      12:	00 00       	nop
      14:	03 c1       	rjmp	.+518    	; 0x21c <__bad_interrupt>
      16:	00 00       	nop
      18:	01 c1       	rjmp	.+514    	; 0x21c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c2       	rjmp	.+1402   	; 0x5a0 <__vector_9>
      26:	00 00       	nop
      28:	f9 c0       	rjmp	.+498    	; 0x21c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f7 c0       	rjmp	.+494    	; 0x21c <__bad_interrupt>
      2e:	00 00       	nop
      30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
      32:	00 00       	nop
      34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
      36:	00 00       	nop
      38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
      42:	00 00       	nop
      44:	eb c0       	rjmp	.+470    	; 0x21c <__bad_interrupt>
      46:	00 00       	nop
      48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
      4e:	00 00       	nop
      50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
      52:	00 00       	nop
      54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
      56:	00 00       	nop
      58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c3       	rjmp	.+1800   	; 0x766 <__vector_23>
      5e:	00 00       	nop
      60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
      62:	00 00       	nop
      64:	db c0       	rjmp	.+438    	; 0x21c <__bad_interrupt>
      66:	00 00       	nop
      68:	d9 c0       	rjmp	.+434    	; 0x21c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
      6e:	00 00       	nop
      70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
      76:	00 00       	nop
      78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
      7e:	00 00       	nop
      80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
      82:	00 00       	nop
      84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
      86:	00 00       	nop
      88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
      8e:	00 00       	nop
      90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
      92:	00 00       	nop
      94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
      96:	00 00       	nop
      98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b7 c0       	rjmp	.+366    	; 0x21c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b5 c0       	rjmp	.+362    	; 0x21c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b3 c0       	rjmp	.+358    	; 0x21c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b1 c0       	rjmp	.+354    	; 0x21c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	af c0       	rjmp	.+350    	; 0x21c <__bad_interrupt>
      be:	00 00       	nop
      c0:	ad c0       	rjmp	.+346    	; 0x21c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ab c0       	rjmp	.+342    	; 0x21c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a9 c0       	rjmp	.+338    	; 0x21c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a7 c0       	rjmp	.+334    	; 0x21c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a5 c0       	rjmp	.+330    	; 0x21c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a3 c0       	rjmp	.+326    	; 0x21c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a1 c0       	rjmp	.+322    	; 0x21c <__bad_interrupt>
      da:	00 00       	nop
      dc:	9f c0       	rjmp	.+318    	; 0x21c <__bad_interrupt>
      de:	00 00       	nop
      e0:	9d c0       	rjmp	.+314    	; 0x21c <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <__addsf3x+0x56>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <__vector_9+0x18a>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <_Z10mpl_getAlth+0xf0>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <i2c_rep_start+0xa>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	12 e0       	ldi	r17, 0x02	; 2
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	e2 ef       	ldi	r30, 0xF2	; 242
     1f6:	f1 e1       	ldi	r31, 0x11	; 17
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a4 33       	cpi	r26, 0x34	; 52
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	a4 e3       	ldi	r26, 0x34	; 52
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	af 36       	cpi	r26, 0x6F	; 111
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	c1 d3       	rcall	.+1922   	; 0x99c <main>
     21a:	e9 c7       	rjmp	.+4050   	; 0x11ee <_exit>

0000021c <__bad_interrupt>:
     21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     21e:	00 c0       	rjmp	.+0      	; 0x220 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     220:	00 c0       	rjmp	.+0      	; 0x222 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     222:	00 c0       	rjmp	.+0      	; 0x224 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     224:	00 c0       	rjmp	.+0      	; 0x226 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     226:	00 c0       	rjmp	.+0      	; 0x228 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     228:	00 c0       	rjmp	.+0      	; 0x22a <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     22a:	00 00       	nop
	ret          ; 3   "
     22c:	08 95       	ret

0000022e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     22e:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     230:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     232:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     234:	58 98       	cbi	0x0b, 0	; 11
	ret
     236:	08 95       	ret

00000238 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     238:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     23a:	f1 df       	rcall	.-30     	; 0x21e <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     23c:	1d c0       	rjmp	.+58     	; 0x278 <i2c_write>
	ret
     23e:	08 95       	ret

00000240 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     240:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     242:	ed df       	rcall	.-38     	; 0x21e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     244:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     246:	eb df       	rcall	.-42     	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     248:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     24a:	e9 df       	rcall	.-46     	; 0x21e <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     24c:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     24e:	e7 df       	rcall	.-50     	; 0x21e <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     250:	13 c0       	rjmp	.+38     	; 0x278 <i2c_write>
	ret
     252:	08 95       	ret

00000254 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     254:	08 2e       	mov	r0, r24

00000256 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     256:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     258:	e2 df       	rcall	.-60     	; 0x21e <i2c_delay_T2>
	mov	r24,__tmp_reg__
     25a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     25c:	0d d0       	rcall	.+26     	; 0x278 <i2c_write>
	tst	r24		;if device not busy -> done
     25e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     260:	11 f0       	breq	.+4      	; 0x266 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     262:	02 d0       	rcall	.+4      	; 0x268 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     264:	f8 cf       	rjmp	.-16     	; 0x256 <i2c_start_wait1>

00000266 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     266:	08 95       	ret

00000268 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     268:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     26a:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     26c:	d8 df       	rcall	.-80     	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     26e:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     270:	d6 df       	rcall	.-84     	; 0x21e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     272:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     274:	d4 cf       	rjmp	.-88     	; 0x21e <i2c_delay_T2>
	ret
     276:	08 95       	ret

00000278 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     278:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     27a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     27c:	01 c0       	rjmp	.+2      	; 0x280 <i2c_write_first>

0000027e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     27e:	88 0f       	add	r24, r24

00000280 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     280:	59 f0       	breq	.+22     	; 0x298 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     282:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     284:	18 f4       	brcc	.+6      	; 0x28c <i2c_write_low>
	nop
     286:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     288:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     28a:	02 c0       	rjmp	.+4      	; 0x290 <i2c_write_high>

0000028c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     28c:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     28e:	00 c0       	rjmp	.+0      	; 0x290 <i2c_write_high>

00000290 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     290:	c6 df       	rcall	.-116    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     292:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     294:	c4 df       	rcall	.-120    	; 0x21e <i2c_delay_T2>
	rjmp	i2c_write_bit
     296:	f3 cf       	rjmp	.-26     	; 0x27e <i2c_write_bit>

00000298 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     298:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     29a:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29c:	c0 df       	rcall	.-128    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     29e:	50 98       	cbi	0x0a, 0	; 10

000002a0 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2a0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <i2c_ack_wait>
	
	clr	r24		;return 0
     2a4:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2a6:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2a8:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2aa:	b9 df       	rcall	.-142    	; 0x21e <i2c_delay_T2>
	clr	r25
     2ac:	99 27       	eor	r25, r25
	ret
     2ae:	08 95       	ret

000002b0 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2b0:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <i2c_read>

000002b4 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2b4:	81 e0       	ldi	r24, 0x01	; 1

000002b6 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2b6:	71 e0       	ldi	r23, 0x01	; 1

000002b8 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2b8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2ba:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2bc:	b0 df       	rcall	.-160    	; 0x21e <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2be:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c0:	ae df       	rcall	.-164    	; 0x21e <i2c_delay_T2>

000002c2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2c2:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2c6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2c8:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2ca:	08 94       	sec
	
	rol	r23		;store bit
     2cc:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     2ce:	a0 f7       	brcc	.-24     	; 0x2b8 <i2c_read_bit>

000002d0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     2d0:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     2d2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     2d4:	11 f0       	breq	.+4      	; 0x2da <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     2d6:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <i2c_put_ack_high>

000002da <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     2da:	51 9a       	sbi	0x0a, 1	; 10

000002dc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     2dc:	a0 df       	rcall	.-192    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2de:	50 98       	cbi	0x0a, 0	; 10

000002e0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     2e0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     2e4:	9c df       	rcall	.-200    	; 0x21e <i2c_delay_T2>
	mov	r24,r23
     2e6:	87 2f       	mov	r24, r23
	clr	r25
     2e8:	99 27       	eor	r25, r25
	ret
     2ea:	08 95       	ret

000002ec <_Z18altimeter_set_modev>:
   altimeter_set_eventFlags(); 
} 

void altimeter_set_mode (void)
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     2ec:	80 ec       	ldi	r24, 0xC0	; 192
     2ee:	b2 df       	rcall	.-156    	; 0x254 <i2c_start_wait>
	i2c_write(CTRL_REG1);
     2f0:	86 e2       	ldi	r24, 0x26	; 38
     2f2:	c2 df       	rcall	.-124    	; 0x278 <i2c_write>
	i2c_write(0xB8);
     2f4:	88 eb       	ldi	r24, 0xB8	; 184
     2f6:	c0 df       	rcall	.-128    	; 0x278 <i2c_write>
	i2c_stop();
     2f8:	b7 cf       	rjmp	.-146    	; 0x268 <i2c_stop>
     2fa:	08 95       	ret

000002fc <_Z24altimeter_set_eventFlagsv>:
}

void altimeter_set_eventFlags (void)
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     2fc:	80 ec       	ldi	r24, 0xC0	; 192
     2fe:	aa df       	rcall	.-172    	; 0x254 <i2c_start_wait>
	i2c_write(PT_DATA_CFG);
     300:	83 e1       	ldi	r24, 0x13	; 19
     302:	ba df       	rcall	.-140    	; 0x278 <i2c_write>
	i2c_write(0x07);      // Enable all 3 pressure and temp flags
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	b8 df       	rcall	.-144    	; 0x278 <i2c_write>
	i2c_stop();
     308:	af cf       	rjmp	.-162    	; 0x268 <i2c_stop>
     30a:	08 95       	ret

0000030c <_Z8mpl_initv>:
	debug_println("Altimeter initialized!");
}

void mpl_init (void) 
{ 
   i2c_init(); 
     30c:	90 df       	rcall	.-224    	; 0x22e <i2c_init>
   altimeter_set_mode();
     30e:	ee df       	rcall	.-36     	; 0x2ec <_Z18altimeter_set_modev>
   altimeter_set_eventFlags(); 
     310:	f5 cf       	rjmp	.-22     	; 0x2fc <_Z24altimeter_set_eventFlagsv>
     312:	08 95       	ret

00000314 <_Z14altimeter_initv>:
float pressure = 0.;
float temperature = 0.;

void altimeter_init()
{
	mpl_init();
     314:	fb df       	rcall	.-10     	; 0x30c <_Z8mpl_initv>
	debug_println("Altimeter initialized!");
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	19 c1       	rjmp	.+562    	; 0x54e <_Z13debug_printlnPKc>
     31c:	08 95       	ret

0000031e <_Z20altimeter_set_activev>:
   return altitude;
} 

void altimeter_set_active (void)
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     31e:	80 ec       	ldi	r24, 0xC0	; 192
     320:	99 df       	rcall	.-206    	; 0x254 <i2c_start_wait>
	i2c_write(CTRL_REG1);
     322:	86 e2       	ldi	r24, 0x26	; 38
     324:	a9 df       	rcall	.-174    	; 0x278 <i2c_write>
	i2c_write(0xB9);
     326:	89 eb       	ldi	r24, 0xB9	; 185
     328:	a7 df       	rcall	.-178    	; 0x278 <i2c_write>
	i2c_stop();
     32a:	9e cf       	rjmp	.-196    	; 0x268 <i2c_stop>
     32c:	08 95       	ret

0000032e <_Z20altimeter_get_statusv>:
}

uint8_t altimeter_get_status (void) 
{ 
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
   uint8_t altStatus = 0x00; 
	int i = 0;
     334:	c0 e0       	ldi	r28, 0x00	; 0
     336:	d0 e0       	ldi	r29, 0x00	; 0
   while (((altStatus & 0x08) == 0) || (i <= 10))
   { 
      i2c_start_wait(MPL3115a2+I2C_WRITE); 
     338:	80 ec       	ldi	r24, 0xC0	; 192
     33a:	8c df       	rcall	.-232    	; 0x254 <i2c_start_wait>
      i2c_write(STATUS); 
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	9c df       	rcall	.-200    	; 0x278 <i2c_write>
      i2c_rep_start(MPL3115a2+I2C_READ); 
     340:	81 ec       	ldi	r24, 0xC1	; 193
     342:	7e df       	rcall	.-260    	; 0x240 <i2c_rep_start>
      altStatus = i2c_readNak(); 
     344:	b5 df       	rcall	.-150    	; 0x2b0 <i2c_readNak>
     346:	18 2f       	mov	r17, r24
      i2c_stop(); 
     348:	8f df       	rcall	.-226    	; 0x268 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34a:	8f e8       	ldi	r24, 0x8F	; 143
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <_Z20altimeter_get_statusv+0x20>
     352:	00 c0       	rjmp	.+0      	; 0x354 <_Z20altimeter_get_statusv+0x26>
     354:	00 00       	nop
	  _delay_us(100);
	  i++;
     356:	21 96       	adiw	r28, 0x01	; 1

uint8_t altimeter_get_status (void) 
{ 
   uint8_t altStatus = 0x00; 
	int i = 0;
   while (((altStatus & 0x08) == 0) || (i <= 10))
     358:	13 ff       	sbrs	r17, 3
     35a:	ee cf       	rjmp	.-36     	; 0x338 <_Z20altimeter_get_statusv+0xa>
     35c:	cb 30       	cpi	r28, 0x0B	; 11
     35e:	d1 05       	cpc	r29, r1
     360:	5c f3       	brlt	.-42     	; 0x338 <_Z20altimeter_get_statusv+0xa>
	  _delay_us(100);
	  i++;
   } 
   //DDRB |= 0x30; PORTB |= 0x30;; 
   return altStatus;
} 
     362:	81 2f       	mov	r24, r17
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	08 95       	ret

0000036c <_Z10mpl_getAlth>:
	i2c_write(0x07);      // Enable all 3 pressure and temp flags
	i2c_stop();
}

float mpl_getAlt (uint8_t altStatus) 
{    
     36c:	bf 92       	push	r11
     36e:	cf 92       	push	r12
     370:	df 92       	push	r13
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
   long temp = 0;
   
   altimeter_set_active();
     37e:	cf df       	rcall	.-98     	; 0x31e <_Z20altimeter_set_activev>
    
   altimeter_get_status(); 
     380:	d6 df       	rcall	.-84     	; 0x32e <_Z20altimeter_get_statusv>
    
   int8_t msbA,csbA,lsbA,msbT,lsbT = 0x00; 
       
   i2c_start_wait(MPL3115a2+I2C_WRITE); 
     382:	80 ec       	ldi	r24, 0xC0	; 192
     384:	67 df       	rcall	.-306    	; 0x254 <i2c_start_wait>
   i2c_write(OUT_P_MSB); 
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	77 df       	rcall	.-274    	; 0x278 <i2c_write>
   i2c_rep_start(MPL3115a2+I2C_READ); 
     38a:	81 ec       	ldi	r24, 0xC1	; 193
     38c:	59 df       	rcall	.-334    	; 0x240 <i2c_rep_start>
   //_delay_ms(10);
   msbA = i2c_readAck(); 
     38e:	92 df       	rcall	.-220    	; 0x2b4 <i2c_readAck>
     390:	b8 2e       	mov	r11, r24
   csbA = i2c_readAck(); 
     392:	90 df       	rcall	.-224    	; 0x2b4 <i2c_readAck>
     394:	18 2f       	mov	r17, r24
   lsbA = i2c_readAck();
     396:	8e df       	rcall	.-228    	; 0x2b4 <i2c_readAck>
     398:	08 2f       	mov	r16, r24
   msbT = i2c_readAck();
     39a:	8c df       	rcall	.-232    	; 0x2b4 <i2c_readAck>
     39c:	d8 2f       	mov	r29, r24
   lsbT = i2c_readNak(); 
     39e:	88 df       	rcall	.-240    	; 0x2b0 <i2c_readNak>
     3a0:	c8 2f       	mov	r28, r24
   i2c_stop(); 
     3a2:	62 df       	rcall	.-316    	; 0x268 <i2c_stop>
	    altitude = (float) (temp >> 8) + (float) ((lsbA >> 4)/16.0); // Whole number plus fraction altitude in meters for negative altitude
	    altitude *= -1.;
    }
    else 
	{
	    temp = ((msbA << 8) | csbA);
     3a4:	6b 2d       	mov	r22, r11
     3a6:	77 27       	eor	r23, r23
     3a8:	67 fd       	sbrc	r22, 7
     3aa:	70 95       	com	r23
     3ac:	76 2f       	mov	r23, r22
     3ae:	66 27       	eor	r22, r22
     3b0:	81 2f       	mov	r24, r17
     3b2:	99 27       	eor	r25, r25
     3b4:	87 fd       	sbrc	r24, 7
     3b6:	90 95       	com	r25
     3b8:	68 2b       	or	r22, r24
     3ba:	79 2b       	or	r23, r25
	    altitude = (float) (temp) + (float) ((lsbA >> 4)/16.0);  // Whole number plus fraction altitude in meters
     3bc:	88 27       	eor	r24, r24
     3be:	77 fd       	sbrc	r23, 7
     3c0:	80 95       	com	r24
     3c2:	98 2f       	mov	r25, r24
     3c4:	6a d3       	rcall	.+1748   	; 0xa9a <__floatsisf>
     3c6:	6b 01       	movw	r12, r22
     3c8:	7c 01       	movw	r14, r24
     3ca:	60 2f       	mov	r22, r16
     3cc:	77 27       	eor	r23, r23
     3ce:	67 fd       	sbrc	r22, 7
     3d0:	70 95       	com	r23
     3d2:	75 95       	asr	r23
     3d4:	67 95       	ror	r22
     3d6:	75 95       	asr	r23
     3d8:	67 95       	ror	r22
     3da:	75 95       	asr	r23
     3dc:	67 95       	ror	r22
     3de:	75 95       	asr	r23
     3e0:	67 95       	ror	r22
     3e2:	88 27       	eor	r24, r24
     3e4:	77 fd       	sbrc	r23, 7
     3e6:	80 95       	com	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	57 d3       	rcall	.+1710   	; 0xa9a <__floatsisf>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e8       	ldi	r20, 0x80	; 128
     3f2:	5d e3       	ldi	r21, 0x3D	; 61
     3f4:	02 d4       	rcall	.+2052   	; 0xbfa <__mulsf3>
     3f6:	9b 01       	movw	r18, r22
     3f8:	ac 01       	movw	r20, r24
     3fa:	c7 01       	movw	r24, r14
     3fc:	b6 01       	movw	r22, r12
     3fe:	e3 d2       	rcall	.+1478   	; 0x9c6 <__addsf3>
     400:	60 93 3c 02 	sts	0x023C, r22
     404:	70 93 3d 02 	sts	0x023D, r23
     408:	80 93 3e 02 	sts	0x023E, r24
     40c:	90 93 3f 02 	sts	0x023F, r25
    }
	
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
     410:	4b 2d       	mov	r20, r11
     412:	55 27       	eor	r21, r21
     414:	47 fd       	sbrc	r20, 7
     416:	50 95       	com	r21
     418:	65 2f       	mov	r22, r21
     41a:	75 2f       	mov	r23, r21
     41c:	ba 01       	movw	r22, r20
     41e:	55 27       	eor	r21, r21
     420:	44 27       	eor	r20, r20
     422:	81 2f       	mov	r24, r17
     424:	99 27       	eor	r25, r25
     426:	87 fd       	sbrc	r24, 7
     428:	90 95       	com	r25
     42a:	a9 2f       	mov	r26, r25
     42c:	b9 2f       	mov	r27, r25
     42e:	ba 2f       	mov	r27, r26
     430:	a9 2f       	mov	r26, r25
     432:	98 2f       	mov	r25, r24
     434:	88 27       	eor	r24, r24
     436:	84 2b       	or	r24, r20
     438:	95 2b       	or	r25, r21
     43a:	a6 2b       	or	r26, r22
     43c:	b7 2b       	or	r27, r23
     43e:	40 2f       	mov	r20, r16
     440:	55 27       	eor	r21, r21
     442:	47 fd       	sbrc	r20, 7
     444:	50 95       	com	r21
     446:	65 2f       	mov	r22, r21
     448:	75 2f       	mov	r23, r21
     44a:	84 2b       	or	r24, r20
     44c:	95 2b       	or	r25, r21
     44e:	a6 2b       	or	r26, r22
     450:	b7 2b       	or	r27, r23
	pressure_whole >>= 6;
	
	lsbA &= 0x30;
     452:	00 73       	andi	r16, 0x30	; 48
	lsbA >>= 4;
     454:	11 27       	eor	r17, r17
     456:	07 fd       	sbrc	r16, 7
     458:	10 95       	com	r17
     45a:	15 95       	asr	r17
     45c:	07 95       	ror	r16
     45e:	15 95       	asr	r17
     460:	07 95       	ror	r16
     462:	15 95       	asr	r17
     464:	07 95       	ror	r16
     466:	15 95       	asr	r17
     468:	07 95       	ror	r16
	    temp = ((msbA << 8) | csbA);
	    altitude = (float) (temp) + (float) ((lsbA >> 4)/16.0);  // Whole number plus fraction altitude in meters
    }
	
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
	pressure_whole >>= 6;
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	68 94       	set
     470:	15 f8       	bld	r1, 5
     472:	95 95       	asr	r25
     474:	87 95       	ror	r24
     476:	77 95       	ror	r23
     478:	67 95       	ror	r22
     47a:	16 94       	lsr	r1
     47c:	d1 f7       	brne	.-12     	; 0x472 <_Z10mpl_getAlth+0x106>
	
	lsbA &= 0x30;
	lsbA >>= 4;
	float pressure_frac = (float) lsbA/4.0;

	pressure = (float) (pressure_whole) + pressure_frac;
     47e:	0d d3       	rcall	.+1562   	; 0xa9a <__floatsisf>
     480:	6b 01       	movw	r12, r22
     482:	7c 01       	movw	r14, r24
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
	pressure_whole >>= 6;
	
	lsbA &= 0x30;
	lsbA >>= 4;
	float pressure_frac = (float) lsbA/4.0;
     484:	60 2f       	mov	r22, r16
     486:	77 27       	eor	r23, r23
     488:	67 fd       	sbrc	r22, 7
     48a:	70 95       	com	r23
     48c:	87 2f       	mov	r24, r23
     48e:	97 2f       	mov	r25, r23
     490:	04 d3       	rcall	.+1544   	; 0xa9a <__floatsisf>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e8       	ldi	r20, 0x80	; 128
     498:	5e e3       	ldi	r21, 0x3E	; 62
     49a:	af d3       	rcall	.+1886   	; 0xbfa <__mulsf3>
     49c:	9b 01       	movw	r18, r22
     49e:	ac 01       	movw	r20, r24

	pressure = (float) (pressure_whole) + pressure_frac;
     4a0:	c7 01       	movw	r24, r14
     4a2:	b6 01       	movw	r22, r12
     4a4:	90 d2       	rcall	.+1312   	; 0x9c6 <__addsf3>
     4a6:	60 93 38 02 	sts	0x0238, r22
     4aa:	70 93 39 02 	sts	0x0239, r23
     4ae:	80 93 3a 02 	sts	0x023A, r24
     4b2:	90 93 3b 02 	sts	0x023B, r25
		temperature = (float) (temp >> 8) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
		temperature *= -1.;
	}
else 
	{
		temperature = (float) (msbT) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
     4b6:	6d 2f       	mov	r22, r29
     4b8:	77 27       	eor	r23, r23
     4ba:	67 fd       	sbrc	r22, 7
     4bc:	70 95       	com	r23
     4be:	87 2f       	mov	r24, r23
     4c0:	97 2f       	mov	r25, r23
     4c2:	eb d2       	rcall	.+1494   	; 0xa9a <__floatsisf>
     4c4:	6b 01       	movw	r12, r22
     4c6:	7c 01       	movw	r14, r24
     4c8:	6c 2f       	mov	r22, r28
     4ca:	77 27       	eor	r23, r23
     4cc:	67 fd       	sbrc	r22, 7
     4ce:	70 95       	com	r23
     4d0:	75 95       	asr	r23
     4d2:	67 95       	ror	r22
     4d4:	75 95       	asr	r23
     4d6:	67 95       	ror	r22
     4d8:	75 95       	asr	r23
     4da:	67 95       	ror	r22
     4dc:	75 95       	asr	r23
     4de:	67 95       	ror	r22
     4e0:	88 27       	eor	r24, r24
     4e2:	77 fd       	sbrc	r23, 7
     4e4:	80 95       	com	r24
     4e6:	98 2f       	mov	r25, r24
     4e8:	d8 d2       	rcall	.+1456   	; 0xa9a <__floatsisf>
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	5d e3       	ldi	r21, 0x3D	; 61
     4f2:	83 d3       	rcall	.+1798   	; 0xbfa <__mulsf3>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c7 01       	movw	r24, r14
     4fa:	b6 01       	movw	r22, r12
     4fc:	64 d2       	rcall	.+1224   	; 0x9c6 <__addsf3>
     4fe:	60 93 34 02 	sts	0x0234, r22
     502:	70 93 35 02 	sts	0x0235, r23
     506:	80 93 36 02 	sts	0x0236, r24
     50a:	90 93 37 02 	sts	0x0237, r25
	}
    
   if (temperature < 20) 
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 ea       	ldi	r20, 0xA0	; 160
     514:	51 e4       	ldi	r21, 0x41	; 65
     516:	bb d2       	rcall	.+1398   	; 0xa8e <__cmpsf2>
     518:	88 23       	and	r24, r24
     51a:	14 f4       	brge	.+4      	; 0x520 <_Z10mpl_getAlth+0x1b4>
   { 
       PINB = 0x30;
     51c:	80 e3       	ldi	r24, 0x30	; 48
     51e:	83 b9       	out	0x03, r24	; 3
   } 
   
   return altitude;
     520:	60 91 3c 02 	lds	r22, 0x023C
     524:	70 91 3d 02 	lds	r23, 0x023D
     528:	80 91 3e 02 	lds	r24, 0x023E
     52c:	90 91 3f 02 	lds	r25, 0x023F
} 
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	08 95       	ret

00000544 <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     544:	bc 01       	movw	r22, r24
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	09 c2       	rjmp	.+1042   	; 0x95e <_Z15USART_putstringiPKc>
     54c:	08 95       	ret

0000054e <_Z13debug_printlnPKc>:
     54e:	bc 01       	movw	r22, r24
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	04 d2       	rcall	.+1032   	; 0x95e <_Z15USART_putstringiPKc>
     556:	67 e1       	ldi	r22, 0x17	; 23
     558:	72 e0       	ldi	r23, 0x02	; 2
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	ff c1       	rjmp	.+1022   	; 0x95e <_Z15USART_putstringiPKc>
     560:	08 95       	ret

00000562 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	64 97       	sbiw	r28, 0x14	; 20
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     57a:	8e 01       	movw	r16, r28
     57c:	0f 5f       	subi	r16, 0xFF	; 255
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	25 e0       	ldi	r18, 0x05	; 5
     582:	4a e0       	ldi	r20, 0x0A	; 10
     584:	bf d3       	rcall	.+1918   	; 0xd04 <dtostrf>
		debug_print(string);
     586:	c8 01       	movw	r24, r16
     588:	dd df       	rcall	.-70     	; 0x544 <_Z11debug_printPKc>
	}
}
     58a:	64 96       	adiw	r28, 0x14	; 20
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	0b b6       	in	r0, 0x3b	; 59
     5ac:	0f 92       	push	r0
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	cf 93       	push	r28
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     5c8:	83 b1       	in	r24, 0x03	; 3
     5ca:	c0 91 40 02 	lds	r28, 0x0240
     5ce:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     5d0:	83 b1       	in	r24, 0x03	; 3
     5d2:	80 93 40 02 	sts	0x0240, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     5d6:	c0 ff       	sbrs	r28, 0
     5d8:	1c c0       	rjmp	.+56     	; 0x612 <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     5da:	18 9b       	sbis	0x03, 0	; 3
     5dc:	0a c0       	rjmp	.+20     	; 0x5f2 <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     5de:	0d d1       	rcall	.+538    	; 0x7fa <_Z6microsv>
     5e0:	60 93 55 02 	sts	0x0255, r22
     5e4:	70 93 56 02 	sts	0x0256, r23
     5e8:	80 93 57 02 	sts	0x0257, r24
     5ec:	90 93 58 02 	sts	0x0258, r25
     5f0:	10 c0       	rjmp	.+32     	; 0x612 <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     5f2:	03 d1       	rcall	.+518    	; 0x7fa <_Z6microsv>
     5f4:	20 91 55 02 	lds	r18, 0x0255
     5f8:	30 91 56 02 	lds	r19, 0x0256
     5fc:	62 1b       	sub	r22, r18
     5fe:	73 0b       	sbc	r23, r19
     600:	70 93 65 02 	sts	0x0265, r23
     604:	60 93 64 02 	sts	0x0264, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     608:	80 91 59 02 	lds	r24, 0x0259
     60c:	81 60       	ori	r24, 0x01	; 1
     60e:	80 93 59 02 	sts	0x0259, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     612:	c1 ff       	sbrs	r28, 1
     614:	1c c0       	rjmp	.+56     	; 0x64e <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     616:	19 9b       	sbis	0x03, 1	; 3
     618:	0a c0       	rjmp	.+20     	; 0x62e <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     61a:	ef d0       	rcall	.+478    	; 0x7fa <_Z6microsv>
     61c:	60 93 51 02 	sts	0x0251, r22
     620:	70 93 52 02 	sts	0x0252, r23
     624:	80 93 53 02 	sts	0x0253, r24
     628:	90 93 54 02 	sts	0x0254, r25
     62c:	10 c0       	rjmp	.+32     	; 0x64e <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     62e:	e5 d0       	rcall	.+458    	; 0x7fa <_Z6microsv>
     630:	20 91 51 02 	lds	r18, 0x0251
     634:	30 91 52 02 	lds	r19, 0x0252
     638:	62 1b       	sub	r22, r18
     63a:	73 0b       	sbc	r23, r19
     63c:	70 93 63 02 	sts	0x0263, r23
     640:	60 93 62 02 	sts	0x0262, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     644:	80 91 59 02 	lds	r24, 0x0259
     648:	82 60       	ori	r24, 0x02	; 2
     64a:	80 93 59 02 	sts	0x0259, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     64e:	c2 ff       	sbrs	r28, 2
     650:	1c c0       	rjmp	.+56     	; 0x68a <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     652:	1a 9b       	sbis	0x03, 2	; 3
     654:	0a c0       	rjmp	.+20     	; 0x66a <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     656:	d1 d0       	rcall	.+418    	; 0x7fa <_Z6microsv>
     658:	60 93 4d 02 	sts	0x024D, r22
     65c:	70 93 4e 02 	sts	0x024E, r23
     660:	80 93 4f 02 	sts	0x024F, r24
     664:	90 93 50 02 	sts	0x0250, r25
     668:	10 c0       	rjmp	.+32     	; 0x68a <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     66a:	c7 d0       	rcall	.+398    	; 0x7fa <_Z6microsv>
     66c:	20 91 4d 02 	lds	r18, 0x024D
     670:	30 91 4e 02 	lds	r19, 0x024E
     674:	62 1b       	sub	r22, r18
     676:	73 0b       	sbc	r23, r19
     678:	70 93 61 02 	sts	0x0261, r23
     67c:	60 93 60 02 	sts	0x0260, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     680:	80 91 59 02 	lds	r24, 0x0259
     684:	84 60       	ori	r24, 0x04	; 4
     686:	80 93 59 02 	sts	0x0259, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     68a:	c3 ff       	sbrs	r28, 3
     68c:	1c c0       	rjmp	.+56     	; 0x6c6 <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     68e:	1b 9b       	sbis	0x03, 3	; 3
     690:	0a c0       	rjmp	.+20     	; 0x6a6 <__vector_9+0x106>
		{
			ulRudderStart = micros();
     692:	b3 d0       	rcall	.+358    	; 0x7fa <_Z6microsv>
     694:	60 93 49 02 	sts	0x0249, r22
     698:	70 93 4a 02 	sts	0x024A, r23
     69c:	80 93 4b 02 	sts	0x024B, r24
     6a0:	90 93 4c 02 	sts	0x024C, r25
     6a4:	10 c0       	rjmp	.+32     	; 0x6c6 <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     6a6:	a9 d0       	rcall	.+338    	; 0x7fa <_Z6microsv>
     6a8:	20 91 49 02 	lds	r18, 0x0249
     6ac:	30 91 4a 02 	lds	r19, 0x024A
     6b0:	62 1b       	sub	r22, r18
     6b2:	73 0b       	sbc	r23, r19
     6b4:	70 93 5f 02 	sts	0x025F, r23
     6b8:	60 93 5e 02 	sts	0x025E, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     6bc:	80 91 59 02 	lds	r24, 0x0259
     6c0:	88 60       	ori	r24, 0x08	; 8
     6c2:	80 93 59 02 	sts	0x0259, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     6c6:	c4 ff       	sbrs	r28, 4
     6c8:	1c c0       	rjmp	.+56     	; 0x702 <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     6ca:	1c 9b       	sbis	0x03, 4	; 3
     6cc:	0a c0       	rjmp	.+20     	; 0x6e2 <__vector_9+0x142>
		{
			ulGearStart = micros();
     6ce:	95 d0       	rcall	.+298    	; 0x7fa <_Z6microsv>
     6d0:	60 93 45 02 	sts	0x0245, r22
     6d4:	70 93 46 02 	sts	0x0246, r23
     6d8:	80 93 47 02 	sts	0x0247, r24
     6dc:	90 93 48 02 	sts	0x0248, r25
     6e0:	10 c0       	rjmp	.+32     	; 0x702 <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     6e2:	8b d0       	rcall	.+278    	; 0x7fa <_Z6microsv>
     6e4:	20 91 45 02 	lds	r18, 0x0245
     6e8:	30 91 46 02 	lds	r19, 0x0246
     6ec:	62 1b       	sub	r22, r18
     6ee:	73 0b       	sbc	r23, r19
     6f0:	70 93 5d 02 	sts	0x025D, r23
     6f4:	60 93 5c 02 	sts	0x025C, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     6f8:	80 91 59 02 	lds	r24, 0x0259
     6fc:	80 61       	ori	r24, 0x10	; 16
     6fe:	80 93 59 02 	sts	0x0259, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     702:	c5 ff       	sbrs	r28, 5
     704:	1c c0       	rjmp	.+56     	; 0x73e <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     706:	1d 9b       	sbis	0x03, 5	; 3
     708:	0a c0       	rjmp	.+20     	; 0x71e <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     70a:	77 d0       	rcall	.+238    	; 0x7fa <_Z6microsv>
     70c:	60 93 41 02 	sts	0x0241, r22
     710:	70 93 42 02 	sts	0x0242, r23
     714:	80 93 43 02 	sts	0x0243, r24
     718:	90 93 44 02 	sts	0x0244, r25
     71c:	10 c0       	rjmp	.+32     	; 0x73e <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     71e:	6d d0       	rcall	.+218    	; 0x7fa <_Z6microsv>
     720:	20 91 41 02 	lds	r18, 0x0241
     724:	30 91 42 02 	lds	r19, 0x0242
     728:	62 1b       	sub	r22, r18
     72a:	73 0b       	sbc	r23, r19
     72c:	70 93 5b 02 	sts	0x025B, r23
     730:	60 93 5a 02 	sts	0x025A, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     734:	80 91 59 02 	lds	r24, 0x0259
     738:	80 62       	ori	r24, 0x20	; 32
     73a:	80 93 59 02 	sts	0x0259, r24
		}
	}
}
     73e:	ff 91       	pop	r31
     740:	ef 91       	pop	r30
     742:	cf 91       	pop	r28
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	2f 93       	push	r18
     772:	3f 93       	push	r19
     774:	8f 93       	push	r24
     776:	9f 93       	push	r25
     778:	af 93       	push	r26
     77a:	bf 93       	push	r27
     77c:	80 91 67 02 	lds	r24, 0x0267
     780:	90 91 68 02 	lds	r25, 0x0268
     784:	a0 91 69 02 	lds	r26, 0x0269
     788:	b0 91 6a 02 	lds	r27, 0x026A
     78c:	30 91 66 02 	lds	r19, 0x0266
     790:	23 e0       	ldi	r18, 0x03	; 3
     792:	23 0f       	add	r18, r19
     794:	2d 37       	cpi	r18, 0x7D	; 125
     796:	20 f4       	brcc	.+8      	; 0x7a0 <__vector_23+0x3a>
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	a1 1d       	adc	r26, r1
     79c:	b1 1d       	adc	r27, r1
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <__vector_23+0x44>
     7a0:	26 e8       	ldi	r18, 0x86	; 134
     7a2:	23 0f       	add	r18, r19
     7a4:	02 96       	adiw	r24, 0x02	; 2
     7a6:	a1 1d       	adc	r26, r1
     7a8:	b1 1d       	adc	r27, r1
     7aa:	20 93 66 02 	sts	0x0266, r18
     7ae:	80 93 67 02 	sts	0x0267, r24
     7b2:	90 93 68 02 	sts	0x0268, r25
     7b6:	a0 93 69 02 	sts	0x0269, r26
     7ba:	b0 93 6a 02 	sts	0x026A, r27
     7be:	80 91 6b 02 	lds	r24, 0x026B
     7c2:	90 91 6c 02 	lds	r25, 0x026C
     7c6:	a0 91 6d 02 	lds	r26, 0x026D
     7ca:	b0 91 6e 02 	lds	r27, 0x026E
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	a1 1d       	adc	r26, r1
     7d2:	b1 1d       	adc	r27, r1
     7d4:	80 93 6b 02 	sts	0x026B, r24
     7d8:	90 93 6c 02 	sts	0x026C, r25
     7dc:	a0 93 6d 02 	sts	0x026D, r26
     7e0:	b0 93 6e 02 	sts	0x026E, r27
     7e4:	bf 91       	pop	r27
     7e6:	af 91       	pop	r26
     7e8:	9f 91       	pop	r25
     7ea:	8f 91       	pop	r24
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
     7fa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     7fc:	f8 94       	cli
	m = timer0_overflow_count;
     7fe:	80 91 6b 02 	lds	r24, 0x026B
     802:	90 91 6c 02 	lds	r25, 0x026C
     806:	a0 91 6d 02 	lds	r26, 0x026D
     80a:	b0 91 6e 02 	lds	r27, 0x026E
	t = TCNT0;
     80e:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     810:	a8 9b       	sbis	0x15, 0	; 21
     812:	02 c0       	rjmp	.+4      	; 0x818 <_Z6microsv+0x1e>
     814:	2f 3f       	cpi	r18, 0xFF	; 255
     816:	a9 f4       	brne	.+42     	; 0x842 <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     818:	3f bf       	out	0x3f, r19	; 63
	
	sei();
     81a:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     81c:	ba 2f       	mov	r27, r26
     81e:	a9 2f       	mov	r26, r25
     820:	98 2f       	mov	r25, r24
     822:	88 27       	eor	r24, r24
     824:	82 0f       	add	r24, r18
     826:	91 1d       	adc	r25, r1
     828:	a1 1d       	adc	r26, r1
     82a:	b1 1d       	adc	r27, r1
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	66 0f       	add	r22, r22
     832:	77 1f       	adc	r23, r23
     834:	88 1f       	adc	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	66 0f       	add	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	88 1f       	adc	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	a1 1d       	adc	r26, r1
     846:	b1 1d       	adc	r27, r1
     848:	e7 cf       	rjmp	.-50     	; 0x818 <_Z6microsv+0x1e>

0000084a <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
     850:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	85 bd       	out	0x25, r24	; 37
     856:	08 95       	ret

00000858 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
     85e:	cb 01       	movw	r24, r22
     860:	aa 27       	eor	r26, r26
     862:	97 fd       	sbrc	r25, 7
     864:	a0 95       	com	r26
     866:	ba 2f       	mov	r27, r26
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	aa 1f       	adc	r26, r26
     86e:	bb 1f       	adc	r27, r27
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	aa 1f       	adc	r26, r26
     876:	bb 1f       	adc	r27, r27
     878:	9c 01       	movw	r18, r24
     87a:	ad 01       	movw	r20, r26
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	44 1f       	adc	r20, r20
     882:	55 1f       	adc	r21, r21
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	44 1f       	adc	r20, r20
     88a:	55 1f       	adc	r21, r21
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	74 e2       	ldi	r23, 0x24	; 36
     890:	84 ef       	ldi	r24, 0xF4	; 244
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	15 d2       	rcall	.+1066   	; 0xcc0 <__udivmodsi4>
     896:	21 50       	subi	r18, 0x01	; 1
     898:	31 09       	sbc	r19, r1
     89a:	20 97       	sbiw	r28, 0x00	; 0
     89c:	59 f4       	brne	.+22     	; 0x8b4 <_Z10USART_initii+0x5c>
     89e:	30 93 c5 00 	sts	0x00C5, r19
     8a2:	20 93 c4 00 	sts	0x00C4, r18
     8a6:	88 e1       	ldi	r24, 0x18	; 24
     8a8:	80 93 c1 00 	sts	0x00C1, r24
     8ac:	86 e0       	ldi	r24, 0x06	; 6
     8ae:	80 93 c2 00 	sts	0x00C2, r24
     8b2:	28 c0       	rjmp	.+80     	; 0x904 <_Z10USART_initii+0xac>
     8b4:	c1 30       	cpi	r28, 0x01	; 1
     8b6:	d1 05       	cpc	r29, r1
     8b8:	59 f4       	brne	.+22     	; 0x8d0 <_Z10USART_initii+0x78>
     8ba:	30 93 cd 00 	sts	0x00CD, r19
     8be:	20 93 cc 00 	sts	0x00CC, r18
     8c2:	88 e1       	ldi	r24, 0x18	; 24
     8c4:	80 93 c9 00 	sts	0x00C9, r24
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	80 93 ca 00 	sts	0x00CA, r24
     8ce:	1a c0       	rjmp	.+52     	; 0x904 <_Z10USART_initii+0xac>
     8d0:	c2 30       	cpi	r28, 0x02	; 2
     8d2:	d1 05       	cpc	r29, r1
     8d4:	59 f4       	brne	.+22     	; 0x8ec <_Z10USART_initii+0x94>
     8d6:	30 93 d5 00 	sts	0x00D5, r19
     8da:	20 93 d4 00 	sts	0x00D4, r18
     8de:	88 e1       	ldi	r24, 0x18	; 24
     8e0:	80 93 d1 00 	sts	0x00D1, r24
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	80 93 d2 00 	sts	0x00D2, r24
     8ea:	0c c0       	rjmp	.+24     	; 0x904 <_Z10USART_initii+0xac>
     8ec:	23 97       	sbiw	r28, 0x03	; 3
     8ee:	51 f4       	brne	.+20     	; 0x904 <_Z10USART_initii+0xac>
     8f0:	30 93 35 01 	sts	0x0135, r19
     8f4:	20 93 34 01 	sts	0x0134, r18
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	80 93 31 01 	sts	0x0131, r24
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	80 93 32 01 	sts	0x0132, r24
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_Z10USART_sendih>:
     90a:	00 97       	sbiw	r24, 0x00	; 0
     90c:	41 f4       	brne	.+16     	; 0x91e <_Z10USART_sendih+0x14>
     90e:	e0 ec       	ldi	r30, 0xC0	; 192
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	85 ff       	sbrs	r24, 5
     916:	fd cf       	rjmp	.-6      	; 0x912 <_Z10USART_sendih+0x8>
     918:	60 93 c6 00 	sts	0x00C6, r22
     91c:	08 95       	ret
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	91 05       	cpc	r25, r1
     922:	41 f4       	brne	.+16     	; 0x934 <_Z10USART_sendih+0x2a>
     924:	e8 ec       	ldi	r30, 0xC8	; 200
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	85 ff       	sbrs	r24, 5
     92c:	fd cf       	rjmp	.-6      	; 0x928 <_Z10USART_sendih+0x1e>
     92e:	60 93 ce 00 	sts	0x00CE, r22
     932:	08 95       	ret
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	91 05       	cpc	r25, r1
     938:	41 f4       	brne	.+16     	; 0x94a <_Z10USART_sendih+0x40>
     93a:	e0 ed       	ldi	r30, 0xD0	; 208
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	85 ff       	sbrs	r24, 5
     942:	fd cf       	rjmp	.-6      	; 0x93e <_Z10USART_sendih+0x34>
     944:	60 93 d6 00 	sts	0x00D6, r22
     948:	08 95       	ret
     94a:	03 97       	sbiw	r24, 0x03	; 3
     94c:	39 f4       	brne	.+14     	; 0x95c <_Z10USART_sendih+0x52>
     94e:	e0 e3       	ldi	r30, 0x30	; 48
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	80 81       	ld	r24, Z
     954:	85 ff       	sbrs	r24, 5
     956:	fd cf       	rjmp	.-6      	; 0x952 <_Z10USART_sendih+0x48>
     958:	60 93 36 01 	sts	0x0136, r22
     95c:	08 95       	ret

0000095e <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	8c 01       	movw	r16, r24
     968:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     96a:	68 81       	ld	r22, Y
     96c:	66 23       	and	r22, r22
     96e:	31 f0       	breq	.+12     	; 0x97c <_Z15USART_putstringiPKc+0x1e>
     970:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
     972:	c8 01       	movw	r24, r16
     974:	ca df       	rcall	.-108    	; 0x90a <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     976:	69 91       	ld	r22, Y+
     978:	61 11       	cpse	r22, r1
     97a:	fb cf       	rjmp	.-10     	; 0x972 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <_Z10initialisev>:
    }
}

void initialise()
{
	USART_init(USART_PC,9600);
     986:	60 e8       	ldi	r22, 0x80	; 128
     988:	75 e2       	ldi	r23, 0x25	; 37
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	64 df       	rcall	.-312    	; 0x858 <_Z10USART_initii>
	initTimers();
     990:	5c df       	rcall	.-328    	; 0x84a <_Z10initTimersv>
	//gps_init();
	//rx_init();
	//quad_output_init();
	altimeter_init();
     992:	c0 dc       	rcall	.-1664   	; 0x314 <_Z14altimeter_initv>
	
	debug_println("Initialization complete!");
     994:	8a e1       	ldi	r24, 0x1A	; 26
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	da cd       	rjmp	.-1100   	; 0x54e <_Z13debug_printlnPKc>
     99a:	08 95       	ret

0000099c <main>:
float compass_get_heading();	//returns current heading, formatted as degrees relative to North (0-360)


int main(void)
{
	initialise();
     99c:	f4 df       	rcall	.-24     	; 0x986 <_Z10initialisev>
	
	debug_printf(mpl_getAlt(altimeter_get_status()));
     99e:	c7 dc       	rcall	.-1650   	; 0x32e <_Z20altimeter_get_statusv>
     9a0:	e5 dc       	rcall	.-1590   	; 0x36c <_Z10mpl_getAlth>
     9a2:	df dd       	rcall	.-1090   	; 0x562 <_Z12debug_printff>
	debug_print("\n\r");
     9a4:	87 e1       	ldi	r24, 0x17	; 23
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	cd dd       	rcall	.-1126   	; 0x544 <_Z11debug_printPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	87 ea       	ldi	r24, 0xA7	; 167
     9ae:	91 e6       	ldi	r25, 0x61	; 97
     9b0:	21 50       	subi	r18, 0x01	; 1
     9b2:	80 40       	sbci	r24, 0x00	; 0
     9b4:	90 40       	sbci	r25, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <main+0x14>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <main+0x1e>
     9ba:	00 00       	nop
    while(1)
    {
		_delay_ms(2000);
		debug_printf(mpl_getAlt(altimeter_get_status()));
     9bc:	b8 dc       	rcall	.-1680   	; 0x32e <_Z20altimeter_get_statusv>
     9be:	d6 dc       	rcall	.-1620   	; 0x36c <_Z10mpl_getAlth>
     9c0:	d0 dd       	rcall	.-1120   	; 0x562 <_Z12debug_printff>
     9c2:	f3 cf       	rjmp	.-26     	; 0x9aa <main+0xe>

000009c4 <__subsf3>:
     9c4:	50 58       	subi	r21, 0x80	; 128

000009c6 <__addsf3>:
     9c6:	bb 27       	eor	r27, r27
     9c8:	aa 27       	eor	r26, r26
     9ca:	0e d0       	rcall	.+28     	; 0x9e8 <__addsf3x>
     9cc:	dc c0       	rjmp	.+440    	; 0xb86 <__fp_round>
     9ce:	cd d0       	rcall	.+410    	; 0xb6a <__fp_pscA>
     9d0:	30 f0       	brcs	.+12     	; 0x9de <__addsf3+0x18>
     9d2:	d2 d0       	rcall	.+420    	; 0xb78 <__fp_pscB>
     9d4:	20 f0       	brcs	.+8      	; 0x9de <__addsf3+0x18>
     9d6:	31 f4       	brne	.+12     	; 0x9e4 <__addsf3+0x1e>
     9d8:	9f 3f       	cpi	r25, 0xFF	; 255
     9da:	11 f4       	brne	.+4      	; 0x9e0 <__addsf3+0x1a>
     9dc:	1e f4       	brtc	.+6      	; 0x9e4 <__addsf3+0x1e>
     9de:	c2 c0       	rjmp	.+388    	; 0xb64 <__fp_nan>
     9e0:	0e f4       	brtc	.+2      	; 0x9e4 <__addsf3+0x1e>
     9e2:	e0 95       	com	r30
     9e4:	e7 fb       	bst	r30, 7
     9e6:	b8 c0       	rjmp	.+368    	; 0xb58 <__fp_inf>

000009e8 <__addsf3x>:
     9e8:	e9 2f       	mov	r30, r25
     9ea:	de d0       	rcall	.+444    	; 0xba8 <__fp_split3>
     9ec:	80 f3       	brcs	.-32     	; 0x9ce <__addsf3+0x8>
     9ee:	ba 17       	cp	r27, r26
     9f0:	62 07       	cpc	r22, r18
     9f2:	73 07       	cpc	r23, r19
     9f4:	84 07       	cpc	r24, r20
     9f6:	95 07       	cpc	r25, r21
     9f8:	18 f0       	brcs	.+6      	; 0xa00 <__addsf3x+0x18>
     9fa:	71 f4       	brne	.+28     	; 0xa18 <__addsf3x+0x30>
     9fc:	9e f5       	brtc	.+102    	; 0xa64 <__addsf3x+0x7c>
     9fe:	f6 c0       	rjmp	.+492    	; 0xbec <__fp_zero>
     a00:	0e f4       	brtc	.+2      	; 0xa04 <__addsf3x+0x1c>
     a02:	e0 95       	com	r30
     a04:	0b 2e       	mov	r0, r27
     a06:	ba 2f       	mov	r27, r26
     a08:	a0 2d       	mov	r26, r0
     a0a:	0b 01       	movw	r0, r22
     a0c:	b9 01       	movw	r22, r18
     a0e:	90 01       	movw	r18, r0
     a10:	0c 01       	movw	r0, r24
     a12:	ca 01       	movw	r24, r20
     a14:	a0 01       	movw	r20, r0
     a16:	11 24       	eor	r1, r1
     a18:	ff 27       	eor	r31, r31
     a1a:	59 1b       	sub	r21, r25
     a1c:	99 f0       	breq	.+38     	; 0xa44 <__addsf3x+0x5c>
     a1e:	59 3f       	cpi	r21, 0xF9	; 249
     a20:	50 f4       	brcc	.+20     	; 0xa36 <__addsf3x+0x4e>
     a22:	50 3e       	cpi	r21, 0xE0	; 224
     a24:	68 f1       	brcs	.+90     	; 0xa80 <__addsf3x+0x98>
     a26:	1a 16       	cp	r1, r26
     a28:	f0 40       	sbci	r31, 0x00	; 0
     a2a:	a2 2f       	mov	r26, r18
     a2c:	23 2f       	mov	r18, r19
     a2e:	34 2f       	mov	r19, r20
     a30:	44 27       	eor	r20, r20
     a32:	58 5f       	subi	r21, 0xF8	; 248
     a34:	f3 cf       	rjmp	.-26     	; 0xa1c <__addsf3x+0x34>
     a36:	46 95       	lsr	r20
     a38:	37 95       	ror	r19
     a3a:	27 95       	ror	r18
     a3c:	a7 95       	ror	r26
     a3e:	f0 40       	sbci	r31, 0x00	; 0
     a40:	53 95       	inc	r21
     a42:	c9 f7       	brne	.-14     	; 0xa36 <__addsf3x+0x4e>
     a44:	7e f4       	brtc	.+30     	; 0xa64 <__addsf3x+0x7c>
     a46:	1f 16       	cp	r1, r31
     a48:	ba 0b       	sbc	r27, r26
     a4a:	62 0b       	sbc	r22, r18
     a4c:	73 0b       	sbc	r23, r19
     a4e:	84 0b       	sbc	r24, r20
     a50:	ba f0       	brmi	.+46     	; 0xa80 <__addsf3x+0x98>
     a52:	91 50       	subi	r25, 0x01	; 1
     a54:	a1 f0       	breq	.+40     	; 0xa7e <__addsf3x+0x96>
     a56:	ff 0f       	add	r31, r31
     a58:	bb 1f       	adc	r27, r27
     a5a:	66 1f       	adc	r22, r22
     a5c:	77 1f       	adc	r23, r23
     a5e:	88 1f       	adc	r24, r24
     a60:	c2 f7       	brpl	.-16     	; 0xa52 <__addsf3x+0x6a>
     a62:	0e c0       	rjmp	.+28     	; 0xa80 <__addsf3x+0x98>
     a64:	ba 0f       	add	r27, r26
     a66:	62 1f       	adc	r22, r18
     a68:	73 1f       	adc	r23, r19
     a6a:	84 1f       	adc	r24, r20
     a6c:	48 f4       	brcc	.+18     	; 0xa80 <__addsf3x+0x98>
     a6e:	87 95       	ror	r24
     a70:	77 95       	ror	r23
     a72:	67 95       	ror	r22
     a74:	b7 95       	ror	r27
     a76:	f7 95       	ror	r31
     a78:	9e 3f       	cpi	r25, 0xFE	; 254
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0x96>
     a7c:	b3 cf       	rjmp	.-154    	; 0x9e4 <__addsf3+0x1e>
     a7e:	93 95       	inc	r25
     a80:	88 0f       	add	r24, r24
     a82:	08 f0       	brcs	.+2      	; 0xa86 <__addsf3x+0x9e>
     a84:	99 27       	eor	r25, r25
     a86:	ee 0f       	add	r30, r30
     a88:	97 95       	ror	r25
     a8a:	87 95       	ror	r24
     a8c:	08 95       	ret

00000a8e <__cmpsf2>:
     a8e:	40 d0       	rcall	.+128    	; 0xb10 <__fp_cmp>
     a90:	08 f4       	brcc	.+2      	; 0xa94 <__cmpsf2+0x6>
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	08 95       	ret

00000a96 <__floatunsisf>:
     a96:	e8 94       	clt
     a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
     a9a:	97 fb       	bst	r25, 7
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	99 23       	and	r25, r25
     aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
     ab0:	f9 2f       	mov	r31, r25
     ab2:	96 e9       	ldi	r25, 0x96	; 150
     ab4:	bb 27       	eor	r27, r27
     ab6:	93 95       	inc	r25
     ab8:	f6 95       	lsr	r31
     aba:	87 95       	ror	r24
     abc:	77 95       	ror	r23
     abe:	67 95       	ror	r22
     ac0:	b7 95       	ror	r27
     ac2:	f1 11       	cpse	r31, r1
     ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
     ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
     ac8:	bb 0f       	add	r27, r27
     aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
     acc:	60 ff       	sbrs	r22, 0
     ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
     ad0:	6f 5f       	subi	r22, 0xFF	; 255
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	8f 4f       	sbci	r24, 0xFF	; 255
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
     ada:	88 23       	and	r24, r24
     adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
     ade:	96 e9       	ldi	r25, 0x96	; 150
     ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
     ae2:	77 23       	and	r23, r23
     ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
     ae6:	9e e8       	ldi	r25, 0x8E	; 142
     ae8:	87 2f       	mov	r24, r23
     aea:	76 2f       	mov	r23, r22
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
     aee:	66 23       	and	r22, r22
     af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
     af2:	96 e8       	ldi	r25, 0x86	; 134
     af4:	86 2f       	mov	r24, r22
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
     afc:	9a 95       	dec	r25
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
     b06:	88 0f       	add	r24, r24
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	97 f9       	bld	r25, 7
     b0e:	08 95       	ret

00000b10 <__fp_cmp>:
     b10:	99 0f       	add	r25, r25
     b12:	00 08       	sbc	r0, r0
     b14:	55 0f       	add	r21, r21
     b16:	aa 0b       	sbc	r26, r26
     b18:	e0 e8       	ldi	r30, 0x80	; 128
     b1a:	fe ef       	ldi	r31, 0xFE	; 254
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	e8 07       	cpc	r30, r24
     b22:	f9 07       	cpc	r31, r25
     b24:	c0 f0       	brcs	.+48     	; 0xb56 <__fp_cmp+0x46>
     b26:	12 16       	cp	r1, r18
     b28:	13 06       	cpc	r1, r19
     b2a:	e4 07       	cpc	r30, r20
     b2c:	f5 07       	cpc	r31, r21
     b2e:	98 f0       	brcs	.+38     	; 0xb56 <__fp_cmp+0x46>
     b30:	62 1b       	sub	r22, r18
     b32:	73 0b       	sbc	r23, r19
     b34:	84 0b       	sbc	r24, r20
     b36:	95 0b       	sbc	r25, r21
     b38:	39 f4       	brne	.+14     	; 0xb48 <__fp_cmp+0x38>
     b3a:	0a 26       	eor	r0, r26
     b3c:	61 f0       	breq	.+24     	; 0xb56 <__fp_cmp+0x46>
     b3e:	23 2b       	or	r18, r19
     b40:	24 2b       	or	r18, r20
     b42:	25 2b       	or	r18, r21
     b44:	21 f4       	brne	.+8      	; 0xb4e <__fp_cmp+0x3e>
     b46:	08 95       	ret
     b48:	0a 26       	eor	r0, r26
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__fp_cmp+0x3e>
     b4c:	a1 40       	sbci	r26, 0x01	; 1
     b4e:	a6 95       	lsr	r26
     b50:	8f ef       	ldi	r24, 0xFF	; 255
     b52:	81 1d       	adc	r24, r1
     b54:	81 1d       	adc	r24, r1
     b56:	08 95       	ret

00000b58 <__fp_inf>:
     b58:	97 f9       	bld	r25, 7
     b5a:	9f 67       	ori	r25, 0x7F	; 127
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	08 95       	ret

00000b64 <__fp_nan>:
     b64:	9f ef       	ldi	r25, 0xFF	; 255
     b66:	80 ec       	ldi	r24, 0xC0	; 192
     b68:	08 95       	ret

00000b6a <__fp_pscA>:
     b6a:	00 24       	eor	r0, r0
     b6c:	0a 94       	dec	r0
     b6e:	16 16       	cp	r1, r22
     b70:	17 06       	cpc	r1, r23
     b72:	18 06       	cpc	r1, r24
     b74:	09 06       	cpc	r0, r25
     b76:	08 95       	ret

00000b78 <__fp_pscB>:
     b78:	00 24       	eor	r0, r0
     b7a:	0a 94       	dec	r0
     b7c:	12 16       	cp	r1, r18
     b7e:	13 06       	cpc	r1, r19
     b80:	14 06       	cpc	r1, r20
     b82:	05 06       	cpc	r0, r21
     b84:	08 95       	ret

00000b86 <__fp_round>:
     b86:	09 2e       	mov	r0, r25
     b88:	03 94       	inc	r0
     b8a:	00 0c       	add	r0, r0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__fp_round+0xc>
     b8e:	88 23       	and	r24, r24
     b90:	52 f0       	brmi	.+20     	; 0xba6 <__fp_round+0x20>
     b92:	bb 0f       	add	r27, r27
     b94:	40 f4       	brcc	.+16     	; 0xba6 <__fp_round+0x20>
     b96:	bf 2b       	or	r27, r31
     b98:	11 f4       	brne	.+4      	; 0xb9e <__fp_round+0x18>
     b9a:	60 ff       	sbrs	r22, 0
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__fp_round+0x20>
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	8f 4f       	sbci	r24, 0xFF	; 255
     ba4:	9f 4f       	sbci	r25, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <__fp_split3>:
     ba8:	57 fd       	sbrc	r21, 7
     baa:	90 58       	subi	r25, 0x80	; 128
     bac:	44 0f       	add	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <__fp_splitA+0x10>
     bb2:	5f 3f       	cpi	r21, 0xFF	; 255
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <__fp_splitA+0x1a>
     bb6:	47 95       	ror	r20

00000bb8 <__fp_splitA>:
     bb8:	88 0f       	add	r24, r24
     bba:	97 fb       	bst	r25, 7
     bbc:	99 1f       	adc	r25, r25
     bbe:	61 f0       	breq	.+24     	; 0xbd8 <__fp_splitA+0x20>
     bc0:	9f 3f       	cpi	r25, 0xFF	; 255
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <__fp_splitA+0x2a>
     bc4:	87 95       	ror	r24
     bc6:	08 95       	ret
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	14 06       	cpc	r1, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <__fp_split3+0xe>
     bd2:	46 95       	lsr	r20
     bd4:	f1 df       	rcall	.-30     	; 0xbb8 <__fp_splitA>
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <__fp_splitA+0x30>
     bd8:	16 16       	cp	r1, r22
     bda:	17 06       	cpc	r1, r23
     bdc:	18 06       	cpc	r1, r24
     bde:	99 1f       	adc	r25, r25
     be0:	f1 cf       	rjmp	.-30     	; 0xbc4 <__fp_splitA+0xc>
     be2:	86 95       	lsr	r24
     be4:	71 05       	cpc	r23, r1
     be6:	61 05       	cpc	r22, r1
     be8:	08 94       	sec
     bea:	08 95       	ret

00000bec <__fp_zero>:
     bec:	e8 94       	clt

00000bee <__fp_szero>:
     bee:	bb 27       	eor	r27, r27
     bf0:	66 27       	eor	r22, r22
     bf2:	77 27       	eor	r23, r23
     bf4:	cb 01       	movw	r24, r22
     bf6:	97 f9       	bld	r25, 7
     bf8:	08 95       	ret

00000bfa <__mulsf3>:
     bfa:	0b d0       	rcall	.+22     	; 0xc12 <__mulsf3x>
     bfc:	c4 cf       	rjmp	.-120    	; 0xb86 <__fp_round>
     bfe:	b5 df       	rcall	.-150    	; 0xb6a <__fp_pscA>
     c00:	28 f0       	brcs	.+10     	; 0xc0c <__mulsf3+0x12>
     c02:	ba df       	rcall	.-140    	; 0xb78 <__fp_pscB>
     c04:	18 f0       	brcs	.+6      	; 0xc0c <__mulsf3+0x12>
     c06:	95 23       	and	r25, r21
     c08:	09 f0       	breq	.+2      	; 0xc0c <__mulsf3+0x12>
     c0a:	a6 cf       	rjmp	.-180    	; 0xb58 <__fp_inf>
     c0c:	ab cf       	rjmp	.-170    	; 0xb64 <__fp_nan>
     c0e:	11 24       	eor	r1, r1
     c10:	ee cf       	rjmp	.-36     	; 0xbee <__fp_szero>

00000c12 <__mulsf3x>:
     c12:	ca df       	rcall	.-108    	; 0xba8 <__fp_split3>
     c14:	a0 f3       	brcs	.-24     	; 0xbfe <__mulsf3+0x4>

00000c16 <__mulsf3_pse>:
     c16:	95 9f       	mul	r25, r21
     c18:	d1 f3       	breq	.-12     	; 0xc0e <__mulsf3+0x14>
     c1a:	95 0f       	add	r25, r21
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	55 1f       	adc	r21, r21
     c20:	62 9f       	mul	r22, r18
     c22:	f0 01       	movw	r30, r0
     c24:	72 9f       	mul	r23, r18
     c26:	bb 27       	eor	r27, r27
     c28:	f0 0d       	add	r31, r0
     c2a:	b1 1d       	adc	r27, r1
     c2c:	63 9f       	mul	r22, r19
     c2e:	aa 27       	eor	r26, r26
     c30:	f0 0d       	add	r31, r0
     c32:	b1 1d       	adc	r27, r1
     c34:	aa 1f       	adc	r26, r26
     c36:	64 9f       	mul	r22, r20
     c38:	66 27       	eor	r22, r22
     c3a:	b0 0d       	add	r27, r0
     c3c:	a1 1d       	adc	r26, r1
     c3e:	66 1f       	adc	r22, r22
     c40:	82 9f       	mul	r24, r18
     c42:	22 27       	eor	r18, r18
     c44:	b0 0d       	add	r27, r0
     c46:	a1 1d       	adc	r26, r1
     c48:	62 1f       	adc	r22, r18
     c4a:	73 9f       	mul	r23, r19
     c4c:	b0 0d       	add	r27, r0
     c4e:	a1 1d       	adc	r26, r1
     c50:	62 1f       	adc	r22, r18
     c52:	83 9f       	mul	r24, r19
     c54:	a0 0d       	add	r26, r0
     c56:	61 1d       	adc	r22, r1
     c58:	22 1f       	adc	r18, r18
     c5a:	74 9f       	mul	r23, r20
     c5c:	33 27       	eor	r19, r19
     c5e:	a0 0d       	add	r26, r0
     c60:	61 1d       	adc	r22, r1
     c62:	23 1f       	adc	r18, r19
     c64:	84 9f       	mul	r24, r20
     c66:	60 0d       	add	r22, r0
     c68:	21 1d       	adc	r18, r1
     c6a:	82 2f       	mov	r24, r18
     c6c:	76 2f       	mov	r23, r22
     c6e:	6a 2f       	mov	r22, r26
     c70:	11 24       	eor	r1, r1
     c72:	9f 57       	subi	r25, 0x7F	; 127
     c74:	50 40       	sbci	r21, 0x00	; 0
     c76:	8a f0       	brmi	.+34     	; 0xc9a <__mulsf3_pse+0x84>
     c78:	e1 f0       	breq	.+56     	; 0xcb2 <__mulsf3_pse+0x9c>
     c7a:	88 23       	and	r24, r24
     c7c:	4a f0       	brmi	.+18     	; 0xc90 <__mulsf3_pse+0x7a>
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	bb 1f       	adc	r27, r27
     c84:	66 1f       	adc	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	88 1f       	adc	r24, r24
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	50 40       	sbci	r21, 0x00	; 0
     c8e:	a9 f7       	brne	.-22     	; 0xc7a <__mulsf3_pse+0x64>
     c90:	9e 3f       	cpi	r25, 0xFE	; 254
     c92:	51 05       	cpc	r21, r1
     c94:	70 f0       	brcs	.+28     	; 0xcb2 <__mulsf3_pse+0x9c>
     c96:	60 cf       	rjmp	.-320    	; 0xb58 <__fp_inf>
     c98:	aa cf       	rjmp	.-172    	; 0xbee <__fp_szero>
     c9a:	5f 3f       	cpi	r21, 0xFF	; 255
     c9c:	ec f3       	brlt	.-6      	; 0xc98 <__mulsf3_pse+0x82>
     c9e:	98 3e       	cpi	r25, 0xE8	; 232
     ca0:	dc f3       	brlt	.-10     	; 0xc98 <__mulsf3_pse+0x82>
     ca2:	86 95       	lsr	r24
     ca4:	77 95       	ror	r23
     ca6:	67 95       	ror	r22
     ca8:	b7 95       	ror	r27
     caa:	f7 95       	ror	r31
     cac:	e7 95       	ror	r30
     cae:	9f 5f       	subi	r25, 0xFF	; 255
     cb0:	c1 f7       	brne	.-16     	; 0xca2 <__mulsf3_pse+0x8c>
     cb2:	fe 2b       	or	r31, r30
     cb4:	88 0f       	add	r24, r24
     cb6:	91 1d       	adc	r25, r1
     cb8:	96 95       	lsr	r25
     cba:	87 95       	ror	r24
     cbc:	97 f9       	bld	r25, 7
     cbe:	08 95       	ret

00000cc0 <__udivmodsi4>:
     cc0:	a1 e2       	ldi	r26, 0x21	; 33
     cc2:	1a 2e       	mov	r1, r26
     cc4:	aa 1b       	sub	r26, r26
     cc6:	bb 1b       	sub	r27, r27
     cc8:	fd 01       	movw	r30, r26
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <__udivmodsi4_ep>

00000ccc <__udivmodsi4_loop>:
     ccc:	aa 1f       	adc	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	ee 1f       	adc	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	a2 17       	cp	r26, r18
     cd6:	b3 07       	cpc	r27, r19
     cd8:	e4 07       	cpc	r30, r20
     cda:	f5 07       	cpc	r31, r21
     cdc:	20 f0       	brcs	.+8      	; 0xce6 <__udivmodsi4_ep>
     cde:	a2 1b       	sub	r26, r18
     ce0:	b3 0b       	sbc	r27, r19
     ce2:	e4 0b       	sbc	r30, r20
     ce4:	f5 0b       	sbc	r31, r21

00000ce6 <__udivmodsi4_ep>:
     ce6:	66 1f       	adc	r22, r22
     ce8:	77 1f       	adc	r23, r23
     cea:	88 1f       	adc	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	1a 94       	dec	r1
     cf0:	69 f7       	brne	.-38     	; 0xccc <__udivmodsi4_loop>
     cf2:	60 95       	com	r22
     cf4:	70 95       	com	r23
     cf6:	80 95       	com	r24
     cf8:	90 95       	com	r25
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	bd 01       	movw	r22, r26
     d00:	cf 01       	movw	r24, r30
     d02:	08 95       	ret

00000d04 <dtostrf>:
     d04:	ef 92       	push	r14
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	e8 01       	movw	r28, r16
     d10:	47 ff       	sbrs	r20, 7
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <dtostrf+0x14>
     d14:	34 e1       	ldi	r19, 0x14	; 20
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <dtostrf+0x16>
     d18:	34 e0       	ldi	r19, 0x04	; 4
     d1a:	e4 2f       	mov	r30, r20
     d1c:	ff 27       	eor	r31, r31
     d1e:	e7 fd       	sbrc	r30, 7
     d20:	f0 95       	com	r31
     d22:	f7 ff       	sbrs	r31, 7
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <dtostrf+0x28>
     d26:	f1 95       	neg	r31
     d28:	e1 95       	neg	r30
     d2a:	f1 09       	sbc	r31, r1
     d2c:	e3 2e       	mov	r14, r19
     d2e:	02 2f       	mov	r16, r18
     d30:	2e 2f       	mov	r18, r30
     d32:	ae 01       	movw	r20, r28
     d34:	07 d0       	rcall	.+14     	; 0xd44 <dtoa_prf>
     d36:	ce 01       	movw	r24, r28
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ef 90       	pop	r14
     d42:	08 95       	ret

00000d44 <dtoa_prf>:
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	9f 92       	push	r9
     d4a:	af 92       	push	r10
     d4c:	bf 92       	push	r11
     d4e:	cf 92       	push	r12
     d50:	df 92       	push	r13
     d52:	ef 92       	push	r14
     d54:	ff 92       	push	r15
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	29 97       	sbiw	r28, 0x09	; 9
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	6a 01       	movw	r12, r20
     d70:	b2 2e       	mov	r11, r18
     d72:	10 2f       	mov	r17, r16
     d74:	0c 33       	cpi	r16, 0x3C	; 60
     d76:	20 f4       	brcc	.+8      	; 0xd80 <dtoa_prf+0x3c>
     d78:	ff 24       	eor	r15, r15
     d7a:	f3 94       	inc	r15
     d7c:	f0 0e       	add	r15, r16
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <dtoa_prf+0x40>
     d80:	4c e3       	ldi	r20, 0x3C	; 60
     d82:	f4 2e       	mov	r15, r20
     d84:	0f 2d       	mov	r16, r15
     d86:	27 e0       	ldi	r18, 0x07	; 7
     d88:	ae 01       	movw	r20, r28
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	57 d1       	rcall	.+686    	; 0x103e <__ftoa_engine>
     d90:	79 81       	ldd	r23, Y+1	; 0x01
     d92:	27 2f       	mov	r18, r23
     d94:	29 70       	andi	r18, 0x09	; 9
     d96:	21 30       	cpi	r18, 0x01	; 1
     d98:	31 f0       	breq	.+12     	; 0xda6 <dtoa_prf+0x62>
     d9a:	e1 fc       	sbrc	r14, 1
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <dtoa_prf+0x66>
     d9e:	e0 fc       	sbrc	r14, 0
     da0:	06 c0       	rjmp	.+12     	; 0xdae <dtoa_prf+0x6a>
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	05 c0       	rjmp	.+10     	; 0xdb0 <dtoa_prf+0x6c>
     da6:	6d e2       	ldi	r22, 0x2D	; 45
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <dtoa_prf+0x6c>
     daa:	6b e2       	ldi	r22, 0x2B	; 43
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <dtoa_prf+0x6c>
     dae:	60 e2       	ldi	r22, 0x20	; 32
     db0:	ae 2d       	mov	r26, r14
     db2:	a0 71       	andi	r26, 0x10	; 16
     db4:	73 ff       	sbrs	r23, 3
     db6:	36 c0       	rjmp	.+108    	; 0xe24 <dtoa_prf+0xe0>
     db8:	66 23       	and	r22, r22
     dba:	11 f0       	breq	.+4      	; 0xdc0 <dtoa_prf+0x7c>
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <dtoa_prf+0x7e>
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	8b 15       	cp	r24, r11
     dc4:	10 f4       	brcc	.+4      	; 0xdca <dtoa_prf+0x86>
     dc6:	b8 1a       	sub	r11, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <dtoa_prf+0x88>
     dca:	b1 2c       	mov	r11, r1
     dcc:	a1 11       	cpse	r26, r1
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <dtoa_prf+0xa2>
     dd0:	f6 01       	movw	r30, r12
     dd2:	8b 2d       	mov	r24, r11
     dd4:	90 e2       	ldi	r25, 0x20	; 32
     dd6:	88 23       	and	r24, r24
     dd8:	19 f0       	breq	.+6      	; 0xde0 <dtoa_prf+0x9c>
     dda:	91 93       	st	Z+, r25
     ddc:	81 50       	subi	r24, 0x01	; 1
     dde:	fb cf       	rjmp	.-10     	; 0xdd6 <dtoa_prf+0x92>
     de0:	cb 0c       	add	r12, r11
     de2:	d1 1c       	adc	r13, r1
     de4:	b1 2c       	mov	r11, r1
     de6:	66 23       	and	r22, r22
     de8:	31 f0       	breq	.+12     	; 0xdf6 <dtoa_prf+0xb2>
     dea:	f6 01       	movw	r30, r12
     dec:	60 83       	st	Z, r22
     dee:	96 01       	movw	r18, r12
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	69 01       	movw	r12, r18
     df6:	c6 01       	movw	r24, r12
     df8:	03 96       	adiw	r24, 0x03	; 3
     dfa:	e2 fe       	sbrs	r14, 2
     dfc:	05 c0       	rjmp	.+10     	; 0xe08 <dtoa_prf+0xc4>
     dfe:	2e e4       	ldi	r18, 0x4E	; 78
     e00:	f6 01       	movw	r30, r12
     e02:	20 83       	st	Z, r18
     e04:	31 e4       	ldi	r19, 0x41	; 65
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <dtoa_prf+0xcc>
     e08:	2e e6       	ldi	r18, 0x6E	; 110
     e0a:	f6 01       	movw	r30, r12
     e0c:	20 83       	st	Z, r18
     e0e:	31 e6       	ldi	r19, 0x61	; 97
     e10:	31 83       	std	Z+1, r19	; 0x01
     e12:	22 83       	std	Z+2, r18	; 0x02
     e14:	fc 01       	movw	r30, r24
     e16:	2b 2d       	mov	r18, r11
     e18:	30 e2       	ldi	r19, 0x20	; 32
     e1a:	22 23       	and	r18, r18
     e1c:	f1 f1       	breq	.+124    	; 0xe9a <dtoa_prf+0x156>
     e1e:	31 93       	st	Z+, r19
     e20:	21 50       	subi	r18, 0x01	; 1
     e22:	fb cf       	rjmp	.-10     	; 0xe1a <dtoa_prf+0xd6>
     e24:	72 ff       	sbrs	r23, 2
     e26:	40 c0       	rjmp	.+128    	; 0xea8 <dtoa_prf+0x164>
     e28:	66 23       	and	r22, r22
     e2a:	11 f0       	breq	.+4      	; 0xe30 <dtoa_prf+0xec>
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <dtoa_prf+0xee>
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	8b 15       	cp	r24, r11
     e34:	10 f4       	brcc	.+4      	; 0xe3a <dtoa_prf+0xf6>
     e36:	b8 1a       	sub	r11, r24
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <dtoa_prf+0xf8>
     e3a:	b1 2c       	mov	r11, r1
     e3c:	a1 11       	cpse	r26, r1
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <dtoa_prf+0x112>
     e40:	f6 01       	movw	r30, r12
     e42:	8b 2d       	mov	r24, r11
     e44:	90 e2       	ldi	r25, 0x20	; 32
     e46:	88 23       	and	r24, r24
     e48:	19 f0       	breq	.+6      	; 0xe50 <dtoa_prf+0x10c>
     e4a:	91 93       	st	Z+, r25
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	fb cf       	rjmp	.-10     	; 0xe46 <dtoa_prf+0x102>
     e50:	cb 0c       	add	r12, r11
     e52:	d1 1c       	adc	r13, r1
     e54:	b1 2c       	mov	r11, r1
     e56:	66 23       	and	r22, r22
     e58:	31 f0       	breq	.+12     	; 0xe66 <dtoa_prf+0x122>
     e5a:	f6 01       	movw	r30, r12
     e5c:	60 83       	st	Z, r22
     e5e:	96 01       	movw	r18, r12
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	69 01       	movw	r12, r18
     e66:	c6 01       	movw	r24, r12
     e68:	03 96       	adiw	r24, 0x03	; 3
     e6a:	e2 fe       	sbrs	r14, 2
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <dtoa_prf+0x138>
     e6e:	29 e4       	ldi	r18, 0x49	; 73
     e70:	f6 01       	movw	r30, r12
     e72:	20 83       	st	Z, r18
     e74:	2e e4       	ldi	r18, 0x4E	; 78
     e76:	21 83       	std	Z+1, r18	; 0x01
     e78:	26 e4       	ldi	r18, 0x46	; 70
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <dtoa_prf+0x144>
     e7c:	29 e6       	ldi	r18, 0x69	; 105
     e7e:	f6 01       	movw	r30, r12
     e80:	20 83       	st	Z, r18
     e82:	2e e6       	ldi	r18, 0x6E	; 110
     e84:	21 83       	std	Z+1, r18	; 0x01
     e86:	26 e6       	ldi	r18, 0x66	; 102
     e88:	22 83       	std	Z+2, r18	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	2b 2d       	mov	r18, r11
     e8e:	30 e2       	ldi	r19, 0x20	; 32
     e90:	22 23       	and	r18, r18
     e92:	19 f0       	breq	.+6      	; 0xe9a <dtoa_prf+0x156>
     e94:	31 93       	st	Z+, r19
     e96:	21 50       	subi	r18, 0x01	; 1
     e98:	fb cf       	rjmp	.-10     	; 0xe90 <dtoa_prf+0x14c>
     e9a:	fc 01       	movw	r30, r24
     e9c:	eb 0d       	add	r30, r11
     e9e:	f1 1d       	adc	r31, r1
     ea0:	10 82       	st	Z, r1
     ea2:	8e ef       	ldi	r24, 0xFE	; 254
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	b7 c0       	rjmp	.+366    	; 0x1016 <dtoa_prf+0x2d2>
     ea8:	b1 e0       	ldi	r27, 0x01	; 1
     eaa:	61 11       	cpse	r22, r1
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <dtoa_prf+0x16c>
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	4b 2f       	mov	r20, r27
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	18 16       	cp	r1, r24
     eb6:	19 06       	cpc	r1, r25
     eb8:	24 f4       	brge	.+8      	; 0xec2 <dtoa_prf+0x17e>
     eba:	9c 01       	movw	r18, r24
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <dtoa_prf+0x182>
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	24 0f       	add	r18, r20
     ec8:	35 1f       	adc	r19, r21
     eca:	11 23       	and	r17, r17
     ecc:	29 f0       	breq	.+10     	; 0xed8 <dtoa_prf+0x194>
     ece:	41 2f       	mov	r20, r17
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	4f 5f       	subi	r20, 0xFF	; 255
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <dtoa_prf+0x198>
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	42 0f       	add	r20, r18
     ede:	53 1f       	adc	r21, r19
     ee0:	2b 2d       	mov	r18, r11
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	42 17       	cp	r20, r18
     ee6:	53 07       	cpc	r21, r19
     ee8:	14 f4       	brge	.+4      	; 0xeee <dtoa_prf+0x1aa>
     eea:	b4 1a       	sub	r11, r20
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <dtoa_prf+0x1ac>
     eee:	b1 2c       	mov	r11, r1
     ef0:	2e 2d       	mov	r18, r14
     ef2:	28 71       	andi	r18, 0x18	; 24
     ef4:	59 f4       	brne	.+22     	; 0xf0c <dtoa_prf+0x1c8>
     ef6:	f6 01       	movw	r30, r12
     ef8:	2b 2d       	mov	r18, r11
     efa:	30 e2       	ldi	r19, 0x20	; 32
     efc:	22 23       	and	r18, r18
     efe:	19 f0       	breq	.+6      	; 0xf06 <dtoa_prf+0x1c2>
     f00:	31 93       	st	Z+, r19
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	fb cf       	rjmp	.-10     	; 0xefc <dtoa_prf+0x1b8>
     f06:	cb 0c       	add	r12, r11
     f08:	d1 1c       	adc	r13, r1
     f0a:	b1 2c       	mov	r11, r1
     f0c:	bb 23       	and	r27, r27
     f0e:	31 f0       	breq	.+12     	; 0xf1c <dtoa_prf+0x1d8>
     f10:	f6 01       	movw	r30, r12
     f12:	60 83       	st	Z, r22
     f14:	96 01       	movw	r18, r12
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	69 01       	movw	r12, r18
     f1c:	a1 11       	cpse	r26, r1
     f1e:	0b c0       	rjmp	.+22     	; 0xf36 <dtoa_prf+0x1f2>
     f20:	f6 01       	movw	r30, r12
     f22:	2b 2d       	mov	r18, r11
     f24:	30 e3       	ldi	r19, 0x30	; 48
     f26:	22 23       	and	r18, r18
     f28:	19 f0       	breq	.+6      	; 0xf30 <dtoa_prf+0x1ec>
     f2a:	31 93       	st	Z+, r19
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	fb cf       	rjmp	.-10     	; 0xf26 <dtoa_prf+0x1e2>
     f30:	cb 0c       	add	r12, r11
     f32:	d1 1c       	adc	r13, r1
     f34:	b1 2c       	mov	r11, r1
     f36:	f8 0e       	add	r15, r24
     f38:	0a 81       	ldd	r16, Y+2	; 0x02
     f3a:	37 2f       	mov	r19, r23
     f3c:	30 71       	andi	r19, 0x10	; 16
     f3e:	a3 2e       	mov	r10, r19
     f40:	74 ff       	sbrs	r23, 4
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <dtoa_prf+0x206>
     f44:	01 33       	cpi	r16, 0x31	; 49
     f46:	09 f4       	brne	.+2      	; 0xf4a <dtoa_prf+0x206>
     f48:	fa 94       	dec	r15
     f4a:	1f 14       	cp	r1, r15
     f4c:	2c f4       	brge	.+10     	; 0xf58 <dtoa_prf+0x214>
     f4e:	2f 2d       	mov	r18, r15
     f50:	29 30       	cpi	r18, 0x09	; 9
     f52:	18 f0       	brcs	.+6      	; 0xf5a <dtoa_prf+0x216>
     f54:	28 e0       	ldi	r18, 0x08	; 8
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <dtoa_prf+0x216>
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	68 2f       	mov	r22, r24
     f5c:	39 2f       	mov	r19, r25
     f5e:	97 ff       	sbrs	r25, 7
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <dtoa_prf+0x222>
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	46 2f       	mov	r20, r22
     f68:	53 2f       	mov	r21, r19
     f6a:	61 2c       	mov	r6, r1
     f6c:	71 2c       	mov	r7, r1
     f6e:	3e e2       	ldi	r19, 0x2E	; 46
     f70:	93 2e       	mov	r9, r19
     f72:	bc 01       	movw	r22, r24
     f74:	62 1b       	sub	r22, r18
     f76:	71 09       	sbc	r23, r1
     f78:	9b 01       	movw	r18, r22
     f7a:	dc 01       	movw	r26, r24
     f7c:	a4 1b       	sub	r26, r20
     f7e:	b5 0b       	sbc	r27, r21
     f80:	e1 e0       	ldi	r30, 0x01	; 1
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	ec 0f       	add	r30, r28
     f86:	fd 1f       	adc	r31, r29
     f88:	ae 0f       	add	r26, r30
     f8a:	bf 1f       	adc	r27, r31
     f8c:	e1 2e       	mov	r14, r17
     f8e:	f1 2c       	mov	r15, r1
     f90:	f1 94       	neg	r15
     f92:	e1 94       	neg	r14
     f94:	f1 08       	sbc	r15, r1
     f96:	4f 3f       	cpi	r20, 0xFF	; 255
     f98:	ff ef       	ldi	r31, 0xFF	; 255
     f9a:	5f 07       	cpc	r21, r31
     f9c:	31 f4       	brne	.+12     	; 0xfaa <dtoa_prf+0x266>
     f9e:	f6 01       	movw	r30, r12
     fa0:	90 82       	st	Z, r9
     fa2:	b6 01       	movw	r22, r12
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	6b 01       	movw	r12, r22
     faa:	84 17       	cp	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	4c f0       	brlt	.+18     	; 0xfc2 <dtoa_prf+0x27e>
     fb0:	24 17       	cp	r18, r20
     fb2:	35 07       	cpc	r19, r21
     fb4:	34 f4       	brge	.+12     	; 0xfc2 <dtoa_prf+0x27e>
     fb6:	bd 01       	movw	r22, r26
     fb8:	66 0d       	add	r22, r6
     fba:	77 1d       	adc	r23, r7
     fbc:	fb 01       	movw	r30, r22
     fbe:	11 81       	ldd	r17, Z+1	; 0x01
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <dtoa_prf+0x280>
     fc2:	10 e3       	ldi	r17, 0x30	; 48
     fc4:	41 50       	subi	r20, 0x01	; 1
     fc6:	51 09       	sbc	r21, r1
     fc8:	ff ef       	ldi	r31, 0xFF	; 255
     fca:	6f 1a       	sub	r6, r31
     fcc:	7f 0a       	sbc	r7, r31
     fce:	b6 01       	movw	r22, r12
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	4e 15       	cp	r20, r14
     fd6:	5f 05       	cpc	r21, r15
     fd8:	24 f0       	brlt	.+8      	; 0xfe2 <dtoa_prf+0x29e>
     fda:	f6 01       	movw	r30, r12
     fdc:	10 83       	st	Z, r17
     fde:	6b 01       	movw	r12, r22
     fe0:	da cf       	rjmp	.-76     	; 0xf96 <dtoa_prf+0x252>
     fe2:	48 17       	cp	r20, r24
     fe4:	59 07       	cpc	r21, r25
     fe6:	39 f4       	brne	.+14     	; 0xff6 <dtoa_prf+0x2b2>
     fe8:	06 33       	cpi	r16, 0x36	; 54
     fea:	20 f4       	brcc	.+8      	; 0xff4 <dtoa_prf+0x2b0>
     fec:	05 33       	cpi	r16, 0x35	; 53
     fee:	19 f4       	brne	.+6      	; 0xff6 <dtoa_prf+0x2b2>
     ff0:	a1 10       	cpse	r10, r1
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <dtoa_prf+0x2b2>
     ff4:	11 e3       	ldi	r17, 0x31	; 49
     ff6:	f6 01       	movw	r30, r12
     ff8:	10 83       	st	Z, r17
     ffa:	fb 01       	movw	r30, r22
     ffc:	8b 2d       	mov	r24, r11
     ffe:	90 e2       	ldi	r25, 0x20	; 32
    1000:	88 23       	and	r24, r24
    1002:	19 f0       	breq	.+6      	; 0x100a <dtoa_prf+0x2c6>
    1004:	91 93       	st	Z+, r25
    1006:	81 50       	subi	r24, 0x01	; 1
    1008:	fb cf       	rjmp	.-10     	; 0x1000 <dtoa_prf+0x2bc>
    100a:	fb 01       	movw	r30, r22
    100c:	eb 0d       	add	r30, r11
    100e:	f1 1d       	adc	r31, r1
    1010:	10 82       	st	Z, r1
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	29 96       	adiw	r28, 0x09	; 9
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	08 95       	ret

0000103e <__ftoa_engine>:
    103e:	28 30       	cpi	r18, 0x08	; 8
    1040:	08 f0       	brcs	.+2      	; 0x1044 <__ftoa_engine+0x6>
    1042:	27 e0       	ldi	r18, 0x07	; 7
    1044:	33 27       	eor	r19, r19
    1046:	da 01       	movw	r26, r20
    1048:	99 0f       	add	r25, r25
    104a:	31 1d       	adc	r19, r1
    104c:	87 fd       	sbrc	r24, 7
    104e:	91 60       	ori	r25, 0x01	; 1
    1050:	00 96       	adiw	r24, 0x00	; 0
    1052:	61 05       	cpc	r22, r1
    1054:	71 05       	cpc	r23, r1
    1056:	39 f4       	brne	.+14     	; 0x1066 <__ftoa_engine+0x28>
    1058:	32 60       	ori	r19, 0x02	; 2
    105a:	2e 5f       	subi	r18, 0xFE	; 254
    105c:	3d 93       	st	X+, r19
    105e:	30 e3       	ldi	r19, 0x30	; 48
    1060:	2a 95       	dec	r18
    1062:	e1 f7       	brne	.-8      	; 0x105c <__ftoa_engine+0x1e>
    1064:	08 95       	ret
    1066:	9f 3f       	cpi	r25, 0xFF	; 255
    1068:	30 f0       	brcs	.+12     	; 0x1076 <__ftoa_engine+0x38>
    106a:	80 38       	cpi	r24, 0x80	; 128
    106c:	71 05       	cpc	r23, r1
    106e:	61 05       	cpc	r22, r1
    1070:	09 f0       	breq	.+2      	; 0x1074 <__ftoa_engine+0x36>
    1072:	3c 5f       	subi	r19, 0xFC	; 252
    1074:	3c 5f       	subi	r19, 0xFC	; 252
    1076:	3d 93       	st	X+, r19
    1078:	91 30       	cpi	r25, 0x01	; 1
    107a:	08 f0       	brcs	.+2      	; 0x107e <__ftoa_engine+0x40>
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	91 1d       	adc	r25, r1
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	1f 93       	push	r17
    1086:	0f 93       	push	r16
    1088:	ff 92       	push	r15
    108a:	ef 92       	push	r14
    108c:	19 2f       	mov	r17, r25
    108e:	98 7f       	andi	r25, 0xF8	; 248
    1090:	96 95       	lsr	r25
    1092:	e9 2f       	mov	r30, r25
    1094:	96 95       	lsr	r25
    1096:	96 95       	lsr	r25
    1098:	e9 0f       	add	r30, r25
    109a:	ff 27       	eor	r31, r31
    109c:	e2 5c       	subi	r30, 0xC2	; 194
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	99 27       	eor	r25, r25
    10a2:	33 27       	eor	r19, r19
    10a4:	ee 24       	eor	r14, r14
    10a6:	ff 24       	eor	r15, r15
    10a8:	a7 01       	movw	r20, r14
    10aa:	e7 01       	movw	r28, r14
    10ac:	05 90       	lpm	r0, Z+
    10ae:	08 94       	sec
    10b0:	07 94       	ror	r0
    10b2:	28 f4       	brcc	.+10     	; 0x10be <__ftoa_engine+0x80>
    10b4:	36 0f       	add	r19, r22
    10b6:	e7 1e       	adc	r14, r23
    10b8:	f8 1e       	adc	r15, r24
    10ba:	49 1f       	adc	r20, r25
    10bc:	51 1d       	adc	r21, r1
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	88 1f       	adc	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	06 94       	lsr	r0
    10c8:	a1 f7       	brne	.-24     	; 0x10b2 <__ftoa_engine+0x74>
    10ca:	05 90       	lpm	r0, Z+
    10cc:	07 94       	ror	r0
    10ce:	28 f4       	brcc	.+10     	; 0x10da <__ftoa_engine+0x9c>
    10d0:	e7 0e       	add	r14, r23
    10d2:	f8 1e       	adc	r15, r24
    10d4:	49 1f       	adc	r20, r25
    10d6:	56 1f       	adc	r21, r22
    10d8:	c1 1d       	adc	r28, r1
    10da:	77 0f       	add	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	66 1f       	adc	r22, r22
    10e2:	06 94       	lsr	r0
    10e4:	a1 f7       	brne	.-24     	; 0x10ce <__ftoa_engine+0x90>
    10e6:	05 90       	lpm	r0, Z+
    10e8:	07 94       	ror	r0
    10ea:	28 f4       	brcc	.+10     	; 0x10f6 <__ftoa_engine+0xb8>
    10ec:	f8 0e       	add	r15, r24
    10ee:	49 1f       	adc	r20, r25
    10f0:	56 1f       	adc	r21, r22
    10f2:	c7 1f       	adc	r28, r23
    10f4:	d1 1d       	adc	r29, r1
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	66 1f       	adc	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	06 94       	lsr	r0
    1100:	a1 f7       	brne	.-24     	; 0x10ea <__ftoa_engine+0xac>
    1102:	05 90       	lpm	r0, Z+
    1104:	07 94       	ror	r0
    1106:	20 f4       	brcc	.+8      	; 0x1110 <__ftoa_engine+0xd2>
    1108:	49 0f       	add	r20, r25
    110a:	56 1f       	adc	r21, r22
    110c:	c7 1f       	adc	r28, r23
    110e:	d8 1f       	adc	r29, r24
    1110:	99 0f       	add	r25, r25
    1112:	66 1f       	adc	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	06 94       	lsr	r0
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__ftoa_engine+0xc8>
    111c:	84 91       	lpm	r24, Z
    111e:	10 95       	com	r17
    1120:	17 70       	andi	r17, 0x07	; 7
    1122:	41 f0       	breq	.+16     	; 0x1134 <__ftoa_engine+0xf6>
    1124:	d6 95       	lsr	r29
    1126:	c7 95       	ror	r28
    1128:	57 95       	ror	r21
    112a:	47 95       	ror	r20
    112c:	f7 94       	ror	r15
    112e:	e7 94       	ror	r14
    1130:	1a 95       	dec	r17
    1132:	c1 f7       	brne	.-16     	; 0x1124 <__ftoa_engine+0xe6>
    1134:	e4 ee       	ldi	r30, 0xE4	; 228
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	68 94       	set
    113a:	15 90       	lpm	r1, Z+
    113c:	15 91       	lpm	r17, Z+
    113e:	35 91       	lpm	r19, Z+
    1140:	65 91       	lpm	r22, Z+
    1142:	95 91       	lpm	r25, Z+
    1144:	05 90       	lpm	r0, Z+
    1146:	7f e2       	ldi	r23, 0x2F	; 47
    1148:	73 95       	inc	r23
    114a:	e1 18       	sub	r14, r1
    114c:	f1 0a       	sbc	r15, r17
    114e:	43 0b       	sbc	r20, r19
    1150:	56 0b       	sbc	r21, r22
    1152:	c9 0b       	sbc	r28, r25
    1154:	d0 09       	sbc	r29, r0
    1156:	c0 f7       	brcc	.-16     	; 0x1148 <__ftoa_engine+0x10a>
    1158:	e1 0c       	add	r14, r1
    115a:	f1 1e       	adc	r15, r17
    115c:	43 1f       	adc	r20, r19
    115e:	56 1f       	adc	r21, r22
    1160:	c9 1f       	adc	r28, r25
    1162:	d0 1d       	adc	r29, r0
    1164:	7e f4       	brtc	.+30     	; 0x1184 <__ftoa_engine+0x146>
    1166:	70 33       	cpi	r23, 0x30	; 48
    1168:	11 f4       	brne	.+4      	; 0x116e <__ftoa_engine+0x130>
    116a:	8a 95       	dec	r24
    116c:	e6 cf       	rjmp	.-52     	; 0x113a <__ftoa_engine+0xfc>
    116e:	e8 94       	clt
    1170:	01 50       	subi	r16, 0x01	; 1
    1172:	30 f0       	brcs	.+12     	; 0x1180 <__ftoa_engine+0x142>
    1174:	08 0f       	add	r16, r24
    1176:	0a f4       	brpl	.+2      	; 0x117a <__ftoa_engine+0x13c>
    1178:	00 27       	eor	r16, r16
    117a:	02 17       	cp	r16, r18
    117c:	08 f4       	brcc	.+2      	; 0x1180 <__ftoa_engine+0x142>
    117e:	20 2f       	mov	r18, r16
    1180:	23 95       	inc	r18
    1182:	02 2f       	mov	r16, r18
    1184:	7a 33       	cpi	r23, 0x3A	; 58
    1186:	28 f0       	brcs	.+10     	; 0x1192 <__ftoa_engine+0x154>
    1188:	79 e3       	ldi	r23, 0x39	; 57
    118a:	7d 93       	st	X+, r23
    118c:	2a 95       	dec	r18
    118e:	e9 f7       	brne	.-6      	; 0x118a <__ftoa_engine+0x14c>
    1190:	10 c0       	rjmp	.+32     	; 0x11b2 <__ftoa_engine+0x174>
    1192:	7d 93       	st	X+, r23
    1194:	2a 95       	dec	r18
    1196:	89 f6       	brne	.-94     	; 0x113a <__ftoa_engine+0xfc>
    1198:	06 94       	lsr	r0
    119a:	97 95       	ror	r25
    119c:	67 95       	ror	r22
    119e:	37 95       	ror	r19
    11a0:	17 95       	ror	r17
    11a2:	17 94       	ror	r1
    11a4:	e1 18       	sub	r14, r1
    11a6:	f1 0a       	sbc	r15, r17
    11a8:	43 0b       	sbc	r20, r19
    11aa:	56 0b       	sbc	r21, r22
    11ac:	c9 0b       	sbc	r28, r25
    11ae:	d0 09       	sbc	r29, r0
    11b0:	98 f0       	brcs	.+38     	; 0x11d8 <__ftoa_engine+0x19a>
    11b2:	23 95       	inc	r18
    11b4:	7e 91       	ld	r23, -X
    11b6:	73 95       	inc	r23
    11b8:	7a 33       	cpi	r23, 0x3A	; 58
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__ftoa_engine+0x180>
    11bc:	70 e3       	ldi	r23, 0x30	; 48
    11be:	7c 93       	st	X, r23
    11c0:	20 13       	cpse	r18, r16
    11c2:	b8 f7       	brcc	.-18     	; 0x11b2 <__ftoa_engine+0x174>
    11c4:	7e 91       	ld	r23, -X
    11c6:	70 61       	ori	r23, 0x10	; 16
    11c8:	7d 93       	st	X+, r23
    11ca:	30 f0       	brcs	.+12     	; 0x11d8 <__ftoa_engine+0x19a>
    11cc:	83 95       	inc	r24
    11ce:	71 e3       	ldi	r23, 0x31	; 49
    11d0:	7d 93       	st	X+, r23
    11d2:	70 e3       	ldi	r23, 0x30	; 48
    11d4:	2a 95       	dec	r18
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <__ftoa_engine+0x192>
    11d8:	11 24       	eor	r1, r1
    11da:	ef 90       	pop	r14
    11dc:	ff 90       	pop	r15
    11de:	0f 91       	pop	r16
    11e0:	1f 91       	pop	r17
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	99 27       	eor	r25, r25
    11e8:	87 fd       	sbrc	r24, 7
    11ea:	90 95       	com	r25
    11ec:	08 95       	ret

000011ee <_exit>:
    11ee:	f8 94       	cli

000011f0 <__stop_program>:
    11f0:	ff cf       	rjmp	.-2      	; 0x11f0 <__stop_program>
