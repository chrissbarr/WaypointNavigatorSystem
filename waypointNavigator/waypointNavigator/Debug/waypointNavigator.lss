
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00001794  00001828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800248  00800248  00001870  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000358  00000000  00000000  000018e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c4e  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000131a  00000000  00000000  0000588e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020de  00000000  00000000  00006ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000958  00000000  00000000  00008c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014ac  00000000  00000000  000095e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002170  00000000  00000000  0000aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  0000cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c1       	rjmp	.+522    	; 0x20c <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c4       	rjmp	.+2206   	; 0x8c4 <__vector_9>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c5       	rjmp	.+2662   	; 0xac4 <__vector_23>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <__vector_9+0x1a8>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <_Z12debug_printff+0x4>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <_Z10getHeadingv+0x16e>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <__do_clear_bss>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__zero_reg__+0x15>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <i2c_rep_start+0x8>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	d1 e2       	ldi	r29, 0x21	; 33
     214:	de bf       	out	0x3e, r29	; 62
     216:	cd bf       	out	0x3d, r28	; 61
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	0c bf       	out	0x3c, r16	; 60

0000021c <__do_copy_data>:
     21c:	12 e0       	ldi	r17, 0x02	; 2
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	e4 e9       	ldi	r30, 0x94	; 148
     224:	f7 e1       	ldi	r31, 0x17	; 23
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0b bf       	out	0x3b, r16	; 59
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__do_copy_data+0x14>
     22c:	07 90       	elpm	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	a8 34       	cpi	r26, 0x48	; 72
     232:	b1 07       	cpc	r27, r17
     234:	d9 f7       	brne	.-10     	; 0x22c <__do_copy_data+0x10>

00000236 <__do_clear_bss>:
     236:	22 e0       	ldi	r18, 0x02	; 2
     238:	a8 e4       	ldi	r26, 0x48	; 72
     23a:	b2 e0       	ldi	r27, 0x02	; 2
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	a4 39       	cpi	r26, 0x94	; 148
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
     246:	86 d5       	rcall	.+2828   	; 0xd54 <main>
     248:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     24e:	00 c0       	rjmp	.+0      	; 0x250 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     250:	00 c0       	rjmp	.+0      	; 0x252 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     252:	00 c0       	rjmp	.+0      	; 0x254 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     254:	00 c0       	rjmp	.+0      	; 0x256 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     256:	00 c0       	rjmp	.+0      	; 0x258 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     258:	00 c0       	rjmp	.+0      	; 0x25a <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     25a:	00 00       	nop
	ret          ; 3   "
     25c:	08 95       	ret

0000025e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     25e:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     260:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     262:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     264:	58 98       	cbi	0x0b, 0	; 11
	ret
     266:	08 95       	ret

00000268 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     268:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     26a:	f1 df       	rcall	.-30     	; 0x24e <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     26c:	1d c0       	rjmp	.+58     	; 0x2a8 <i2c_write>
	ret
     26e:	08 95       	ret

00000270 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     270:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     272:	ed df       	rcall	.-38     	; 0x24e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     274:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     276:	eb df       	rcall	.-42     	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     278:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     27a:	e9 df       	rcall	.-46     	; 0x24e <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     27c:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     27e:	e7 df       	rcall	.-50     	; 0x24e <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     280:	13 c0       	rjmp	.+38     	; 0x2a8 <i2c_write>
	ret
     282:	08 95       	ret

00000284 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     284:	08 2e       	mov	r0, r24

00000286 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     286:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     288:	e2 df       	rcall	.-60     	; 0x24e <i2c_delay_T2>
	mov	r24,__tmp_reg__
     28a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     28c:	0d d0       	rcall	.+26     	; 0x2a8 <i2c_write>
	tst	r24		;if device not busy -> done
     28e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     290:	11 f0       	breq	.+4      	; 0x296 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     292:	02 d0       	rcall	.+4      	; 0x298 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     294:	f8 cf       	rjmp	.-16     	; 0x286 <i2c_start_wait1>

00000296 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     296:	08 95       	ret

00000298 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     298:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     29a:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29c:	d8 df       	rcall	.-80     	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     29e:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a0:	d6 df       	rcall	.-84     	; 0x24e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     2a2:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a4:	d4 cf       	rjmp	.-88     	; 0x24e <i2c_delay_T2>
	ret
     2a6:	08 95       	ret

000002a8 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     2a8:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     2aa:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <i2c_write_first>

000002ae <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     2ae:	88 0f       	add	r24, r24

000002b0 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     2b0:	59 f0       	breq	.+22     	; 0x2c8 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     2b2:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     2b4:	18 f4       	brcc	.+6      	; 0x2bc <i2c_write_low>
	nop
     2b6:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     2b8:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <i2c_write_high>

000002bc <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     2bc:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2be:	00 c0       	rjmp	.+0      	; 0x2c0 <i2c_write_high>

000002c0 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     2c0:	c6 df       	rcall	.-116    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2c2:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c4:	c4 df       	rcall	.-120    	; 0x24e <i2c_delay_T2>
	rjmp	i2c_write_bit
     2c6:	f3 cf       	rjmp	.-26     	; 0x2ae <i2c_write_bit>

000002c8 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     2c8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     2ca:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2cc:	c0 df       	rcall	.-128    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2ce:	50 98       	cbi	0x0a, 0	; 10

000002d0 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2d0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <i2c_ack_wait>
	
	clr	r24		;return 0
     2d4:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2d6:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2d8:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2da:	b9 df       	rcall	.-142    	; 0x24e <i2c_delay_T2>
	clr	r25
     2dc:	99 27       	eor	r25, r25
	ret
     2de:	08 95       	ret

000002e0 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2e0:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <i2c_read>

000002e4 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2e4:	81 e0       	ldi	r24, 0x01	; 1

000002e6 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2e6:	71 e0       	ldi	r23, 0x01	; 1

000002e8 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2e8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2ea:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2ec:	b0 df       	rcall	.-160    	; 0x24e <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2ee:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2f0:	ae df       	rcall	.-164    	; 0x24e <i2c_delay_T2>

000002f2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2f2:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2f6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2f8:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2fa:	08 94       	sec
	
	rol	r23		;store bit
     2fc:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     2fe:	a0 f7       	brcc	.-24     	; 0x2e8 <i2c_read_bit>

00000300 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     300:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     302:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     304:	11 f0       	breq	.+4      	; 0x30a <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     306:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     308:	01 c0       	rjmp	.+2      	; 0x30c <i2c_put_ack_high>

0000030a <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     30a:	51 9a       	sbi	0x0a, 1	; 10

0000030c <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     30c:	a0 df       	rcall	.-192    	; 0x24e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     30e:	50 98       	cbi	0x0a, 0	; 10

00000310 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     310:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     312:	fe cf       	rjmp	.-4      	; 0x310 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     314:	9c df       	rcall	.-200    	; 0x24e <i2c_delay_T2>
	mov	r24,r23
     316:	87 2f       	mov	r24, r23
	clr	r25
     318:	99 27       	eor	r25, r25
	ret
     31a:	08 95       	ret

0000031c <_Z10getHeadingv>:
	i2c_write(0x00);
	
	setMagGain(HMC5883_MAGGAIN_1_3);
}

float getHeading(void){
     31c:	cf 92       	push	r12
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29

	i2c_start_wait(HMC5883L_WRITE);
     32c:	8c e3       	ldi	r24, 0x3C	; 60
     32e:	aa df       	rcall	.-172    	; 0x284 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	ba df       	rcall	.-140    	; 0x2a8 <i2c_write>
	i2c_stop();
     334:	b1 df       	rcall	.-158    	; 0x298 <i2c_stop>

	i2c_rep_start(HMC5883L_READ);
     336:	8d e3       	ldi	r24, 0x3D	; 61
     338:	9b df       	rcall	.-202    	; 0x270 <i2c_rep_start>

	mag_raw_xhi = i2c_readAck();
     33a:	d4 df       	rcall	.-88     	; 0x2e4 <i2c_readAck>
     33c:	80 93 60 02 	sts	0x0260, r24
	mag_raw_xlo = i2c_readAck();
     340:	d1 df       	rcall	.-94     	; 0x2e4 <i2c_readAck>
     342:	80 93 5f 02 	sts	0x025F, r24
	
	mag_raw_zhi = i2c_readAck();
     346:	ce df       	rcall	.-100    	; 0x2e4 <i2c_readAck>
     348:	80 93 5e 02 	sts	0x025E, r24
	mag_raw_zlo = i2c_readAck();
     34c:	cb df       	rcall	.-106    	; 0x2e4 <i2c_readAck>
     34e:	80 93 5d 02 	sts	0x025D, r24
	
	mag_raw_yhi = i2c_readAck();
     352:	c8 df       	rcall	.-112    	; 0x2e4 <i2c_readAck>
     354:	80 93 5c 02 	sts	0x025C, r24
	mag_raw_ylo = i2c_readNak();
     358:	c3 df       	rcall	.-122    	; 0x2e0 <i2c_readNak>
     35a:	80 93 5b 02 	sts	0x025B, r24
	
	i2c_stop();
     35e:	9c df       	rcall	.-200    	; 0x298 <i2c_stop>
	
	//shift values to create properly formed integer (low byte first)
	mag_data_x = (int16_t) (mag_raw_xlo | (int16_t)mag_raw_xhi << 8);
     360:	60 91 60 02 	lds	r22, 0x0260
     364:	77 27       	eor	r23, r23
     366:	67 fd       	sbrc	r22, 7
     368:	70 95       	com	r23
     36a:	76 2f       	mov	r23, r22
     36c:	66 27       	eor	r22, r22
     36e:	80 91 5f 02 	lds	r24, 0x025F
     372:	99 27       	eor	r25, r25
     374:	87 fd       	sbrc	r24, 7
     376:	90 95       	com	r25
     378:	68 2b       	or	r22, r24
     37a:	79 2b       	or	r23, r25
     37c:	70 93 5a 02 	sts	0x025A, r23
     380:	60 93 59 02 	sts	0x0259, r22
	mag_data_y = (int16_t) (mag_raw_ylo | (int16_t)mag_raw_yhi << 8);
     384:	00 91 5c 02 	lds	r16, 0x025C
     388:	11 27       	eor	r17, r17
     38a:	07 fd       	sbrc	r16, 7
     38c:	10 95       	com	r17
     38e:	10 2f       	mov	r17, r16
     390:	00 27       	eor	r16, r16
     392:	80 91 5b 02 	lds	r24, 0x025B
     396:	99 27       	eor	r25, r25
     398:	87 fd       	sbrc	r24, 7
     39a:	90 95       	com	r25
     39c:	08 2b       	or	r16, r24
     39e:	19 2b       	or	r17, r25
     3a0:	10 93 58 02 	sts	0x0258, r17
     3a4:	00 93 57 02 	sts	0x0257, r16
	mag_data_z = (int16_t) (mag_raw_zlo | (int16_t)mag_raw_zhi << 8);
     3a8:	c0 91 5e 02 	lds	r28, 0x025E
     3ac:	dd 27       	eor	r29, r29
     3ae:	c7 fd       	sbrc	r28, 7
     3b0:	d0 95       	com	r29
     3b2:	dc 2f       	mov	r29, r28
     3b4:	cc 27       	eor	r28, r28
     3b6:	80 91 5d 02 	lds	r24, 0x025D
     3ba:	99 27       	eor	r25, r25
     3bc:	87 fd       	sbrc	r24, 7
     3be:	90 95       	com	r25
     3c0:	c8 2b       	or	r28, r24
     3c2:	d9 2b       	or	r29, r25
     3c4:	d0 93 56 02 	sts	0x0256, r29
     3c8:	c0 93 55 02 	sts	0x0255, r28
	
	mag_proc_x = mag_data_x / _hmc5883_Gauss_LSB_XY * GAUSS_TO_MICROTESLA;
     3cc:	c0 90 04 02 	lds	r12, 0x0204
     3d0:	d0 90 05 02 	lds	r13, 0x0205
     3d4:	e0 90 06 02 	lds	r14, 0x0206
     3d8:	f0 90 07 02 	lds	r15, 0x0207
     3dc:	88 27       	eor	r24, r24
     3de:	77 fd       	sbrc	r23, 7
     3e0:	80 95       	com	r24
     3e2:	98 2f       	mov	r25, r24
     3e4:	f8 d5       	rcall	.+3056   	; 0xfd6 <__floatsisf>
     3e6:	a7 01       	movw	r20, r14
     3e8:	96 01       	movw	r18, r12
     3ea:	8b d5       	rcall	.+2838   	; 0xf02 <__divsf3>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	48 ec       	ldi	r20, 0xC8	; 200
     3f2:	52 e4       	ldi	r21, 0x42	; 66
     3f4:	d0 d6       	rcall	.+3488   	; 0x1196 <__mulsf3>
     3f6:	60 93 51 02 	sts	0x0251, r22
     3fa:	70 93 52 02 	sts	0x0252, r23
     3fe:	80 93 53 02 	sts	0x0253, r24
     402:	90 93 54 02 	sts	0x0254, r25
	mag_proc_y = mag_data_y / _hmc5883_Gauss_LSB_XY * GAUSS_TO_MICROTESLA;
     406:	b8 01       	movw	r22, r16
     408:	88 27       	eor	r24, r24
     40a:	77 fd       	sbrc	r23, 7
     40c:	80 95       	com	r24
     40e:	98 2f       	mov	r25, r24
     410:	e2 d5       	rcall	.+3012   	; 0xfd6 <__floatsisf>
     412:	a7 01       	movw	r20, r14
     414:	96 01       	movw	r18, r12
     416:	75 d5       	rcall	.+2794   	; 0xf02 <__divsf3>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	48 ec       	ldi	r20, 0xC8	; 200
     41e:	52 e4       	ldi	r21, 0x42	; 66
     420:	ba d6       	rcall	.+3444   	; 0x1196 <__mulsf3>
     422:	60 93 4d 02 	sts	0x024D, r22
     426:	70 93 4e 02 	sts	0x024E, r23
     42a:	80 93 4f 02 	sts	0x024F, r24
     42e:	90 93 50 02 	sts	0x0250, r25
	mag_proc_z = mag_data_z / _hmc5883_Gauss_LSB_Z * GAUSS_TO_MICROTESLA;
     432:	be 01       	movw	r22, r28
     434:	88 27       	eor	r24, r24
     436:	77 fd       	sbrc	r23, 7
     438:	80 95       	com	r24
     43a:	98 2f       	mov	r25, r24
     43c:	cc d5       	rcall	.+2968   	; 0xfd6 <__floatsisf>
     43e:	20 91 00 02 	lds	r18, 0x0200
     442:	30 91 01 02 	lds	r19, 0x0201
     446:	40 91 02 02 	lds	r20, 0x0202
     44a:	50 91 03 02 	lds	r21, 0x0203
     44e:	59 d5       	rcall	.+2738   	; 0xf02 <__divsf3>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	48 ec       	ldi	r20, 0xC8	; 200
     456:	52 e4       	ldi	r21, 0x42	; 66
     458:	9e d6       	rcall	.+3388   	; 0x1196 <__mulsf3>
     45a:	60 93 49 02 	sts	0x0249, r22
     45e:	70 93 4a 02 	sts	0x024A, r23
     462:	80 93 4b 02 	sts	0x024B, r24
     466:	90 93 4c 02 	sts	0x024C, r25
	
	debug_print("X: ");debug_printf(mag_proc_x);debug_print(" ");
     46a:	88 e0       	ldi	r24, 0x08	; 8
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	63 d1       	rcall	.+710    	; 0x736 <_Z11debug_printPKc>
     470:	60 91 51 02 	lds	r22, 0x0251
     474:	70 91 52 02 	lds	r23, 0x0252
     478:	80 91 53 02 	lds	r24, 0x0253
     47c:	90 91 54 02 	lds	r25, 0x0254
     480:	69 d1       	rcall	.+722    	; 0x754 <_Z12debug_printff>
     482:	89 e2       	ldi	r24, 0x29	; 41
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	57 d1       	rcall	.+686    	; 0x736 <_Z11debug_printPKc>
	debug_print("Y: ");debug_printf(mag_proc_y);debug_print(" ");
     488:	8c e0       	ldi	r24, 0x0C	; 12
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	54 d1       	rcall	.+680    	; 0x736 <_Z11debug_printPKc>
     48e:	60 91 4d 02 	lds	r22, 0x024D
     492:	70 91 4e 02 	lds	r23, 0x024E
     496:	80 91 4f 02 	lds	r24, 0x024F
     49a:	90 91 50 02 	lds	r25, 0x0250
     49e:	5a d1       	rcall	.+692    	; 0x754 <_Z12debug_printff>
     4a0:	89 e2       	ldi	r24, 0x29	; 41
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	48 d1       	rcall	.+656    	; 0x736 <_Z11debug_printPKc>
	debug_print("Z: ");debug_printf(mag_proc_z);debug_print(" ");debug_println("uT");
     4a6:	80 e1       	ldi	r24, 0x10	; 16
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	45 d1       	rcall	.+650    	; 0x736 <_Z11debug_printPKc>
     4ac:	60 91 49 02 	lds	r22, 0x0249
     4b0:	70 91 4a 02 	lds	r23, 0x024A
     4b4:	80 91 4b 02 	lds	r24, 0x024B
     4b8:	90 91 4c 02 	lds	r25, 0x024C
     4bc:	4b d1       	rcall	.+662    	; 0x754 <_Z12debug_printff>
     4be:	89 e2       	ldi	r24, 0x29	; 41
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	39 d1       	rcall	.+626    	; 0x736 <_Z11debug_printPKc>
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	3b d1       	rcall	.+630    	; 0x740 <_Z13debug_printlnPKc>
	
	//calculate heading
	float heading = atan2(mag_proc_y,mag_proc_x);
     4ca:	20 91 51 02 	lds	r18, 0x0251
     4ce:	30 91 52 02 	lds	r19, 0x0252
     4d2:	40 91 53 02 	lds	r20, 0x0253
     4d6:	50 91 54 02 	lds	r21, 0x0254
     4da:	60 91 4d 02 	lds	r22, 0x024D
     4de:	70 91 4e 02 	lds	r23, 0x024E
     4e2:	80 91 4f 02 	lds	r24, 0x024F
     4e6:	90 91 50 02 	lds	r25, 0x0250
     4ea:	b4 d4       	rcall	.+2408   	; 0xe54 <atan2>
	
	heading += DECLINATION;
     4ec:	25 e3       	ldi	r18, 0x35	; 53
     4ee:	3a ef       	ldi	r19, 0xFA	; 250
     4f0:	4e e0       	ldi	r20, 0x0E	; 14
     4f2:	5e e3       	ldi	r21, 0x3E	; 62
     4f4:	3c d4       	rcall	.+2168   	; 0xd6e <__addsf3>
     4f6:	6b 01       	movw	r12, r22
     4f8:	7c 01       	movw	r14, r24
	
	if(heading<0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	a9 01       	movw	r20, r18
     500:	fc d4       	rcall	.+2552   	; 0xefa <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	4c f4       	brge	.+18     	; 0x518 <_Z10getHeadingv+0x1fc>
		heading+=2*PI;
     506:	2b ed       	ldi	r18, 0xDB	; 219
     508:	3f e0       	ldi	r19, 0x0F	; 15
     50a:	49 ec       	ldi	r20, 0xC9	; 201
     50c:	50 e4       	ldi	r21, 0x40	; 64
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	2d d4       	rcall	.+2138   	; 0xd6e <__addsf3>
     514:	6b 01       	movw	r12, r22
     516:	7c 01       	movw	r14, r24
	
	if(heading > 2*PI)
     518:	2b ed       	ldi	r18, 0xDB	; 219
     51a:	3f e0       	ldi	r19, 0x0F	; 15
     51c:	49 ec       	ldi	r20, 0xC9	; 201
     51e:	50 e4       	ldi	r21, 0x40	; 64
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	2d d6       	rcall	.+3162   	; 0x1180 <__gesf2>
     526:	18 16       	cp	r1, r24
     528:	4c f4       	brge	.+18     	; 0x53c <_Z10getHeadingv+0x220>
		heading-=2*PI;
     52a:	2b ed       	ldi	r18, 0xDB	; 219
     52c:	3f e0       	ldi	r19, 0x0F	; 15
     52e:	49 ec       	ldi	r20, 0xC9	; 201
     530:	50 e4       	ldi	r21, 0x40	; 64
     532:	c7 01       	movw	r24, r14
     534:	b6 01       	movw	r22, r12
     536:	1a d4       	rcall	.+2100   	; 0xd6c <__subsf3>
     538:	6b 01       	movw	r12, r22
     53a:	7c 01       	movw	r14, r24
		
	float heading_degrees = heading * 180 / PI;
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	44 e3       	ldi	r20, 0x34	; 52
     542:	53 e4       	ldi	r21, 0x43	; 67
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	26 d6       	rcall	.+3148   	; 0x1196 <__mulsf3>
     54a:	2b ed       	ldi	r18, 0xDB	; 219
     54c:	3f e0       	ldi	r19, 0x0F	; 15
     54e:	49 e4       	ldi	r20, 0x49	; 73
     550:	50 e4       	ldi	r21, 0x40	; 64
     552:	d7 d4       	rcall	.+2478   	; 0xf02 <__divsf3>
     554:	6b 01       	movw	r12, r22
     556:	7c 01       	movw	r14, r24
	
	debug_print("Heading (degrees): "); debug_printf(heading_degrees);debug_println("");
     558:	87 e1       	ldi	r24, 0x17	; 23
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	ec d0       	rcall	.+472    	; 0x736 <_Z11debug_printPKc>
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	f8 d0       	rcall	.+496    	; 0x754 <_Z12debug_printff>
     564:	8d e2       	ldi	r24, 0x2D	; 45
     566:	92 e0       	ldi	r25, 0x02	; 2
     568:	eb d0       	rcall	.+470    	; 0x740 <_Z13debug_printlnPKc>
	
	return heading_degrees;
}
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	cf 90       	pop	r12
     57e:	08 95       	ret

00000580 <_Z10setMagGain14hmc5883MagGain>:

void setMagGain(hmc5883MagGain gain)
{
     580:	cf 93       	push	r28
     582:	c8 2f       	mov	r28, r24
	i2c_start(HMC5883L_WRITE);
     584:	8c e3       	ldi	r24, 0x3C	; 60
     586:	70 de       	rcall	.-800    	; 0x268 <i2c_start>
	i2c_write(HMC5883_REGISTER_MAG_CRB_REG_M); // set pointer
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	8e de       	rcall	.-740    	; 0x2a8 <i2c_write>
	i2c_write((byte)gain); // write gain
     58c:	8c 2f       	mov	r24, r28
     58e:	8c de       	rcall	.-744    	; 0x2a8 <i2c_write>
	i2c_stop();
     590:	83 de       	rcall	.-762    	; 0x298 <i2c_stop>
	
	_magGain = gain;
     592:	c0 93 48 02 	sts	0x0248, r28
	
	switch(gain)
     596:	c0 38       	cpi	r28, 0x80	; 128
     598:	09 f4       	brne	.+2      	; 0x59c <_Z10setMagGain14hmc5883MagGain+0x1c>
     59a:	5f c0       	rjmp	.+190    	; 0x65a <_Z10setMagGain14hmc5883MagGain+0xda>
     59c:	48 f4       	brcc	.+18     	; 0x5b0 <_Z10setMagGain14hmc5883MagGain+0x30>
     59e:	c0 34       	cpi	r28, 0x40	; 64
     5a0:	51 f1       	breq	.+84     	; 0x5f6 <_Z10setMagGain14hmc5883MagGain+0x76>
     5a2:	c0 36       	cpi	r28, 0x60	; 96
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <_Z10setMagGain14hmc5883MagGain+0x28>
     5a6:	40 c0       	rjmp	.+128    	; 0x628 <_Z10setMagGain14hmc5883MagGain+0xa8>
     5a8:	c0 32       	cpi	r28, 0x20	; 32
     5aa:	09 f0       	breq	.+2      	; 0x5ae <_Z10setMagGain14hmc5883MagGain+0x2e>
     5ac:	b9 c0       	rjmp	.+370    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
     5ae:	0a c0       	rjmp	.+20     	; 0x5c4 <_Z10setMagGain14hmc5883MagGain+0x44>
     5b0:	c0 3c       	cpi	r28, 0xC0	; 192
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <_Z10setMagGain14hmc5883MagGain+0x36>
     5b4:	84 c0       	rjmp	.+264    	; 0x6be <_Z10setMagGain14hmc5883MagGain+0x13e>
     5b6:	c0 3e       	cpi	r28, 0xE0	; 224
     5b8:	09 f4       	brne	.+2      	; 0x5bc <_Z10setMagGain14hmc5883MagGain+0x3c>
     5ba:	9a c0       	rjmp	.+308    	; 0x6f0 <_Z10setMagGain14hmc5883MagGain+0x170>
     5bc:	c0 3a       	cpi	r28, 0xA0	; 160
     5be:	09 f0       	breq	.+2      	; 0x5c2 <_Z10setMagGain14hmc5883MagGain+0x42>
     5c0:	af c0       	rjmp	.+350    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
     5c2:	64 c0       	rjmp	.+200    	; 0x68c <_Z10setMagGain14hmc5883MagGain+0x10c>
	{
		case HMC5883_MAGGAIN_1_3:
			_hmc5883_Gauss_LSB_XY = 1100;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e8       	ldi	r25, 0x80	; 128
     5c8:	a9 e8       	ldi	r26, 0x89	; 137
     5ca:	b4 e4       	ldi	r27, 0x44	; 68
     5cc:	80 93 04 02 	sts	0x0204, r24
     5d0:	90 93 05 02 	sts	0x0205, r25
     5d4:	a0 93 06 02 	sts	0x0206, r26
     5d8:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 980;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a5 e7       	ldi	r26, 0x75	; 117
     5e2:	b4 e4       	ldi	r27, 0x44	; 68
     5e4:	80 93 00 02 	sts	0x0200, r24
     5e8:	90 93 01 02 	sts	0x0201, r25
     5ec:	a0 93 02 02 	sts	0x0202, r26
     5f0:	b0 93 03 02 	sts	0x0203, r27
			break;
     5f4:	95 c0       	rjmp	.+298    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_1_9:
			_hmc5883_Gauss_LSB_XY = 855;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 ec       	ldi	r25, 0xC0	; 192
     5fa:	a5 e5       	ldi	r26, 0x55	; 85
     5fc:	b4 e4       	ldi	r27, 0x44	; 68
     5fe:	80 93 04 02 	sts	0x0204, r24
     602:	90 93 05 02 	sts	0x0205, r25
     606:	a0 93 06 02 	sts	0x0206, r26
     60a:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 760;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	ae e3       	ldi	r26, 0x3E	; 62
     614:	b4 e4       	ldi	r27, 0x44	; 68
     616:	80 93 00 02 	sts	0x0200, r24
     61a:	90 93 01 02 	sts	0x0201, r25
     61e:	a0 93 02 02 	sts	0x0202, r26
     622:	b0 93 03 02 	sts	0x0203, r27
			break;
     626:	7c c0       	rjmp	.+248    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_2_5:
			_hmc5883_Gauss_LSB_XY = 670;
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e8       	ldi	r25, 0x80	; 128
     62c:	a7 e2       	ldi	r26, 0x27	; 39
     62e:	b4 e4       	ldi	r27, 0x44	; 68
     630:	80 93 04 02 	sts	0x0204, r24
     634:	90 93 05 02 	sts	0x0205, r25
     638:	a0 93 06 02 	sts	0x0206, r26
     63c:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 600;
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	a6 e1       	ldi	r26, 0x16	; 22
     646:	b4 e4       	ldi	r27, 0x44	; 68
     648:	80 93 00 02 	sts	0x0200, r24
     64c:	90 93 01 02 	sts	0x0201, r25
     650:	a0 93 02 02 	sts	0x0202, r26
     654:	b0 93 03 02 	sts	0x0203, r27
			break;
     658:	63 c0       	rjmp	.+198    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_4_0:
			_hmc5883_Gauss_LSB_XY = 450;
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	a1 ee       	ldi	r26, 0xE1	; 225
     660:	b3 e4       	ldi	r27, 0x43	; 67
     662:	80 93 04 02 	sts	0x0204, r24
     666:	90 93 05 02 	sts	0x0205, r25
     66a:	a0 93 06 02 	sts	0x0206, r26
     66e:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 400;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a8 ec       	ldi	r26, 0xC8	; 200
     678:	b3 e4       	ldi	r27, 0x43	; 67
     67a:	80 93 00 02 	sts	0x0200, r24
     67e:	90 93 01 02 	sts	0x0201, r25
     682:	a0 93 02 02 	sts	0x0202, r26
     686:	b0 93 03 02 	sts	0x0203, r27
			break;
     68a:	4a c0       	rjmp	.+148    	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_4_7:
			_hmc5883_Gauss_LSB_XY = 400;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	a8 ec       	ldi	r26, 0xC8	; 200
     692:	b3 e4       	ldi	r27, 0x43	; 67
     694:	80 93 04 02 	sts	0x0204, r24
     698:	90 93 05 02 	sts	0x0205, r25
     69c:	a0 93 06 02 	sts	0x0206, r26
     6a0:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 255;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	af e7       	ldi	r26, 0x7F	; 127
     6aa:	b3 e4       	ldi	r27, 0x43	; 67
     6ac:	80 93 00 02 	sts	0x0200, r24
     6b0:	90 93 01 02 	sts	0x0201, r25
     6b4:	a0 93 02 02 	sts	0x0202, r26
     6b8:	b0 93 03 02 	sts	0x0203, r27
			break;
     6bc:	31 c0       	rjmp	.+98     	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_5_6:
			_hmc5883_Gauss_LSB_XY = 330;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a5 ea       	ldi	r26, 0xA5	; 165
     6c4:	b3 e4       	ldi	r27, 0x43	; 67
     6c6:	80 93 04 02 	sts	0x0204, r24
     6ca:	90 93 05 02 	sts	0x0205, r25
     6ce:	a0 93 06 02 	sts	0x0206, r26
     6d2:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 295;
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e8       	ldi	r25, 0x80	; 128
     6da:	a3 e9       	ldi	r26, 0x93	; 147
     6dc:	b3 e4       	ldi	r27, 0x43	; 67
     6de:	80 93 00 02 	sts	0x0200, r24
     6e2:	90 93 01 02 	sts	0x0201, r25
     6e6:	a0 93 02 02 	sts	0x0202, r26
     6ea:	b0 93 03 02 	sts	0x0203, r27
			break;
     6ee:	18 c0       	rjmp	.+48     	; 0x720 <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_8_1:
			_hmc5883_Gauss_LSB_XY = 230;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a6 e6       	ldi	r26, 0x66	; 102
     6f6:	b3 e4       	ldi	r27, 0x43	; 67
     6f8:	80 93 04 02 	sts	0x0204, r24
     6fc:	90 93 05 02 	sts	0x0205, r25
     700:	a0 93 06 02 	sts	0x0206, r26
     704:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 205;
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	ad e4       	ldi	r26, 0x4D	; 77
     70e:	b3 e4       	ldi	r27, 0x43	; 67
     710:	80 93 00 02 	sts	0x0200, r24
     714:	90 93 01 02 	sts	0x0201, r25
     718:	a0 93 02 02 	sts	0x0202, r26
     71c:	b0 93 03 02 	sts	0x0203, r27
			break;
	}

}
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <_Z13init_HMC5883Lv>:
static float _hmc5883_Gauss_LSB_XY = 1100.0F;
static float _hmc5883_Gauss_LSB_Z = 980.0F;

void init_HMC5883L(void){

	i2c_start(HMC5883L_WRITE);
     724:	8c e3       	ldi	r24, 0x3C	; 60
     726:	a0 dd       	rcall	.-1216   	; 0x268 <i2c_start>
	i2c_write(HMC5883_REGISTER_MAG_MR_REG_M);
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	be dd       	rcall	.-1156   	; 0x2a8 <i2c_write>
	i2c_write(0x00);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	bc dd       	rcall	.-1160   	; 0x2a8 <i2c_write>
	
	setMagGain(HMC5883_MAGGAIN_1_3);
     730:	80 e2       	ldi	r24, 0x20	; 32
     732:	26 cf       	rjmp	.-436    	; 0x580 <_Z10setMagGain14hmc5883MagGain>
     734:	08 95       	ret

00000736 <_Z11debug_printPKc>:
	{
		char string[16];
		itoa(debugNum,string,16);
		debug_print(string);
	}
}
     736:	bc 01       	movw	r22, r24
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	bf c2       	rjmp	.+1406   	; 0xcbc <_Z15USART_putstringiPKc>
     73e:	08 95       	ret

00000740 <_Z13debug_printlnPKc>:
     740:	bc 01       	movw	r22, r24
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	ba d2       	rcall	.+1396   	; 0xcbc <_Z15USART_putstringiPKc>
     748:	6b e2       	ldi	r22, 0x2B	; 43
     74a:	72 e0       	ldi	r23, 0x02	; 2
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	b5 c2       	rjmp	.+1386   	; 0xcbc <_Z15USART_putstringiPKc>
     752:	08 95       	ret

00000754 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	64 97       	sbiw	r28, 0x14	; 20
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     76c:	8e 01       	movw	r16, r28
     76e:	0f 5f       	subi	r16, 0xFF	; 255
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	25 e0       	ldi	r18, 0x05	; 5
     774:	4a e0       	ldi	r20, 0x0A	; 10
     776:	97 d5       	rcall	.+2862   	; 0x12a6 <dtostrf>
		debug_print(string);
     778:	c8 01       	movw	r24, r16
     77a:	dd df       	rcall	.-70     	; 0x736 <_Z11debug_printPKc>
	}
}
     77c:	64 96       	adiw	r28, 0x14	; 20
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <_Z10debug_beepv>:


//beep for 50ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep()
{
	sbi(PORTB,7);
     792:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	80 e7       	ldi	r24, 0x70	; 112
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <_Z10debug_beepv+0x8>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <_Z10debug_beepv+0x12>
     7a4:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     7a6:	2f 98       	cbi	0x05, 7	; 5
     7a8:	08 95       	ret

000007aa <_Z15debug_beep_longv>:
}

//beep for 250ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep_long()
{
	sbi(PORTB,7);
     7aa:	2f 9a       	sbi	0x05, 7	; 5
     7ac:	2f ef       	ldi	r18, 0xFF	; 255
     7ae:	84 e3       	ldi	r24, 0x34	; 52
     7b0:	9c e0       	ldi	r25, 0x0C	; 12
     7b2:	21 50       	subi	r18, 0x01	; 1
     7b4:	80 40       	sbci	r24, 0x00	; 0
     7b6:	90 40       	sbci	r25, 0x00	; 0
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <_Z15debug_beep_longv+0x8>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <_Z15debug_beep_longv+0x12>
     7bc:	00 00       	nop
	_delay_ms(250);
	cbi(PORTB,7);
     7be:	2f 98       	cbi	0x05, 7	; 5
     7c0:	08 95       	ret

000007c2 <_Z24quad_output_set_throttlei>:
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
     7c2:	90 93 a9 00 	sts	0x00A9, r25
     7c6:	80 93 a8 00 	sts	0x00A8, r24
	throttle_out = throttle;
     7ca:	bc 01       	movw	r22, r24
     7cc:	88 27       	eor	r24, r24
     7ce:	77 fd       	sbrc	r23, 7
     7d0:	80 95       	com	r24
     7d2:	98 2f       	mov	r25, r24
     7d4:	00 d4       	rcall	.+2048   	; 0xfd6 <__floatsisf>
     7d6:	60 93 61 02 	sts	0x0261, r22
     7da:	70 93 62 02 	sts	0x0262, r23
     7de:	80 93 63 02 	sts	0x0263, r24
     7e2:	90 93 64 02 	sts	0x0264, r25
     7e6:	08 95       	ret

000007e8 <_Z16quad_output_initv>:
#include "quad_output.h"

float throttle_out;

void quad_output_init()
{
     7e8:	8f 92       	push	r8
     7ea:	9f 92       	push	r9
     7ec:	af 92       	push	r10
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
	DDRH = 0xFF;  //set OC4x to output
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
     806:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
     808:	8f e3       	ldi	r24, 0x3F	; 63
     80a:	9c e9       	ldi	r25, 0x9C	; 156
     80c:	90 93 a7 00 	sts	0x00A7, r25
     810:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
     814:	38 ea       	ldi	r19, 0xA8	; 168
     816:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
     81a:	22 e1       	ldi	r18, 0x12	; 18
     81c:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
     820:	90 93 97 00 	sts	0x0097, r25
     824:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
     828:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
     82c:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     830:	c6 eb       	ldi	r28, 0xB6	; 182
     832:	d3 e0       	ldi	r29, 0x03	; 3
     834:	d0 93 a9 00 	sts	0x00A9, r29
     838:	c0 93 a8 00 	sts	0x00A8, r28
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     83c:	0f 2e       	mov	r0, r31
     83e:	fa ea       	ldi	r31, 0xAA	; 170
     840:	8f 2e       	mov	r8, r31
     842:	91 2c       	mov	r9, r1
     844:	f0 2d       	mov	r31, r0
     846:	f4 01       	movw	r30, r8
     848:	d1 83       	std	Z+1, r29	; 0x01
     84a:	c0 83       	st	Z, r28
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     84c:	0f 2e       	mov	r0, r31
     84e:	fc ea       	ldi	r31, 0xAC	; 172
     850:	af 2e       	mov	r10, r31
     852:	b1 2c       	mov	r11, r1
     854:	f0 2d       	mov	r31, r0
     856:	f5 01       	movw	r30, r10
     858:	d1 83       	std	Z+1, r29	; 0x01
     85a:	c0 83       	st	Z, r28
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     85c:	0f 2e       	mov	r0, r31
     85e:	f8 e9       	ldi	r31, 0x98	; 152
     860:	cf 2e       	mov	r12, r31
     862:	d1 2c       	mov	r13, r1
     864:	f0 2d       	mov	r31, r0
     866:	f6 01       	movw	r30, r12
     868:	d1 83       	std	Z+1, r29	; 0x01
     86a:	c0 83       	st	Z, r28
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     86c:	0f 2e       	mov	r0, r31
     86e:	fa e9       	ldi	r31, 0x9A	; 154
     870:	ef 2e       	mov	r14, r31
     872:	f1 2c       	mov	r15, r1
     874:	f0 2d       	mov	r31, r0
     876:	f7 01       	movw	r30, r14
     878:	d1 83       	std	Z+1, r29	; 0x01
     87a:	c0 83       	st	Z, r28
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     87c:	0c e9       	ldi	r16, 0x9C	; 156
     87e:	10 e0       	ldi	r17, 0x00	; 0
     880:	f8 01       	movw	r30, r16
     882:	d1 83       	std	Z+1, r29	; 0x01
     884:	c0 83       	st	Z, r28
	
	quad_output_set_throttle(DEFAULT_PWM_OUTPUT);
     886:	86 eb       	ldi	r24, 0xB6	; 182
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	9b df       	rcall	.-202    	; 0x7c2 <_Z24quad_output_set_throttlei>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
     88c:	f4 01       	movw	r30, r8
     88e:	d1 83       	std	Z+1, r29	; 0x01
     890:	c0 83       	st	Z, r28
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
     892:	f5 01       	movw	r30, r10
     894:	d1 83       	std	Z+1, r29	; 0x01
     896:	c0 83       	st	Z, r28
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
     898:	f6 01       	movw	r30, r12
     89a:	d1 83       	std	Z+1, r29	; 0x01
     89c:	c0 83       	st	Z, r28
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
     89e:	f7 01       	movw	r30, r14
     8a0:	d1 83       	std	Z+1, r29	; 0x01
     8a2:	c0 83       	st	Z, r28
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
     8a4:	f8 01       	movw	r30, r16
     8a6:	d1 83       	std	Z+1, r29	; 0x01
     8a8:	c0 83       	st	Z, r28
	quad_output_set_aileron(DEFAULT_PWM_OUTPUT);
	quad_output_set_elevator(DEFAULT_PWM_OUTPUT);
	quad_output_set_rudder(DEFAULT_PWM_OUTPUT);
	quad_output_set_gear(DEFAULT_PWM_OUTPUT);
	quad_output_set_aux(DEFAULT_PWM_OUTPUT);
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	df 90       	pop	r13
     8b8:	cf 90       	pop	r12
     8ba:	bf 90       	pop	r11
     8bc:	af 90       	pop	r10
     8be:	9f 90       	pop	r9
     8c0:	8f 90       	pop	r8
     8c2:	08 95       	ret

000008c4 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	0b b6       	in	r0, 0x3b	; 59
     8d0:	0f 92       	push	r0
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	cf 93       	push	r28
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     8ec:	83 b1       	in	r24, 0x03	; 3
     8ee:	c0 91 65 02 	lds	r28, 0x0265
     8f2:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     8f4:	83 b1       	in	r24, 0x03	; 3
     8f6:	80 93 65 02 	sts	0x0265, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     8fa:	c0 ff       	sbrs	r28, 0
     8fc:	1c c0       	rjmp	.+56     	; 0x936 <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     8fe:	18 9b       	sbis	0x03, 0	; 3
     900:	0a c0       	rjmp	.+20     	; 0x916 <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     902:	2a d1       	rcall	.+596    	; 0xb58 <_Z6microsv>
     904:	60 93 7a 02 	sts	0x027A, r22
     908:	70 93 7b 02 	sts	0x027B, r23
     90c:	80 93 7c 02 	sts	0x027C, r24
     910:	90 93 7d 02 	sts	0x027D, r25
     914:	10 c0       	rjmp	.+32     	; 0x936 <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     916:	20 d1       	rcall	.+576    	; 0xb58 <_Z6microsv>
     918:	20 91 7a 02 	lds	r18, 0x027A
     91c:	30 91 7b 02 	lds	r19, 0x027B
     920:	62 1b       	sub	r22, r18
     922:	73 0b       	sbc	r23, r19
     924:	70 93 8a 02 	sts	0x028A, r23
     928:	60 93 89 02 	sts	0x0289, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     92c:	80 91 7e 02 	lds	r24, 0x027E
     930:	81 60       	ori	r24, 0x01	; 1
     932:	80 93 7e 02 	sts	0x027E, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     936:	c1 ff       	sbrs	r28, 1
     938:	1c c0       	rjmp	.+56     	; 0x972 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     93a:	19 9b       	sbis	0x03, 1	; 3
     93c:	0a c0       	rjmp	.+20     	; 0x952 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     93e:	0c d1       	rcall	.+536    	; 0xb58 <_Z6microsv>
     940:	60 93 76 02 	sts	0x0276, r22
     944:	70 93 77 02 	sts	0x0277, r23
     948:	80 93 78 02 	sts	0x0278, r24
     94c:	90 93 79 02 	sts	0x0279, r25
     950:	10 c0       	rjmp	.+32     	; 0x972 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     952:	02 d1       	rcall	.+516    	; 0xb58 <_Z6microsv>
     954:	20 91 76 02 	lds	r18, 0x0276
     958:	30 91 77 02 	lds	r19, 0x0277
     95c:	62 1b       	sub	r22, r18
     95e:	73 0b       	sbc	r23, r19
     960:	70 93 88 02 	sts	0x0288, r23
     964:	60 93 87 02 	sts	0x0287, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     968:	80 91 7e 02 	lds	r24, 0x027E
     96c:	82 60       	ori	r24, 0x02	; 2
     96e:	80 93 7e 02 	sts	0x027E, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     972:	c2 ff       	sbrs	r28, 2
     974:	1c c0       	rjmp	.+56     	; 0x9ae <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     976:	1a 9b       	sbis	0x03, 2	; 3
     978:	0a c0       	rjmp	.+20     	; 0x98e <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     97a:	ee d0       	rcall	.+476    	; 0xb58 <_Z6microsv>
     97c:	60 93 72 02 	sts	0x0272, r22
     980:	70 93 73 02 	sts	0x0273, r23
     984:	80 93 74 02 	sts	0x0274, r24
     988:	90 93 75 02 	sts	0x0275, r25
     98c:	10 c0       	rjmp	.+32     	; 0x9ae <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     98e:	e4 d0       	rcall	.+456    	; 0xb58 <_Z6microsv>
     990:	20 91 72 02 	lds	r18, 0x0272
     994:	30 91 73 02 	lds	r19, 0x0273
     998:	62 1b       	sub	r22, r18
     99a:	73 0b       	sbc	r23, r19
     99c:	70 93 86 02 	sts	0x0286, r23
     9a0:	60 93 85 02 	sts	0x0285, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     9a4:	80 91 7e 02 	lds	r24, 0x027E
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	80 93 7e 02 	sts	0x027E, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     9ae:	c3 ff       	sbrs	r28, 3
     9b0:	1c c0       	rjmp	.+56     	; 0x9ea <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     9b2:	1b 9b       	sbis	0x03, 3	; 3
     9b4:	0a c0       	rjmp	.+20     	; 0x9ca <__vector_9+0x106>
		{
			ulRudderStart = micros();
     9b6:	d0 d0       	rcall	.+416    	; 0xb58 <_Z6microsv>
     9b8:	60 93 6e 02 	sts	0x026E, r22
     9bc:	70 93 6f 02 	sts	0x026F, r23
     9c0:	80 93 70 02 	sts	0x0270, r24
     9c4:	90 93 71 02 	sts	0x0271, r25
     9c8:	10 c0       	rjmp	.+32     	; 0x9ea <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     9ca:	c6 d0       	rcall	.+396    	; 0xb58 <_Z6microsv>
     9cc:	20 91 6e 02 	lds	r18, 0x026E
     9d0:	30 91 6f 02 	lds	r19, 0x026F
     9d4:	62 1b       	sub	r22, r18
     9d6:	73 0b       	sbc	r23, r19
     9d8:	70 93 84 02 	sts	0x0284, r23
     9dc:	60 93 83 02 	sts	0x0283, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     9e0:	80 91 7e 02 	lds	r24, 0x027E
     9e4:	88 60       	ori	r24, 0x08	; 8
     9e6:	80 93 7e 02 	sts	0x027E, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     9ea:	c4 ff       	sbrs	r28, 4
     9ec:	1c c0       	rjmp	.+56     	; 0xa26 <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     9ee:	1c 9b       	sbis	0x03, 4	; 3
     9f0:	0a c0       	rjmp	.+20     	; 0xa06 <__vector_9+0x142>
		{
			ulGearStart = micros();
     9f2:	b2 d0       	rcall	.+356    	; 0xb58 <_Z6microsv>
     9f4:	60 93 6a 02 	sts	0x026A, r22
     9f8:	70 93 6b 02 	sts	0x026B, r23
     9fc:	80 93 6c 02 	sts	0x026C, r24
     a00:	90 93 6d 02 	sts	0x026D, r25
     a04:	10 c0       	rjmp	.+32     	; 0xa26 <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     a06:	a8 d0       	rcall	.+336    	; 0xb58 <_Z6microsv>
     a08:	20 91 6a 02 	lds	r18, 0x026A
     a0c:	30 91 6b 02 	lds	r19, 0x026B
     a10:	62 1b       	sub	r22, r18
     a12:	73 0b       	sbc	r23, r19
     a14:	70 93 82 02 	sts	0x0282, r23
     a18:	60 93 81 02 	sts	0x0281, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     a1c:	80 91 7e 02 	lds	r24, 0x027E
     a20:	80 61       	ori	r24, 0x10	; 16
     a22:	80 93 7e 02 	sts	0x027E, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     a26:	c5 ff       	sbrs	r28, 5
     a28:	1c c0       	rjmp	.+56     	; 0xa62 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     a2a:	1d 9b       	sbis	0x03, 5	; 3
     a2c:	0a c0       	rjmp	.+20     	; 0xa42 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     a2e:	94 d0       	rcall	.+296    	; 0xb58 <_Z6microsv>
     a30:	60 93 66 02 	sts	0x0266, r22
     a34:	70 93 67 02 	sts	0x0267, r23
     a38:	80 93 68 02 	sts	0x0268, r24
     a3c:	90 93 69 02 	sts	0x0269, r25
     a40:	10 c0       	rjmp	.+32     	; 0xa62 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     a42:	8a d0       	rcall	.+276    	; 0xb58 <_Z6microsv>
     a44:	20 91 66 02 	lds	r18, 0x0266
     a48:	30 91 67 02 	lds	r19, 0x0267
     a4c:	62 1b       	sub	r22, r18
     a4e:	73 0b       	sbc	r23, r19
     a50:	70 93 80 02 	sts	0x0280, r23
     a54:	60 93 7f 02 	sts	0x027F, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     a58:	80 91 7e 02 	lds	r24, 0x027E
     a5c:	80 62       	ori	r24, 0x20	; 32
     a5e:	80 93 7e 02 	sts	0x027E, r24
		}
	}
}
     a62:	ff 91       	pop	r31
     a64:	ef 91       	pop	r30
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
     a8a:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
     a8c:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
     a8e:	eb e6       	ldi	r30, 0x6B	; 107
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
     a98:	80 81       	ld	r24, Z
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
     a9e:	80 81       	ld	r24, Z
     aa0:	84 60       	ori	r24, 0x04	; 4
     aa2:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
     aa4:	80 81       	ld	r24, Z
     aa6:	88 60       	ori	r24, 0x08	; 8
     aa8:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
     aaa:	80 81       	ld	r24, Z
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
     ab6:	e8 e6       	ldi	r30, 0x68	; 104
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	80 83       	st	Z, r24
	sei(); //enable interrupts
     ac0:	78 94       	sei
     ac2:	08 95       	ret

00000ac4 <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
     ac4:	1f 92       	push	r1
     ac6:	0f 92       	push	r0
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	0f 92       	push	r0
     acc:	11 24       	eor	r1, r1
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	80 91 8c 02 	lds	r24, 0x028C
     ade:	90 91 8d 02 	lds	r25, 0x028D
     ae2:	a0 91 8e 02 	lds	r26, 0x028E
     ae6:	b0 91 8f 02 	lds	r27, 0x028F
     aea:	30 91 8b 02 	lds	r19, 0x028B
     aee:	23 e0       	ldi	r18, 0x03	; 3
     af0:	23 0f       	add	r18, r19
     af2:	2d 37       	cpi	r18, 0x7D	; 125
     af4:	20 f4       	brcc	.+8      	; 0xafe <__vector_23+0x3a>
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	a1 1d       	adc	r26, r1
     afa:	b1 1d       	adc	r27, r1
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <__vector_23+0x44>
     afe:	26 e8       	ldi	r18, 0x86	; 134
     b00:	23 0f       	add	r18, r19
     b02:	02 96       	adiw	r24, 0x02	; 2
     b04:	a1 1d       	adc	r26, r1
     b06:	b1 1d       	adc	r27, r1
     b08:	20 93 8b 02 	sts	0x028B, r18
     b0c:	80 93 8c 02 	sts	0x028C, r24
     b10:	90 93 8d 02 	sts	0x028D, r25
     b14:	a0 93 8e 02 	sts	0x028E, r26
     b18:	b0 93 8f 02 	sts	0x028F, r27
     b1c:	80 91 90 02 	lds	r24, 0x0290
     b20:	90 91 91 02 	lds	r25, 0x0291
     b24:	a0 91 92 02 	lds	r26, 0x0292
     b28:	b0 91 93 02 	lds	r27, 0x0293
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	a1 1d       	adc	r26, r1
     b30:	b1 1d       	adc	r27, r1
     b32:	80 93 90 02 	sts	0x0290, r24
     b36:	90 93 91 02 	sts	0x0291, r25
     b3a:	a0 93 92 02 	sts	0x0292, r26
     b3e:	b0 93 93 02 	sts	0x0293, r27
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	3f 91       	pop	r19
     b4c:	2f 91       	pop	r18
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
     b58:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     b5a:	f8 94       	cli
	m = timer0_overflow_count;
     b5c:	80 91 90 02 	lds	r24, 0x0290
     b60:	90 91 91 02 	lds	r25, 0x0291
     b64:	a0 91 92 02 	lds	r26, 0x0292
     b68:	b0 91 93 02 	lds	r27, 0x0293
	t = TCNT0;
     b6c:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     b6e:	a8 9b       	sbis	0x15, 0	; 21
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <_Z6microsv+0x1e>
     b72:	2f 3f       	cpi	r18, 0xFF	; 255
     b74:	a9 f4       	brne	.+42     	; 0xba0 <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b76:	3f bf       	out	0x3f, r19	; 63
	
	sei();
     b78:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b7a:	ba 2f       	mov	r27, r26
     b7c:	a9 2f       	mov	r26, r25
     b7e:	98 2f       	mov	r25, r24
     b80:	88 27       	eor	r24, r24
     b82:	82 0f       	add	r24, r18
     b84:	91 1d       	adc	r25, r1
     b86:	a1 1d       	adc	r26, r1
     b88:	b1 1d       	adc	r27, r1
     b8a:	bc 01       	movw	r22, r24
     b8c:	cd 01       	movw	r24, r26
     b8e:	66 0f       	add	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	88 1f       	adc	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	66 0f       	add	r22, r22
     b98:	77 1f       	adc	r23, r23
     b9a:	88 1f       	adc	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	a1 1d       	adc	r26, r1
     ba4:	b1 1d       	adc	r27, r1
     ba6:	e7 cf       	rjmp	.-50     	; 0xb76 <_Z6microsv+0x1e>

00000ba8 <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
     bae:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	85 bd       	out	0x25, r24	; 37
     bb4:	08 95       	ret

00000bb6 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	ec 01       	movw	r28, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	aa 27       	eor	r26, r26
     bc0:	97 fd       	sbrc	r25, 7
     bc2:	a0 95       	com	r26
     bc4:	ba 2f       	mov	r27, r26
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	9c 01       	movw	r18, r24
     bd8:	ad 01       	movw	r20, r26
     bda:	22 0f       	add	r18, r18
     bdc:	33 1f       	adc	r19, r19
     bde:	44 1f       	adc	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	44 1f       	adc	r20, r20
     be8:	55 1f       	adc	r21, r21
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	74 e2       	ldi	r23, 0x24	; 36
     bee:	84 ef       	ldi	r24, 0xF4	; 244
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	37 d3       	rcall	.+1646   	; 0x1262 <__udivmodsi4>
     bf4:	21 50       	subi	r18, 0x01	; 1
     bf6:	31 09       	sbc	r19, r1
     bf8:	20 97       	sbiw	r28, 0x00	; 0
     bfa:	59 f4       	brne	.+22     	; 0xc12 <_Z10USART_initii+0x5c>
     bfc:	30 93 c5 00 	sts	0x00C5, r19
     c00:	20 93 c4 00 	sts	0x00C4, r18
     c04:	88 e1       	ldi	r24, 0x18	; 24
     c06:	80 93 c1 00 	sts	0x00C1, r24
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	80 93 c2 00 	sts	0x00C2, r24
     c10:	28 c0       	rjmp	.+80     	; 0xc62 <_Z10USART_initii+0xac>
     c12:	c1 30       	cpi	r28, 0x01	; 1
     c14:	d1 05       	cpc	r29, r1
     c16:	59 f4       	brne	.+22     	; 0xc2e <_Z10USART_initii+0x78>
     c18:	30 93 cd 00 	sts	0x00CD, r19
     c1c:	20 93 cc 00 	sts	0x00CC, r18
     c20:	88 e1       	ldi	r24, 0x18	; 24
     c22:	80 93 c9 00 	sts	0x00C9, r24
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	80 93 ca 00 	sts	0x00CA, r24
     c2c:	1a c0       	rjmp	.+52     	; 0xc62 <_Z10USART_initii+0xac>
     c2e:	c2 30       	cpi	r28, 0x02	; 2
     c30:	d1 05       	cpc	r29, r1
     c32:	59 f4       	brne	.+22     	; 0xc4a <_Z10USART_initii+0x94>
     c34:	30 93 d5 00 	sts	0x00D5, r19
     c38:	20 93 d4 00 	sts	0x00D4, r18
     c3c:	88 e1       	ldi	r24, 0x18	; 24
     c3e:	80 93 d1 00 	sts	0x00D1, r24
     c42:	86 e0       	ldi	r24, 0x06	; 6
     c44:	80 93 d2 00 	sts	0x00D2, r24
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <_Z10USART_initii+0xac>
     c4a:	23 97       	sbiw	r28, 0x03	; 3
     c4c:	51 f4       	brne	.+20     	; 0xc62 <_Z10USART_initii+0xac>
     c4e:	30 93 35 01 	sts	0x0135, r19
     c52:	20 93 34 01 	sts	0x0134, r18
     c56:	88 e1       	ldi	r24, 0x18	; 24
     c58:	80 93 31 01 	sts	0x0131, r24
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	80 93 32 01 	sts	0x0132, r24
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <_Z10USART_sendih>:
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	41 f4       	brne	.+16     	; 0xc7c <_Z10USART_sendih+0x14>
     c6c:	e0 ec       	ldi	r30, 0xC0	; 192
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	85 ff       	sbrs	r24, 5
     c74:	fd cf       	rjmp	.-6      	; 0xc70 <_Z10USART_sendih+0x8>
     c76:	60 93 c6 00 	sts	0x00C6, r22
     c7a:	08 95       	ret
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	91 05       	cpc	r25, r1
     c80:	41 f4       	brne	.+16     	; 0xc92 <_Z10USART_sendih+0x2a>
     c82:	e8 ec       	ldi	r30, 0xC8	; 200
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	85 ff       	sbrs	r24, 5
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <_Z10USART_sendih+0x1e>
     c8c:	60 93 ce 00 	sts	0x00CE, r22
     c90:	08 95       	ret
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	91 05       	cpc	r25, r1
     c96:	41 f4       	brne	.+16     	; 0xca8 <_Z10USART_sendih+0x40>
     c98:	e0 ed       	ldi	r30, 0xD0	; 208
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	85 ff       	sbrs	r24, 5
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <_Z10USART_sendih+0x34>
     ca2:	60 93 d6 00 	sts	0x00D6, r22
     ca6:	08 95       	ret
     ca8:	03 97       	sbiw	r24, 0x03	; 3
     caa:	39 f4       	brne	.+14     	; 0xcba <_Z10USART_sendih+0x52>
     cac:	e0 e3       	ldi	r30, 0x30	; 48
     cae:	f1 e0       	ldi	r31, 0x01	; 1
     cb0:	80 81       	ld	r24, Z
     cb2:	85 ff       	sbrs	r24, 5
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <_Z10USART_sendih+0x48>
     cb6:	60 93 36 01 	sts	0x0136, r22
     cba:	08 95       	ret

00000cbc <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	8c 01       	movw	r16, r24
     cc6:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     cc8:	68 81       	ld	r22, Y
     cca:	66 23       	and	r22, r22
     ccc:	31 f0       	breq	.+12     	; 0xcda <_Z15USART_putstringiPKc+0x1e>
     cce:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
     cd0:	c8 01       	movw	r24, r16
     cd2:	ca df       	rcall	.-108    	; 0xc68 <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     cd4:	69 91       	ld	r22, Y+
     cd6:	61 11       	cpse	r22, r1
     cd8:	fb cf       	rjmp	.-10     	; 0xcd0 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <_Z10initialisev>:

bool initialise()
{
	bool success = true;
	
	USART_init(USART_PC,9600);
     ce4:	60 e8       	ldi	r22, 0x80	; 128
     ce6:	75 e2       	ldi	r23, 0x25	; 37
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	64 df       	rcall	.-312    	; 0xbb6 <_Z10USART_initii>
	initTimers();
     cee:	5c df       	rcall	.-328    	; 0xba8 <_Z10initTimersv>
	rx_init();
     cf0:	cc de       	rcall	.-616    	; 0xa8a <_Z7rx_initv>
	/*
	if(altimeter_init()==false)
		success=false;
		*/

	quad_output_init();
     cf2:	7a dd       	rcall	.-1292   	; 0x7e8 <_Z16quad_output_initv>
			_delay_ms(200);
		}
	}
	*/
	
	i2c_init();
     cf4:	b4 da       	rcall	.-2712   	; 0x25e <i2c_init>
	
	init_HMC5883L();
     cf6:	16 dd       	rcall	.-1492   	; 0x724 <_Z13init_HMC5883Lv>
	
	debug_println("Initialization succeeded!");
     cf8:	8e e2       	ldi	r24, 0x2E	; 46
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	21 dd       	rcall	.-1470   	; 0x740 <_Z13debug_printlnPKc>
	
	//beep some pattern I can recognize
	debug_beep_long();
     cfe:	55 dd       	rcall	.-1366   	; 0x7aa <_Z15debug_beep_longv>
     d00:	2f ef       	ldi	r18, 0xFF	; 255
     d02:	84 e3       	ldi	r24, 0x34	; 52
     d04:	9c e0       	ldi	r25, 0x0C	; 12
     d06:	21 50       	subi	r18, 0x01	; 1
     d08:	80 40       	sbci	r24, 0x00	; 0
     d0a:	90 40       	sbci	r25, 0x00	; 0
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <_Z10initialisev+0x22>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <_Z10initialisev+0x2c>
     d10:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d12:	3f dd       	rcall	.-1410   	; 0x792 <_Z10debug_beepv>
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	84 e3       	ldi	r24, 0x34	; 52
     d18:	9c e0       	ldi	r25, 0x0C	; 12
     d1a:	21 50       	subi	r18, 0x01	; 1
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	90 40       	sbci	r25, 0x00	; 0
     d20:	e1 f7       	brne	.-8      	; 0xd1a <_Z10initialisev+0x36>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <_Z10initialisev+0x40>
     d24:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d26:	35 dd       	rcall	.-1430   	; 0x792 <_Z10debug_beepv>
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	84 e3       	ldi	r24, 0x34	; 52
     d2c:	9c e0       	ldi	r25, 0x0C	; 12
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <_Z10initialisev+0x4a>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <_Z10initialisev+0x54>
     d38:	00 00       	nop
	_delay_ms(250);
	debug_beep();
     d3a:	2b dd       	rcall	.-1450   	; 0x792 <_Z10debug_beepv>
     d3c:	2f ef       	ldi	r18, 0xFF	; 255
     d3e:	84 e3       	ldi	r24, 0x34	; 52
     d40:	9c e0       	ldi	r25, 0x0C	; 12
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	80 40       	sbci	r24, 0x00	; 0
     d46:	90 40       	sbci	r25, 0x00	; 0
     d48:	e1 f7       	brne	.-8      	; 0xd42 <_Z10initialisev+0x5e>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <_Z10initialisev+0x68>
     d4c:	00 00       	nop
	_delay_ms(250);
	debug_beep_long();
     d4e:	2d dd       	rcall	.-1446   	; 0x7aa <_Z15debug_beep_longv>
	
	return success;
}
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	08 95       	ret

00000d54 <main>:

bool initialise();

int main(void)
{
	initialise();
     d54:	c7 df       	rcall	.-114    	; 0xce4 <_Z10initialisev>
	
	while(1)
	{
		getHeading();
     d56:	e2 da       	rcall	.-2620   	; 0x31c <_Z10getHeadingv>
     d58:	2f ef       	ldi	r18, 0xFF	; 255
     d5a:	89 e6       	ldi	r24, 0x69	; 105
     d5c:	98 e1       	ldi	r25, 0x18	; 24
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	80 40       	sbci	r24, 0x00	; 0
     d62:	90 40       	sbci	r25, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <main+0xa>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <main+0x14>
     d68:	00 00       	nop
     d6a:	f5 cf       	rjmp	.-22     	; 0xd56 <main+0x2>

00000d6c <__subsf3>:
     d6c:	50 58       	subi	r21, 0x80	; 128

00000d6e <__addsf3>:
     d6e:	bb 27       	eor	r27, r27
     d70:	aa 27       	eor	r26, r26
     d72:	0e d0       	rcall	.+28     	; 0xd90 <__addsf3x>
     d74:	cb c1       	rjmp	.+918    	; 0x110c <__fp_round>
     d76:	bc d1       	rcall	.+888    	; 0x10f0 <__fp_pscA>
     d78:	30 f0       	brcs	.+12     	; 0xd86 <__addsf3+0x18>
     d7a:	c1 d1       	rcall	.+898    	; 0x10fe <__fp_pscB>
     d7c:	20 f0       	brcs	.+8      	; 0xd86 <__addsf3+0x18>
     d7e:	31 f4       	brne	.+12     	; 0xd8c <__addsf3+0x1e>
     d80:	9f 3f       	cpi	r25, 0xFF	; 255
     d82:	11 f4       	brne	.+4      	; 0xd88 <__addsf3+0x1a>
     d84:	1e f4       	brtc	.+6      	; 0xd8c <__addsf3+0x1e>
     d86:	8c c1       	rjmp	.+792    	; 0x10a0 <__fp_nan>
     d88:	0e f4       	brtc	.+2      	; 0xd8c <__addsf3+0x1e>
     d8a:	e0 95       	com	r30
     d8c:	e7 fb       	bst	r30, 7
     d8e:	82 c1       	rjmp	.+772    	; 0x1094 <__fp_inf>

00000d90 <__addsf3x>:
     d90:	e9 2f       	mov	r30, r25
     d92:	cd d1       	rcall	.+922    	; 0x112e <__fp_split3>
     d94:	80 f3       	brcs	.-32     	; 0xd76 <__addsf3+0x8>
     d96:	ba 17       	cp	r27, r26
     d98:	62 07       	cpc	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	84 07       	cpc	r24, r20
     d9e:	95 07       	cpc	r25, r21
     da0:	18 f0       	brcs	.+6      	; 0xda8 <__addsf3x+0x18>
     da2:	71 f4       	brne	.+28     	; 0xdc0 <__addsf3x+0x30>
     da4:	9e f5       	brtc	.+102    	; 0xe0c <__addsf3x+0x7c>
     da6:	e5 c1       	rjmp	.+970    	; 0x1172 <__fp_zero>
     da8:	0e f4       	brtc	.+2      	; 0xdac <__addsf3x+0x1c>
     daa:	e0 95       	com	r30
     dac:	0b 2e       	mov	r0, r27
     dae:	ba 2f       	mov	r27, r26
     db0:	a0 2d       	mov	r26, r0
     db2:	0b 01       	movw	r0, r22
     db4:	b9 01       	movw	r22, r18
     db6:	90 01       	movw	r18, r0
     db8:	0c 01       	movw	r0, r24
     dba:	ca 01       	movw	r24, r20
     dbc:	a0 01       	movw	r20, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	ff 27       	eor	r31, r31
     dc2:	59 1b       	sub	r21, r25
     dc4:	99 f0       	breq	.+38     	; 0xdec <__addsf3x+0x5c>
     dc6:	59 3f       	cpi	r21, 0xF9	; 249
     dc8:	50 f4       	brcc	.+20     	; 0xdde <__addsf3x+0x4e>
     dca:	50 3e       	cpi	r21, 0xE0	; 224
     dcc:	68 f1       	brcs	.+90     	; 0xe28 <__addsf3x+0x98>
     dce:	1a 16       	cp	r1, r26
     dd0:	f0 40       	sbci	r31, 0x00	; 0
     dd2:	a2 2f       	mov	r26, r18
     dd4:	23 2f       	mov	r18, r19
     dd6:	34 2f       	mov	r19, r20
     dd8:	44 27       	eor	r20, r20
     dda:	58 5f       	subi	r21, 0xF8	; 248
     ddc:	f3 cf       	rjmp	.-26     	; 0xdc4 <__addsf3x+0x34>
     dde:	46 95       	lsr	r20
     de0:	37 95       	ror	r19
     de2:	27 95       	ror	r18
     de4:	a7 95       	ror	r26
     de6:	f0 40       	sbci	r31, 0x00	; 0
     de8:	53 95       	inc	r21
     dea:	c9 f7       	brne	.-14     	; 0xdde <__addsf3x+0x4e>
     dec:	7e f4       	brtc	.+30     	; 0xe0c <__addsf3x+0x7c>
     dee:	1f 16       	cp	r1, r31
     df0:	ba 0b       	sbc	r27, r26
     df2:	62 0b       	sbc	r22, r18
     df4:	73 0b       	sbc	r23, r19
     df6:	84 0b       	sbc	r24, r20
     df8:	ba f0       	brmi	.+46     	; 0xe28 <__addsf3x+0x98>
     dfa:	91 50       	subi	r25, 0x01	; 1
     dfc:	a1 f0       	breq	.+40     	; 0xe26 <__addsf3x+0x96>
     dfe:	ff 0f       	add	r31, r31
     e00:	bb 1f       	adc	r27, r27
     e02:	66 1f       	adc	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	c2 f7       	brpl	.-16     	; 0xdfa <__addsf3x+0x6a>
     e0a:	0e c0       	rjmp	.+28     	; 0xe28 <__addsf3x+0x98>
     e0c:	ba 0f       	add	r27, r26
     e0e:	62 1f       	adc	r22, r18
     e10:	73 1f       	adc	r23, r19
     e12:	84 1f       	adc	r24, r20
     e14:	48 f4       	brcc	.+18     	; 0xe28 <__addsf3x+0x98>
     e16:	87 95       	ror	r24
     e18:	77 95       	ror	r23
     e1a:	67 95       	ror	r22
     e1c:	b7 95       	ror	r27
     e1e:	f7 95       	ror	r31
     e20:	9e 3f       	cpi	r25, 0xFE	; 254
     e22:	08 f0       	brcs	.+2      	; 0xe26 <__addsf3x+0x96>
     e24:	b3 cf       	rjmp	.-154    	; 0xd8c <__addsf3+0x1e>
     e26:	93 95       	inc	r25
     e28:	88 0f       	add	r24, r24
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <__addsf3x+0x9e>
     e2c:	99 27       	eor	r25, r25
     e2e:	ee 0f       	add	r30, r30
     e30:	97 95       	ror	r25
     e32:	87 95       	ror	r24
     e34:	08 95       	ret
     e36:	5c d1       	rcall	.+696    	; 0x10f0 <__fp_pscA>
     e38:	58 f0       	brcs	.+22     	; 0xe50 <__addsf3x+0xc0>
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__addsf3x+0xb2>
     e40:	9e ef       	ldi	r25, 0xFE	; 254
     e42:	5d d1       	rcall	.+698    	; 0x10fe <__fp_pscB>
     e44:	28 f0       	brcs	.+10     	; 0xe50 <__addsf3x+0xc0>
     e46:	40 e8       	ldi	r20, 0x80	; 128
     e48:	51 e0       	ldi	r21, 0x01	; 1
     e4a:	59 f4       	brne	.+22     	; 0xe62 <atan2+0xe>
     e4c:	5e ef       	ldi	r21, 0xFE	; 254
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <atan2+0xe>
     e50:	27 c1       	rjmp	.+590    	; 0x10a0 <__fp_nan>
     e52:	8f c1       	rjmp	.+798    	; 0x1172 <__fp_zero>

00000e54 <atan2>:
     e54:	e9 2f       	mov	r30, r25
     e56:	e0 78       	andi	r30, 0x80	; 128
     e58:	6a d1       	rcall	.+724    	; 0x112e <__fp_split3>
     e5a:	68 f3       	brcs	.-38     	; 0xe36 <__addsf3x+0xa6>
     e5c:	09 2e       	mov	r0, r25
     e5e:	05 2a       	or	r0, r21
     e60:	c1 f3       	breq	.-16     	; 0xe52 <__addsf3x+0xc2>
     e62:	26 17       	cp	r18, r22
     e64:	37 07       	cpc	r19, r23
     e66:	48 07       	cpc	r20, r24
     e68:	59 07       	cpc	r21, r25
     e6a:	38 f0       	brcs	.+14     	; 0xe7a <atan2+0x26>
     e6c:	0e 2e       	mov	r0, r30
     e6e:	07 f8       	bld	r0, 7
     e70:	e0 25       	eor	r30, r0
     e72:	69 f0       	breq	.+26     	; 0xe8e <atan2+0x3a>
     e74:	e0 25       	eor	r30, r0
     e76:	e0 64       	ori	r30, 0x40	; 64
     e78:	0a c0       	rjmp	.+20     	; 0xe8e <atan2+0x3a>
     e7a:	ef 63       	ori	r30, 0x3F	; 63
     e7c:	07 f8       	bld	r0, 7
     e7e:	00 94       	com	r0
     e80:	07 fa       	bst	r0, 7
     e82:	db 01       	movw	r26, r22
     e84:	b9 01       	movw	r22, r18
     e86:	9d 01       	movw	r18, r26
     e88:	dc 01       	movw	r26, r24
     e8a:	ca 01       	movw	r24, r20
     e8c:	ad 01       	movw	r20, r26
     e8e:	ef 93       	push	r30
     e90:	47 d0       	rcall	.+142    	; 0xf20 <__divsf3_pse>
     e92:	3c d1       	rcall	.+632    	; 0x110c <__fp_round>
     e94:	0a d0       	rcall	.+20     	; 0xeaa <atan>
     e96:	5f 91       	pop	r21
     e98:	55 23       	and	r21, r21
     e9a:	31 f0       	breq	.+12     	; 0xea8 <atan2+0x54>
     e9c:	2b ed       	ldi	r18, 0xDB	; 219
     e9e:	3f e0       	ldi	r19, 0x0F	; 15
     ea0:	49 e4       	ldi	r20, 0x49	; 73
     ea2:	50 fd       	sbrc	r21, 0
     ea4:	49 ec       	ldi	r20, 0xC9	; 201
     ea6:	63 cf       	rjmp	.-314    	; 0xd6e <__addsf3>
     ea8:	08 95       	ret

00000eaa <atan>:
     eaa:	df 93       	push	r29
     eac:	dd 27       	eor	r29, r29
     eae:	b9 2f       	mov	r27, r25
     eb0:	bf 77       	andi	r27, 0x7F	; 127
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	16 16       	cp	r1, r22
     eb8:	17 06       	cpc	r1, r23
     eba:	48 07       	cpc	r20, r24
     ebc:	5b 07       	cpc	r21, r27
     ebe:	10 f4       	brcc	.+4      	; 0xec4 <atan+0x1a>
     ec0:	d9 2f       	mov	r29, r25
     ec2:	62 d1       	rcall	.+708    	; 0x1188 <inverse>
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	7f 93       	push	r23
     eca:	6f 93       	push	r22
     ecc:	c7 d1       	rcall	.+910    	; 0x125c <square>
     ece:	e4 ee       	ldi	r30, 0xE4	; 228
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	e9 d0       	rcall	.+466    	; 0x10a6 <__fp_powser>
     ed4:	1b d1       	rcall	.+566    	; 0x110c <__fp_round>
     ed6:	2f 91       	pop	r18
     ed8:	3f 91       	pop	r19
     eda:	4f 91       	pop	r20
     edc:	5f 91       	pop	r21
     ede:	67 d1       	rcall	.+718    	; 0x11ae <__mulsf3x>
     ee0:	dd 23       	and	r29, r29
     ee2:	49 f0       	breq	.+18     	; 0xef6 <atan+0x4c>
     ee4:	90 58       	subi	r25, 0x80	; 128
     ee6:	a2 ea       	ldi	r26, 0xA2	; 162
     ee8:	2a ed       	ldi	r18, 0xDA	; 218
     eea:	3f e0       	ldi	r19, 0x0F	; 15
     eec:	49 ec       	ldi	r20, 0xC9	; 201
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	d0 78       	andi	r29, 0x80	; 128
     ef2:	5d 27       	eor	r21, r29
     ef4:	4d df       	rcall	.-358    	; 0xd90 <__addsf3x>
     ef6:	df 91       	pop	r29
     ef8:	09 c1       	rjmp	.+530    	; 0x110c <__fp_round>

00000efa <__cmpsf2>:
     efa:	a8 d0       	rcall	.+336    	; 0x104c <__fp_cmp>
     efc:	08 f4       	brcc	.+2      	; 0xf00 <__cmpsf2+0x6>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	08 95       	ret

00000f02 <__divsf3>:
     f02:	0c d0       	rcall	.+24     	; 0xf1c <__divsf3x>
     f04:	03 c1       	rjmp	.+518    	; 0x110c <__fp_round>
     f06:	fb d0       	rcall	.+502    	; 0x10fe <__fp_pscB>
     f08:	40 f0       	brcs	.+16     	; 0xf1a <__divsf3+0x18>
     f0a:	f2 d0       	rcall	.+484    	; 0x10f0 <__fp_pscA>
     f0c:	30 f0       	brcs	.+12     	; 0xf1a <__divsf3+0x18>
     f0e:	21 f4       	brne	.+8      	; 0xf18 <__divsf3+0x16>
     f10:	5f 3f       	cpi	r21, 0xFF	; 255
     f12:	19 f0       	breq	.+6      	; 0xf1a <__divsf3+0x18>
     f14:	bf c0       	rjmp	.+382    	; 0x1094 <__fp_inf>
     f16:	51 11       	cpse	r21, r1
     f18:	2d c1       	rjmp	.+602    	; 0x1174 <__fp_szero>
     f1a:	c2 c0       	rjmp	.+388    	; 0x10a0 <__fp_nan>

00000f1c <__divsf3x>:
     f1c:	08 d1       	rcall	.+528    	; 0x112e <__fp_split3>
     f1e:	98 f3       	brcs	.-26     	; 0xf06 <__divsf3+0x4>

00000f20 <__divsf3_pse>:
     f20:	99 23       	and	r25, r25
     f22:	c9 f3       	breq	.-14     	; 0xf16 <__divsf3+0x14>
     f24:	55 23       	and	r21, r21
     f26:	b1 f3       	breq	.-20     	; 0xf14 <__divsf3+0x12>
     f28:	95 1b       	sub	r25, r21
     f2a:	55 0b       	sbc	r21, r21
     f2c:	bb 27       	eor	r27, r27
     f2e:	aa 27       	eor	r26, r26
     f30:	62 17       	cp	r22, r18
     f32:	73 07       	cpc	r23, r19
     f34:	84 07       	cpc	r24, r20
     f36:	38 f0       	brcs	.+14     	; 0xf46 <__divsf3_pse+0x26>
     f38:	9f 5f       	subi	r25, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	44 1f       	adc	r20, r20
     f42:	aa 1f       	adc	r26, r26
     f44:	a9 f3       	breq	.-22     	; 0xf30 <__divsf3_pse+0x10>
     f46:	33 d0       	rcall	.+102    	; 0xfae <__divsf3_pse+0x8e>
     f48:	0e 2e       	mov	r0, r30
     f4a:	3a f0       	brmi	.+14     	; 0xf5a <__divsf3_pse+0x3a>
     f4c:	e0 e8       	ldi	r30, 0x80	; 128
     f4e:	30 d0       	rcall	.+96     	; 0xfb0 <__divsf3_pse+0x90>
     f50:	91 50       	subi	r25, 0x01	; 1
     f52:	50 40       	sbci	r21, 0x00	; 0
     f54:	e6 95       	lsr	r30
     f56:	00 1c       	adc	r0, r0
     f58:	ca f7       	brpl	.-14     	; 0xf4c <__divsf3_pse+0x2c>
     f5a:	29 d0       	rcall	.+82     	; 0xfae <__divsf3_pse+0x8e>
     f5c:	fe 2f       	mov	r31, r30
     f5e:	27 d0       	rcall	.+78     	; 0xfae <__divsf3_pse+0x8e>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	88 1f       	adc	r24, r24
     f66:	bb 1f       	adc	r27, r27
     f68:	26 17       	cp	r18, r22
     f6a:	37 07       	cpc	r19, r23
     f6c:	48 07       	cpc	r20, r24
     f6e:	ab 07       	cpc	r26, r27
     f70:	b0 e8       	ldi	r27, 0x80	; 128
     f72:	09 f0       	breq	.+2      	; 0xf76 <__divsf3_pse+0x56>
     f74:	bb 0b       	sbc	r27, r27
     f76:	80 2d       	mov	r24, r0
     f78:	bf 01       	movw	r22, r30
     f7a:	ff 27       	eor	r31, r31
     f7c:	93 58       	subi	r25, 0x83	; 131
     f7e:	5f 4f       	sbci	r21, 0xFF	; 255
     f80:	2a f0       	brmi	.+10     	; 0xf8c <__divsf3_pse+0x6c>
     f82:	9e 3f       	cpi	r25, 0xFE	; 254
     f84:	51 05       	cpc	r21, r1
     f86:	68 f0       	brcs	.+26     	; 0xfa2 <__divsf3_pse+0x82>
     f88:	85 c0       	rjmp	.+266    	; 0x1094 <__fp_inf>
     f8a:	f4 c0       	rjmp	.+488    	; 0x1174 <__fp_szero>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	ec f3       	brlt	.-6      	; 0xf8a <__divsf3_pse+0x6a>
     f90:	98 3e       	cpi	r25, 0xE8	; 232
     f92:	dc f3       	brlt	.-10     	; 0xf8a <__divsf3_pse+0x6a>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	9f 5f       	subi	r25, 0xFF	; 255
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__divsf3_pse+0x74>
     fa2:	88 0f       	add	r24, r24
     fa4:	91 1d       	adc	r25, r1
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	97 f9       	bld	r25, 7
     fac:	08 95       	ret
     fae:	e1 e0       	ldi	r30, 0x01	; 1
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	bb 1f       	adc	r27, r27
     fb8:	62 17       	cp	r22, r18
     fba:	73 07       	cpc	r23, r19
     fbc:	84 07       	cpc	r24, r20
     fbe:	ba 07       	cpc	r27, r26
     fc0:	20 f0       	brcs	.+8      	; 0xfca <__divsf3_pse+0xaa>
     fc2:	62 1b       	sub	r22, r18
     fc4:	73 0b       	sbc	r23, r19
     fc6:	84 0b       	sbc	r24, r20
     fc8:	ba 0b       	sbc	r27, r26
     fca:	ee 1f       	adc	r30, r30
     fcc:	88 f7       	brcc	.-30     	; 0xfb0 <__divsf3_pse+0x90>
     fce:	e0 95       	com	r30
     fd0:	08 95       	ret

00000fd2 <__floatunsisf>:
     fd2:	e8 94       	clt
     fd4:	09 c0       	rjmp	.+18     	; 0xfe8 <__floatsisf+0x12>

00000fd6 <__floatsisf>:
     fd6:	97 fb       	bst	r25, 7
     fd8:	3e f4       	brtc	.+14     	; 0xfe8 <__floatsisf+0x12>
     fda:	90 95       	com	r25
     fdc:	80 95       	com	r24
     fde:	70 95       	com	r23
     fe0:	61 95       	neg	r22
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8f 4f       	sbci	r24, 0xFF	; 255
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	99 23       	and	r25, r25
     fea:	a9 f0       	breq	.+42     	; 0x1016 <__floatsisf+0x40>
     fec:	f9 2f       	mov	r31, r25
     fee:	96 e9       	ldi	r25, 0x96	; 150
     ff0:	bb 27       	eor	r27, r27
     ff2:	93 95       	inc	r25
     ff4:	f6 95       	lsr	r31
     ff6:	87 95       	ror	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f1 11       	cpse	r31, r1
    1000:	f8 cf       	rjmp	.-16     	; 0xff2 <__floatsisf+0x1c>
    1002:	fa f4       	brpl	.+62     	; 0x1042 <__floatsisf+0x6c>
    1004:	bb 0f       	add	r27, r27
    1006:	11 f4       	brne	.+4      	; 0x100c <__floatsisf+0x36>
    1008:	60 ff       	sbrs	r22, 0
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <__floatsisf+0x6c>
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	16 c0       	rjmp	.+44     	; 0x1042 <__floatsisf+0x6c>
    1016:	88 23       	and	r24, r24
    1018:	11 f0       	breq	.+4      	; 0x101e <__floatsisf+0x48>
    101a:	96 e9       	ldi	r25, 0x96	; 150
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <__floatsisf+0x6a>
    101e:	77 23       	and	r23, r23
    1020:	21 f0       	breq	.+8      	; 0x102a <__floatsisf+0x54>
    1022:	9e e8       	ldi	r25, 0x8E	; 142
    1024:	87 2f       	mov	r24, r23
    1026:	76 2f       	mov	r23, r22
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <__floatsisf+0x5e>
    102a:	66 23       	and	r22, r22
    102c:	71 f0       	breq	.+28     	; 0x104a <__floatsisf+0x74>
    102e:	96 e8       	ldi	r25, 0x86	; 134
    1030:	86 2f       	mov	r24, r22
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	2a f0       	brmi	.+10     	; 0x1042 <__floatsisf+0x6c>
    1038:	9a 95       	dec	r25
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	da f7       	brpl	.-10     	; 0x1038 <__floatsisf+0x62>
    1042:	88 0f       	add	r24, r24
    1044:	96 95       	lsr	r25
    1046:	87 95       	ror	r24
    1048:	97 f9       	bld	r25, 7
    104a:	08 95       	ret

0000104c <__fp_cmp>:
    104c:	99 0f       	add	r25, r25
    104e:	00 08       	sbc	r0, r0
    1050:	55 0f       	add	r21, r21
    1052:	aa 0b       	sbc	r26, r26
    1054:	e0 e8       	ldi	r30, 0x80	; 128
    1056:	fe ef       	ldi	r31, 0xFE	; 254
    1058:	16 16       	cp	r1, r22
    105a:	17 06       	cpc	r1, r23
    105c:	e8 07       	cpc	r30, r24
    105e:	f9 07       	cpc	r31, r25
    1060:	c0 f0       	brcs	.+48     	; 0x1092 <__fp_cmp+0x46>
    1062:	12 16       	cp	r1, r18
    1064:	13 06       	cpc	r1, r19
    1066:	e4 07       	cpc	r30, r20
    1068:	f5 07       	cpc	r31, r21
    106a:	98 f0       	brcs	.+38     	; 0x1092 <__fp_cmp+0x46>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	95 0b       	sbc	r25, r21
    1074:	39 f4       	brne	.+14     	; 0x1084 <__fp_cmp+0x38>
    1076:	0a 26       	eor	r0, r26
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_cmp+0x46>
    107a:	23 2b       	or	r18, r19
    107c:	24 2b       	or	r18, r20
    107e:	25 2b       	or	r18, r21
    1080:	21 f4       	brne	.+8      	; 0x108a <__fp_cmp+0x3e>
    1082:	08 95       	ret
    1084:	0a 26       	eor	r0, r26
    1086:	09 f4       	brne	.+2      	; 0x108a <__fp_cmp+0x3e>
    1088:	a1 40       	sbci	r26, 0x01	; 1
    108a:	a6 95       	lsr	r26
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	81 1d       	adc	r24, r1
    1090:	81 1d       	adc	r24, r1
    1092:	08 95       	ret

00001094 <__fp_inf>:
    1094:	97 f9       	bld	r25, 7
    1096:	9f 67       	ori	r25, 0x7F	; 127
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	08 95       	ret

000010a0 <__fp_nan>:
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	80 ec       	ldi	r24, 0xC0	; 192
    10a4:	08 95       	ret

000010a6 <__fp_powser>:
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	1f 93       	push	r17
    10ac:	0f 93       	push	r16
    10ae:	ff 92       	push	r15
    10b0:	ef 92       	push	r14
    10b2:	df 92       	push	r13
    10b4:	7b 01       	movw	r14, r22
    10b6:	8c 01       	movw	r16, r24
    10b8:	68 94       	set
    10ba:	05 c0       	rjmp	.+10     	; 0x10c6 <__fp_powser+0x20>
    10bc:	da 2e       	mov	r13, r26
    10be:	ef 01       	movw	r28, r30
    10c0:	76 d0       	rcall	.+236    	; 0x11ae <__mulsf3x>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e8 94       	clt
    10c6:	a5 91       	lpm	r26, Z+
    10c8:	25 91       	lpm	r18, Z+
    10ca:	35 91       	lpm	r19, Z+
    10cc:	45 91       	lpm	r20, Z+
    10ce:	55 91       	lpm	r21, Z+
    10d0:	ae f3       	brts	.-22     	; 0x10bc <__fp_powser+0x16>
    10d2:	ef 01       	movw	r28, r30
    10d4:	5d de       	rcall	.-838    	; 0xd90 <__addsf3x>
    10d6:	fe 01       	movw	r30, r28
    10d8:	97 01       	movw	r18, r14
    10da:	a8 01       	movw	r20, r16
    10dc:	da 94       	dec	r13
    10de:	79 f7       	brne	.-34     	; 0x10be <__fp_powser+0x18>
    10e0:	df 90       	pop	r13
    10e2:	ef 90       	pop	r14
    10e4:	ff 90       	pop	r15
    10e6:	0f 91       	pop	r16
    10e8:	1f 91       	pop	r17
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <__fp_pscA>:
    10f0:	00 24       	eor	r0, r0
    10f2:	0a 94       	dec	r0
    10f4:	16 16       	cp	r1, r22
    10f6:	17 06       	cpc	r1, r23
    10f8:	18 06       	cpc	r1, r24
    10fa:	09 06       	cpc	r0, r25
    10fc:	08 95       	ret

000010fe <__fp_pscB>:
    10fe:	00 24       	eor	r0, r0
    1100:	0a 94       	dec	r0
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	05 06       	cpc	r0, r21
    110a:	08 95       	ret

0000110c <__fp_round>:
    110c:	09 2e       	mov	r0, r25
    110e:	03 94       	inc	r0
    1110:	00 0c       	add	r0, r0
    1112:	11 f4       	brne	.+4      	; 0x1118 <__fp_round+0xc>
    1114:	88 23       	and	r24, r24
    1116:	52 f0       	brmi	.+20     	; 0x112c <__fp_round+0x20>
    1118:	bb 0f       	add	r27, r27
    111a:	40 f4       	brcc	.+16     	; 0x112c <__fp_round+0x20>
    111c:	bf 2b       	or	r27, r31
    111e:	11 f4       	brne	.+4      	; 0x1124 <__fp_round+0x18>
    1120:	60 ff       	sbrs	r22, 0
    1122:	04 c0       	rjmp	.+8      	; 0x112c <__fp_round+0x20>
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	08 95       	ret

0000112e <__fp_split3>:
    112e:	57 fd       	sbrc	r21, 7
    1130:	90 58       	subi	r25, 0x80	; 128
    1132:	44 0f       	add	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	59 f0       	breq	.+22     	; 0x114e <__fp_splitA+0x10>
    1138:	5f 3f       	cpi	r21, 0xFF	; 255
    113a:	71 f0       	breq	.+28     	; 0x1158 <__fp_splitA+0x1a>
    113c:	47 95       	ror	r20

0000113e <__fp_splitA>:
    113e:	88 0f       	add	r24, r24
    1140:	97 fb       	bst	r25, 7
    1142:	99 1f       	adc	r25, r25
    1144:	61 f0       	breq	.+24     	; 0x115e <__fp_splitA+0x20>
    1146:	9f 3f       	cpi	r25, 0xFF	; 255
    1148:	79 f0       	breq	.+30     	; 0x1168 <__fp_splitA+0x2a>
    114a:	87 95       	ror	r24
    114c:	08 95       	ret
    114e:	12 16       	cp	r1, r18
    1150:	13 06       	cpc	r1, r19
    1152:	14 06       	cpc	r1, r20
    1154:	55 1f       	adc	r21, r21
    1156:	f2 cf       	rjmp	.-28     	; 0x113c <__fp_split3+0xe>
    1158:	46 95       	lsr	r20
    115a:	f1 df       	rcall	.-30     	; 0x113e <__fp_splitA>
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__fp_splitA+0x30>
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	18 06       	cpc	r1, r24
    1164:	99 1f       	adc	r25, r25
    1166:	f1 cf       	rjmp	.-30     	; 0x114a <__fp_splitA+0xc>
    1168:	86 95       	lsr	r24
    116a:	71 05       	cpc	r23, r1
    116c:	61 05       	cpc	r22, r1
    116e:	08 94       	sec
    1170:	08 95       	ret

00001172 <__fp_zero>:
    1172:	e8 94       	clt

00001174 <__fp_szero>:
    1174:	bb 27       	eor	r27, r27
    1176:	66 27       	eor	r22, r22
    1178:	77 27       	eor	r23, r23
    117a:	cb 01       	movw	r24, r22
    117c:	97 f9       	bld	r25, 7
    117e:	08 95       	ret

00001180 <__gesf2>:
    1180:	65 df       	rcall	.-310    	; 0x104c <__fp_cmp>
    1182:	08 f4       	brcc	.+2      	; 0x1186 <__gesf2+0x6>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	08 95       	ret

00001188 <inverse>:
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	9f e3       	ldi	r25, 0x3F	; 63
    1194:	b6 ce       	rjmp	.-660    	; 0xf02 <__divsf3>

00001196 <__mulsf3>:
    1196:	0b d0       	rcall	.+22     	; 0x11ae <__mulsf3x>
    1198:	b9 cf       	rjmp	.-142    	; 0x110c <__fp_round>
    119a:	aa df       	rcall	.-172    	; 0x10f0 <__fp_pscA>
    119c:	28 f0       	brcs	.+10     	; 0x11a8 <__mulsf3+0x12>
    119e:	af df       	rcall	.-162    	; 0x10fe <__fp_pscB>
    11a0:	18 f0       	brcs	.+6      	; 0x11a8 <__mulsf3+0x12>
    11a2:	95 23       	and	r25, r21
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <__mulsf3+0x12>
    11a6:	76 cf       	rjmp	.-276    	; 0x1094 <__fp_inf>
    11a8:	7b cf       	rjmp	.-266    	; 0x10a0 <__fp_nan>
    11aa:	11 24       	eor	r1, r1
    11ac:	e3 cf       	rjmp	.-58     	; 0x1174 <__fp_szero>

000011ae <__mulsf3x>:
    11ae:	bf df       	rcall	.-130    	; 0x112e <__fp_split3>
    11b0:	a0 f3       	brcs	.-24     	; 0x119a <__mulsf3+0x4>

000011b2 <__mulsf3_pse>:
    11b2:	95 9f       	mul	r25, r21
    11b4:	d1 f3       	breq	.-12     	; 0x11aa <__mulsf3+0x14>
    11b6:	95 0f       	add	r25, r21
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	55 1f       	adc	r21, r21
    11bc:	62 9f       	mul	r22, r18
    11be:	f0 01       	movw	r30, r0
    11c0:	72 9f       	mul	r23, r18
    11c2:	bb 27       	eor	r27, r27
    11c4:	f0 0d       	add	r31, r0
    11c6:	b1 1d       	adc	r27, r1
    11c8:	63 9f       	mul	r22, r19
    11ca:	aa 27       	eor	r26, r26
    11cc:	f0 0d       	add	r31, r0
    11ce:	b1 1d       	adc	r27, r1
    11d0:	aa 1f       	adc	r26, r26
    11d2:	64 9f       	mul	r22, r20
    11d4:	66 27       	eor	r22, r22
    11d6:	b0 0d       	add	r27, r0
    11d8:	a1 1d       	adc	r26, r1
    11da:	66 1f       	adc	r22, r22
    11dc:	82 9f       	mul	r24, r18
    11de:	22 27       	eor	r18, r18
    11e0:	b0 0d       	add	r27, r0
    11e2:	a1 1d       	adc	r26, r1
    11e4:	62 1f       	adc	r22, r18
    11e6:	73 9f       	mul	r23, r19
    11e8:	b0 0d       	add	r27, r0
    11ea:	a1 1d       	adc	r26, r1
    11ec:	62 1f       	adc	r22, r18
    11ee:	83 9f       	mul	r24, r19
    11f0:	a0 0d       	add	r26, r0
    11f2:	61 1d       	adc	r22, r1
    11f4:	22 1f       	adc	r18, r18
    11f6:	74 9f       	mul	r23, r20
    11f8:	33 27       	eor	r19, r19
    11fa:	a0 0d       	add	r26, r0
    11fc:	61 1d       	adc	r22, r1
    11fe:	23 1f       	adc	r18, r19
    1200:	84 9f       	mul	r24, r20
    1202:	60 0d       	add	r22, r0
    1204:	21 1d       	adc	r18, r1
    1206:	82 2f       	mov	r24, r18
    1208:	76 2f       	mov	r23, r22
    120a:	6a 2f       	mov	r22, r26
    120c:	11 24       	eor	r1, r1
    120e:	9f 57       	subi	r25, 0x7F	; 127
    1210:	50 40       	sbci	r21, 0x00	; 0
    1212:	8a f0       	brmi	.+34     	; 0x1236 <__mulsf3_pse+0x84>
    1214:	e1 f0       	breq	.+56     	; 0x124e <__mulsf3_pse+0x9c>
    1216:	88 23       	and	r24, r24
    1218:	4a f0       	brmi	.+18     	; 0x122c <__mulsf3_pse+0x7a>
    121a:	ee 0f       	add	r30, r30
    121c:	ff 1f       	adc	r31, r31
    121e:	bb 1f       	adc	r27, r27
    1220:	66 1f       	adc	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	88 1f       	adc	r24, r24
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	50 40       	sbci	r21, 0x00	; 0
    122a:	a9 f7       	brne	.-22     	; 0x1216 <__mulsf3_pse+0x64>
    122c:	9e 3f       	cpi	r25, 0xFE	; 254
    122e:	51 05       	cpc	r21, r1
    1230:	70 f0       	brcs	.+28     	; 0x124e <__mulsf3_pse+0x9c>
    1232:	30 cf       	rjmp	.-416    	; 0x1094 <__fp_inf>
    1234:	9f cf       	rjmp	.-194    	; 0x1174 <__fp_szero>
    1236:	5f 3f       	cpi	r21, 0xFF	; 255
    1238:	ec f3       	brlt	.-6      	; 0x1234 <__mulsf3_pse+0x82>
    123a:	98 3e       	cpi	r25, 0xE8	; 232
    123c:	dc f3       	brlt	.-10     	; 0x1234 <__mulsf3_pse+0x82>
    123e:	86 95       	lsr	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	b7 95       	ror	r27
    1246:	f7 95       	ror	r31
    1248:	e7 95       	ror	r30
    124a:	9f 5f       	subi	r25, 0xFF	; 255
    124c:	c1 f7       	brne	.-16     	; 0x123e <__mulsf3_pse+0x8c>
    124e:	fe 2b       	or	r31, r30
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <square>:
    125c:	9b 01       	movw	r18, r22
    125e:	ac 01       	movw	r20, r24
    1260:	9a cf       	rjmp	.-204    	; 0x1196 <__mulsf3>

00001262 <__udivmodsi4>:
    1262:	a1 e2       	ldi	r26, 0x21	; 33
    1264:	1a 2e       	mov	r1, r26
    1266:	aa 1b       	sub	r26, r26
    1268:	bb 1b       	sub	r27, r27
    126a:	fd 01       	movw	r30, r26
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <__udivmodsi4_ep>

0000126e <__udivmodsi4_loop>:
    126e:	aa 1f       	adc	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	ee 1f       	adc	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	a2 17       	cp	r26, r18
    1278:	b3 07       	cpc	r27, r19
    127a:	e4 07       	cpc	r30, r20
    127c:	f5 07       	cpc	r31, r21
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__udivmodsi4_ep>
    1280:	a2 1b       	sub	r26, r18
    1282:	b3 0b       	sbc	r27, r19
    1284:	e4 0b       	sbc	r30, r20
    1286:	f5 0b       	sbc	r31, r21

00001288 <__udivmodsi4_ep>:
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	1a 94       	dec	r1
    1292:	69 f7       	brne	.-38     	; 0x126e <__udivmodsi4_loop>
    1294:	60 95       	com	r22
    1296:	70 95       	com	r23
    1298:	80 95       	com	r24
    129a:	90 95       	com	r25
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
    12a0:	bd 01       	movw	r22, r26
    12a2:	cf 01       	movw	r24, r30
    12a4:	08 95       	ret

000012a6 <dtostrf>:
    12a6:	ef 92       	push	r14
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	e8 01       	movw	r28, r16
    12b2:	47 ff       	sbrs	r20, 7
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <dtostrf+0x14>
    12b6:	34 e1       	ldi	r19, 0x14	; 20
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <dtostrf+0x16>
    12ba:	34 e0       	ldi	r19, 0x04	; 4
    12bc:	e4 2f       	mov	r30, r20
    12be:	ff 27       	eor	r31, r31
    12c0:	e7 fd       	sbrc	r30, 7
    12c2:	f0 95       	com	r31
    12c4:	f7 ff       	sbrs	r31, 7
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <dtostrf+0x28>
    12c8:	f1 95       	neg	r31
    12ca:	e1 95       	neg	r30
    12cc:	f1 09       	sbc	r31, r1
    12ce:	e3 2e       	mov	r14, r19
    12d0:	02 2f       	mov	r16, r18
    12d2:	2e 2f       	mov	r18, r30
    12d4:	ae 01       	movw	r20, r28
    12d6:	07 d0       	rcall	.+14     	; 0x12e6 <dtoa_prf>
    12d8:	ce 01       	movw	r24, r28
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <dtoa_prf>:
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	9f 92       	push	r9
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	29 97       	sbiw	r28, 0x09	; 9
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	6a 01       	movw	r12, r20
    1312:	b2 2e       	mov	r11, r18
    1314:	10 2f       	mov	r17, r16
    1316:	0c 33       	cpi	r16, 0x3C	; 60
    1318:	20 f4       	brcc	.+8      	; 0x1322 <dtoa_prf+0x3c>
    131a:	ff 24       	eor	r15, r15
    131c:	f3 94       	inc	r15
    131e:	f0 0e       	add	r15, r16
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <dtoa_prf+0x40>
    1322:	4c e3       	ldi	r20, 0x3C	; 60
    1324:	f4 2e       	mov	r15, r20
    1326:	0f 2d       	mov	r16, r15
    1328:	27 e0       	ldi	r18, 0x07	; 7
    132a:	ae 01       	movw	r20, r28
    132c:	4f 5f       	subi	r20, 0xFF	; 255
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	57 d1       	rcall	.+686    	; 0x15e0 <__ftoa_engine>
    1332:	79 81       	ldd	r23, Y+1	; 0x01
    1334:	27 2f       	mov	r18, r23
    1336:	29 70       	andi	r18, 0x09	; 9
    1338:	21 30       	cpi	r18, 0x01	; 1
    133a:	31 f0       	breq	.+12     	; 0x1348 <dtoa_prf+0x62>
    133c:	e1 fc       	sbrc	r14, 1
    133e:	06 c0       	rjmp	.+12     	; 0x134c <dtoa_prf+0x66>
    1340:	e0 fc       	sbrc	r14, 0
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <dtoa_prf+0x6a>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <dtoa_prf+0x6c>
    1348:	6d e2       	ldi	r22, 0x2D	; 45
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <dtoa_prf+0x6c>
    134c:	6b e2       	ldi	r22, 0x2B	; 43
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <dtoa_prf+0x6c>
    1350:	60 e2       	ldi	r22, 0x20	; 32
    1352:	ae 2d       	mov	r26, r14
    1354:	a0 71       	andi	r26, 0x10	; 16
    1356:	73 ff       	sbrs	r23, 3
    1358:	36 c0       	rjmp	.+108    	; 0x13c6 <dtoa_prf+0xe0>
    135a:	66 23       	and	r22, r22
    135c:	11 f0       	breq	.+4      	; 0x1362 <dtoa_prf+0x7c>
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <dtoa_prf+0x7e>
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	8b 15       	cp	r24, r11
    1366:	10 f4       	brcc	.+4      	; 0x136c <dtoa_prf+0x86>
    1368:	b8 1a       	sub	r11, r24
    136a:	01 c0       	rjmp	.+2      	; 0x136e <dtoa_prf+0x88>
    136c:	b1 2c       	mov	r11, r1
    136e:	a1 11       	cpse	r26, r1
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <dtoa_prf+0xa2>
    1372:	f6 01       	movw	r30, r12
    1374:	8b 2d       	mov	r24, r11
    1376:	90 e2       	ldi	r25, 0x20	; 32
    1378:	88 23       	and	r24, r24
    137a:	19 f0       	breq	.+6      	; 0x1382 <dtoa_prf+0x9c>
    137c:	91 93       	st	Z+, r25
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	fb cf       	rjmp	.-10     	; 0x1378 <dtoa_prf+0x92>
    1382:	cb 0c       	add	r12, r11
    1384:	d1 1c       	adc	r13, r1
    1386:	b1 2c       	mov	r11, r1
    1388:	66 23       	and	r22, r22
    138a:	31 f0       	breq	.+12     	; 0x1398 <dtoa_prf+0xb2>
    138c:	f6 01       	movw	r30, r12
    138e:	60 83       	st	Z, r22
    1390:	96 01       	movw	r18, r12
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	69 01       	movw	r12, r18
    1398:	c6 01       	movw	r24, r12
    139a:	03 96       	adiw	r24, 0x03	; 3
    139c:	e2 fe       	sbrs	r14, 2
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <dtoa_prf+0xc4>
    13a0:	2e e4       	ldi	r18, 0x4E	; 78
    13a2:	f6 01       	movw	r30, r12
    13a4:	20 83       	st	Z, r18
    13a6:	31 e4       	ldi	r19, 0x41	; 65
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <dtoa_prf+0xcc>
    13aa:	2e e6       	ldi	r18, 0x6E	; 110
    13ac:	f6 01       	movw	r30, r12
    13ae:	20 83       	st	Z, r18
    13b0:	31 e6       	ldi	r19, 0x61	; 97
    13b2:	31 83       	std	Z+1, r19	; 0x01
    13b4:	22 83       	std	Z+2, r18	; 0x02
    13b6:	fc 01       	movw	r30, r24
    13b8:	2b 2d       	mov	r18, r11
    13ba:	30 e2       	ldi	r19, 0x20	; 32
    13bc:	22 23       	and	r18, r18
    13be:	f1 f1       	breq	.+124    	; 0x143c <dtoa_prf+0x156>
    13c0:	31 93       	st	Z+, r19
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	fb cf       	rjmp	.-10     	; 0x13bc <dtoa_prf+0xd6>
    13c6:	72 ff       	sbrs	r23, 2
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <dtoa_prf+0x164>
    13ca:	66 23       	and	r22, r22
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <dtoa_prf+0xec>
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <dtoa_prf+0xee>
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	8b 15       	cp	r24, r11
    13d6:	10 f4       	brcc	.+4      	; 0x13dc <dtoa_prf+0xf6>
    13d8:	b8 1a       	sub	r11, r24
    13da:	01 c0       	rjmp	.+2      	; 0x13de <dtoa_prf+0xf8>
    13dc:	b1 2c       	mov	r11, r1
    13de:	a1 11       	cpse	r26, r1
    13e0:	0b c0       	rjmp	.+22     	; 0x13f8 <dtoa_prf+0x112>
    13e2:	f6 01       	movw	r30, r12
    13e4:	8b 2d       	mov	r24, r11
    13e6:	90 e2       	ldi	r25, 0x20	; 32
    13e8:	88 23       	and	r24, r24
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <dtoa_prf+0x10c>
    13ec:	91 93       	st	Z+, r25
    13ee:	81 50       	subi	r24, 0x01	; 1
    13f0:	fb cf       	rjmp	.-10     	; 0x13e8 <dtoa_prf+0x102>
    13f2:	cb 0c       	add	r12, r11
    13f4:	d1 1c       	adc	r13, r1
    13f6:	b1 2c       	mov	r11, r1
    13f8:	66 23       	and	r22, r22
    13fa:	31 f0       	breq	.+12     	; 0x1408 <dtoa_prf+0x122>
    13fc:	f6 01       	movw	r30, r12
    13fe:	60 83       	st	Z, r22
    1400:	96 01       	movw	r18, r12
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	69 01       	movw	r12, r18
    1408:	c6 01       	movw	r24, r12
    140a:	03 96       	adiw	r24, 0x03	; 3
    140c:	e2 fe       	sbrs	r14, 2
    140e:	07 c0       	rjmp	.+14     	; 0x141e <dtoa_prf+0x138>
    1410:	29 e4       	ldi	r18, 0x49	; 73
    1412:	f6 01       	movw	r30, r12
    1414:	20 83       	st	Z, r18
    1416:	2e e4       	ldi	r18, 0x4E	; 78
    1418:	21 83       	std	Z+1, r18	; 0x01
    141a:	26 e4       	ldi	r18, 0x46	; 70
    141c:	06 c0       	rjmp	.+12     	; 0x142a <dtoa_prf+0x144>
    141e:	29 e6       	ldi	r18, 0x69	; 105
    1420:	f6 01       	movw	r30, r12
    1422:	20 83       	st	Z, r18
    1424:	2e e6       	ldi	r18, 0x6E	; 110
    1426:	21 83       	std	Z+1, r18	; 0x01
    1428:	26 e6       	ldi	r18, 0x66	; 102
    142a:	22 83       	std	Z+2, r18	; 0x02
    142c:	fc 01       	movw	r30, r24
    142e:	2b 2d       	mov	r18, r11
    1430:	30 e2       	ldi	r19, 0x20	; 32
    1432:	22 23       	and	r18, r18
    1434:	19 f0       	breq	.+6      	; 0x143c <dtoa_prf+0x156>
    1436:	31 93       	st	Z+, r19
    1438:	21 50       	subi	r18, 0x01	; 1
    143a:	fb cf       	rjmp	.-10     	; 0x1432 <dtoa_prf+0x14c>
    143c:	fc 01       	movw	r30, r24
    143e:	eb 0d       	add	r30, r11
    1440:	f1 1d       	adc	r31, r1
    1442:	10 82       	st	Z, r1
    1444:	8e ef       	ldi	r24, 0xFE	; 254
    1446:	9f ef       	ldi	r25, 0xFF	; 255
    1448:	b7 c0       	rjmp	.+366    	; 0x15b8 <dtoa_prf+0x2d2>
    144a:	b1 e0       	ldi	r27, 0x01	; 1
    144c:	61 11       	cpse	r22, r1
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <dtoa_prf+0x16c>
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	4b 2f       	mov	r20, r27
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	18 16       	cp	r1, r24
    1458:	19 06       	cpc	r1, r25
    145a:	24 f4       	brge	.+8      	; 0x1464 <dtoa_prf+0x17e>
    145c:	9c 01       	movw	r18, r24
    145e:	2f 5f       	subi	r18, 0xFF	; 255
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <dtoa_prf+0x182>
    1464:	21 e0       	ldi	r18, 0x01	; 1
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	24 0f       	add	r18, r20
    146a:	35 1f       	adc	r19, r21
    146c:	11 23       	and	r17, r17
    146e:	29 f0       	breq	.+10     	; 0x147a <dtoa_prf+0x194>
    1470:	41 2f       	mov	r20, r17
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	4f 5f       	subi	r20, 0xFF	; 255
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	02 c0       	rjmp	.+4      	; 0x147e <dtoa_prf+0x198>
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	42 0f       	add	r20, r18
    1480:	53 1f       	adc	r21, r19
    1482:	2b 2d       	mov	r18, r11
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	42 17       	cp	r20, r18
    1488:	53 07       	cpc	r21, r19
    148a:	14 f4       	brge	.+4      	; 0x1490 <dtoa_prf+0x1aa>
    148c:	b4 1a       	sub	r11, r20
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <dtoa_prf+0x1ac>
    1490:	b1 2c       	mov	r11, r1
    1492:	2e 2d       	mov	r18, r14
    1494:	28 71       	andi	r18, 0x18	; 24
    1496:	59 f4       	brne	.+22     	; 0x14ae <dtoa_prf+0x1c8>
    1498:	f6 01       	movw	r30, r12
    149a:	2b 2d       	mov	r18, r11
    149c:	30 e2       	ldi	r19, 0x20	; 32
    149e:	22 23       	and	r18, r18
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <dtoa_prf+0x1c2>
    14a2:	31 93       	st	Z+, r19
    14a4:	21 50       	subi	r18, 0x01	; 1
    14a6:	fb cf       	rjmp	.-10     	; 0x149e <dtoa_prf+0x1b8>
    14a8:	cb 0c       	add	r12, r11
    14aa:	d1 1c       	adc	r13, r1
    14ac:	b1 2c       	mov	r11, r1
    14ae:	bb 23       	and	r27, r27
    14b0:	31 f0       	breq	.+12     	; 0x14be <dtoa_prf+0x1d8>
    14b2:	f6 01       	movw	r30, r12
    14b4:	60 83       	st	Z, r22
    14b6:	96 01       	movw	r18, r12
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	69 01       	movw	r12, r18
    14be:	a1 11       	cpse	r26, r1
    14c0:	0b c0       	rjmp	.+22     	; 0x14d8 <dtoa_prf+0x1f2>
    14c2:	f6 01       	movw	r30, r12
    14c4:	2b 2d       	mov	r18, r11
    14c6:	30 e3       	ldi	r19, 0x30	; 48
    14c8:	22 23       	and	r18, r18
    14ca:	19 f0       	breq	.+6      	; 0x14d2 <dtoa_prf+0x1ec>
    14cc:	31 93       	st	Z+, r19
    14ce:	21 50       	subi	r18, 0x01	; 1
    14d0:	fb cf       	rjmp	.-10     	; 0x14c8 <dtoa_prf+0x1e2>
    14d2:	cb 0c       	add	r12, r11
    14d4:	d1 1c       	adc	r13, r1
    14d6:	b1 2c       	mov	r11, r1
    14d8:	f8 0e       	add	r15, r24
    14da:	0a 81       	ldd	r16, Y+2	; 0x02
    14dc:	37 2f       	mov	r19, r23
    14de:	30 71       	andi	r19, 0x10	; 16
    14e0:	a3 2e       	mov	r10, r19
    14e2:	74 ff       	sbrs	r23, 4
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <dtoa_prf+0x206>
    14e6:	01 33       	cpi	r16, 0x31	; 49
    14e8:	09 f4       	brne	.+2      	; 0x14ec <dtoa_prf+0x206>
    14ea:	fa 94       	dec	r15
    14ec:	1f 14       	cp	r1, r15
    14ee:	2c f4       	brge	.+10     	; 0x14fa <dtoa_prf+0x214>
    14f0:	2f 2d       	mov	r18, r15
    14f2:	29 30       	cpi	r18, 0x09	; 9
    14f4:	18 f0       	brcs	.+6      	; 0x14fc <dtoa_prf+0x216>
    14f6:	28 e0       	ldi	r18, 0x08	; 8
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <dtoa_prf+0x216>
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	68 2f       	mov	r22, r24
    14fe:	39 2f       	mov	r19, r25
    1500:	97 ff       	sbrs	r25, 7
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <dtoa_prf+0x222>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	46 2f       	mov	r20, r22
    150a:	53 2f       	mov	r21, r19
    150c:	61 2c       	mov	r6, r1
    150e:	71 2c       	mov	r7, r1
    1510:	3e e2       	ldi	r19, 0x2E	; 46
    1512:	93 2e       	mov	r9, r19
    1514:	bc 01       	movw	r22, r24
    1516:	62 1b       	sub	r22, r18
    1518:	71 09       	sbc	r23, r1
    151a:	9b 01       	movw	r18, r22
    151c:	dc 01       	movw	r26, r24
    151e:	a4 1b       	sub	r26, r20
    1520:	b5 0b       	sbc	r27, r21
    1522:	e1 e0       	ldi	r30, 0x01	; 1
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	ec 0f       	add	r30, r28
    1528:	fd 1f       	adc	r31, r29
    152a:	ae 0f       	add	r26, r30
    152c:	bf 1f       	adc	r27, r31
    152e:	e1 2e       	mov	r14, r17
    1530:	f1 2c       	mov	r15, r1
    1532:	f1 94       	neg	r15
    1534:	e1 94       	neg	r14
    1536:	f1 08       	sbc	r15, r1
    1538:	4f 3f       	cpi	r20, 0xFF	; 255
    153a:	ff ef       	ldi	r31, 0xFF	; 255
    153c:	5f 07       	cpc	r21, r31
    153e:	31 f4       	brne	.+12     	; 0x154c <dtoa_prf+0x266>
    1540:	f6 01       	movw	r30, r12
    1542:	90 82       	st	Z, r9
    1544:	b6 01       	movw	r22, r12
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	6b 01       	movw	r12, r22
    154c:	84 17       	cp	r24, r20
    154e:	95 07       	cpc	r25, r21
    1550:	4c f0       	brlt	.+18     	; 0x1564 <dtoa_prf+0x27e>
    1552:	24 17       	cp	r18, r20
    1554:	35 07       	cpc	r19, r21
    1556:	34 f4       	brge	.+12     	; 0x1564 <dtoa_prf+0x27e>
    1558:	bd 01       	movw	r22, r26
    155a:	66 0d       	add	r22, r6
    155c:	77 1d       	adc	r23, r7
    155e:	fb 01       	movw	r30, r22
    1560:	11 81       	ldd	r17, Z+1	; 0x01
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <dtoa_prf+0x280>
    1564:	10 e3       	ldi	r17, 0x30	; 48
    1566:	41 50       	subi	r20, 0x01	; 1
    1568:	51 09       	sbc	r21, r1
    156a:	ff ef       	ldi	r31, 0xFF	; 255
    156c:	6f 1a       	sub	r6, r31
    156e:	7f 0a       	sbc	r7, r31
    1570:	b6 01       	movw	r22, r12
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	4e 15       	cp	r20, r14
    1578:	5f 05       	cpc	r21, r15
    157a:	24 f0       	brlt	.+8      	; 0x1584 <dtoa_prf+0x29e>
    157c:	f6 01       	movw	r30, r12
    157e:	10 83       	st	Z, r17
    1580:	6b 01       	movw	r12, r22
    1582:	da cf       	rjmp	.-76     	; 0x1538 <dtoa_prf+0x252>
    1584:	48 17       	cp	r20, r24
    1586:	59 07       	cpc	r21, r25
    1588:	39 f4       	brne	.+14     	; 0x1598 <dtoa_prf+0x2b2>
    158a:	06 33       	cpi	r16, 0x36	; 54
    158c:	20 f4       	brcc	.+8      	; 0x1596 <dtoa_prf+0x2b0>
    158e:	05 33       	cpi	r16, 0x35	; 53
    1590:	19 f4       	brne	.+6      	; 0x1598 <dtoa_prf+0x2b2>
    1592:	a1 10       	cpse	r10, r1
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <dtoa_prf+0x2b2>
    1596:	11 e3       	ldi	r17, 0x31	; 49
    1598:	f6 01       	movw	r30, r12
    159a:	10 83       	st	Z, r17
    159c:	fb 01       	movw	r30, r22
    159e:	8b 2d       	mov	r24, r11
    15a0:	90 e2       	ldi	r25, 0x20	; 32
    15a2:	88 23       	and	r24, r24
    15a4:	19 f0       	breq	.+6      	; 0x15ac <dtoa_prf+0x2c6>
    15a6:	91 93       	st	Z+, r25
    15a8:	81 50       	subi	r24, 0x01	; 1
    15aa:	fb cf       	rjmp	.-10     	; 0x15a2 <dtoa_prf+0x2bc>
    15ac:	fb 01       	movw	r30, r22
    15ae:	eb 0d       	add	r30, r11
    15b0:	f1 1d       	adc	r31, r1
    15b2:	10 82       	st	Z, r1
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	29 96       	adiw	r28, 0x09	; 9
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	08 95       	ret

000015e0 <__ftoa_engine>:
    15e0:	28 30       	cpi	r18, 0x08	; 8
    15e2:	08 f0       	brcs	.+2      	; 0x15e6 <__ftoa_engine+0x6>
    15e4:	27 e0       	ldi	r18, 0x07	; 7
    15e6:	33 27       	eor	r19, r19
    15e8:	da 01       	movw	r26, r20
    15ea:	99 0f       	add	r25, r25
    15ec:	31 1d       	adc	r19, r1
    15ee:	87 fd       	sbrc	r24, 7
    15f0:	91 60       	ori	r25, 0x01	; 1
    15f2:	00 96       	adiw	r24, 0x00	; 0
    15f4:	61 05       	cpc	r22, r1
    15f6:	71 05       	cpc	r23, r1
    15f8:	39 f4       	brne	.+14     	; 0x1608 <__ftoa_engine+0x28>
    15fa:	32 60       	ori	r19, 0x02	; 2
    15fc:	2e 5f       	subi	r18, 0xFE	; 254
    15fe:	3d 93       	st	X+, r19
    1600:	30 e3       	ldi	r19, 0x30	; 48
    1602:	2a 95       	dec	r18
    1604:	e1 f7       	brne	.-8      	; 0x15fe <__ftoa_engine+0x1e>
    1606:	08 95       	ret
    1608:	9f 3f       	cpi	r25, 0xFF	; 255
    160a:	30 f0       	brcs	.+12     	; 0x1618 <__ftoa_engine+0x38>
    160c:	80 38       	cpi	r24, 0x80	; 128
    160e:	71 05       	cpc	r23, r1
    1610:	61 05       	cpc	r22, r1
    1612:	09 f0       	breq	.+2      	; 0x1616 <__ftoa_engine+0x36>
    1614:	3c 5f       	subi	r19, 0xFC	; 252
    1616:	3c 5f       	subi	r19, 0xFC	; 252
    1618:	3d 93       	st	X+, r19
    161a:	91 30       	cpi	r25, 0x01	; 1
    161c:	08 f0       	brcs	.+2      	; 0x1620 <__ftoa_engine+0x40>
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	91 1d       	adc	r25, r1
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	1f 93       	push	r17
    1628:	0f 93       	push	r16
    162a:	ff 92       	push	r15
    162c:	ef 92       	push	r14
    162e:	19 2f       	mov	r17, r25
    1630:	98 7f       	andi	r25, 0xF8	; 248
    1632:	96 95       	lsr	r25
    1634:	e9 2f       	mov	r30, r25
    1636:	96 95       	lsr	r25
    1638:	96 95       	lsr	r25
    163a:	e9 0f       	add	r30, r25
    163c:	ff 27       	eor	r31, r31
    163e:	e4 59       	subi	r30, 0x94	; 148
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	99 27       	eor	r25, r25
    1644:	33 27       	eor	r19, r19
    1646:	ee 24       	eor	r14, r14
    1648:	ff 24       	eor	r15, r15
    164a:	a7 01       	movw	r20, r14
    164c:	e7 01       	movw	r28, r14
    164e:	05 90       	lpm	r0, Z+
    1650:	08 94       	sec
    1652:	07 94       	ror	r0
    1654:	28 f4       	brcc	.+10     	; 0x1660 <__ftoa_engine+0x80>
    1656:	36 0f       	add	r19, r22
    1658:	e7 1e       	adc	r14, r23
    165a:	f8 1e       	adc	r15, r24
    165c:	49 1f       	adc	r20, r25
    165e:	51 1d       	adc	r21, r1
    1660:	66 0f       	add	r22, r22
    1662:	77 1f       	adc	r23, r23
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	06 94       	lsr	r0
    166a:	a1 f7       	brne	.-24     	; 0x1654 <__ftoa_engine+0x74>
    166c:	05 90       	lpm	r0, Z+
    166e:	07 94       	ror	r0
    1670:	28 f4       	brcc	.+10     	; 0x167c <__ftoa_engine+0x9c>
    1672:	e7 0e       	add	r14, r23
    1674:	f8 1e       	adc	r15, r24
    1676:	49 1f       	adc	r20, r25
    1678:	56 1f       	adc	r21, r22
    167a:	c1 1d       	adc	r28, r1
    167c:	77 0f       	add	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	66 1f       	adc	r22, r22
    1684:	06 94       	lsr	r0
    1686:	a1 f7       	brne	.-24     	; 0x1670 <__ftoa_engine+0x90>
    1688:	05 90       	lpm	r0, Z+
    168a:	07 94       	ror	r0
    168c:	28 f4       	brcc	.+10     	; 0x1698 <__ftoa_engine+0xb8>
    168e:	f8 0e       	add	r15, r24
    1690:	49 1f       	adc	r20, r25
    1692:	56 1f       	adc	r21, r22
    1694:	c7 1f       	adc	r28, r23
    1696:	d1 1d       	adc	r29, r1
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	66 1f       	adc	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	06 94       	lsr	r0
    16a2:	a1 f7       	brne	.-24     	; 0x168c <__ftoa_engine+0xac>
    16a4:	05 90       	lpm	r0, Z+
    16a6:	07 94       	ror	r0
    16a8:	20 f4       	brcc	.+8      	; 0x16b2 <__ftoa_engine+0xd2>
    16aa:	49 0f       	add	r20, r25
    16ac:	56 1f       	adc	r21, r22
    16ae:	c7 1f       	adc	r28, r23
    16b0:	d8 1f       	adc	r29, r24
    16b2:	99 0f       	add	r25, r25
    16b4:	66 1f       	adc	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	88 1f       	adc	r24, r24
    16ba:	06 94       	lsr	r0
    16bc:	a9 f7       	brne	.-22     	; 0x16a8 <__ftoa_engine+0xc8>
    16be:	84 91       	lpm	r24, Z
    16c0:	10 95       	com	r17
    16c2:	17 70       	andi	r17, 0x07	; 7
    16c4:	41 f0       	breq	.+16     	; 0x16d6 <__ftoa_engine+0xf6>
    16c6:	d6 95       	lsr	r29
    16c8:	c7 95       	ror	r28
    16ca:	57 95       	ror	r21
    16cc:	47 95       	ror	r20
    16ce:	f7 94       	ror	r15
    16d0:	e7 94       	ror	r14
    16d2:	1a 95       	dec	r17
    16d4:	c1 f7       	brne	.-16     	; 0x16c6 <__ftoa_engine+0xe6>
    16d6:	e2 e1       	ldi	r30, 0x12	; 18
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	68 94       	set
    16dc:	15 90       	lpm	r1, Z+
    16de:	15 91       	lpm	r17, Z+
    16e0:	35 91       	lpm	r19, Z+
    16e2:	65 91       	lpm	r22, Z+
    16e4:	95 91       	lpm	r25, Z+
    16e6:	05 90       	lpm	r0, Z+
    16e8:	7f e2       	ldi	r23, 0x2F	; 47
    16ea:	73 95       	inc	r23
    16ec:	e1 18       	sub	r14, r1
    16ee:	f1 0a       	sbc	r15, r17
    16f0:	43 0b       	sbc	r20, r19
    16f2:	56 0b       	sbc	r21, r22
    16f4:	c9 0b       	sbc	r28, r25
    16f6:	d0 09       	sbc	r29, r0
    16f8:	c0 f7       	brcc	.-16     	; 0x16ea <__ftoa_engine+0x10a>
    16fa:	e1 0c       	add	r14, r1
    16fc:	f1 1e       	adc	r15, r17
    16fe:	43 1f       	adc	r20, r19
    1700:	56 1f       	adc	r21, r22
    1702:	c9 1f       	adc	r28, r25
    1704:	d0 1d       	adc	r29, r0
    1706:	7e f4       	brtc	.+30     	; 0x1726 <__ftoa_engine+0x146>
    1708:	70 33       	cpi	r23, 0x30	; 48
    170a:	11 f4       	brne	.+4      	; 0x1710 <__ftoa_engine+0x130>
    170c:	8a 95       	dec	r24
    170e:	e6 cf       	rjmp	.-52     	; 0x16dc <__ftoa_engine+0xfc>
    1710:	e8 94       	clt
    1712:	01 50       	subi	r16, 0x01	; 1
    1714:	30 f0       	brcs	.+12     	; 0x1722 <__ftoa_engine+0x142>
    1716:	08 0f       	add	r16, r24
    1718:	0a f4       	brpl	.+2      	; 0x171c <__ftoa_engine+0x13c>
    171a:	00 27       	eor	r16, r16
    171c:	02 17       	cp	r16, r18
    171e:	08 f4       	brcc	.+2      	; 0x1722 <__ftoa_engine+0x142>
    1720:	20 2f       	mov	r18, r16
    1722:	23 95       	inc	r18
    1724:	02 2f       	mov	r16, r18
    1726:	7a 33       	cpi	r23, 0x3A	; 58
    1728:	28 f0       	brcs	.+10     	; 0x1734 <__ftoa_engine+0x154>
    172a:	79 e3       	ldi	r23, 0x39	; 57
    172c:	7d 93       	st	X+, r23
    172e:	2a 95       	dec	r18
    1730:	e9 f7       	brne	.-6      	; 0x172c <__ftoa_engine+0x14c>
    1732:	10 c0       	rjmp	.+32     	; 0x1754 <__ftoa_engine+0x174>
    1734:	7d 93       	st	X+, r23
    1736:	2a 95       	dec	r18
    1738:	89 f6       	brne	.-94     	; 0x16dc <__ftoa_engine+0xfc>
    173a:	06 94       	lsr	r0
    173c:	97 95       	ror	r25
    173e:	67 95       	ror	r22
    1740:	37 95       	ror	r19
    1742:	17 95       	ror	r17
    1744:	17 94       	ror	r1
    1746:	e1 18       	sub	r14, r1
    1748:	f1 0a       	sbc	r15, r17
    174a:	43 0b       	sbc	r20, r19
    174c:	56 0b       	sbc	r21, r22
    174e:	c9 0b       	sbc	r28, r25
    1750:	d0 09       	sbc	r29, r0
    1752:	98 f0       	brcs	.+38     	; 0x177a <__ftoa_engine+0x19a>
    1754:	23 95       	inc	r18
    1756:	7e 91       	ld	r23, -X
    1758:	73 95       	inc	r23
    175a:	7a 33       	cpi	r23, 0x3A	; 58
    175c:	08 f0       	brcs	.+2      	; 0x1760 <__ftoa_engine+0x180>
    175e:	70 e3       	ldi	r23, 0x30	; 48
    1760:	7c 93       	st	X, r23
    1762:	20 13       	cpse	r18, r16
    1764:	b8 f7       	brcc	.-18     	; 0x1754 <__ftoa_engine+0x174>
    1766:	7e 91       	ld	r23, -X
    1768:	70 61       	ori	r23, 0x10	; 16
    176a:	7d 93       	st	X+, r23
    176c:	30 f0       	brcs	.+12     	; 0x177a <__ftoa_engine+0x19a>
    176e:	83 95       	inc	r24
    1770:	71 e3       	ldi	r23, 0x31	; 49
    1772:	7d 93       	st	X+, r23
    1774:	70 e3       	ldi	r23, 0x30	; 48
    1776:	2a 95       	dec	r18
    1778:	e1 f7       	brne	.-8      	; 0x1772 <__ftoa_engine+0x192>
    177a:	11 24       	eor	r1, r1
    177c:	ef 90       	pop	r14
    177e:	ff 90       	pop	r15
    1780:	0f 91       	pop	r16
    1782:	1f 91       	pop	r17
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	99 27       	eor	r25, r25
    178a:	87 fd       	sbrc	r24, 7
    178c:	90 95       	com	r25
    178e:	08 95       	ret

00001790 <_exit>:
    1790:	f8 94       	cli

00001792 <__stop_program>:
    1792:	ff cf       	rjmp	.-2      	; 0x1792 <__stop_program>
