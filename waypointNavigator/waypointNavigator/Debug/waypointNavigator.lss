
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00001f9a  0000202e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  0080022a  0080022a  00002058  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00002058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  0000209a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  000020f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ba9  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015ba  00000000  00000000  00007071  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002667  00000000  00000000  0000862b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c2c  00000000  00000000  0000ac94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001580  00000000  00000000  0000b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000305c  00000000  00000000  0000ce40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e0  00000000  00000000  0000fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c1       	rjmp	.+522    	; 0x20c <__ctors_end>
       2:	00 00       	nop
       4:	24 c1       	rjmp	.+584    	; 0x24e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c1       	rjmp	.+580    	; 0x24e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c1       	rjmp	.+576    	; 0x24e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c1       	rjmp	.+572    	; 0x24e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c1       	rjmp	.+568    	; 0x24e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c1       	rjmp	.+564    	; 0x24e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c1       	rjmp	.+560    	; 0x24e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c1       	rjmp	.+556    	; 0x24e <__bad_interrupt>
      22:	00 00       	nop
      24:	b9 c7       	rjmp	.+3954   	; 0xf98 <__vector_9>
      26:	00 00       	nop
      28:	12 c1       	rjmp	.+548    	; 0x24e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c1       	rjmp	.+544    	; 0x24e <__bad_interrupt>
      2e:	00 00       	nop
      30:	0e c1       	rjmp	.+540    	; 0x24e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c c1       	rjmp	.+536    	; 0x24e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c1       	rjmp	.+532    	; 0x24e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c1       	rjmp	.+528    	; 0x24e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c1       	rjmp	.+524    	; 0x24e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c1       	rjmp	.+520    	; 0x24e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c1       	rjmp	.+516    	; 0x24e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c1       	rjmp	.+512    	; 0x24e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c0       	rjmp	.+508    	; 0x24e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c0       	rjmp	.+504    	; 0x24e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c0       	rjmp	.+500    	; 0x24e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_23>
      60:	f6 c0       	rjmp	.+492    	; 0x24e <__bad_interrupt>
      62:	00 00       	nop
      64:	f4 c0       	rjmp	.+488    	; 0x24e <__bad_interrupt>
      66:	00 00       	nop
      68:	f2 c0       	rjmp	.+484    	; 0x24e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f0 c0       	rjmp	.+480    	; 0x24e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c0       	rjmp	.+476    	; 0x24e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c0       	rjmp	.+472    	; 0x24e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c0       	rjmp	.+468    	; 0x24e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c0       	rjmp	.+464    	; 0x24e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c0       	rjmp	.+460    	; 0x24e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c0       	rjmp	.+456    	; 0x24e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c0       	rjmp	.+452    	; 0x24e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c0       	rjmp	.+448    	; 0x24e <__bad_interrupt>
      8e:	00 00       	nop
      90:	de c0       	rjmp	.+444    	; 0x24e <__bad_interrupt>
      92:	00 00       	nop
      94:	dc c0       	rjmp	.+440    	; 0x24e <__bad_interrupt>
      96:	00 00       	nop
      98:	da c0       	rjmp	.+436    	; 0x24e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d8 c0       	rjmp	.+432    	; 0x24e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d6 c0       	rjmp	.+428    	; 0x24e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c0       	rjmp	.+424    	; 0x24e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c0       	rjmp	.+420    	; 0x24e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c0       	rjmp	.+416    	; 0x24e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c0       	rjmp	.+412    	; 0x24e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c0       	rjmp	.+408    	; 0x24e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c0       	rjmp	.+404    	; 0x24e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c0       	rjmp	.+400    	; 0x24e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c0       	rjmp	.+396    	; 0x24e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c0       	rjmp	.+392    	; 0x24e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c0       	rjmp	.+388    	; 0x24e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c0 c0       	rjmp	.+384    	; 0x24e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	be c0       	rjmp	.+380    	; 0x24e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bc c0       	rjmp	.+376    	; 0x24e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ba c0       	rjmp	.+372    	; 0x24e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b8 c0       	rjmp	.+368    	; 0x24e <__bad_interrupt>
      de:	00 00       	nop
      e0:	b6 c0       	rjmp	.+364    	; 0x24e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__trampolines_end>:
     112:	00 40       	sbci	r16, 0x00	; 0
     114:	7a 10       	cpse	r7, r10
     116:	f3 5a       	subi	r31, 0xA3	; 163
     118:	00 a0       	ldd	r0, Z+32	; 0x20
     11a:	72 4e       	sbci	r23, 0xE2	; 226
     11c:	18 09       	sbc	r17, r8
     11e:	00 10       	cpse	r0, r0
     120:	a5 d4       	rcall	.+2378   	; 0xa6c <_Z15iHundredAtanDegii+0xd8>
     122:	e8 00       	.word	0x00e8	; ????
     124:	00 e8       	ldi	r16, 0x80	; 128
     126:	76 48       	sbci	r23, 0x86	; 134
     128:	17 00       	.word	0x0017	; ????
     12a:	00 e4       	ldi	r16, 0x40	; 64
     12c:	0b 54       	subi	r16, 0x4B	; 75
     12e:	02 00       	.word	0x0002	; ????
     130:	00 ca       	rjmp	.-3072   	; 0xfffff532 <__eeprom_end+0xff7ef532>
     132:	9a 3b       	cpi	r25, 0xBA	; 186
     134:	00 00       	nop
     136:	00 e1       	ldi	r16, 0x10	; 16
     138:	f5 05       	cpc	r31, r5
     13a:	00 00       	nop
     13c:	80 96       	adiw	r24, 0x20	; 32
     13e:	98 00       	.word	0x0098	; ????
     140:	00 00       	nop
     142:	40 42       	sbci	r20, 0x20	; 32
     144:	0f 00       	.word	0x000f	; ????
     146:	00 00       	nop
     148:	a0 86       	std	Z+8, r10	; 0x08
     14a:	01 00       	.word	0x0001	; ????
     14c:	00 00       	nop
     14e:	10 27       	eor	r17, r16
     150:	00 00       	nop
     152:	00 00       	nop
     154:	e8 03       	fmulsu	r22, r16
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	64 00       	.word	0x0064	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	0a 00       	.word	0x000a	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	2c 76       	andi	r18, 0x6C	; 108
     16e:	d8 88       	ldd	r13, Y+16	; 0x10
     170:	dc 67       	ori	r29, 0x7C	; 124
     172:	4f 08       	sbc	r4, r15
     174:	23 df       	rcall	.-442    	; 0xffffffbc <__eeprom_end+0xff7effbc>
     176:	c1 df       	rcall	.-126    	; 0xfa <__SREG__+0xbb>
     178:	ae 59       	subi	r26, 0x9E	; 158
     17a:	e1 b1       	in	r30, 0x01	; 1
     17c:	b7 96       	adiw	r30, 0x27	; 39
     17e:	e5 e3       	ldi	r30, 0x35	; 53
     180:	e4 53       	subi	r30, 0x34	; 52
     182:	c6 3a       	cpi	r28, 0xA6	; 166
     184:	e6 51       	subi	r30, 0x16	; 22
     186:	99 76       	andi	r25, 0x69	; 105
     188:	96 e8       	ldi	r25, 0x86	; 134
     18a:	e6 c2       	rjmp	.+1484   	; 0x758 <_Z10getHeadingv+0x110>
     18c:	84 26       	eor	r8, r20
     18e:	eb 89       	ldd	r30, Y+19	; 0x13
     190:	8c 9b       	sbis	0x11, 4	; 17
     192:	62 ed       	ldi	r22, 0xD2	; 210
     194:	40 7c       	andi	r20, 0xC0	; 192
     196:	6f fc       	.word	0xfc6f	; ????
     198:	ef bc       	out	0x2f, r14	; 47
     19a:	9c 9f       	mul	r25, r28
     19c:	40 f2       	brcs	.-112    	; 0x12e <__trampolines_end+0x1c>
     19e:	ba a5       	ldd	r27, Y+42	; 0x2a
     1a0:	6f a5       	ldd	r22, Y+47	; 0x2f
     1a2:	f4 90       	lpm	r15, Z
     1a4:	05 5a       	subi	r16, 0xA5	; 165
     1a6:	2a f7       	brpl	.-54     	; 0x172 <__trampolines_end+0x60>
     1a8:	5c 93       	st	X, r21
     1aa:	6b 6c       	ori	r22, 0xCB	; 203
     1ac:	f9 67       	ori	r31, 0x79	; 121
     1ae:	6d c1       	rjmp	.+730    	; 0x48a <_Z15adxl345_getdataPdS_S_+0xec>
     1b0:	1b fc       	.word	0xfc1b	; ????
     1b2:	e0 e4       	ldi	r30, 0x40	; 64
     1b4:	0d 47       	sbci	r16, 0x7D	; 125
     1b6:	fe f5       	brtc	.+126    	; 0x236 <__do_clear_bss>
     1b8:	20 e6       	ldi	r18, 0x60	; 96
     1ba:	b5 00       	.word	0x00b5	; ????
     1bc:	d0 ed       	ldi	r29, 0xD0	; 208
     1be:	90 2e       	mov	r9, r16
     1c0:	03 00       	.word	0x0003	; ????
     1c2:	94 35       	cpi	r25, 0x54	; 84
     1c4:	77 05       	cpc	r23, r7
     1c6:	00 80       	ld	r0, Z
     1c8:	84 1e       	adc	r8, r20
     1ca:	08 00       	.word	0x0008	; ????
     1cc:	00 20       	and	r0, r0
     1ce:	4e 0a       	sbc	r4, r30
     1d0:	00 00       	nop
     1d2:	00 c8       	rjmp	.-4096   	; 0xfffff1d4 <__eeprom_end+0xff7ef1d4>
     1d4:	0c 33       	cpi	r16, 0x3C	; 60
     1d6:	33 33       	cpi	r19, 0x33	; 51
     1d8:	33 0f       	add	r19, r19
     1da:	98 6e       	ori	r25, 0xE8	; 232
     1dc:	12 83       	std	Z+2, r17	; 0x02
     1de:	11 41       	sbci	r17, 0x11	; 17
     1e0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1e2:	21 14       	cp	r2, r1
     1e4:	89 3b       	cpi	r24, 0xB9	; 185
     1e6:	e6 55       	subi	r30, 0x56	; 86
     1e8:	16 cf       	rjmp	.-468    	; 0x16 <__zero_reg__+0x15>
     1ea:	fe e6       	ldi	r31, 0x6E	; 110
     1ec:	db 18       	sub	r13, r11
     1ee:	d1 84       	ldd	r13, Z+9	; 0x09
     1f0:	4b 38       	cpi	r20, 0x8B	; 139
     1f2:	1b f7       	brvc	.-58     	; 0x1ba <__trampolines_end+0xa8>
     1f4:	7c 1d       	adc	r23, r12
     1f6:	90 1d       	adc	r25, r0
     1f8:	a4 bb       	out	0x14, r26	; 20
     1fa:	e4 24       	eor	r14, r4
     1fc:	20 32       	cpi	r18, 0x20	; 32
     1fe:	84 72       	andi	r24, 0x24	; 36
     200:	5e 22       	and	r5, r30
     202:	81 00       	.word	0x0081	; ????
     204:	c9 f1       	breq	.+114    	; 0x278 <i2c_rep_start+0x6>
     206:	24 ec       	ldi	r18, 0xC4	; 196
     208:	a1 e5       	ldi	r26, 0x51	; 81
     20a:	3d 27       	eor	r19, r29

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	d1 e2       	ldi	r29, 0x21	; 33
     214:	de bf       	out	0x3e, r29	; 62
     216:	cd bf       	out	0x3d, r28	; 61
     218:	00 e0       	ldi	r16, 0x00	; 0
     21a:	0c bf       	out	0x3c, r16	; 60

0000021c <__do_copy_data>:
     21c:	12 e0       	ldi	r17, 0x02	; 2
     21e:	a0 e0       	ldi	r26, 0x00	; 0
     220:	b2 e0       	ldi	r27, 0x02	; 2
     222:	ea e9       	ldi	r30, 0x9A	; 154
     224:	ff e1       	ldi	r31, 0x1F	; 31
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0b bf       	out	0x3b, r16	; 59
     22a:	02 c0       	rjmp	.+4      	; 0x230 <__do_copy_data+0x14>
     22c:	07 90       	elpm	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	aa 32       	cpi	r26, 0x2A	; 42
     232:	b1 07       	cpc	r27, r17
     234:	d9 f7       	brne	.-10     	; 0x22c <__do_copy_data+0x10>

00000236 <__do_clear_bss>:
     236:	22 e0       	ldi	r18, 0x02	; 2
     238:	aa e2       	ldi	r26, 0x2A	; 42
     23a:	b2 e0       	ldi	r27, 0x02	; 2
     23c:	01 c0       	rjmp	.+2      	; 0x240 <.do_clear_bss_start>

0000023e <.do_clear_bss_loop>:
     23e:	1d 92       	st	X+, r1

00000240 <.do_clear_bss_start>:
     240:	a5 38       	cpi	r26, 0x85	; 133
     242:	b2 07       	cpc	r27, r18
     244:	e1 f7       	brne	.-8      	; 0x23e <.do_clear_bss_loop>
     246:	0e 94 15 0a 	call	0x142a	; 0x142a <main>
     24a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <_exit>

0000024e <__bad_interrupt>:
     24e:	d8 ce       	rjmp	.-592    	; 0x0 <__vectors>

00000250 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     250:	00 c0       	rjmp	.+0      	; 0x252 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     252:	00 c0       	rjmp	.+0      	; 0x254 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     254:	00 c0       	rjmp	.+0      	; 0x256 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     256:	00 c0       	rjmp	.+0      	; 0x258 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     258:	00 c0       	rjmp	.+0      	; 0x25a <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     25a:	00 c0       	rjmp	.+0      	; 0x25c <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     25c:	00 00       	nop
	ret          ; 3   "
     25e:	08 95       	ret

00000260 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     260:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     262:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     264:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     266:	58 98       	cbi	0x0b, 0	; 11
	ret
     268:	08 95       	ret

0000026a <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     26a:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     26c:	f1 df       	rcall	.-30     	; 0x250 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     26e:	1d c0       	rjmp	.+58     	; 0x2aa <i2c_write>
	ret
     270:	08 95       	ret

00000272 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     272:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     274:	ed df       	rcall	.-38     	; 0x250 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     276:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     278:	eb df       	rcall	.-42     	; 0x250 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     27a:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     27c:	e9 df       	rcall	.-46     	; 0x250 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     27e:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     280:	e7 df       	rcall	.-50     	; 0x250 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     282:	13 c0       	rjmp	.+38     	; 0x2aa <i2c_write>
	ret
     284:	08 95       	ret

00000286 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     286:	08 2e       	mov	r0, r24

00000288 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     288:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     28a:	e2 df       	rcall	.-60     	; 0x250 <i2c_delay_T2>
	mov	r24,__tmp_reg__
     28c:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     28e:	0d d0       	rcall	.+26     	; 0x2aa <i2c_write>
	tst	r24		;if device not busy -> done
     290:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     292:	11 f0       	breq	.+4      	; 0x298 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     294:	02 d0       	rcall	.+4      	; 0x29a <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     296:	f8 cf       	rjmp	.-16     	; 0x288 <i2c_start_wait1>

00000298 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     298:	08 95       	ret

0000029a <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     29a:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     29c:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29e:	d8 df       	rcall	.-80     	; 0x250 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2a0:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a2:	d6 df       	rcall	.-84     	; 0x250 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     2a4:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2a6:	d4 cf       	rjmp	.-88     	; 0x250 <i2c_delay_T2>
	ret
     2a8:	08 95       	ret

000002aa <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     2aa:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     2ac:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <i2c_write_first>

000002b0 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     2b0:	88 0f       	add	r24, r24

000002b2 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     2b2:	59 f0       	breq	.+22     	; 0x2ca <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     2b4:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     2b6:	18 f4       	brcc	.+6      	; 0x2be <i2c_write_low>
	nop
     2b8:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     2ba:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <i2c_write_high>

000002be <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     2be:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <i2c_write_high>

000002c2 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     2c2:	c6 df       	rcall	.-116    	; 0x250 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2c4:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c6:	c4 df       	rcall	.-120    	; 0x250 <i2c_delay_T2>
	rjmp	i2c_write_bit
     2c8:	f3 cf       	rjmp	.-26     	; 0x2b0 <i2c_write_bit>

000002ca <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     2ca:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     2cc:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2ce:	c0 df       	rcall	.-128    	; 0x250 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2d0:	50 98       	cbi	0x0a, 0	; 10

000002d2 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2d2:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <i2c_ack_wait>
	
	clr	r24		;return 0
     2d6:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2d8:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2da:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2dc:	b9 df       	rcall	.-142    	; 0x250 <i2c_delay_T2>
	clr	r25
     2de:	99 27       	eor	r25, r25
	ret
     2e0:	08 95       	ret

000002e2 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2e2:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <i2c_read>

000002e6 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2e6:	81 e0       	ldi	r24, 0x01	; 1

000002e8 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2e8:	71 e0       	ldi	r23, 0x01	; 1

000002ea <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2ea:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2ec:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2ee:	b0 df       	rcall	.-160    	; 0x250 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2f0:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2f2:	ae df       	rcall	.-164    	; 0x250 <i2c_delay_T2>

000002f4 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2f4:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2f8:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2fa:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2fc:	08 94       	sec
	
	rol	r23		;store bit
     2fe:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     300:	a0 f7       	brcc	.-24     	; 0x2ea <i2c_read_bit>

00000302 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     302:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     304:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     306:	11 f0       	breq	.+4      	; 0x30c <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     308:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     30a:	01 c0       	rjmp	.+2      	; 0x30e <i2c_put_ack_high>

0000030c <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     30c:	51 9a       	sbi	0x0a, 1	; 10

0000030e <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     30e:	a0 df       	rcall	.-192    	; 0x250 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     310:	50 98       	cbi	0x0a, 0	; 10

00000312 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     312:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     314:	fe cf       	rjmp	.-4      	; 0x312 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     316:	9c df       	rcall	.-200    	; 0x250 <i2c_delay_T2>
	mov	r24,r23
     318:	87 2f       	mov	r24, r23
	clr	r25
     31a:	99 27       	eor	r25, r25
	ret
     31c:	08 95       	ret

0000031e <_Z12adxl345_initv>:
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
	i2c_write(0x20);
	i2c_write(offsetz);

	i2c_stop();
}
     31e:	a0 df       	rcall	.-192    	; 0x260 <i2c_init>
     320:	25 e3       	ldi	r18, 0x35	; 53
     322:	2a 95       	dec	r18
     324:	f1 f7       	brne	.-4      	; 0x322 <_Z12adxl345_initv+0x4>
     326:	00 00       	nop
     328:	8f e3       	ldi	r24, 0x3F	; 63
     32a:	9f e1       	ldi	r25, 0x1F	; 31
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <_Z12adxl345_initv+0xe>
     330:	00 c0       	rjmp	.+0      	; 0x332 <_Z12adxl345_initv+0x14>
     332:	00 00       	nop
     334:	86 ea       	ldi	r24, 0xA6	; 166
     336:	9d df       	rcall	.-198    	; 0x272 <i2c_rep_start>
     338:	81 e3       	ldi	r24, 0x31	; 49
     33a:	b7 df       	rcall	.-146    	; 0x2aa <i2c_write>
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	b5 df       	rcall	.-150    	; 0x2aa <i2c_write>
     340:	86 ea       	ldi	r24, 0xA6	; 166
     342:	97 df       	rcall	.-210    	; 0x272 <i2c_rep_start>
     344:	8d e2       	ldi	r24, 0x2D	; 45
     346:	b1 df       	rcall	.-158    	; 0x2aa <i2c_write>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	af df       	rcall	.-162    	; 0x2aa <i2c_write>
     34c:	86 ea       	ldi	r24, 0xA6	; 166
     34e:	91 df       	rcall	.-222    	; 0x272 <i2c_rep_start>
     350:	8d e2       	ldi	r24, 0x2D	; 45
     352:	ab df       	rcall	.-170    	; 0x2aa <i2c_write>
     354:	86 e1       	ldi	r24, 0x16	; 22
     356:	a9 df       	rcall	.-174    	; 0x2aa <i2c_write>
     358:	86 ea       	ldi	r24, 0xA6	; 166
     35a:	8b df       	rcall	.-234    	; 0x272 <i2c_rep_start>
     35c:	8d e2       	ldi	r24, 0x2D	; 45
     35e:	a5 df       	rcall	.-182    	; 0x2aa <i2c_write>
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	a3 df       	rcall	.-186    	; 0x2aa <i2c_write>
     364:	86 ea       	ldi	r24, 0xA6	; 166
     366:	85 df       	rcall	.-246    	; 0x272 <i2c_rep_start>
     368:	8e e2       	ldi	r24, 0x2E	; 46
     36a:	9f df       	rcall	.-194    	; 0x2aa <i2c_write>
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	9d df       	rcall	.-198    	; 0x2aa <i2c_write>
     370:	9f ef       	ldi	r25, 0xFF	; 255
     372:	29 ef       	ldi	r18, 0xF9	; 249
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	91 50       	subi	r25, 0x01	; 1
     378:	20 40       	sbci	r18, 0x00	; 0
     37a:	80 40       	sbci	r24, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <_Z12adxl345_initv+0x58>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <_Z12adxl345_initv+0x62>
     380:	00 00       	nop
     382:	8b cf       	rjmp	.-234    	; 0x29a <i2c_stop>
     384:	08 95       	ret

00000386 <_Z24adxl345_waitfordatareadyv>:
 * wait for xyz data to be ready
 */
void adxl345_waitfordataready() {
	//wait until data is ready
	unsigned char status = 0;
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
     386:	86 ea       	ldi	r24, 0xA6	; 166
     388:	7e df       	rcall	.-260    	; 0x286 <i2c_start_wait>
	do {
		i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     38a:	86 ea       	ldi	r24, 0xA6	; 166
     38c:	72 df       	rcall	.-284    	; 0x272 <i2c_rep_start>
		i2c_write(0x30); //status register
     38e:	80 e3       	ldi	r24, 0x30	; 48
     390:	8c df       	rcall	.-232    	; 0x2aa <i2c_write>
		i2c_rep_start(ADXL345_ADDR | I2C_READ);
     392:	87 ea       	ldi	r24, 0xA7	; 167
     394:	6e df       	rcall	.-292    	; 0x272 <i2c_rep_start>
		status = i2c_readNak();
     396:	a5 df       	rcall	.-182    	; 0x2e2 <i2c_readNak>
 */
void adxl345_waitfordataready() {
	//wait until data is ready
	unsigned char status = 0;
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
	do {
     398:	88 23       	and	r24, r24
     39a:	bc f7       	brge	.-18     	; 0x38a <_Z24adxl345_waitfordatareadyv+0x4>
		i2c_write(0x30); //status register
		i2c_rep_start(ADXL345_ADDR | I2C_READ);
		status = i2c_readNak();
		status &= 0b10000000;
	} while (!status);
}
     39c:	08 95       	ret

0000039e <_Z15adxl345_getdataPdS_S_>:

/*
 * get xyz accellerometer values
 */
void adxl345_getdata(double *ax, double *ay, double *az) {
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	7c 01       	movw	r14, r24
     3b8:	8b 01       	movw	r16, r22
     3ba:	ea 01       	movw	r28, r20
	int16_t axraw = 0;
	int16_t ayraw = 0;
	int16_t azraw = 0;

	adxl345_waitfordataready();
     3bc:	e4 df       	rcall	.-56     	; 0x386 <_Z24adxl345_waitfordatareadyv>

	//read axis data
	int16_t temp;
	//X
	i2c_start_wait(ADXL345_ADDR | I2C_WRITE);
     3be:	86 ea       	ldi	r24, 0xA6	; 166
     3c0:	62 df       	rcall	.-316    	; 0x286 <i2c_start_wait>
	i2c_write(0x32);
     3c2:	82 e3       	ldi	r24, 0x32	; 50
     3c4:	72 df       	rcall	.-284    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3c6:	87 ea       	ldi	r24, 0xA7	; 167
     3c8:	54 df       	rcall	.-344    	; 0x272 <i2c_rep_start>
	axraw = i2c_readNak();
     3ca:	8b df       	rcall	.-234    	; 0x2e2 <i2c_readNak>
     3cc:	a8 2e       	mov	r10, r24
     3ce:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3d0:	86 ea       	ldi	r24, 0xA6	; 166
     3d2:	4f df       	rcall	.-354    	; 0x272 <i2c_rep_start>
	i2c_write(0x32+1);
     3d4:	83 e3       	ldi	r24, 0x33	; 51
     3d6:	69 df       	rcall	.-302    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3d8:	87 ea       	ldi	r24, 0xA7	; 167
     3da:	4b df       	rcall	.-362    	; 0x272 <i2c_rep_start>
	temp = i2c_readNak();
     3dc:	82 df       	rcall	.-252    	; 0x2e2 <i2c_readNak>
     3de:	c8 2e       	mov	r12, r24
     3e0:	d1 2c       	mov	r13, r1
	axraw += (temp<<8);
     3e2:	dc 2c       	mov	r13, r12
     3e4:	cc 24       	eor	r12, r12
     3e6:	ca 0c       	add	r12, r10
     3e8:	db 1c       	adc	r13, r11
	//Y
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3ea:	86 ea       	ldi	r24, 0xA6	; 166
     3ec:	42 df       	rcall	.-380    	; 0x272 <i2c_rep_start>
	i2c_write(0x34);
     3ee:	84 e3       	ldi	r24, 0x34	; 52
     3f0:	5c df       	rcall	.-328    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     3f2:	87 ea       	ldi	r24, 0xA7	; 167
     3f4:	3e df       	rcall	.-388    	; 0x272 <i2c_rep_start>
	ayraw = i2c_readNak();
     3f6:	75 df       	rcall	.-278    	; 0x2e2 <i2c_readNak>
     3f8:	a8 2e       	mov	r10, r24
     3fa:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     3fc:	86 ea       	ldi	r24, 0xA6	; 166
     3fe:	39 df       	rcall	.-398    	; 0x272 <i2c_rep_start>
	i2c_write(0x34+1);
     400:	85 e3       	ldi	r24, 0x35	; 53
     402:	53 df       	rcall	.-346    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     404:	87 ea       	ldi	r24, 0xA7	; 167
     406:	35 df       	rcall	.-406    	; 0x272 <i2c_rep_start>
	temp = i2c_readNak();
     408:	6c df       	rcall	.-296    	; 0x2e2 <i2c_readNak>
     40a:	88 2e       	mov	r8, r24
     40c:	91 2c       	mov	r9, r1
	ayraw += (temp<<8);
     40e:	98 2c       	mov	r9, r8
     410:	88 24       	eor	r8, r8
     412:	8a 0c       	add	r8, r10
     414:	9b 1c       	adc	r9, r11
	//Z
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     416:	86 ea       	ldi	r24, 0xA6	; 166
     418:	2c df       	rcall	.-424    	; 0x272 <i2c_rep_start>
	i2c_write(0x36);
     41a:	86 e3       	ldi	r24, 0x36	; 54
     41c:	46 df       	rcall	.-372    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     41e:	87 ea       	ldi	r24, 0xA7	; 167
     420:	28 df       	rcall	.-432    	; 0x272 <i2c_rep_start>
	azraw = i2c_readNak();
     422:	5f df       	rcall	.-322    	; 0x2e2 <i2c_readNak>
     424:	a8 2e       	mov	r10, r24
     426:	b1 2c       	mov	r11, r1
	i2c_rep_start(ADXL345_ADDR | I2C_WRITE);
     428:	86 ea       	ldi	r24, 0xA6	; 166
     42a:	23 df       	rcall	.-442    	; 0x272 <i2c_rep_start>
	i2c_write(0x36+1);
     42c:	87 e3       	ldi	r24, 0x37	; 55
     42e:	3d df       	rcall	.-390    	; 0x2aa <i2c_write>
	i2c_rep_start(ADXL345_ADDR | I2C_READ);
     430:	87 ea       	ldi	r24, 0xA7	; 167
     432:	1f df       	rcall	.-450    	; 0x272 <i2c_rep_start>
	temp = i2c_readNak();
     434:	56 df       	rcall	.-340    	; 0x2e2 <i2c_readNak>
     436:	90 e0       	ldi	r25, 0x00	; 0
	azraw += (temp<<8);
     438:	98 2f       	mov	r25, r24
     43a:	88 27       	eor	r24, r24
     43c:	a8 0e       	add	r10, r24
     43e:	b9 1e       	adc	r11, r25

	i2c_stop();
     440:	2c df       	rcall	.-424    	; 0x29a <i2c_stop>
	#if ADXL345_CALIBRATED == 1
	*ax = (axraw/(double)ADXL345_CALRANGEVALX) + (double)ADXL345_CALOFFSETX;
	*zy = (ayraw/(double)ADXL345_CALRANGEVALY) + (double)ADXL345_CALOFFSETY;
	*az = (azraw/(double)ADXL345_CALRANGEVALZ) + (double)ADXL345_CALOFFSETZ;
	#else
	*ax = (axraw/(double)ADXL345_RANGEVAL);
     442:	b6 01       	movw	r22, r12
     444:	88 27       	eor	r24, r24
     446:	77 fd       	sbrc	r23, 7
     448:	80 95       	com	r24
     44a:	98 2f       	mov	r25, r24
     44c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatsisf>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5b e3       	ldi	r21, 0x3B	; 59
     458:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     45c:	f7 01       	movw	r30, r14
     45e:	60 83       	st	Z, r22
     460:	71 83       	std	Z+1, r23	; 0x01
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	93 83       	std	Z+3, r25	; 0x03
	*ay = (ayraw/(double)ADXL345_RANGEVAL);
     466:	b4 01       	movw	r22, r8
     468:	88 27       	eor	r24, r24
     46a:	77 fd       	sbrc	r23, 7
     46c:	80 95       	com	r24
     46e:	98 2f       	mov	r25, r24
     470:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatsisf>
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e8       	ldi	r20, 0x80	; 128
     47a:	5b e3       	ldi	r21, 0x3B	; 59
     47c:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     480:	f8 01       	movw	r30, r16
     482:	60 83       	st	Z, r22
     484:	71 83       	std	Z+1, r23	; 0x01
     486:	82 83       	std	Z+2, r24	; 0x02
     488:	93 83       	std	Z+3, r25	; 0x03
	*az = (azraw/(double)ADXL345_RANGEVAL);
     48a:	b5 01       	movw	r22, r10
     48c:	88 27       	eor	r24, r24
     48e:	77 fd       	sbrc	r23, 7
     490:	80 95       	com	r24
     492:	98 2f       	mov	r25, r24
     494:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatsisf>
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e8       	ldi	r20, 0x80	; 128
     49e:	5b e3       	ldi	r21, 0x3B	; 59
     4a0:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     4a4:	68 83       	st	Y, r22
     4a6:	79 83       	std	Y+1, r23	; 0x01
     4a8:	8a 83       	std	Y+2, r24	; 0x02
     4aa:	9b 83       	std	Y+3, r25	; 0x03
	#endif

	//this is a simple low pass filter
	#if ADXL345_LOWPASSENABLED == 1
	if(!firstread)
     4ac:	80 91 00 02 	lds	r24, 0x0200
     4b0:	81 11       	cpse	r24, r1
     4b2:	8c c0       	rjmp	.+280    	; 0x5cc <_Z15adxl345_getdataPdS_S_+0x22e>
		*ax = (0.75)*(axold) + (0.25)*(*ax);
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e4       	ldi	r20, 0x40	; 64
     4ba:	5f e3       	ldi	r21, 0x3F	; 63
     4bc:	60 91 32 02 	lds	r22, 0x0232
     4c0:	70 91 33 02 	lds	r23, 0x0233
     4c4:	80 91 34 02 	lds	r24, 0x0234
     4c8:	90 91 35 02 	lds	r25, 0x0235
     4cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     4d0:	4b 01       	movw	r8, r22
     4d2:	5c 01       	movw	r10, r24
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e8       	ldi	r20, 0x80	; 128
     4da:	5e e3       	ldi	r21, 0x3E	; 62
     4dc:	f7 01       	movw	r30, r14
     4de:	60 81       	ld	r22, Z
     4e0:	71 81       	ldd	r23, Z+1	; 0x01
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	93 81       	ldd	r25, Z+3	; 0x03
     4e6:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     4ea:	9b 01       	movw	r18, r22
     4ec:	ac 01       	movw	r20, r24
     4ee:	c5 01       	movw	r24, r10
     4f0:	b4 01       	movw	r22, r8
     4f2:	df d7       	rcall	.+4030   	; 0x14b2 <__addsf3>
     4f4:	f7 01       	movw	r30, r14
     4f6:	60 83       	st	Z, r22
     4f8:	71 83       	std	Z+1, r23	; 0x01
     4fa:	82 83       	std	Z+2, r24	; 0x02
     4fc:	93 83       	std	Z+3, r25	; 0x03
	axold = *ax;
     4fe:	60 93 32 02 	sts	0x0232, r22
     502:	70 93 33 02 	sts	0x0233, r23
     506:	80 93 34 02 	sts	0x0234, r24
     50a:	90 93 35 02 	sts	0x0235, r25
	if(!firstread)
		*ay = (0.75)*(ayold) + (0.25)*(*ay);
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	40 e4       	ldi	r20, 0x40	; 64
     514:	5f e3       	ldi	r21, 0x3F	; 63
     516:	60 91 2e 02 	lds	r22, 0x022E
     51a:	70 91 2f 02 	lds	r23, 0x022F
     51e:	80 91 30 02 	lds	r24, 0x0230
     522:	90 91 31 02 	lds	r25, 0x0231
     526:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	5e e3       	ldi	r21, 0x3E	; 62
     536:	f8 01       	movw	r30, r16
     538:	60 81       	ld	r22, Z
     53a:	71 81       	ldd	r23, Z+1	; 0x01
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	93 81       	ldd	r25, Z+3	; 0x03
     540:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     544:	9b 01       	movw	r18, r22
     546:	ac 01       	movw	r20, r24
     548:	c7 01       	movw	r24, r14
     54a:	b6 01       	movw	r22, r12
     54c:	b2 d7       	rcall	.+3940   	; 0x14b2 <__addsf3>
     54e:	f8 01       	movw	r30, r16
     550:	60 83       	st	Z, r22
     552:	71 83       	std	Z+1, r23	; 0x01
     554:	82 83       	std	Z+2, r24	; 0x02
     556:	93 83       	std	Z+3, r25	; 0x03
	ayold = *ay;
     558:	60 93 2e 02 	sts	0x022E, r22
     55c:	70 93 2f 02 	sts	0x022F, r23
     560:	80 93 30 02 	sts	0x0230, r24
     564:	90 93 31 02 	sts	0x0231, r25
	if(!firstread)
		*az = (0.75)*(azold) + (0.25)*(*az);
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e4       	ldi	r20, 0x40	; 64
     56e:	5f e3       	ldi	r21, 0x3F	; 63
     570:	60 91 2a 02 	lds	r22, 0x022A
     574:	70 91 2b 02 	lds	r23, 0x022B
     578:	80 91 2c 02 	lds	r24, 0x022C
     57c:	90 91 2d 02 	lds	r25, 0x022D
     580:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     584:	6b 01       	movw	r12, r22
     586:	7c 01       	movw	r14, r24
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5e e3       	ldi	r21, 0x3E	; 62
     590:	68 81       	ld	r22, Y
     592:	79 81       	ldd	r23, Y+1	; 0x01
     594:	8a 81       	ldd	r24, Y+2	; 0x02
     596:	9b 81       	ldd	r25, Y+3	; 0x03
     598:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	86 d7       	rcall	.+3852   	; 0x14b2 <__addsf3>
     5a6:	68 83       	st	Y, r22
     5a8:	79 83       	std	Y+1, r23	; 0x01
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	9b 83       	std	Y+3, r25	; 0x03
	azold = *az;
     5ae:	88 81       	ld	r24, Y
     5b0:	99 81       	ldd	r25, Y+1	; 0x01
     5b2:	aa 81       	ldd	r26, Y+2	; 0x02
     5b4:	bb 81       	ldd	r27, Y+3	; 0x03
     5b6:	80 93 2a 02 	sts	0x022A, r24
     5ba:	90 93 2b 02 	sts	0x022B, r25
     5be:	a0 93 2c 02 	sts	0x022C, r26
     5c2:	b0 93 2d 02 	sts	0x022D, r27
	firstread = 0;
     5c6:	10 92 00 02 	sts	0x0200, r1
     5ca:	1b c0       	rjmp	.+54     	; 0x602 <_Z15adxl345_getdataPdS_S_+0x264>

	//this is a simple low pass filter
	#if ADXL345_LOWPASSENABLED == 1
	if(!firstread)
		*ax = (0.75)*(axold) + (0.25)*(*ax);
	axold = *ax;
     5cc:	f7 01       	movw	r30, r14
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	a2 81       	ldd	r26, Z+2	; 0x02
     5d4:	b3 81       	ldd	r27, Z+3	; 0x03
     5d6:	80 93 32 02 	sts	0x0232, r24
     5da:	90 93 33 02 	sts	0x0233, r25
     5de:	a0 93 34 02 	sts	0x0234, r26
     5e2:	b0 93 35 02 	sts	0x0235, r27
	if(!firstread)
		*ay = (0.75)*(ayold) + (0.25)*(*ay);
	ayold = *ay;
     5e6:	f8 01       	movw	r30, r16
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	a2 81       	ldd	r26, Z+2	; 0x02
     5ee:	b3 81       	ldd	r27, Z+3	; 0x03
     5f0:	80 93 2e 02 	sts	0x022E, r24
     5f4:	90 93 2f 02 	sts	0x022F, r25
     5f8:	a0 93 30 02 	sts	0x0230, r26
     5fc:	b0 93 31 02 	sts	0x0231, r27
     600:	d6 cf       	rjmp	.-84     	; 0x5ae <_Z15adxl345_getdataPdS_S_+0x210>
	if(!firstread)
		*az = (0.75)*(azold) + (0.25)*(*az);
	azold = *az;
	firstread = 0;
	#endif
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	08 95       	ret

0000061c <_Z13init_HMC5883Lv>:
	/* hard iron estimate */
	static int16_t iVx, iVy, iVz;

void init_HMC5883L(void){

	i2c_start(HMC5883L_WRITE);
     61c:	8c e3       	ldi	r24, 0x3C	; 60
     61e:	25 de       	rcall	.-950    	; 0x26a <i2c_start>
	i2c_write(0x00); // set pointer to CRA
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	43 de       	rcall	.-890    	; 0x2aa <i2c_write>
	i2c_write(0x70); // write 0x70 to CRA
     624:	80 e7       	ldi	r24, 0x70	; 112
     626:	41 de       	rcall	.-894    	; 0x2aa <i2c_write>
	i2c_stop();
     628:	38 de       	rcall	.-912    	; 0x29a <i2c_stop>

	i2c_start(HMC5883L_WRITE);
     62a:	8c e3       	ldi	r24, 0x3C	; 60
     62c:	1e de       	rcall	.-964    	; 0x26a <i2c_start>
	i2c_write(0x01); // set pointer to CRB
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	3c de       	rcall	.-904    	; 0x2aa <i2c_write>
	i2c_write(0xA0);
     632:	80 ea       	ldi	r24, 0xA0	; 160
     634:	3a de       	rcall	.-908    	; 0x2aa <i2c_write>
	i2c_stop();
     636:	31 de       	rcall	.-926    	; 0x29a <i2c_stop>

	i2c_start(HMC5883L_WRITE);
     638:	8c e3       	ldi	r24, 0x3C	; 60
     63a:	17 de       	rcall	.-978    	; 0x26a <i2c_start>
	i2c_write(0x02); // set pointer to measurement mode
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	35 de       	rcall	.-918    	; 0x2aa <i2c_write>
	i2c_write(0x00); // continuous measurement
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	33 de       	rcall	.-922    	; 0x2aa <i2c_write>
	i2c_stop();
     644:	2a ce       	rjmp	.-940    	; 0x29a <i2c_stop>
     646:	08 95       	ret

00000648 <_Z10getHeadingv>:
}

float getHeading(void){
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15

	i2c_start_wait(HMC5883L_WRITE);
     650:	8c e3       	ldi	r24, 0x3C	; 60
     652:	19 de       	rcall	.-974    	; 0x286 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	29 de       	rcall	.-942    	; 0x2aa <i2c_write>
	i2c_stop();
     658:	20 de       	rcall	.-960    	; 0x29a <i2c_stop>

	i2c_rep_start(HMC5883L_READ);
     65a:	8d e3       	ldi	r24, 0x3D	; 61
     65c:	0a de       	rcall	.-1004   	; 0x272 <i2c_rep_start>

	mag_raw_x = ((uint8_t)i2c_readAck())<<8;
     65e:	43 de       	rcall	.-890    	; 0x2e6 <i2c_readAck>
     660:	10 92 50 02 	sts	0x0250, r1
     664:	80 93 51 02 	sts	0x0251, r24
	mag_raw_x |= i2c_readAck();
     668:	3e de       	rcall	.-900    	; 0x2e6 <i2c_readAck>
     66a:	20 91 50 02 	lds	r18, 0x0250
     66e:	30 91 51 02 	lds	r19, 0x0251
     672:	28 2b       	or	r18, r24
     674:	30 93 51 02 	sts	0x0251, r19
     678:	20 93 50 02 	sts	0x0250, r18

	mag_raw_z = ((uint8_t)i2c_readAck())<<8;
     67c:	34 de       	rcall	.-920    	; 0x2e6 <i2c_readAck>
     67e:	10 92 4c 02 	sts	0x024C, r1
     682:	80 93 4d 02 	sts	0x024D, r24
	mag_raw_z |= i2c_readAck();
     686:	2f de       	rcall	.-930    	; 0x2e6 <i2c_readAck>
     688:	20 91 4c 02 	lds	r18, 0x024C
     68c:	30 91 4d 02 	lds	r19, 0x024D
     690:	28 2b       	or	r18, r24
     692:	30 93 4d 02 	sts	0x024D, r19
     696:	20 93 4c 02 	sts	0x024C, r18

	mag_raw_y = ((uint8_t)i2c_readAck())<<8;
     69a:	25 de       	rcall	.-950    	; 0x2e6 <i2c_readAck>
     69c:	10 92 4e 02 	sts	0x024E, r1
     6a0:	80 93 4f 02 	sts	0x024F, r24
	mag_raw_y |= i2c_readNak();
     6a4:	1e de       	rcall	.-964    	; 0x2e2 <i2c_readNak>
     6a6:	20 91 4e 02 	lds	r18, 0x024E
     6aa:	30 91 4f 02 	lds	r19, 0x024F
     6ae:	a9 01       	movw	r20, r18
     6b0:	48 2b       	or	r20, r24
     6b2:	ca 01       	movw	r24, r20
     6b4:	90 93 4f 02 	sts	0x024F, r25
     6b8:	80 93 4e 02 	sts	0x024E, r24

	fixed_x = k1x * (mag_raw_x - k2x);
     6bc:	60 91 50 02 	lds	r22, 0x0250
     6c0:	70 91 51 02 	lds	r23, 0x0251
     6c4:	20 91 07 02 	lds	r18, 0x0207
     6c8:	30 91 08 02 	lds	r19, 0x0208
     6cc:	62 1b       	sub	r22, r18
     6ce:	73 0b       	sbc	r23, r19
     6d0:	40 91 09 02 	lds	r20, 0x0209
     6d4:	50 91 0a 02 	lds	r21, 0x020A
     6d8:	64 9f       	mul	r22, r20
     6da:	90 01       	movw	r18, r0
     6dc:	65 9f       	mul	r22, r21
     6de:	30 0d       	add	r19, r0
     6e0:	74 9f       	mul	r23, r20
     6e2:	30 0d       	add	r19, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	30 93 45 02 	sts	0x0245, r19
     6ea:	20 93 44 02 	sts	0x0244, r18
	fixed_y = k1y * (mag_raw_y - k2y);
     6ee:	20 91 03 02 	lds	r18, 0x0203
     6f2:	30 91 04 02 	lds	r19, 0x0204
     6f6:	82 1b       	sub	r24, r18
     6f8:	93 0b       	sbc	r25, r19
     6fa:	40 91 05 02 	lds	r20, 0x0205
     6fe:	50 91 06 02 	lds	r21, 0x0206
     702:	84 9f       	mul	r24, r20
     704:	90 01       	movw	r18, r0
     706:	85 9f       	mul	r24, r21
     708:	30 0d       	add	r19, r0
     70a:	94 9f       	mul	r25, r20
     70c:	30 0d       	add	r19, r0
     70e:	11 24       	eor	r1, r1
     710:	30 93 43 02 	sts	0x0243, r19
     714:	20 93 42 02 	sts	0x0242, r18
	
	i2c_stop();
     718:	c0 dd       	rcall	.-1152   	; 0x29a <i2c_stop>
	
	float heading = atan2(fixed_y,fixed_x);
     71a:	60 91 44 02 	lds	r22, 0x0244
     71e:	70 91 45 02 	lds	r23, 0x0245
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	f7 d7       	rcall	.+4078   	; 0x171a <__floatsisf>
     72c:	6b 01       	movw	r12, r22
     72e:	7c 01       	movw	r14, r24
     730:	60 91 42 02 	lds	r22, 0x0242
     734:	70 91 43 02 	lds	r23, 0x0243
     738:	88 27       	eor	r24, r24
     73a:	77 fd       	sbrc	r23, 7
     73c:	80 95       	com	r24
     73e:	98 2f       	mov	r25, r24
     740:	ec d7       	rcall	.+4056   	; 0x171a <__floatsisf>
     742:	a7 01       	movw	r20, r14
     744:	96 01       	movw	r18, r12
     746:	28 d7       	rcall	.+3664   	; 0x1598 <atan2>
     748:	6b 01       	movw	r12, r22
     74a:	7c 01       	movw	r14, r24
	float heading_dec = heading+DECLINATION;
	
	
	if(heading < 0)
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	a9 01       	movw	r20, r18
     752:	75 d7       	rcall	.+3818   	; 0x163e <__cmpsf2>
     754:	88 23       	and	r24, r24
     756:	4c f4       	brge	.+18     	; 0x76a <_Z10getHeadingv+0x122>
		heading += 2*PI;
     758:	2b ed       	ldi	r18, 0xDB	; 219
     75a:	3f e0       	ldi	r19, 0x0F	; 15
     75c:	49 ec       	ldi	r20, 0xC9	; 201
     75e:	50 e4       	ldi	r21, 0x40	; 64
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	a6 d6       	rcall	.+3404   	; 0x14b2 <__addsf3>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
	
	if(heading>2*PI)
     76a:	2b ed       	ldi	r18, 0xDB	; 219
     76c:	3f e0       	ldi	r19, 0x0F	; 15
     76e:	49 ec       	ldi	r20, 0xC9	; 201
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <__gesf2>
     77a:	18 16       	cp	r1, r24
     77c:	4c f4       	brge	.+18     	; 0x790 <_Z10getHeadingv+0x148>
		heading-=2*PI;
     77e:	2b ed       	ldi	r18, 0xDB	; 219
     780:	3f e0       	ldi	r19, 0x0F	; 15
     782:	49 ec       	ldi	r20, 0xC9	; 201
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	92 d6       	rcall	.+3364   	; 0x14b0 <__subsf3>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
	
	if(heading_dec>2*PI)
	heading_dec-=2*PI;
	
		
	float heading_degrees = heading * 180 / PI;
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	44 e3       	ldi	r20, 0x34	; 52
     796:	53 e4       	ldi	r21, 0x43	; 67
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 6d 0c 	call	0x18da	; 0x18da <__mulsf3>
     7a0:	2b ed       	ldi	r18, 0xDB	; 219
     7a2:	3f e0       	ldi	r19, 0x0F	; 15
     7a4:	49 e4       	ldi	r20, 0x49	; 73
     7a6:	50 e4       	ldi	r21, 0x40	; 64
     7a8:	4e d7       	rcall	.+3740   	; 0x1646 <__divsf3>
	debug_println("");
	*/
	
	
	return heading_degrees;
}
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	08 95       	ret

000007b4 <_Z5iTrigii>:

const uint16_t MINDELTATRIG = 1; /* final step size for iTrig */

/* function to calculate ir = ix / sqrt(ix*ix+iy*iy) using binary division */
int16_t iTrig(int16_t ix, int16_t iy)
{
     7b4:	4f 92       	push	r4
     7b6:	5f 92       	push	r5
     7b8:	6f 92       	push	r6
     7ba:	7f 92       	push	r7
     7bc:	8f 92       	push	r8
     7be:	9f 92       	push	r9
     7c0:	af 92       	push	r10
     7c2:	bf 92       	push	r11
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
	/* stack variables */
	/* ix, iy: signed 16 bit integers representing sensor reading in range -32768 to 32767 */
	/* function returns signed Int16 as signed fraction (ie +32767=0.99997, -32768=-1.0000) */
	/* algorithm solves for ir*ir*(ix*ix+iy*iy)=ix*ix */
	/* correct for pathological case: ix==iy==0 */
	if ((ix == 0) && (iy == 0)) ix = iy = 1;
     7d4:	00 97       	sbiw	r24, 0x00	; 0
     7d6:	29 f4       	brne	.+10     	; 0x7e2 <_Z5iTrigii+0x2e>
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <_Z5iTrigii+0x2c>
     7de:	8c c0       	rjmp	.+280    	; 0x8f8 <_Z5iTrigii+0x144>
     7e0:	06 c0       	rjmp	.+12     	; 0x7ee <_Z5iTrigii+0x3a>
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
     7e2:	81 15       	cp	r24, r1
     7e4:	20 e8       	ldi	r18, 0x80	; 128
     7e6:	92 07       	cpc	r25, r18
     7e8:	11 f4       	brne	.+4      	; 0x7ee <_Z5iTrigii+0x3a>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e8       	ldi	r25, 0x80	; 128
	if (iy == -32768) iy = -32767;
     7ee:	61 15       	cp	r22, r1
     7f0:	40 e8       	ldi	r20, 0x80	; 128
     7f2:	74 07       	cpc	r23, r20
     7f4:	11 f4       	brne	.+4      	; 0x7fa <_Z5iTrigii+0x46>
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	70 e8       	ldi	r23, 0x80	; 128
	/* store the sign for later use. algorithm assumes x is positive for convenience */
	isignx = 1;
	if (ix < 0)
     7fa:	99 23       	and	r25, r25
     7fc:	3c f4       	brge	.+14     	; 0x80c <_Z5iTrigii+0x58>
	{
		ix = (int16_t)-ix;
     7fe:	91 95       	neg	r25
     800:	81 95       	neg	r24
     802:	91 09       	sbc	r25, r1
		isignx = -1;
     804:	88 24       	eor	r8, r8
     806:	8a 94       	dec	r8
     808:	98 2c       	mov	r9, r8
     80a:	03 c0       	rjmp	.+6      	; 0x812 <_Z5iTrigii+0x5e>
	if ((ix == 0) && (iy == 0)) ix = iy = 1;
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
	if (iy == -32768) iy = -32767;
	/* store the sign for later use. algorithm assumes x is positive for convenience */
	isignx = 1;
     80c:	88 24       	eor	r8, r8
     80e:	83 94       	inc	r8
     810:	91 2c       	mov	r9, r1
	{
		ix = (int16_t)-ix;
		isignx = -1;
	}
	/* for convenience in the boosting set iy to be positive as well as ix */
	iy = (int16_t) abs(iy);
     812:	9b 01       	movw	r18, r22
     814:	77 23       	and	r23, r23
     816:	24 f4       	brge	.+8      	; 0x820 <_Z5iTrigii+0x6c>
     818:	22 27       	eor	r18, r18
     81a:	33 27       	eor	r19, r19
     81c:	26 1b       	sub	r18, r22
     81e:	37 0b       	sbc	r19, r23
	/* to reduce quantization effects, boost ix and iy but keep below maximum signed 16 bit */
	while ((ix < 16384) && (iy < 16384))
     820:	81 15       	cp	r24, r1
     822:	40 e4       	ldi	r20, 0x40	; 64
     824:	94 07       	cpc	r25, r20
     826:	84 f4       	brge	.+32     	; 0x848 <_Z5iTrigii+0x94>
     828:	21 15       	cp	r18, r1
     82a:	40 e4       	ldi	r20, 0x40	; 64
     82c:	34 07       	cpc	r19, r20
     82e:	64 f4       	brge	.+24     	; 0x848 <_Z5iTrigii+0x94>
	{
		ix = (int16_t)(ix + ix);
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
		iy = (int16_t)(iy + iy);
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
		isignx = -1;
	}
	/* for convenience in the boosting set iy to be positive as well as ix */
	iy = (int16_t) abs(iy);
	/* to reduce quantization effects, boost ix and iy but keep below maximum signed 16 bit */
	while ((ix < 16384) && (iy < 16384))
     838:	81 15       	cp	r24, r1
     83a:	40 e4       	ldi	r20, 0x40	; 64
     83c:	94 07       	cpc	r25, r20
     83e:	24 f4       	brge	.+8      	; 0x848 <_Z5iTrigii+0x94>
     840:	21 15       	cp	r18, r1
     842:	40 e4       	ldi	r20, 0x40	; 64
     844:	34 07       	cpc	r19, r20
     846:	a4 f3       	brlt	.-24     	; 0x830 <_Z5iTrigii+0x7c>
	{
		ix = (int16_t)(ix + ix);
		iy = (int16_t)(iy + iy);
	}
	/* calculate ix*ix and the hypotenuse squared */
	ixsq = (uint32_t)(ix * ix); /* ixsq=ix*ix: 0 to 32767^2 = 1073676289 */
     848:	88 9f       	mul	r24, r24
     84a:	60 01       	movw	r12, r0
     84c:	89 9f       	mul	r24, r25
     84e:	d0 0c       	add	r13, r0
     850:	d0 0c       	add	r13, r0
     852:	11 24       	eor	r1, r1
     854:	ee 24       	eor	r14, r14
     856:	d7 fc       	sbrc	r13, 7
     858:	e0 94       	com	r14
     85a:	fe 2c       	mov	r15, r14
	ihypsq = (uint32_t)(ixsq + iy * iy); /* ihypsq=(ix*ix+iy*iy) 0 to 2*32767*32767=2147352578 */
     85c:	22 9f       	mul	r18, r18
     85e:	20 01       	movw	r4, r0
     860:	23 9f       	mul	r18, r19
     862:	50 0c       	add	r5, r0
     864:	50 0c       	add	r5, r0
     866:	11 24       	eor	r1, r1
     868:	66 24       	eor	r6, r6
     86a:	57 fc       	sbrc	r5, 7
     86c:	60 94       	com	r6
     86e:	76 2c       	mov	r7, r6
     870:	4c 0c       	add	r4, r12
     872:	5d 1c       	adc	r5, r13
     874:	6e 1c       	adc	r6, r14
     876:	7f 1c       	adc	r7, r15
	{
		/* generate new candidate solution for ir and test if we are too high or too low */	
		/* itmp=(ir+delta)^2, range 0 to 32767*32767 = 2^30 = 1073676289 */
		itmp = (uint32_t)((ir + idelta) * (ir + idelta));
		/* itmp=(ir+delta)^2*(ix*ix+iy*iy), range 0 to 2^31 = 2147221516 */
		itmp = (itmp >> 15) * (ihypsq >> 15);
     878:	03 2e       	mov	r0, r19
     87a:	3f e0       	ldi	r19, 0x0F	; 15
     87c:	76 94       	lsr	r7
     87e:	67 94       	ror	r6
     880:	57 94       	ror	r5
     882:	47 94       	ror	r4
     884:	3a 95       	dec	r19
     886:	d1 f7       	brne	.-12     	; 0x87c <_Z5iTrigii+0xc8>
     888:	30 2d       	mov	r19, r0
     88a:	0f e0       	ldi	r16, 0x0F	; 15
     88c:	10 e0       	ldi	r17, 0x00	; 0
	/* calculate ix*ix and the hypotenuse squared */
	ixsq = (uint32_t)(ix * ix); /* ixsq=ix*ix: 0 to 32767^2 = 1073676289 */
	ihypsq = (uint32_t)(ixsq + iy * iy); /* ihypsq=(ix*ix+iy*iy) 0 to 2*32767*32767=2147352578 */
	/* set result r to zero and binary search step to 16384 = 0.5 */
	ir = 0;
	idelta = 16384; /* set as 2^14 = 0.5 */
     88e:	c0 e0       	ldi	r28, 0x00	; 0
     890:	d0 e4       	ldi	r29, 0x40	; 64
	}
	/* calculate ix*ix and the hypotenuse squared */
	ixsq = (uint32_t)(ix * ix); /* ixsq=ix*ix: 0 to 32767^2 = 1073676289 */
	ihypsq = (uint32_t)(ixsq + iy * iy); /* ihypsq=(ix*ix+iy*iy) 0 to 2*32767*32767=2147352578 */
	/* set result r to zero and binary search step to 16384 = 0.5 */
	ir = 0;
     892:	a1 2c       	mov	r10, r1
     894:	b1 2c       	mov	r11, r1
	/* loop over binary sub-division algorithm */
	do
	{
		/* generate new candidate solution for ir and test if we are too high or too low */	
		/* itmp=(ir+delta)^2, range 0 to 32767*32767 = 2^30 = 1073676289 */
		itmp = (uint32_t)((ir + idelta) * (ir + idelta));
     896:	f5 01       	movw	r30, r10
     898:	ec 0f       	add	r30, r28
     89a:	fd 1f       	adc	r31, r29
     89c:	ee 9f       	mul	r30, r30
     89e:	c0 01       	movw	r24, r0
     8a0:	ef 9f       	mul	r30, r31
     8a2:	90 0d       	add	r25, r0
     8a4:	90 0d       	add	r25, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	aa 27       	eor	r26, r26
     8aa:	97 fd       	sbrc	r25, 7
     8ac:	a0 95       	com	r26
     8ae:	ba 2f       	mov	r27, r26
		/* itmp=(ir+delta)^2*(ix*ix+iy*iy), range 0 to 2^31 = 2147221516 */
		itmp = (itmp >> 15) * (ihypsq >> 15);
     8b0:	9c 01       	movw	r18, r24
     8b2:	ad 01       	movw	r20, r26
     8b4:	01 2e       	mov	r0, r17
     8b6:	1f e0       	ldi	r17, 0x0F	; 15
     8b8:	56 95       	lsr	r21
     8ba:	47 95       	ror	r20
     8bc:	37 95       	ror	r19
     8be:	27 95       	ror	r18
     8c0:	1a 95       	dec	r17
     8c2:	d1 f7       	brne	.-12     	; 0x8b8 <_Z5iTrigii+0x104>
     8c4:	10 2d       	mov	r17, r0
     8c6:	c3 01       	movw	r24, r6
     8c8:	b2 01       	movw	r22, r4
     8ca:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <__mulsi3>
		if (itmp <= ixsq) ir += idelta;
     8ce:	c6 16       	cp	r12, r22
     8d0:	d7 06       	cpc	r13, r23
     8d2:	e8 06       	cpc	r14, r24
     8d4:	f9 06       	cpc	r15, r25
     8d6:	08 f0       	brcs	.+2      	; 0x8da <_Z5iTrigii+0x126>
     8d8:	5f 01       	movw	r10, r30
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
     8da:	d5 95       	asr	r29
     8dc:	c7 95       	ror	r28
     8de:	01 50       	subi	r16, 0x01	; 1
     8e0:	11 09       	sbc	r17, r1
	ihypsq = (uint32_t)(ixsq + iy * iy); /* ihypsq=(ix*ix+iy*iy) 0 to 2*32767*32767=2147352578 */
	/* set result r to zero and binary search step to 16384 = 0.5 */
	ir = 0;
	idelta = 16384; /* set as 2^14 = 0.5 */
	/* loop over binary sub-division algorithm */
	do
     8e2:	01 15       	cp	r16, r1
     8e4:	11 05       	cpc	r17, r1
     8e6:	b9 f6       	brne	.-82     	; 0x896 <_Z5iTrigii+0xe2>
		if (itmp <= ixsq) ir += idelta;
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
	} while (idelta >= MINDELTATRIG); /* last loop is performed for idelta=MINDELTATRIG */
	
	/* correct the sign before returning */
	return (int16_t)(ir * isignx);
     8e8:	a8 9c       	mul	r10, r8
     8ea:	c0 01       	movw	r24, r0
     8ec:	a9 9c       	mul	r10, r9
     8ee:	90 0d       	add	r25, r0
     8f0:	b8 9c       	mul	r11, r8
     8f2:	90 0d       	add	r25, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	05 c0       	rjmp	.+10     	; 0x902 <_Z5iTrigii+0x14e>
	/* stack variables */
	/* ix, iy: signed 16 bit integers representing sensor reading in range -32768 to 32767 */
	/* function returns signed Int16 as signed fraction (ie +32767=0.99997, -32768=-1.0000) */
	/* algorithm solves for ir*ir*(ix*ix+iy*iy)=ix*ix */
	/* correct for pathological case: ix==iy==0 */
	if ((ix == 0) && (iy == 0)) ix = iy = 1;
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	76 cf       	rjmp	.-276    	; 0x7ee <_Z5iTrigii+0x3a>
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
	} while (idelta >= MINDELTATRIG); /* last loop is performed for idelta=MINDELTATRIG */
	
	/* correct the sign before returning */
	return (int16_t)(ir * isignx);
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	5f 90       	pop	r5
     920:	4f 90       	pop	r4
     922:	08 95       	ret

00000924 <_Z7iDivideii>:

uint16_t MINDELTADIV = 1; /* final step size for iDivide */

/* function to calculate ir = iy / ix with iy <= ix, and ix, iy both > 0 */ 
int16_t iDivide(int16_t iy, int16_t ix)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	int16_t idelta; /* delta on candidate result dividing each stage by factor of 2 */
	/* set result r to zero and binary search step to 16384 = 0.5 */
	ir = 0;
	idelta = 16384; /* set as 2^14 = 0.5 */
	/* to reduce quantization effects, boost ix and iy to the maximum signed 16 bit value */
	while ((ix < 16384) && (iy < 16384))
     928:	61 15       	cp	r22, r1
     92a:	20 e4       	ldi	r18, 0x40	; 64
     92c:	72 07       	cpc	r23, r18
     92e:	84 f4       	brge	.+32     	; 0x950 <_Z7iDivideii+0x2c>
     930:	81 15       	cp	r24, r1
     932:	20 e4       	ldi	r18, 0x40	; 64
     934:	92 07       	cpc	r25, r18
     936:	64 f4       	brge	.+24     	; 0x950 <_Z7iDivideii+0x2c>
	{
		ix = (int16_t)(ix + ix);
     938:	66 0f       	add	r22, r22
     93a:	77 1f       	adc	r23, r23
		iy = (int16_t)(iy + iy);
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
	int16_t idelta; /* delta on candidate result dividing each stage by factor of 2 */
	/* set result r to zero and binary search step to 16384 = 0.5 */
	ir = 0;
	idelta = 16384; /* set as 2^14 = 0.5 */
	/* to reduce quantization effects, boost ix and iy to the maximum signed 16 bit value */
	while ((ix < 16384) && (iy < 16384))
     940:	61 15       	cp	r22, r1
     942:	20 e4       	ldi	r18, 0x40	; 64
     944:	72 07       	cpc	r23, r18
     946:	24 f4       	brge	.+8      	; 0x950 <_Z7iDivideii+0x2c>
     948:	81 15       	cp	r24, r1
     94a:	20 e4       	ldi	r18, 0x40	; 64
     94c:	92 07       	cpc	r25, r18
     94e:	a4 f3       	brlt	.-24     	; 0x938 <_Z7iDivideii+0x14>
		/* generate new candidate solution for ir and test if we are too high or too low */
		itmp = (int16_t)(ir + idelta); /* itmp=ir+delta, the candidate solution */
		itmp = (int16_t)((itmp * ix) >> 15);
		if (itmp <= iy) ir += idelta;
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
	} while (idelta >= MINDELTADIV); /* last loop is performed for idelta=MINDELTADIV */
     950:	c0 91 01 02 	lds	r28, 0x0201
     954:	d0 91 02 02 	lds	r29, 0x0202
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e4       	ldi	r19, 0x40	; 64
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
	}
	/* loop over binary sub-division algorithm solving for ir*ix = iy */
	do
	{
		/* generate new candidate solution for ir and test if we are too high or too low */
		itmp = (int16_t)(ir + idelta); /* itmp=ir+delta, the candidate solution */
     960:	ad 01       	movw	r20, r26
     962:	42 0f       	add	r20, r18
     964:	53 1f       	adc	r21, r19
		itmp = (int16_t)((itmp * ix) >> 15);
     966:	46 9f       	mul	r20, r22
     968:	f0 01       	movw	r30, r0
     96a:	47 9f       	mul	r20, r23
     96c:	f0 0d       	add	r31, r0
     96e:	56 9f       	mul	r21, r22
     970:	f0 0d       	add	r31, r0
     972:	11 24       	eor	r1, r1
     974:	ff 0f       	add	r31, r31
     976:	ee 0b       	sbc	r30, r30
     978:	fe 2f       	mov	r31, r30
		if (itmp <= iy) ir += idelta;
     97a:	8e 17       	cp	r24, r30
     97c:	9f 07       	cpc	r25, r31
     97e:	0c f0       	brlt	.+2      	; 0x982 <_Z7iDivideii+0x5e>
     980:	da 01       	movw	r26, r20
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
     982:	35 95       	asr	r19
     984:	27 95       	ror	r18
	{
		ix = (int16_t)(ix + ix);
		iy = (int16_t)(iy + iy);
	}
	/* loop over binary sub-division algorithm solving for ir*ix = iy */
	do
     986:	2c 17       	cp	r18, r28
     988:	3d 07       	cpc	r19, r29
     98a:	50 f7       	brcc	.-44     	; 0x960 <_Z7iDivideii+0x3c>
		if (itmp <= iy) ir += idelta;
		idelta = (int16_t)(idelta >> 1); /* divide by 2 using right shift one bit */
	} while (idelta >= MINDELTADIV); /* last loop is performed for idelta=MINDELTADIV */
		
	return (ir);
     98c:	cd 01       	movw	r24, r26
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <_Z15iHundredAtanDegii>:
const int16_t K3 = 446;


/* calculates 100*atan(iy/ix) range 0 to 9000 for all ix, iy positive in range 0 to 32767 */ 
int16_t iHundredAtanDeg(int16_t iy, int16_t ix)
{
     994:	4f 92       	push	r4
     996:	5f 92       	push	r5
     998:	6f 92       	push	r6
     99a:	7f 92       	push	r7
     99c:	8f 92       	push	r8
     99e:	9f 92       	push	r9
     9a0:	af 92       	push	r10
     9a2:	bf 92       	push	r11
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	8c 01       	movw	r16, r24
     9b6:	eb 01       	movw	r28, r22
	int32_t iAngle; /* angle in degrees times 100 */
	int16_t iRatio; /* ratio of iy / ix or vice versa */
	int32_t iTmp; /* temporary variable */
	
	/* check for pathological cases */
	if ((ix == 0) && (iy == 0)) return (0);
     9b8:	20 97       	sbiw	r28, 0x00	; 0
     9ba:	31 f4       	brne	.+12     	; 0x9c8 <_Z15iHundredAtanDegii+0x34>
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	09 f0       	breq	.+2      	; 0x9c2 <_Z15iHundredAtanDegii+0x2e>
     9c0:	83 c0       	rjmp	.+262    	; 0xac8 <_Z15iHundredAtanDegii+0x134>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	82 c0       	rjmp	.+260    	; 0xacc <_Z15iHundredAtanDegii+0x138>
	if ((ix == 0) && (iy != 0)) return (9000);
	
	/* check for non-pathological cases */
	if (iy <= ix)
     9c8:	68 17       	cp	r22, r24
     9ca:	79 07       	cpc	r23, r25
     9cc:	14 f0       	brlt	.+4      	; 0x9d2 <_Z15iHundredAtanDegii+0x3e>
	{
		iRatio = iDivide(iy, ix); /* return a fraction in range 0. to 32767 = 0. to 1. */
     9ce:	aa df       	rcall	.-172    	; 0x924 <_Z7iDivideii>
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <_Z15iHundredAtanDegii+0x44>
	}
	else
	{
		iRatio = iDivide(ix, iy); /* return a fraction in range 0. to 32767 = 0. to 1. */
     9d2:	bc 01       	movw	r22, r24
     9d4:	ce 01       	movw	r24, r28
     9d6:	a6 df       	rcall	.-180    	; 0x924 <_Z7iDivideii>
	}
	
	/* first, third and fifth order polynomial approximation */
	iAngle = (int32_t) K1 * (int32_t) iRatio;
     9d8:	6c 01       	movw	r12, r24
     9da:	ee 24       	eor	r14, r14
     9dc:	d7 fc       	sbrc	r13, 7
     9de:	e0 94       	com	r14
     9e0:	fe 2c       	mov	r15, r14
     9e2:	a5 e4       	ldi	r26, 0x45	; 69
     9e4:	b6 e1       	ldi	r27, 0x16	; 22
     9e6:	a7 01       	movw	r20, r14
     9e8:	96 01       	movw	r18, r12
     9ea:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__muluhisi3>
     9ee:	2b 01       	movw	r4, r22
     9f0:	3c 01       	movw	r6, r24
	iTmp = ((int32_t) iRatio >> 5) * ((int32_t) iRatio >> 5) * ((int32_t) iRatio >> 5);
     9f2:	68 94       	set
     9f4:	14 f8       	bld	r1, 4
     9f6:	f5 94       	asr	r15
     9f8:	e7 94       	ror	r14
     9fa:	d7 94       	ror	r13
     9fc:	c7 94       	ror	r12
     9fe:	16 94       	lsr	r1
     a00:	d1 f7       	brne	.-12     	; 0x9f6 <_Z15iHundredAtanDegii+0x62>
     a02:	a7 01       	movw	r20, r14
     a04:	96 01       	movw	r18, r12
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	cd d7       	rcall	.+3994   	; 0x19a6 <__mulsi3>
     a0c:	cc d7       	rcall	.+3992   	; 0x19a6 <__mulsi3>
     a0e:	4b 01       	movw	r8, r22
     a10:	5c 01       	movw	r10, r24
	iAngle += (iTmp >> 15) * (int32_t) K2;
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	01 2e       	mov	r0, r17
     a18:	1f e0       	ldi	r17, 0x0F	; 15
     a1a:	55 95       	asr	r21
     a1c:	47 95       	ror	r20
     a1e:	37 95       	ror	r19
     a20:	27 95       	ror	r18
     a22:	1a 95       	dec	r17
     a24:	d1 f7       	brne	.-12     	; 0xa1a <_Z15iHundredAtanDegii+0x86>
     a26:	10 2d       	mov	r17, r0
     a28:	a3 e9       	ldi	r26, 0x93	; 147
     a2a:	b9 ef       	ldi	r27, 0xF9	; 249
     a2c:	f9 d7       	rcall	.+4082   	; 0x1a20 <__mulohisi3>
     a2e:	46 0e       	add	r4, r22
     a30:	57 1e       	adc	r5, r23
     a32:	68 1e       	adc	r6, r24
     a34:	79 1e       	adc	r7, r25
	iTmp = (iTmp >> 20) * ((int32_t) iRatio >> 5) * ((int32_t) iRatio >> 5);
     a36:	c5 01       	movw	r24, r10
     a38:	b4 01       	movw	r22, r8
     a3a:	05 2e       	mov	r0, r21
     a3c:	54 e1       	ldi	r21, 0x14	; 20
     a3e:	95 95       	asr	r25
     a40:	87 95       	ror	r24
     a42:	77 95       	ror	r23
     a44:	67 95       	ror	r22
     a46:	5a 95       	dec	r21
     a48:	d1 f7       	brne	.-12     	; 0xa3e <_Z15iHundredAtanDegii+0xaa>
     a4a:	50 2d       	mov	r21, r0
     a4c:	a7 01       	movw	r20, r14
     a4e:	96 01       	movw	r18, r12
     a50:	aa d7       	rcall	.+3924   	; 0x19a6 <__mulsi3>
     a52:	a9 d7       	rcall	.+3922   	; 0x19a6 <__mulsi3>
	iAngle += (iTmp >> 15) * (int32_t) K3;
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	01 2e       	mov	r0, r17
     a5a:	1f e0       	ldi	r17, 0x0F	; 15
     a5c:	55 95       	asr	r21
     a5e:	47 95       	ror	r20
     a60:	37 95       	ror	r19
     a62:	27 95       	ror	r18
     a64:	1a 95       	dec	r17
     a66:	d1 f7       	brne	.-12     	; 0xa5c <_Z15iHundredAtanDegii+0xc8>
     a68:	10 2d       	mov	r17, r0
     a6a:	ae eb       	ldi	r26, 0xBE	; 190
     a6c:	b1 e0       	ldi	r27, 0x01	; 1
     a6e:	cc d7       	rcall	.+3992   	; 0x1a08 <__muluhisi3>
     a70:	46 0e       	add	r4, r22
     a72:	57 1e       	adc	r5, r23
     a74:	68 1e       	adc	r6, r24
     a76:	79 1e       	adc	r7, r25
	iAngle = iAngle >> 15;
     a78:	d3 01       	movw	r26, r6
     a7a:	c2 01       	movw	r24, r4
     a7c:	07 2e       	mov	r0, r23
     a7e:	7f e0       	ldi	r23, 0x0F	; 15
     a80:	b5 95       	asr	r27
     a82:	a7 95       	ror	r26
     a84:	97 95       	ror	r25
     a86:	87 95       	ror	r24
     a88:	7a 95       	dec	r23
     a8a:	d1 f7       	brne	.-12     	; 0xa80 <_Z15iHundredAtanDegii+0xec>
     a8c:	70 2d       	mov	r23, r0
	
	/* check if above 45 degrees */
	if (iy > ix) iAngle = (int16_t)(9000 - iAngle);
     a8e:	c0 17       	cp	r28, r16
     a90:	d1 07       	cpc	r29, r17
     a92:	54 f4       	brge	.+20     	; 0xaa8 <_Z15iHundredAtanDegii+0x114>
     a94:	28 e2       	ldi	r18, 0x28	; 40
     a96:	33 e2       	ldi	r19, 0x23	; 35
     a98:	a9 01       	movw	r20, r18
     a9a:	48 1b       	sub	r20, r24
     a9c:	59 0b       	sbc	r21, r25
     a9e:	ca 01       	movw	r24, r20
     aa0:	aa 27       	eor	r26, r26
     aa2:	97 fd       	sbrc	r25, 7
     aa4:	a0 95       	com	r26
     aa6:	ba 2f       	mov	r27, r26
     aa8:	bb 23       	and	r27, r27
     aaa:	1c f4       	brge	.+6      	; 0xab2 <_Z15iHundredAtanDegii+0x11e>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	dc 01       	movw	r26, r24
     ab2:	89 32       	cpi	r24, 0x29	; 41
     ab4:	53 e2       	ldi	r21, 0x23	; 35
     ab6:	95 07       	cpc	r25, r21
     ab8:	a1 05       	cpc	r26, r1
     aba:	b1 05       	cpc	r27, r1
     abc:	3c f0       	brlt	.+14     	; 0xacc <_Z15iHundredAtanDegii+0x138>
     abe:	88 e2       	ldi	r24, 0x28	; 40
     ac0:	93 e2       	ldi	r25, 0x23	; 35
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
	
	/* for tidiness, limit result to range 0 to 9000 equals 0.0 to 90.0 degrees */
	if (iAngle < 0) iAngle = 0;
	if (iAngle > 9000) iAngle = 9000;
	
	return (int16_t) iAngle;
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <_Z15iHundredAtanDegii+0x138>
	int16_t iRatio; /* ratio of iy / ix or vice versa */
	int32_t iTmp; /* temporary variable */
	
	/* check for pathological cases */
	if ((ix == 0) && (iy == 0)) return (0);
	if ((ix == 0) && (iy != 0)) return (9000);
     ac8:	88 e2       	ldi	r24, 0x28	; 40
     aca:	93 e2       	ldi	r25, 0x23	; 35
	/* for tidiness, limit result to range 0 to 9000 equals 0.0 to 90.0 degrees */
	if (iAngle < 0) iAngle = 0;
	if (iAngle > 9000) iAngle = 9000;
	
	return (int16_t) iAngle;
}
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	08 95       	ret

00000aee <_Z16iHundredAtan2Degii>:
int16_t iHundredAtan2Deg(int16_t iy, int16_t ix)
{
	int16_t iResult; /* angle in degrees times 100 */
	
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
     aee:	61 15       	cp	r22, r1
     af0:	20 e8       	ldi	r18, 0x80	; 128
     af2:	72 07       	cpc	r23, r18
     af4:	b9 f1       	breq	.+110    	; 0xb64 <_Z16iHundredAtan2Degii+0x76>
	if (iy == -32768) iy = -32767;
     af6:	81 15       	cp	r24, r1
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	94 07       	cpc	r25, r20
     afc:	69 f1       	breq	.+90     	; 0xb58 <_Z16iHundredAtan2Degii+0x6a>
	
	/* check for quadrants */
	if ((ix >= 0) && (iy >= 0)) /* range 0 to 90 degrees */
     afe:	77 23       	and	r23, r23
     b00:	24 f0       	brlt	.+8      	; 0xb0a <_Z16iHundredAtan2Degii+0x1c>
     b02:	99 23       	and	r25, r25
     b04:	7c f0       	brlt	.+30     	; 0xb24 <_Z16iHundredAtan2Degii+0x36>
	{
		iResult = iHundredAtanDeg(iy, ix);
     b06:	46 cf       	rjmp	.-372    	; 0x994 <_Z15iHundredAtanDegii>
     b08:	08 95       	ret
	}
	else if ((ix <= 0) && (iy >= 0)) /* range 90 to 180 degrees */
     b0a:	99 23       	and	r25, r25
     b0c:	8c f0       	brlt	.+34     	; 0xb30 <_Z16iHundredAtan2Degii+0x42>
	{
		iResult = (int16_t)(18000 - (int16_t)iHundredAtanDeg(iy, (int16_t)-ix));
     b0e:	71 95       	neg	r23
     b10:	61 95       	neg	r22
     b12:	71 09       	sbc	r23, r1
     b14:	3f df       	rcall	.-386    	; 0x994 <_Z15iHundredAtanDegii>
     b16:	20 e5       	ldi	r18, 0x50	; 80
     b18:	36 e4       	ldi	r19, 0x46	; 70
     b1a:	a9 01       	movw	r20, r18
     b1c:	48 1b       	sub	r20, r24
     b1e:	59 0b       	sbc	r21, r25
     b20:	ca 01       	movw	r24, r20
     b22:	08 95       	ret
	}
	else if ((ix <= 0) && (iy <= 0)) /* range -180 to -90 degrees */
     b24:	16 16       	cp	r1, r22
     b26:	17 06       	cpc	r1, r23
     b28:	1c f4       	brge	.+6      	; 0xb30 <_Z16iHundredAtan2Degii+0x42>
     b2a:	0c c0       	rjmp	.+24     	; 0xb44 <_Z16iHundredAtan2Degii+0x56>
{
	int16_t iResult; /* angle in degrees times 100 */
	
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
	if (iy == -32768) iy = -32767;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e8       	ldi	r25, 0x80	; 128
	{
		iResult = (int16_t)(18000 - (int16_t)iHundredAtanDeg(iy, (int16_t)-ix));
	}
	else if ((ix <= 0) && (iy <= 0)) /* range -180 to -90 degrees */
	{
		iResult = (int16_t)((int16_t)-18000 + iHundredAtanDeg((int16_t)-iy, (int16_t)-ix));
     b30:	71 95       	neg	r23
     b32:	61 95       	neg	r22
     b34:	71 09       	sbc	r23, r1
     b36:	91 95       	neg	r25
     b38:	81 95       	neg	r24
     b3a:	91 09       	sbc	r25, r1
     b3c:	2b df       	rcall	.-426    	; 0x994 <_Z15iHundredAtanDegii>
     b3e:	80 55       	subi	r24, 0x50	; 80
     b40:	96 44       	sbci	r25, 0x46	; 70
     b42:	08 95       	ret
	}
	else /* ix >=0 and iy <= 0 giving range -90 to 0 degrees */
	{
		iResult = (int16_t)(-iHundredAtanDeg((int16_t)-iy, ix));
     b44:	91 95       	neg	r25
     b46:	81 95       	neg	r24
     b48:	91 09       	sbc	r25, r1
     b4a:	24 df       	rcall	.-440    	; 0x994 <_Z15iHundredAtanDegii>
     b4c:	91 95       	neg	r25
     b4e:	81 95       	neg	r24
     b50:	91 09       	sbc	r25, r1
     b52:	08 95       	ret
int16_t iHundredAtan2Deg(int16_t iy, int16_t ix)
{
	int16_t iResult; /* angle in degrees times 100 */
	
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e8       	ldi	r23, 0x80	; 128
	/* check for quadrants */
	if ((ix >= 0) && (iy >= 0)) /* range 0 to 90 degrees */
	{
		iResult = iHundredAtanDeg(iy, ix);
	}
	else if ((ix <= 0) && (iy >= 0)) /* range 90 to 180 degrees */
     b58:	16 16       	cp	r1, r22
     b5a:	17 06       	cpc	r1, r23
     b5c:	3c f7       	brge	.-50     	; 0xb2c <_Z16iHundredAtan2Degii+0x3e>
{
	int16_t iResult; /* angle in degrees times 100 */
	
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
	if (iy == -32768) iy = -32767;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e8       	ldi	r25, 0x80	; 128
     b62:	f0 cf       	rjmp	.-32     	; 0xb44 <_Z16iHundredAtan2Degii+0x56>
     b64:	81 15       	cp	r24, r1
     b66:	50 e8       	ldi	r21, 0x80	; 128
     b68:	95 07       	cpc	r25, r21
     b6a:	a1 f3       	breq	.-24     	; 0xb54 <_Z16iHundredAtan2Degii+0x66>
int16_t iHundredAtan2Deg(int16_t iy, int16_t ix)
{
	int16_t iResult; /* angle in degrees times 100 */
	
	/* check for -32768 which is not handled correctly */
	if (ix == -32768) ix = -32767;
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e8       	ldi	r23, 0x80	; 128
     b70:	cc cf       	rjmp	.-104    	; 0xb0a <_Z16iHundredAtan2Degii+0x1c>

00000b72 <_Z25getHeadingTiltCompensatedv>:
	return heading_degrees;
}


int16_t getHeadingTiltCompensated(void)
{
     b72:	4f 92       	push	r4
     b74:	5f 92       	push	r5
     b76:	6f 92       	push	r6
     b78:	7f 92       	push	r7
     b7a:	8f 92       	push	r8
     b7c:	9f 92       	push	r9
     b7e:	af 92       	push	r10
     b80:	bf 92       	push	r11
     b82:	cf 92       	push	r12
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29

	i2c_start_wait(HMC5883L_WRITE);
     b92:	8c e3       	ldi	r24, 0x3C	; 60
     b94:	78 db       	rcall	.-2320   	; 0x286 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	88 db       	rcall	.-2288   	; 0x2aa <i2c_write>
	i2c_stop();
     b9a:	7f db       	rcall	.-2306   	; 0x29a <i2c_stop>

	i2c_rep_start(HMC5883L_READ);
     b9c:	8d e3       	ldi	r24, 0x3D	; 61
     b9e:	69 db       	rcall	.-2350   	; 0x272 <i2c_rep_start>

	mag_raw_x = ((uint8_t)i2c_readAck())<<8;
     ba0:	a2 db       	rcall	.-2236   	; 0x2e6 <i2c_readAck>
     ba2:	10 92 50 02 	sts	0x0250, r1
     ba6:	80 93 51 02 	sts	0x0251, r24
	mag_raw_x |= i2c_readAck();
     baa:	9d db       	rcall	.-2246   	; 0x2e6 <i2c_readAck>
     bac:	20 91 50 02 	lds	r18, 0x0250
     bb0:	30 91 51 02 	lds	r19, 0x0251
     bb4:	28 2b       	or	r18, r24
     bb6:	30 93 51 02 	sts	0x0251, r19
     bba:	20 93 50 02 	sts	0x0250, r18

	mag_raw_z = ((uint8_t)i2c_readAck())<<8;
     bbe:	93 db       	rcall	.-2266   	; 0x2e6 <i2c_readAck>
     bc0:	10 92 4c 02 	sts	0x024C, r1
     bc4:	80 93 4d 02 	sts	0x024D, r24
	mag_raw_z |= i2c_readAck();
     bc8:	8e db       	rcall	.-2276   	; 0x2e6 <i2c_readAck>
     bca:	20 91 4c 02 	lds	r18, 0x024C
     bce:	30 91 4d 02 	lds	r19, 0x024D
     bd2:	28 2b       	or	r18, r24
     bd4:	30 93 4d 02 	sts	0x024D, r19
     bd8:	20 93 4c 02 	sts	0x024C, r18

	mag_raw_y = ((uint8_t)i2c_readAck())<<8;
     bdc:	84 db       	rcall	.-2296   	; 0x2e6 <i2c_readAck>
     bde:	10 92 4e 02 	sts	0x024E, r1
     be2:	80 93 4f 02 	sts	0x024F, r24
	mag_raw_y |= i2c_readNak();
     be6:	7d db       	rcall	.-2310   	; 0x2e2 <i2c_readNak>
     be8:	80 90 4e 02 	lds	r8, 0x024E
     bec:	90 90 4f 02 	lds	r9, 0x024F
     bf0:	88 2a       	or	r8, r24
     bf2:	90 92 4f 02 	sts	0x024F, r9
     bf6:	80 92 4e 02 	sts	0x024E, r8
	/* mag_raw_x, mag_raw_y, mag_raw_z: the three components of the magnetometer sensor */
	/* accel_raw_x, accel_raw_y, accel_raw_z: the three components of the accelerometer sensor */
	/* local variables */
	int16_t iSin, iCos; /* sine and cosine */
	/* subtract the hard iron offset */
	mag_raw_x -= iVx; /* see Eq 16 */
     bfa:	40 90 50 02 	lds	r4, 0x0250
     bfe:	50 90 51 02 	lds	r5, 0x0251
	mag_raw_y -= iVy; /* see Eq 16 */
	mag_raw_z -= iVz; /* see Eq 16 */
     c02:	60 90 4c 02 	lds	r6, 0x024C
     c06:	70 90 4d 02 	lds	r7, 0x024D
	
	/* calculate current roll angle Phi */
	iPhi = iHundredAtan2Deg(accel_raw_y, accel_raw_z);/* Eq 13 */
     c0a:	c0 91 46 02 	lds	r28, 0x0246
     c0e:	d0 91 47 02 	lds	r29, 0x0247
     c12:	00 91 48 02 	lds	r16, 0x0248
     c16:	10 91 49 02 	lds	r17, 0x0249
     c1a:	be 01       	movw	r22, r28
     c1c:	c8 01       	movw	r24, r16
     c1e:	67 df       	rcall	.-306    	; 0xaee <_Z16iHundredAtan2Degii>
     c20:	90 93 41 02 	sts	0x0241, r25
     c24:	80 93 40 02 	sts	0x0240, r24
	
	/* calculate sin and cosine of roll angle Phi */
	iSin = iTrig(accel_raw_y, accel_raw_z); /* Eq 13: sin = opposite / hypotenuse */
     c28:	be 01       	movw	r22, r28
     c2a:	c8 01       	movw	r24, r16
     c2c:	c3 dd       	rcall	.-1146   	; 0x7b4 <_Z5iTrigii>
     c2e:	6c 01       	movw	r12, r24
	iCos = iTrig(accel_raw_z, accel_raw_y); /* Eq 13: cos = adjacent / hypotenuse */
     c30:	b8 01       	movw	r22, r16
     c32:	ce 01       	movw	r24, r28
     c34:	bf dd       	rcall	.-1154   	; 0x7b4 <_Z5iTrigii>
	
	/* de-rotate by roll angle Phi */
	iBfy = (int16_t)((mag_raw_y * iCos - mag_raw_z * iSin) >> 15);/* Eq 19 y component */
     c36:	88 9e       	mul	r8, r24
     c38:	50 01       	movw	r10, r0
     c3a:	89 9e       	mul	r8, r25
     c3c:	b0 0c       	add	r11, r0
     c3e:	98 9e       	mul	r9, r24
     c40:	b0 0c       	add	r11, r0
     c42:	11 24       	eor	r1, r1
     c44:	6c 9c       	mul	r6, r12
     c46:	90 01       	movw	r18, r0
     c48:	6d 9c       	mul	r6, r13
     c4a:	30 0d       	add	r19, r0
     c4c:	7c 9c       	mul	r7, r12
     c4e:	30 0d       	add	r19, r0
     c50:	11 24       	eor	r1, r1
     c52:	a2 1a       	sub	r10, r18
     c54:	b3 0a       	sbc	r11, r19
     c56:	bb 0c       	add	r11, r11
     c58:	aa 08       	sbc	r10, r10
     c5a:	ba 2c       	mov	r11, r10
     c5c:	b0 92 39 02 	sts	0x0239, r11
     c60:	a0 92 38 02 	sts	0x0238, r10
	mag_raw_z = (int16_t)((mag_raw_y * iSin + mag_raw_z * iCos) >> 15);/* Bpy*sin(Phi)+Bpz*cos(Phi)*/
     c64:	8c 9c       	mul	r8, r12
     c66:	70 01       	movw	r14, r0
     c68:	8d 9c       	mul	r8, r13
     c6a:	f0 0c       	add	r15, r0
     c6c:	9c 9c       	mul	r9, r12
     c6e:	f0 0c       	add	r15, r0
     c70:	11 24       	eor	r1, r1
     c72:	68 9e       	mul	r6, r24
     c74:	90 01       	movw	r18, r0
     c76:	69 9e       	mul	r6, r25
     c78:	30 0d       	add	r19, r0
     c7a:	78 9e       	mul	r7, r24
     c7c:	30 0d       	add	r19, r0
     c7e:	11 24       	eor	r1, r1
     c80:	e2 0e       	add	r14, r18
     c82:	f3 1e       	adc	r15, r19
     c84:	ff 0c       	add	r15, r15
     c86:	ee 08       	sbc	r14, r14
     c88:	fe 2c       	mov	r15, r14
     c8a:	f0 92 4d 02 	sts	0x024D, r15
     c8e:	e0 92 4c 02 	sts	0x024C, r14
	accel_raw_z = (int16_t)((accel_raw_y * iSin + accel_raw_z * iCos) >> 15);/* Eq 15 denominator */
     c92:	0c 9d       	mul	r16, r12
     c94:	a0 01       	movw	r20, r0
     c96:	0d 9d       	mul	r16, r13
     c98:	50 0d       	add	r21, r0
     c9a:	1c 9d       	mul	r17, r12
     c9c:	50 0d       	add	r21, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	c8 9f       	mul	r28, r24
     ca2:	90 01       	movw	r18, r0
     ca4:	c9 9f       	mul	r28, r25
     ca6:	30 0d       	add	r19, r0
     ca8:	d8 9f       	mul	r29, r24
     caa:	30 0d       	add	r19, r0
     cac:	11 24       	eor	r1, r1
     cae:	ca 01       	movw	r24, r20
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	d9 2e       	mov	r13, r25
     cb6:	dd 0c       	add	r13, r13
     cb8:	dd 08       	sbc	r13, r13
     cba:	d0 92 46 02 	sts	0x0246, r13
     cbe:	d0 92 47 02 	sts	0x0247, r13
	
	/* calculate current pitch angle Theta */
	iThe = iHundredAtan2Deg((int16_t)-accel_raw_x, accel_raw_z);/* Eq 15 */
     cc2:	c0 91 4a 02 	lds	r28, 0x024A
     cc6:	d0 91 4b 02 	lds	r29, 0x024B
     cca:	6d 2d       	mov	r22, r13
     ccc:	7d 2d       	mov	r23, r13
     cce:	88 27       	eor	r24, r24
     cd0:	99 27       	eor	r25, r25
     cd2:	8c 1b       	sub	r24, r28
     cd4:	9d 0b       	sbc	r25, r29
     cd6:	0b df       	rcall	.-490    	; 0xaee <_Z16iHundredAtan2Degii>
	
	/* restrict pitch angle to range -90 to 90 degrees */
	if (iThe > 9000) iThe = (int16_t) (18000 - iThe);
     cd8:	89 32       	cpi	r24, 0x29	; 41
     cda:	23 e2       	ldi	r18, 0x23	; 35
     cdc:	92 07       	cpc	r25, r18
     cde:	2c f4       	brge	.+10     	; 0xcea <_Z25getHeadingTiltCompensatedv+0x178>
	iBfy = (int16_t)((mag_raw_y * iCos - mag_raw_z * iSin) >> 15);/* Eq 19 y component */
	mag_raw_z = (int16_t)((mag_raw_y * iSin + mag_raw_z * iCos) >> 15);/* Bpy*sin(Phi)+Bpz*cos(Phi)*/
	accel_raw_z = (int16_t)((accel_raw_y * iSin + accel_raw_z * iCos) >> 15);/* Eq 15 denominator */
	
	/* calculate current pitch angle Theta */
	iThe = iHundredAtan2Deg((int16_t)-accel_raw_x, accel_raw_z);/* Eq 15 */
     ce0:	90 93 3f 02 	sts	0x023F, r25
     ce4:	80 93 3e 02 	sts	0x023E, r24
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <_Z25getHeadingTiltCompensatedv+0x18a>
	
	/* restrict pitch angle to range -90 to 90 degrees */
	if (iThe > 9000) iThe = (int16_t) (18000 - iThe);
     cea:	20 e5       	ldi	r18, 0x50	; 80
     cec:	36 e4       	ldi	r19, 0x46	; 70
     cee:	a9 01       	movw	r20, r18
     cf0:	48 1b       	sub	r20, r24
     cf2:	59 0b       	sbc	r21, r25
     cf4:	50 93 3f 02 	sts	0x023F, r21
     cf8:	40 93 3e 02 	sts	0x023E, r20
	if (iThe < -9000) iThe = (int16_t) (-18000 - iThe);
     cfc:	20 91 3e 02 	lds	r18, 0x023E
     d00:	30 91 3f 02 	lds	r19, 0x023F
     d04:	28 3d       	cpi	r18, 0xD8	; 216
     d06:	5c ed       	ldi	r21, 0xDC	; 220
     d08:	35 07       	cpc	r19, r21
     d0a:	4c f4       	brge	.+18     	; 0xd1e <_Z25getHeadingTiltCompensatedv+0x1ac>
     d0c:	80 eb       	ldi	r24, 0xB0	; 176
     d0e:	99 eb       	ldi	r25, 0xB9	; 185
     d10:	ac 01       	movw	r20, r24
     d12:	42 1b       	sub	r20, r18
     d14:	53 0b       	sbc	r21, r19
     d16:	50 93 3f 02 	sts	0x023F, r21
     d1a:	40 93 3e 02 	sts	0x023E, r20
	
	/* calculate sin and cosine of pitch angle Theta */
	iSin = (int16_t)-iTrig(accel_raw_x, accel_raw_z); /* Eq 15: sin = opposite / hypotenuse */
     d1e:	6d 2d       	mov	r22, r13
     d20:	7d 2d       	mov	r23, r13
     d22:	ce 01       	movw	r24, r28
     d24:	47 dd       	rcall	.-1394   	; 0x7b4 <_Z5iTrigii>
     d26:	00 27       	eor	r16, r16
     d28:	11 27       	eor	r17, r17
     d2a:	08 1b       	sub	r16, r24
     d2c:	19 0b       	sbc	r17, r25
	iCos = iTrig(accel_raw_z, accel_raw_x); /* Eq 15: cos = adjacent / hypotenuse */
     d2e:	be 01       	movw	r22, r28
     d30:	8d 2d       	mov	r24, r13
     d32:	9d 2d       	mov	r25, r13
     d34:	3f dd       	rcall	.-1410   	; 0x7b4 <_Z5iTrigii>
     d36:	99 23       	and	r25, r25
     d38:	1c f4       	brge	.+6      	; 0xd40 <_Z25getHeadingTiltCompensatedv+0x1ce>
     d3a:	91 95       	neg	r25
     d3c:	81 95       	neg	r24
     d3e:	91 09       	sbc	r25, r1
	
	/* correct cosine if pitch not in range -90 to 90 degrees */
	if (iCos < 0) iCos = (int16_t)-iCos;
	
	/* de-rotate by pitch angle Theta */
	iBfx = (int16_t)((mag_raw_x * iCos + mag_raw_z * iSin) >> 15); /* Eq 19: x component */
     d40:	48 9e       	mul	r4, r24
     d42:	a0 01       	movw	r20, r0
     d44:	49 9e       	mul	r4, r25
     d46:	50 0d       	add	r21, r0
     d48:	58 9e       	mul	r5, r24
     d4a:	50 0d       	add	r21, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	e0 9e       	mul	r14, r16
     d50:	90 01       	movw	r18, r0
     d52:	e1 9e       	mul	r14, r17
     d54:	30 0d       	add	r19, r0
     d56:	f0 9e       	mul	r15, r16
     d58:	30 0d       	add	r19, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	24 0f       	add	r18, r20
     d5e:	35 1f       	adc	r19, r21
     d60:	73 2f       	mov	r23, r19
     d62:	77 0f       	add	r23, r23
     d64:	77 0b       	sbc	r23, r23
     d66:	70 93 3a 02 	sts	0x023A, r23
     d6a:	70 93 3b 02 	sts	0x023B, r23
	iBfz = (int16_t)((-mag_raw_x * iSin + mag_raw_z * iCos) >> 15);/* Eq 19: z component */
     d6e:	40 9e       	mul	r4, r16
     d70:	90 01       	movw	r18, r0
     d72:	41 9e       	mul	r4, r17
     d74:	30 0d       	add	r19, r0
     d76:	50 9e       	mul	r5, r16
     d78:	30 0d       	add	r19, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	8e 9d       	mul	r24, r14
     d7e:	a0 01       	movw	r20, r0
     d80:	8f 9d       	mul	r24, r15
     d82:	50 0d       	add	r21, r0
     d84:	9e 9d       	mul	r25, r14
     d86:	50 0d       	add	r21, r0
     d88:	11 24       	eor	r1, r1
     d8a:	ca 01       	movw	r24, r20
     d8c:	82 1b       	sub	r24, r18
     d8e:	93 0b       	sbc	r25, r19
     d90:	89 2f       	mov	r24, r25
     d92:	88 0f       	add	r24, r24
     d94:	88 0b       	sbc	r24, r24
     d96:	80 93 36 02 	sts	0x0236, r24
     d9a:	80 93 37 02 	sts	0x0237, r24
	
	/* calculate current yaw = e-compass angle Psi */
	iPsi = iHundredAtan2Deg((int16_t)-iBfy, iBfx); /* Eq 22 */
     d9e:	67 2f       	mov	r22, r23
     da0:	88 27       	eor	r24, r24
     da2:	99 27       	eor	r25, r25
     da4:	8a 19       	sub	r24, r10
     da6:	9b 09       	sbc	r25, r11
     da8:	a2 de       	rcall	.-700    	; 0xaee <_Z16iHundredAtan2Degii>
     daa:	90 93 3d 02 	sts	0x023D, r25
     dae:	80 93 3c 02 	sts	0x023C, r24
	
	return iPsi;
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	7f 90       	pop	r7
     dcc:	6f 90       	pop	r6
     dce:	5f 90       	pop	r5
     dd0:	4f 90       	pop	r4
     dd2:	08 95       	ret

00000dd4 <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     dd4:	bc 01       	movw	r22, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	da c2       	rjmp	.+1460   	; 0x1390 <_Z15USART_putstringiPKc>
     ddc:	08 95       	ret

00000dde <_Z13debug_printlnPKc>:
     dde:	bc 01       	movw	r22, r24
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	d5 d2       	rcall	.+1450   	; 0x1390 <_Z15USART_putstringiPKc>
     de6:	6b e0       	ldi	r22, 0x0B	; 11
     de8:	72 e0       	ldi	r23, 0x02	; 2
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	d0 c2       	rjmp	.+1440   	; 0x1390 <_Z15USART_putstringiPKc>
     df0:	08 95       	ret

00000df2 <_Z14debug_printi16i>:

void debug_printi16(int16_t debugNum)
{
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	60 97       	sbiw	r28, 0x10	; 16
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e06:	40 e1       	ldi	r20, 0x10	; 16
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	3b d6       	rcall	.+3190   	; 0x1a86 <__itoa_ncheck>
	if(DEBUG_ENABLE == true)	//only print debug messages if debugging is enabled.
	{
		char string[16];
		itoa(debugNum,string,16);
		debug_print(string);
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	df df       	rcall	.-66     	; 0xdd4 <_Z11debug_printPKc>
	}
}
     e16:	60 96       	adiw	r28, 0x10	; 16
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	64 97       	sbiw	r28, 0x14	; 20
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     e40:	8e 01       	movw	r16, r28
     e42:	0f 5f       	subi	r16, 0xFF	; 255
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	25 e0       	ldi	r18, 0x05	; 5
     e48:	4a e0       	ldi	r20, 0x0A	; 10
     e4a:	fd d5       	rcall	.+3066   	; 0x1a46 <dtostrf>
		debug_print(string);
     e4c:	c8 01       	movw	r24, r16
     e4e:	c2 df       	rcall	.-124    	; 0xdd4 <_Z11debug_printPKc>
	}
}
     e50:	64 96       	adiw	r28, 0x14	; 20
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <_Z10debug_beepv>:


//beep for 50ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep()
{
	sbi(PORTB,7);
     e66:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e68:	2f ef       	ldi	r18, 0xFF	; 255
     e6a:	80 e7       	ldi	r24, 0x70	; 112
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	80 40       	sbci	r24, 0x00	; 0
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <_Z10debug_beepv+0x8>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <_Z10debug_beepv+0x12>
     e78:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     e7a:	2f 98       	cbi	0x05, 7	; 5
     e7c:	08 95       	ret

00000e7e <_Z15debug_beep_longv>:
}

//beep for 250ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep_long()
{
	sbi(PORTB,7);
     e7e:	2f 9a       	sbi	0x05, 7	; 5
     e80:	2f ef       	ldi	r18, 0xFF	; 255
     e82:	84 e3       	ldi	r24, 0x34	; 52
     e84:	9c e0       	ldi	r25, 0x0C	; 12
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <_Z15debug_beep_longv+0x8>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <_Z15debug_beep_longv+0x12>
     e90:	00 00       	nop
	_delay_ms(250);
	cbi(PORTB,7);
     e92:	2f 98       	cbi	0x05, 7	; 5
     e94:	08 95       	ret

00000e96 <_Z24quad_output_set_throttlei>:
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
     e96:	90 93 a9 00 	sts	0x00A9, r25
     e9a:	80 93 a8 00 	sts	0x00A8, r24
	throttle_out = throttle;
     e9e:	bc 01       	movw	r22, r24
     ea0:	88 27       	eor	r24, r24
     ea2:	77 fd       	sbrc	r23, 7
     ea4:	80 95       	com	r24
     ea6:	98 2f       	mov	r25, r24
     ea8:	38 d4       	rcall	.+2160   	; 0x171a <__floatsisf>
     eaa:	60 93 52 02 	sts	0x0252, r22
     eae:	70 93 53 02 	sts	0x0253, r23
     eb2:	80 93 54 02 	sts	0x0254, r24
     eb6:	90 93 55 02 	sts	0x0255, r25
     eba:	08 95       	ret

00000ebc <_Z16quad_output_initv>:
#include "quad_output.h"

float throttle_out;

void quad_output_init()
{
     ebc:	8f 92       	push	r8
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
	DDRH = 0xFF;  //set OC4x to output
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
     eda:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
     edc:	8f e3       	ldi	r24, 0x3F	; 63
     ede:	9c e9       	ldi	r25, 0x9C	; 156
     ee0:	90 93 a7 00 	sts	0x00A7, r25
     ee4:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
     ee8:	38 ea       	ldi	r19, 0xA8	; 168
     eea:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
     eee:	22 e1       	ldi	r18, 0x12	; 18
     ef0:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
     ef4:	90 93 97 00 	sts	0x0097, r25
     ef8:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
     efc:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
     f00:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f04:	c6 eb       	ldi	r28, 0xB6	; 182
     f06:	d3 e0       	ldi	r29, 0x03	; 3
     f08:	d0 93 a9 00 	sts	0x00A9, r29
     f0c:	c0 93 a8 00 	sts	0x00A8, r28
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f10:	0f 2e       	mov	r0, r31
     f12:	fa ea       	ldi	r31, 0xAA	; 170
     f14:	8f 2e       	mov	r8, r31
     f16:	91 2c       	mov	r9, r1
     f18:	f0 2d       	mov	r31, r0
     f1a:	f4 01       	movw	r30, r8
     f1c:	d1 83       	std	Z+1, r29	; 0x01
     f1e:	c0 83       	st	Z, r28
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f20:	0f 2e       	mov	r0, r31
     f22:	fc ea       	ldi	r31, 0xAC	; 172
     f24:	af 2e       	mov	r10, r31
     f26:	b1 2c       	mov	r11, r1
     f28:	f0 2d       	mov	r31, r0
     f2a:	f5 01       	movw	r30, r10
     f2c:	d1 83       	std	Z+1, r29	; 0x01
     f2e:	c0 83       	st	Z, r28
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f30:	0f 2e       	mov	r0, r31
     f32:	f8 e9       	ldi	r31, 0x98	; 152
     f34:	cf 2e       	mov	r12, r31
     f36:	d1 2c       	mov	r13, r1
     f38:	f0 2d       	mov	r31, r0
     f3a:	f6 01       	movw	r30, r12
     f3c:	d1 83       	std	Z+1, r29	; 0x01
     f3e:	c0 83       	st	Z, r28
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f40:	0f 2e       	mov	r0, r31
     f42:	fa e9       	ldi	r31, 0x9A	; 154
     f44:	ef 2e       	mov	r14, r31
     f46:	f1 2c       	mov	r15, r1
     f48:	f0 2d       	mov	r31, r0
     f4a:	f7 01       	movw	r30, r14
     f4c:	d1 83       	std	Z+1, r29	; 0x01
     f4e:	c0 83       	st	Z, r28
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
     f50:	0c e9       	ldi	r16, 0x9C	; 156
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	f8 01       	movw	r30, r16
     f56:	d1 83       	std	Z+1, r29	; 0x01
     f58:	c0 83       	st	Z, r28
	
	quad_output_set_throttle(DEFAULT_PWM_OUTPUT);
     f5a:	86 eb       	ldi	r24, 0xB6	; 182
     f5c:	93 e0       	ldi	r25, 0x03	; 3
     f5e:	9b df       	rcall	.-202    	; 0xe96 <_Z24quad_output_set_throttlei>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
     f60:	f4 01       	movw	r30, r8
     f62:	d1 83       	std	Z+1, r29	; 0x01
     f64:	c0 83       	st	Z, r28
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
     f66:	f5 01       	movw	r30, r10
     f68:	d1 83       	std	Z+1, r29	; 0x01
     f6a:	c0 83       	st	Z, r28
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
     f6c:	f6 01       	movw	r30, r12
     f6e:	d1 83       	std	Z+1, r29	; 0x01
     f70:	c0 83       	st	Z, r28
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
     f72:	f7 01       	movw	r30, r14
     f74:	d1 83       	std	Z+1, r29	; 0x01
     f76:	c0 83       	st	Z, r28
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
     f78:	f8 01       	movw	r30, r16
     f7a:	d1 83       	std	Z+1, r29	; 0x01
     f7c:	c0 83       	st	Z, r28
	quad_output_set_aileron(DEFAULT_PWM_OUTPUT);
	quad_output_set_elevator(DEFAULT_PWM_OUTPUT);
	quad_output_set_rudder(DEFAULT_PWM_OUTPUT);
	quad_output_set_gear(DEFAULT_PWM_OUTPUT);
	quad_output_set_aux(DEFAULT_PWM_OUTPUT);
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	08 95       	ret

00000f98 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	0b b6       	in	r0, 0x3b	; 59
     fa4:	0f 92       	push	r0
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	cf 93       	push	r28
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     fc0:	83 b1       	in	r24, 0x03	; 3
     fc2:	c0 91 56 02 	lds	r28, 0x0256
     fc6:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     fc8:	83 b1       	in	r24, 0x03	; 3
     fca:	80 93 56 02 	sts	0x0256, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     fce:	c0 ff       	sbrs	r28, 0
     fd0:	1c c0       	rjmp	.+56     	; 0x100a <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     fd2:	18 9b       	sbis	0x03, 0	; 3
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     fd6:	2a d1       	rcall	.+596    	; 0x122c <_Z6microsv>
     fd8:	60 93 6b 02 	sts	0x026B, r22
     fdc:	70 93 6c 02 	sts	0x026C, r23
     fe0:	80 93 6d 02 	sts	0x026D, r24
     fe4:	90 93 6e 02 	sts	0x026E, r25
     fe8:	10 c0       	rjmp	.+32     	; 0x100a <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     fea:	20 d1       	rcall	.+576    	; 0x122c <_Z6microsv>
     fec:	20 91 6b 02 	lds	r18, 0x026B
     ff0:	30 91 6c 02 	lds	r19, 0x026C
     ff4:	62 1b       	sub	r22, r18
     ff6:	73 0b       	sbc	r23, r19
     ff8:	70 93 7b 02 	sts	0x027B, r23
     ffc:	60 93 7a 02 	sts	0x027A, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
    1000:	80 91 6f 02 	lds	r24, 0x026F
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 93 6f 02 	sts	0x026F, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
    100a:	c1 ff       	sbrs	r28, 1
    100c:	1c c0       	rjmp	.+56     	; 0x1046 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
    100e:	19 9b       	sbis	0x03, 1	; 3
    1010:	0a c0       	rjmp	.+20     	; 0x1026 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
    1012:	0c d1       	rcall	.+536    	; 0x122c <_Z6microsv>
    1014:	60 93 67 02 	sts	0x0267, r22
    1018:	70 93 68 02 	sts	0x0268, r23
    101c:	80 93 69 02 	sts	0x0269, r24
    1020:	90 93 6a 02 	sts	0x026A, r25
    1024:	10 c0       	rjmp	.+32     	; 0x1046 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
    1026:	02 d1       	rcall	.+516    	; 0x122c <_Z6microsv>
    1028:	20 91 67 02 	lds	r18, 0x0267
    102c:	30 91 68 02 	lds	r19, 0x0268
    1030:	62 1b       	sub	r22, r18
    1032:	73 0b       	sbc	r23, r19
    1034:	70 93 79 02 	sts	0x0279, r23
    1038:	60 93 78 02 	sts	0x0278, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
    103c:	80 91 6f 02 	lds	r24, 0x026F
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	80 93 6f 02 	sts	0x026F, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
    1046:	c2 ff       	sbrs	r28, 2
    1048:	1c c0       	rjmp	.+56     	; 0x1082 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
    104a:	1a 9b       	sbis	0x03, 2	; 3
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
    104e:	ee d0       	rcall	.+476    	; 0x122c <_Z6microsv>
    1050:	60 93 63 02 	sts	0x0263, r22
    1054:	70 93 64 02 	sts	0x0264, r23
    1058:	80 93 65 02 	sts	0x0265, r24
    105c:	90 93 66 02 	sts	0x0266, r25
    1060:	10 c0       	rjmp	.+32     	; 0x1082 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
    1062:	e4 d0       	rcall	.+456    	; 0x122c <_Z6microsv>
    1064:	20 91 63 02 	lds	r18, 0x0263
    1068:	30 91 64 02 	lds	r19, 0x0264
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	70 93 77 02 	sts	0x0277, r23
    1074:	60 93 76 02 	sts	0x0276, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
    1078:	80 91 6f 02 	lds	r24, 0x026F
    107c:	84 60       	ori	r24, 0x04	; 4
    107e:	80 93 6f 02 	sts	0x026F, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
    1082:	c3 ff       	sbrs	r28, 3
    1084:	1c c0       	rjmp	.+56     	; 0x10be <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
    1086:	1b 9b       	sbis	0x03, 3	; 3
    1088:	0a c0       	rjmp	.+20     	; 0x109e <__vector_9+0x106>
		{
			ulRudderStart = micros();
    108a:	d0 d0       	rcall	.+416    	; 0x122c <_Z6microsv>
    108c:	60 93 5f 02 	sts	0x025F, r22
    1090:	70 93 60 02 	sts	0x0260, r23
    1094:	80 93 61 02 	sts	0x0261, r24
    1098:	90 93 62 02 	sts	0x0262, r25
    109c:	10 c0       	rjmp	.+32     	; 0x10be <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
    109e:	c6 d0       	rcall	.+396    	; 0x122c <_Z6microsv>
    10a0:	20 91 5f 02 	lds	r18, 0x025F
    10a4:	30 91 60 02 	lds	r19, 0x0260
    10a8:	62 1b       	sub	r22, r18
    10aa:	73 0b       	sbc	r23, r19
    10ac:	70 93 75 02 	sts	0x0275, r23
    10b0:	60 93 74 02 	sts	0x0274, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
    10b4:	80 91 6f 02 	lds	r24, 0x026F
    10b8:	88 60       	ori	r24, 0x08	; 8
    10ba:	80 93 6f 02 	sts	0x026F, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
    10be:	c4 ff       	sbrs	r28, 4
    10c0:	1c c0       	rjmp	.+56     	; 0x10fa <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
    10c2:	1c 9b       	sbis	0x03, 4	; 3
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <__vector_9+0x142>
		{
			ulGearStart = micros();
    10c6:	b2 d0       	rcall	.+356    	; 0x122c <_Z6microsv>
    10c8:	60 93 5b 02 	sts	0x025B, r22
    10cc:	70 93 5c 02 	sts	0x025C, r23
    10d0:	80 93 5d 02 	sts	0x025D, r24
    10d4:	90 93 5e 02 	sts	0x025E, r25
    10d8:	10 c0       	rjmp	.+32     	; 0x10fa <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
    10da:	a8 d0       	rcall	.+336    	; 0x122c <_Z6microsv>
    10dc:	20 91 5b 02 	lds	r18, 0x025B
    10e0:	30 91 5c 02 	lds	r19, 0x025C
    10e4:	62 1b       	sub	r22, r18
    10e6:	73 0b       	sbc	r23, r19
    10e8:	70 93 73 02 	sts	0x0273, r23
    10ec:	60 93 72 02 	sts	0x0272, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
    10f0:	80 91 6f 02 	lds	r24, 0x026F
    10f4:	80 61       	ori	r24, 0x10	; 16
    10f6:	80 93 6f 02 	sts	0x026F, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
    10fa:	c5 ff       	sbrs	r28, 5
    10fc:	1c c0       	rjmp	.+56     	; 0x1136 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
    10fe:	1d 9b       	sbis	0x03, 5	; 3
    1100:	0a c0       	rjmp	.+20     	; 0x1116 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
    1102:	94 d0       	rcall	.+296    	; 0x122c <_Z6microsv>
    1104:	60 93 57 02 	sts	0x0257, r22
    1108:	70 93 58 02 	sts	0x0258, r23
    110c:	80 93 59 02 	sts	0x0259, r24
    1110:	90 93 5a 02 	sts	0x025A, r25
    1114:	10 c0       	rjmp	.+32     	; 0x1136 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
    1116:	8a d0       	rcall	.+276    	; 0x122c <_Z6microsv>
    1118:	20 91 57 02 	lds	r18, 0x0257
    111c:	30 91 58 02 	lds	r19, 0x0258
    1120:	62 1b       	sub	r22, r18
    1122:	73 0b       	sbc	r23, r19
    1124:	70 93 71 02 	sts	0x0271, r23
    1128:	60 93 70 02 	sts	0x0270, r22
			rxUpdateFlagsShared |= AUX_FLAG;
    112c:	80 91 6f 02 	lds	r24, 0x026F
    1130:	80 62       	ori	r24, 0x20	; 32
    1132:	80 93 6f 02 	sts	0x026F, r24
		}
	}
}
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	cf 91       	pop	r28
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0b be       	out	0x3b, r0	; 59
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
    115e:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
    1160:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
    1162:	eb e6       	ldi	r30, 0x6B	; 107
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	81 60       	ori	r24, 0x01	; 1
    116a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
    116c:	80 81       	ld	r24, Z
    116e:	82 60       	ori	r24, 0x02	; 2
    1170:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
    1172:	80 81       	ld	r24, Z
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
    1178:	80 81       	ld	r24, Z
    117a:	88 60       	ori	r24, 0x08	; 8
    117c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
    117e:	80 81       	ld	r24, Z
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
    1184:	80 81       	ld	r24, Z
    1186:	80 62       	ori	r24, 0x20	; 32
    1188:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
    118a:	e8 e6       	ldi	r30, 0x68	; 104
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	81 60       	ori	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
	sei(); //enable interrupts
    1194:	78 94       	sei
    1196:	08 95       	ret

00001198 <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	80 91 7d 02 	lds	r24, 0x027D
    11b2:	90 91 7e 02 	lds	r25, 0x027E
    11b6:	a0 91 7f 02 	lds	r26, 0x027F
    11ba:	b0 91 80 02 	lds	r27, 0x0280
    11be:	30 91 7c 02 	lds	r19, 0x027C
    11c2:	23 e0       	ldi	r18, 0x03	; 3
    11c4:	23 0f       	add	r18, r19
    11c6:	2d 37       	cpi	r18, 0x7D	; 125
    11c8:	20 f4       	brcc	.+8      	; 0x11d2 <__vector_23+0x3a>
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	a1 1d       	adc	r26, r1
    11ce:	b1 1d       	adc	r27, r1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <__vector_23+0x44>
    11d2:	26 e8       	ldi	r18, 0x86	; 134
    11d4:	23 0f       	add	r18, r19
    11d6:	02 96       	adiw	r24, 0x02	; 2
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
    11dc:	20 93 7c 02 	sts	0x027C, r18
    11e0:	80 93 7d 02 	sts	0x027D, r24
    11e4:	90 93 7e 02 	sts	0x027E, r25
    11e8:	a0 93 7f 02 	sts	0x027F, r26
    11ec:	b0 93 80 02 	sts	0x0280, r27
    11f0:	80 91 81 02 	lds	r24, 0x0281
    11f4:	90 91 82 02 	lds	r25, 0x0282
    11f8:	a0 91 83 02 	lds	r26, 0x0283
    11fc:	b0 91 84 02 	lds	r27, 0x0284
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a1 1d       	adc	r26, r1
    1204:	b1 1d       	adc	r27, r1
    1206:	80 93 81 02 	sts	0x0281, r24
    120a:	90 93 82 02 	sts	0x0282, r25
    120e:	a0 93 83 02 	sts	0x0283, r26
    1212:	b0 93 84 02 	sts	0x0284, r27
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
    122c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    122e:	f8 94       	cli
	m = timer0_overflow_count;
    1230:	80 91 81 02 	lds	r24, 0x0281
    1234:	90 91 82 02 	lds	r25, 0x0282
    1238:	a0 91 83 02 	lds	r26, 0x0283
    123c:	b0 91 84 02 	lds	r27, 0x0284
	t = TCNT0;
    1240:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1242:	a8 9b       	sbis	0x15, 0	; 21
    1244:	02 c0       	rjmp	.+4      	; 0x124a <_Z6microsv+0x1e>
    1246:	2f 3f       	cpi	r18, 0xFF	; 255
    1248:	a9 f4       	brne	.+42     	; 0x1274 <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    124a:	3f bf       	out	0x3f, r19	; 63
	
	sei();
    124c:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    124e:	ba 2f       	mov	r27, r26
    1250:	a9 2f       	mov	r26, r25
    1252:	98 2f       	mov	r25, r24
    1254:	88 27       	eor	r24, r24
    1256:	82 0f       	add	r24, r18
    1258:	91 1d       	adc	r25, r1
    125a:	a1 1d       	adc	r26, r1
    125c:	b1 1d       	adc	r27, r1
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	a1 1d       	adc	r26, r1
    1278:	b1 1d       	adc	r27, r1
    127a:	e7 cf       	rjmp	.-50     	; 0x124a <_Z6microsv+0x1e>

0000127c <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
    1282:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	85 bd       	out	0x25, r24	; 37
    1288:	08 95       	ret

0000128a <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	cb 01       	movw	r24, r22
    1292:	aa 27       	eor	r26, r26
    1294:	97 fd       	sbrc	r25, 7
    1296:	a0 95       	com	r26
    1298:	ba 2f       	mov	r27, r26
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	aa 1f       	adc	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	9c 01       	movw	r18, r24
    12ac:	ad 01       	movw	r20, r26
    12ae:	22 0f       	add	r18, r18
    12b0:	33 1f       	adc	r19, r19
    12b2:	44 1f       	adc	r20, r20
    12b4:	55 1f       	adc	r21, r21
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	44 1f       	adc	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	74 e2       	ldi	r23, 0x24	; 36
    12c2:	84 ef       	ldi	r24, 0xF4	; 244
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	7e d3       	rcall	.+1788   	; 0x19c4 <__udivmodsi4>
    12c8:	21 50       	subi	r18, 0x01	; 1
    12ca:	31 09       	sbc	r19, r1
    12cc:	20 97       	sbiw	r28, 0x00	; 0
    12ce:	59 f4       	brne	.+22     	; 0x12e6 <_Z10USART_initii+0x5c>
    12d0:	30 93 c5 00 	sts	0x00C5, r19
    12d4:	20 93 c4 00 	sts	0x00C4, r18
    12d8:	88 e1       	ldi	r24, 0x18	; 24
    12da:	80 93 c1 00 	sts	0x00C1, r24
    12de:	86 e0       	ldi	r24, 0x06	; 6
    12e0:	80 93 c2 00 	sts	0x00C2, r24
    12e4:	28 c0       	rjmp	.+80     	; 0x1336 <_Z10USART_initii+0xac>
    12e6:	c1 30       	cpi	r28, 0x01	; 1
    12e8:	d1 05       	cpc	r29, r1
    12ea:	59 f4       	brne	.+22     	; 0x1302 <_Z10USART_initii+0x78>
    12ec:	30 93 cd 00 	sts	0x00CD, r19
    12f0:	20 93 cc 00 	sts	0x00CC, r18
    12f4:	88 e1       	ldi	r24, 0x18	; 24
    12f6:	80 93 c9 00 	sts	0x00C9, r24
    12fa:	86 e0       	ldi	r24, 0x06	; 6
    12fc:	80 93 ca 00 	sts	0x00CA, r24
    1300:	1a c0       	rjmp	.+52     	; 0x1336 <_Z10USART_initii+0xac>
    1302:	c2 30       	cpi	r28, 0x02	; 2
    1304:	d1 05       	cpc	r29, r1
    1306:	59 f4       	brne	.+22     	; 0x131e <_Z10USART_initii+0x94>
    1308:	30 93 d5 00 	sts	0x00D5, r19
    130c:	20 93 d4 00 	sts	0x00D4, r18
    1310:	88 e1       	ldi	r24, 0x18	; 24
    1312:	80 93 d1 00 	sts	0x00D1, r24
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	80 93 d2 00 	sts	0x00D2, r24
    131c:	0c c0       	rjmp	.+24     	; 0x1336 <_Z10USART_initii+0xac>
    131e:	23 97       	sbiw	r28, 0x03	; 3
    1320:	51 f4       	brne	.+20     	; 0x1336 <_Z10USART_initii+0xac>
    1322:	30 93 35 01 	sts	0x0135, r19
    1326:	20 93 34 01 	sts	0x0134, r18
    132a:	88 e1       	ldi	r24, 0x18	; 24
    132c:	80 93 31 01 	sts	0x0131, r24
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	80 93 32 01 	sts	0x0132, r24
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <_Z10USART_sendih>:
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	41 f4       	brne	.+16     	; 0x1350 <_Z10USART_sendih+0x14>
    1340:	e0 ec       	ldi	r30, 0xC0	; 192
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	85 ff       	sbrs	r24, 5
    1348:	fd cf       	rjmp	.-6      	; 0x1344 <_Z10USART_sendih+0x8>
    134a:	60 93 c6 00 	sts	0x00C6, r22
    134e:	08 95       	ret
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	41 f4       	brne	.+16     	; 0x1366 <_Z10USART_sendih+0x2a>
    1356:	e8 ec       	ldi	r30, 0xC8	; 200
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	85 ff       	sbrs	r24, 5
    135e:	fd cf       	rjmp	.-6      	; 0x135a <_Z10USART_sendih+0x1e>
    1360:	60 93 ce 00 	sts	0x00CE, r22
    1364:	08 95       	ret
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	91 05       	cpc	r25, r1
    136a:	41 f4       	brne	.+16     	; 0x137c <_Z10USART_sendih+0x40>
    136c:	e0 ed       	ldi	r30, 0xD0	; 208
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	85 ff       	sbrs	r24, 5
    1374:	fd cf       	rjmp	.-6      	; 0x1370 <_Z10USART_sendih+0x34>
    1376:	60 93 d6 00 	sts	0x00D6, r22
    137a:	08 95       	ret
    137c:	03 97       	sbiw	r24, 0x03	; 3
    137e:	39 f4       	brne	.+14     	; 0x138e <_Z10USART_sendih+0x52>
    1380:	e0 e3       	ldi	r30, 0x30	; 48
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	80 81       	ld	r24, Z
    1386:	85 ff       	sbrs	r24, 5
    1388:	fd cf       	rjmp	.-6      	; 0x1384 <_Z10USART_sendih+0x48>
    138a:	60 93 36 01 	sts	0x0136, r22
    138e:	08 95       	ret

00001390 <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	8c 01       	movw	r16, r24
    139a:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
    139c:	68 81       	ld	r22, Y
    139e:	66 23       	and	r22, r22
    13a0:	31 f0       	breq	.+12     	; 0x13ae <_Z15USART_putstringiPKc+0x1e>
    13a2:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
    13a4:	c8 01       	movw	r24, r16
    13a6:	ca df       	rcall	.-108    	; 0x133c <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
    13a8:	69 91       	ld	r22, Y+
    13aa:	61 11       	cpse	r22, r1
    13ac:	fb cf       	rjmp	.-10     	; 0x13a4 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <_Z10initialisev>:

bool initialise()
{
	bool success = true;
	
	USART_init(USART_PC,9600);
    13b8:	60 e8       	ldi	r22, 0x80	; 128
    13ba:	75 e2       	ldi	r23, 0x25	; 37
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	64 df       	rcall	.-312    	; 0x128a <_Z10USART_initii>
	initTimers();
    13c2:	5c df       	rcall	.-328    	; 0x127c <_Z10initTimersv>
	rx_init();
    13c4:	cc de       	rcall	.-616    	; 0x115e <_Z7rx_initv>
	/*
	if(altimeter_init()==false)
		success=false;
		*/

	quad_output_init();
    13c6:	7a dd       	rcall	.-1292   	; 0xebc <_Z16quad_output_initv>
			_delay_ms(200);
		}
	}
	*/
	
	i2c_init();
    13c8:	0e 94 30 01 	call	0x260	; 0x260 <i2c_init>
	
	init_HMC5883L();
    13cc:	27 d9       	rcall	.-3506   	; 0x61c <_Z13init_HMC5883Lv>
	
	debug_println("Initialization succeeded!");
    13ce:	8e e0       	ldi	r24, 0x0E	; 14
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	05 dd       	rcall	.-1526   	; 0xdde <_Z13debug_printlnPKc>
	
	//beep some pattern I can recognize
	debug_beep_long();
    13d4:	54 dd       	rcall	.-1368   	; 0xe7e <_Z15debug_beep_longv>
    13d6:	2f ef       	ldi	r18, 0xFF	; 255
    13d8:	84 e3       	ldi	r24, 0x34	; 52
    13da:	9c e0       	ldi	r25, 0x0C	; 12
    13dc:	21 50       	subi	r18, 0x01	; 1
    13de:	80 40       	sbci	r24, 0x00	; 0
    13e0:	90 40       	sbci	r25, 0x00	; 0
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <_Z10initialisev+0x24>
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <_Z10initialisev+0x2e>
    13e6:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    13e8:	3e dd       	rcall	.-1412   	; 0xe66 <_Z10debug_beepv>
    13ea:	2f ef       	ldi	r18, 0xFF	; 255
    13ec:	84 e3       	ldi	r24, 0x34	; 52
    13ee:	9c e0       	ldi	r25, 0x0C	; 12
    13f0:	21 50       	subi	r18, 0x01	; 1
    13f2:	80 40       	sbci	r24, 0x00	; 0
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <_Z10initialisev+0x38>
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <_Z10initialisev+0x42>
    13fa:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    13fc:	34 dd       	rcall	.-1432   	; 0xe66 <_Z10debug_beepv>
    13fe:	2f ef       	ldi	r18, 0xFF	; 255
    1400:	84 e3       	ldi	r24, 0x34	; 52
    1402:	9c e0       	ldi	r25, 0x0C	; 12
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <_Z10initialisev+0x4c>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <_Z10initialisev+0x56>
    140e:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    1410:	2a dd       	rcall	.-1452   	; 0xe66 <_Z10debug_beepv>
    1412:	2f ef       	ldi	r18, 0xFF	; 255
    1414:	84 e3       	ldi	r24, 0x34	; 52
    1416:	9c e0       	ldi	r25, 0x0C	; 12
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	80 40       	sbci	r24, 0x00	; 0
    141c:	90 40       	sbci	r25, 0x00	; 0
    141e:	e1 f7       	brne	.-8      	; 0x1418 <_Z10initialisev+0x60>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <_Z10initialisev+0x6a>
    1422:	00 00       	nop
	_delay_ms(250);
	debug_beep_long();
    1424:	2c dd       	rcall	.-1448   	; 0xe7e <_Z15debug_beep_longv>
	
	return success;
}
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret

0000142a <main>:
#include <stdio.h>

bool initialise();

int main(void)
{
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2c 97       	sbiw	r28, 0x0c	; 12
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
	initialise();
    143e:	bc df       	rcall	.-136    	; 0x13b8 <_Z10initialisev>
	
	adxl345_init();
    1440:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12adxl345_initv>
    1444:	2f ef       	ldi	r18, 0xFF	; 255
    1446:	89 e6       	ldi	r24, 0x69	; 105
    1448:	98 e1       	ldi	r25, 0x18	; 24
    144a:	21 50       	subi	r18, 0x01	; 1
    144c:	80 40       	sbci	r24, 0x00	; 0
    144e:	90 40       	sbci	r25, 0x00	; 0
    1450:	e1 f7       	brne	.-8      	; 0x144a <main+0x20>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <main+0x2a>
    1454:	00 00       	nop
		//rx_update();
		_delay_ms(500);
		double accel_x, accel_y, accel_z;
	
		
		adxl345_getdata(&accel_x,&accel_y,&accel_z);
    1456:	ae 01       	movw	r20, r28
    1458:	4f 5f       	subi	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	be 01       	movw	r22, r28
    145e:	6b 5f       	subi	r22, 0xFB	; 251
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	ce 01       	movw	r24, r28
    1464:	09 96       	adiw	r24, 0x09	; 9
    1466:	0e 94 cf 01 	call	0x39e	; 0x39e <_Z15adxl345_getdataPdS_S_>
		debug_printf(accel_x);
    146a:	69 85       	ldd	r22, Y+9	; 0x09
    146c:	7a 85       	ldd	r23, Y+10	; 0x0a
    146e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1470:	9c 85       	ldd	r25, Y+12	; 0x0c
    1472:	da dc       	rcall	.-1612   	; 0xe28 <_Z12debug_printff>
		debug_print("\t");
    1474:	88 e2       	ldi	r24, 0x28	; 40
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	ad dc       	rcall	.-1702   	; 0xdd4 <_Z11debug_printPKc>
		debug_printf(accel_y);
    147a:	6d 81       	ldd	r22, Y+5	; 0x05
    147c:	7e 81       	ldd	r23, Y+6	; 0x06
    147e:	8f 81       	ldd	r24, Y+7	; 0x07
    1480:	98 85       	ldd	r25, Y+8	; 0x08
    1482:	d2 dc       	rcall	.-1628   	; 0xe28 <_Z12debug_printff>
		debug_print("\t");
    1484:	88 e2       	ldi	r24, 0x28	; 40
    1486:	92 e0       	ldi	r25, 0x02	; 2
    1488:	a5 dc       	rcall	.-1718   	; 0xdd4 <_Z11debug_printPKc>
		debug_printf(accel_z);
    148a:	69 81       	ldd	r22, Y+1	; 0x01
    148c:	7a 81       	ldd	r23, Y+2	; 0x02
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	ca dc       	rcall	.-1644   	; 0xe28 <_Z12debug_printff>
		debug_print("\t");
    1494:	88 e2       	ldi	r24, 0x28	; 40
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	9d dc       	rcall	.-1734   	; 0xdd4 <_Z11debug_printPKc>
		debug_printf(getHeading());
    149a:	d6 d8       	rcall	.-3668   	; 0x648 <_Z10getHeadingv>
    149c:	c5 dc       	rcall	.-1654   	; 0xe28 <_Z12debug_printff>
		debug_print("\t");
    149e:	88 e2       	ldi	r24, 0x28	; 40
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	98 dc       	rcall	.-1744   	; 0xdd4 <_Z11debug_printPKc>
		debug_printi16(getHeadingTiltCompensated());
    14a4:	66 db       	rcall	.-2356   	; 0xb72 <_Z25getHeadingTiltCompensatedv>
    14a6:	a5 dc       	rcall	.-1718   	; 0xdf2 <_Z14debug_printi16i>
		debug_println("");
    14a8:	89 e2       	ldi	r24, 0x29	; 41
    14aa:	92 e0       	ldi	r25, 0x02	; 2
    14ac:	98 dc       	rcall	.-1744   	; 0xdde <_Z13debug_printlnPKc>
    14ae:	ca cf       	rjmp	.-108    	; 0x1444 <main+0x1a>

000014b0 <__subsf3>:
    14b0:	50 58       	subi	r21, 0x80	; 128

000014b2 <__addsf3>:
    14b2:	bb 27       	eor	r27, r27
    14b4:	aa 27       	eor	r26, r26
    14b6:	0e d0       	rcall	.+28     	; 0x14d4 <__addsf3x>
    14b8:	cb c1       	rjmp	.+918    	; 0x1850 <__fp_round>
    14ba:	bc d1       	rcall	.+888    	; 0x1834 <__fp_pscA>
    14bc:	30 f0       	brcs	.+12     	; 0x14ca <__addsf3+0x18>
    14be:	c1 d1       	rcall	.+898    	; 0x1842 <__fp_pscB>
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <__addsf3+0x18>
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <__addsf3+0x1e>
    14c4:	9f 3f       	cpi	r25, 0xFF	; 255
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__addsf3+0x1a>
    14c8:	1e f4       	brtc	.+6      	; 0x14d0 <__addsf3+0x1e>
    14ca:	8c c1       	rjmp	.+792    	; 0x17e4 <__fp_nan>
    14cc:	0e f4       	brtc	.+2      	; 0x14d0 <__addsf3+0x1e>
    14ce:	e0 95       	com	r30
    14d0:	e7 fb       	bst	r30, 7
    14d2:	82 c1       	rjmp	.+772    	; 0x17d8 <__fp_inf>

000014d4 <__addsf3x>:
    14d4:	e9 2f       	mov	r30, r25
    14d6:	cd d1       	rcall	.+922    	; 0x1872 <__fp_split3>
    14d8:	80 f3       	brcs	.-32     	; 0x14ba <__addsf3+0x8>
    14da:	ba 17       	cp	r27, r26
    14dc:	62 07       	cpc	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	95 07       	cpc	r25, r21
    14e4:	18 f0       	brcs	.+6      	; 0x14ec <__addsf3x+0x18>
    14e6:	71 f4       	brne	.+28     	; 0x1504 <__addsf3x+0x30>
    14e8:	9e f5       	brtc	.+102    	; 0x1550 <__addsf3x+0x7c>
    14ea:	e5 c1       	rjmp	.+970    	; 0x18b6 <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x1c>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x5c>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x4e>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x98>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x34>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x4e>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x7c>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x98>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x96>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6a>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x98>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x98>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x96>
    1568:	b3 cf       	rjmp	.-154    	; 0x14d0 <__addsf3+0x1e>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0x9e>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	5c d1       	rcall	.+696    	; 0x1834 <__fp_pscA>
    157c:	58 f0       	brcs	.+22     	; 0x1594 <__addsf3x+0xc0>
    157e:	80 e8       	ldi	r24, 0x80	; 128
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	09 f4       	brne	.+2      	; 0x1586 <__addsf3x+0xb2>
    1584:	9e ef       	ldi	r25, 0xFE	; 254
    1586:	5d d1       	rcall	.+698    	; 0x1842 <__fp_pscB>
    1588:	28 f0       	brcs	.+10     	; 0x1594 <__addsf3x+0xc0>
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	51 e0       	ldi	r21, 0x01	; 1
    158e:	59 f4       	brne	.+22     	; 0x15a6 <atan2+0xe>
    1590:	5e ef       	ldi	r21, 0xFE	; 254
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <atan2+0xe>
    1594:	27 c1       	rjmp	.+590    	; 0x17e4 <__fp_nan>
    1596:	8f c1       	rjmp	.+798    	; 0x18b6 <__fp_zero>

00001598 <atan2>:
    1598:	e9 2f       	mov	r30, r25
    159a:	e0 78       	andi	r30, 0x80	; 128
    159c:	6a d1       	rcall	.+724    	; 0x1872 <__fp_split3>
    159e:	68 f3       	brcs	.-38     	; 0x157a <__addsf3x+0xa6>
    15a0:	09 2e       	mov	r0, r25
    15a2:	05 2a       	or	r0, r21
    15a4:	c1 f3       	breq	.-16     	; 0x1596 <__addsf3x+0xc2>
    15a6:	26 17       	cp	r18, r22
    15a8:	37 07       	cpc	r19, r23
    15aa:	48 07       	cpc	r20, r24
    15ac:	59 07       	cpc	r21, r25
    15ae:	38 f0       	brcs	.+14     	; 0x15be <atan2+0x26>
    15b0:	0e 2e       	mov	r0, r30
    15b2:	07 f8       	bld	r0, 7
    15b4:	e0 25       	eor	r30, r0
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <atan2+0x3a>
    15b8:	e0 25       	eor	r30, r0
    15ba:	e0 64       	ori	r30, 0x40	; 64
    15bc:	0a c0       	rjmp	.+20     	; 0x15d2 <atan2+0x3a>
    15be:	ef 63       	ori	r30, 0x3F	; 63
    15c0:	07 f8       	bld	r0, 7
    15c2:	00 94       	com	r0
    15c4:	07 fa       	bst	r0, 7
    15c6:	db 01       	movw	r26, r22
    15c8:	b9 01       	movw	r22, r18
    15ca:	9d 01       	movw	r18, r26
    15cc:	dc 01       	movw	r26, r24
    15ce:	ca 01       	movw	r24, r20
    15d0:	ad 01       	movw	r20, r26
    15d2:	ef 93       	push	r30
    15d4:	47 d0       	rcall	.+142    	; 0x1664 <__divsf3_pse>
    15d6:	3c d1       	rcall	.+632    	; 0x1850 <__fp_round>
    15d8:	0a d0       	rcall	.+20     	; 0x15ee <atan>
    15da:	5f 91       	pop	r21
    15dc:	55 23       	and	r21, r21
    15de:	31 f0       	breq	.+12     	; 0x15ec <atan2+0x54>
    15e0:	2b ed       	ldi	r18, 0xDB	; 219
    15e2:	3f e0       	ldi	r19, 0x0F	; 15
    15e4:	49 e4       	ldi	r20, 0x49	; 73
    15e6:	50 fd       	sbrc	r21, 0
    15e8:	49 ec       	ldi	r20, 0xC9	; 201
    15ea:	63 cf       	rjmp	.-314    	; 0x14b2 <__addsf3>
    15ec:	08 95       	ret

000015ee <atan>:
    15ee:	df 93       	push	r29
    15f0:	dd 27       	eor	r29, r29
    15f2:	b9 2f       	mov	r27, r25
    15f4:	bf 77       	andi	r27, 0x7F	; 127
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	16 16       	cp	r1, r22
    15fc:	17 06       	cpc	r1, r23
    15fe:	48 07       	cpc	r20, r24
    1600:	5b 07       	cpc	r21, r27
    1602:	10 f4       	brcc	.+4      	; 0x1608 <atan+0x1a>
    1604:	d9 2f       	mov	r29, r25
    1606:	62 d1       	rcall	.+708    	; 0x18cc <inverse>
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	7f 93       	push	r23
    160e:	6f 93       	push	r22
    1610:	c7 d1       	rcall	.+910    	; 0x19a0 <square>
    1612:	e4 ee       	ldi	r30, 0xE4	; 228
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	e9 d0       	rcall	.+466    	; 0x17ea <__fp_powser>
    1618:	1b d1       	rcall	.+566    	; 0x1850 <__fp_round>
    161a:	2f 91       	pop	r18
    161c:	3f 91       	pop	r19
    161e:	4f 91       	pop	r20
    1620:	5f 91       	pop	r21
    1622:	67 d1       	rcall	.+718    	; 0x18f2 <__mulsf3x>
    1624:	dd 23       	and	r29, r29
    1626:	49 f0       	breq	.+18     	; 0x163a <atan+0x4c>
    1628:	90 58       	subi	r25, 0x80	; 128
    162a:	a2 ea       	ldi	r26, 0xA2	; 162
    162c:	2a ed       	ldi	r18, 0xDA	; 218
    162e:	3f e0       	ldi	r19, 0x0F	; 15
    1630:	49 ec       	ldi	r20, 0xC9	; 201
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	d0 78       	andi	r29, 0x80	; 128
    1636:	5d 27       	eor	r21, r29
    1638:	4d df       	rcall	.-358    	; 0x14d4 <__addsf3x>
    163a:	df 91       	pop	r29
    163c:	09 c1       	rjmp	.+530    	; 0x1850 <__fp_round>

0000163e <__cmpsf2>:
    163e:	a8 d0       	rcall	.+336    	; 0x1790 <__fp_cmp>
    1640:	08 f4       	brcc	.+2      	; 0x1644 <__cmpsf2+0x6>
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	08 95       	ret

00001646 <__divsf3>:
    1646:	0c d0       	rcall	.+24     	; 0x1660 <__divsf3x>
    1648:	03 c1       	rjmp	.+518    	; 0x1850 <__fp_round>
    164a:	fb d0       	rcall	.+502    	; 0x1842 <__fp_pscB>
    164c:	40 f0       	brcs	.+16     	; 0x165e <__divsf3+0x18>
    164e:	f2 d0       	rcall	.+484    	; 0x1834 <__fp_pscA>
    1650:	30 f0       	brcs	.+12     	; 0x165e <__divsf3+0x18>
    1652:	21 f4       	brne	.+8      	; 0x165c <__divsf3+0x16>
    1654:	5f 3f       	cpi	r21, 0xFF	; 255
    1656:	19 f0       	breq	.+6      	; 0x165e <__divsf3+0x18>
    1658:	bf c0       	rjmp	.+382    	; 0x17d8 <__fp_inf>
    165a:	51 11       	cpse	r21, r1
    165c:	2d c1       	rjmp	.+602    	; 0x18b8 <__fp_szero>
    165e:	c2 c0       	rjmp	.+388    	; 0x17e4 <__fp_nan>

00001660 <__divsf3x>:
    1660:	08 d1       	rcall	.+528    	; 0x1872 <__fp_split3>
    1662:	98 f3       	brcs	.-26     	; 0x164a <__divsf3+0x4>

00001664 <__divsf3_pse>:
    1664:	99 23       	and	r25, r25
    1666:	c9 f3       	breq	.-14     	; 0x165a <__divsf3+0x14>
    1668:	55 23       	and	r21, r21
    166a:	b1 f3       	breq	.-20     	; 0x1658 <__divsf3+0x12>
    166c:	95 1b       	sub	r25, r21
    166e:	55 0b       	sbc	r21, r21
    1670:	bb 27       	eor	r27, r27
    1672:	aa 27       	eor	r26, r26
    1674:	62 17       	cp	r22, r18
    1676:	73 07       	cpc	r23, r19
    1678:	84 07       	cpc	r24, r20
    167a:	38 f0       	brcs	.+14     	; 0x168a <__divsf3_pse+0x26>
    167c:	9f 5f       	subi	r25, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255
    1680:	22 0f       	add	r18, r18
    1682:	33 1f       	adc	r19, r19
    1684:	44 1f       	adc	r20, r20
    1686:	aa 1f       	adc	r26, r26
    1688:	a9 f3       	breq	.-22     	; 0x1674 <__divsf3_pse+0x10>
    168a:	33 d0       	rcall	.+102    	; 0x16f2 <__divsf3_pse+0x8e>
    168c:	0e 2e       	mov	r0, r30
    168e:	3a f0       	brmi	.+14     	; 0x169e <__divsf3_pse+0x3a>
    1690:	e0 e8       	ldi	r30, 0x80	; 128
    1692:	30 d0       	rcall	.+96     	; 0x16f4 <__divsf3_pse+0x90>
    1694:	91 50       	subi	r25, 0x01	; 1
    1696:	50 40       	sbci	r21, 0x00	; 0
    1698:	e6 95       	lsr	r30
    169a:	00 1c       	adc	r0, r0
    169c:	ca f7       	brpl	.-14     	; 0x1690 <__divsf3_pse+0x2c>
    169e:	29 d0       	rcall	.+82     	; 0x16f2 <__divsf3_pse+0x8e>
    16a0:	fe 2f       	mov	r31, r30
    16a2:	27 d0       	rcall	.+78     	; 0x16f2 <__divsf3_pse+0x8e>
    16a4:	66 0f       	add	r22, r22
    16a6:	77 1f       	adc	r23, r23
    16a8:	88 1f       	adc	r24, r24
    16aa:	bb 1f       	adc	r27, r27
    16ac:	26 17       	cp	r18, r22
    16ae:	37 07       	cpc	r19, r23
    16b0:	48 07       	cpc	r20, r24
    16b2:	ab 07       	cpc	r26, r27
    16b4:	b0 e8       	ldi	r27, 0x80	; 128
    16b6:	09 f0       	breq	.+2      	; 0x16ba <__divsf3_pse+0x56>
    16b8:	bb 0b       	sbc	r27, r27
    16ba:	80 2d       	mov	r24, r0
    16bc:	bf 01       	movw	r22, r30
    16be:	ff 27       	eor	r31, r31
    16c0:	93 58       	subi	r25, 0x83	; 131
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	2a f0       	brmi	.+10     	; 0x16d0 <__divsf3_pse+0x6c>
    16c6:	9e 3f       	cpi	r25, 0xFE	; 254
    16c8:	51 05       	cpc	r21, r1
    16ca:	68 f0       	brcs	.+26     	; 0x16e6 <__divsf3_pse+0x82>
    16cc:	85 c0       	rjmp	.+266    	; 0x17d8 <__fp_inf>
    16ce:	f4 c0       	rjmp	.+488    	; 0x18b8 <__fp_szero>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	ec f3       	brlt	.-6      	; 0x16ce <__divsf3_pse+0x6a>
    16d4:	98 3e       	cpi	r25, 0xE8	; 232
    16d6:	dc f3       	brlt	.-10     	; 0x16ce <__divsf3_pse+0x6a>
    16d8:	86 95       	lsr	r24
    16da:	77 95       	ror	r23
    16dc:	67 95       	ror	r22
    16de:	b7 95       	ror	r27
    16e0:	f7 95       	ror	r31
    16e2:	9f 5f       	subi	r25, 0xFF	; 255
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__divsf3_pse+0x74>
    16e6:	88 0f       	add	r24, r24
    16e8:	91 1d       	adc	r25, r1
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	97 f9       	bld	r25, 7
    16f0:	08 95       	ret
    16f2:	e1 e0       	ldi	r30, 0x01	; 1
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	bb 1f       	adc	r27, r27
    16fc:	62 17       	cp	r22, r18
    16fe:	73 07       	cpc	r23, r19
    1700:	84 07       	cpc	r24, r20
    1702:	ba 07       	cpc	r27, r26
    1704:	20 f0       	brcs	.+8      	; 0x170e <__divsf3_pse+0xaa>
    1706:	62 1b       	sub	r22, r18
    1708:	73 0b       	sbc	r23, r19
    170a:	84 0b       	sbc	r24, r20
    170c:	ba 0b       	sbc	r27, r26
    170e:	ee 1f       	adc	r30, r30
    1710:	88 f7       	brcc	.-30     	; 0x16f4 <__divsf3_pse+0x90>
    1712:	e0 95       	com	r30
    1714:	08 95       	ret

00001716 <__floatunsisf>:
    1716:	e8 94       	clt
    1718:	09 c0       	rjmp	.+18     	; 0x172c <__floatsisf+0x12>

0000171a <__floatsisf>:
    171a:	97 fb       	bst	r25, 7
    171c:	3e f4       	brtc	.+14     	; 0x172c <__floatsisf+0x12>
    171e:	90 95       	com	r25
    1720:	80 95       	com	r24
    1722:	70 95       	com	r23
    1724:	61 95       	neg	r22
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	99 23       	and	r25, r25
    172e:	a9 f0       	breq	.+42     	; 0x175a <__floatsisf+0x40>
    1730:	f9 2f       	mov	r31, r25
    1732:	96 e9       	ldi	r25, 0x96	; 150
    1734:	bb 27       	eor	r27, r27
    1736:	93 95       	inc	r25
    1738:	f6 95       	lsr	r31
    173a:	87 95       	ror	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b7 95       	ror	r27
    1742:	f1 11       	cpse	r31, r1
    1744:	f8 cf       	rjmp	.-16     	; 0x1736 <__floatsisf+0x1c>
    1746:	fa f4       	brpl	.+62     	; 0x1786 <__floatsisf+0x6c>
    1748:	bb 0f       	add	r27, r27
    174a:	11 f4       	brne	.+4      	; 0x1750 <__floatsisf+0x36>
    174c:	60 ff       	sbrs	r22, 0
    174e:	1b c0       	rjmp	.+54     	; 0x1786 <__floatsisf+0x6c>
    1750:	6f 5f       	subi	r22, 0xFF	; 255
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	8f 4f       	sbci	r24, 0xFF	; 255
    1756:	9f 4f       	sbci	r25, 0xFF	; 255
    1758:	16 c0       	rjmp	.+44     	; 0x1786 <__floatsisf+0x6c>
    175a:	88 23       	and	r24, r24
    175c:	11 f0       	breq	.+4      	; 0x1762 <__floatsisf+0x48>
    175e:	96 e9       	ldi	r25, 0x96	; 150
    1760:	11 c0       	rjmp	.+34     	; 0x1784 <__floatsisf+0x6a>
    1762:	77 23       	and	r23, r23
    1764:	21 f0       	breq	.+8      	; 0x176e <__floatsisf+0x54>
    1766:	9e e8       	ldi	r25, 0x8E	; 142
    1768:	87 2f       	mov	r24, r23
    176a:	76 2f       	mov	r23, r22
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <__floatsisf+0x5e>
    176e:	66 23       	and	r22, r22
    1770:	71 f0       	breq	.+28     	; 0x178e <__floatsisf+0x74>
    1772:	96 e8       	ldi	r25, 0x86	; 134
    1774:	86 2f       	mov	r24, r22
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	2a f0       	brmi	.+10     	; 0x1786 <__floatsisf+0x6c>
    177c:	9a 95       	dec	r25
    177e:	66 0f       	add	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	da f7       	brpl	.-10     	; 0x177c <__floatsisf+0x62>
    1786:	88 0f       	add	r24, r24
    1788:	96 95       	lsr	r25
    178a:	87 95       	ror	r24
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__fp_cmp>:
    1790:	99 0f       	add	r25, r25
    1792:	00 08       	sbc	r0, r0
    1794:	55 0f       	add	r21, r21
    1796:	aa 0b       	sbc	r26, r26
    1798:	e0 e8       	ldi	r30, 0x80	; 128
    179a:	fe ef       	ldi	r31, 0xFE	; 254
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	e8 07       	cpc	r30, r24
    17a2:	f9 07       	cpc	r31, r25
    17a4:	c0 f0       	brcs	.+48     	; 0x17d6 <__fp_cmp+0x46>
    17a6:	12 16       	cp	r1, r18
    17a8:	13 06       	cpc	r1, r19
    17aa:	e4 07       	cpc	r30, r20
    17ac:	f5 07       	cpc	r31, r21
    17ae:	98 f0       	brcs	.+38     	; 0x17d6 <__fp_cmp+0x46>
    17b0:	62 1b       	sub	r22, r18
    17b2:	73 0b       	sbc	r23, r19
    17b4:	84 0b       	sbc	r24, r20
    17b6:	95 0b       	sbc	r25, r21
    17b8:	39 f4       	brne	.+14     	; 0x17c8 <__fp_cmp+0x38>
    17ba:	0a 26       	eor	r0, r26
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <__fp_cmp+0x46>
    17be:	23 2b       	or	r18, r19
    17c0:	24 2b       	or	r18, r20
    17c2:	25 2b       	or	r18, r21
    17c4:	21 f4       	brne	.+8      	; 0x17ce <__fp_cmp+0x3e>
    17c6:	08 95       	ret
    17c8:	0a 26       	eor	r0, r26
    17ca:	09 f4       	brne	.+2      	; 0x17ce <__fp_cmp+0x3e>
    17cc:	a1 40       	sbci	r26, 0x01	; 1
    17ce:	a6 95       	lsr	r26
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	81 1d       	adc	r24, r1
    17d4:	81 1d       	adc	r24, r1
    17d6:	08 95       	ret

000017d8 <__fp_inf>:
    17d8:	97 f9       	bld	r25, 7
    17da:	9f 67       	ori	r25, 0x7F	; 127
    17dc:	80 e8       	ldi	r24, 0x80	; 128
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	08 95       	ret

000017e4 <__fp_nan>:
    17e4:	9f ef       	ldi	r25, 0xFF	; 255
    17e6:	80 ec       	ldi	r24, 0xC0	; 192
    17e8:	08 95       	ret

000017ea <__fp_powser>:
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	1f 93       	push	r17
    17f0:	0f 93       	push	r16
    17f2:	ff 92       	push	r15
    17f4:	ef 92       	push	r14
    17f6:	df 92       	push	r13
    17f8:	7b 01       	movw	r14, r22
    17fa:	8c 01       	movw	r16, r24
    17fc:	68 94       	set
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <__fp_powser+0x20>
    1800:	da 2e       	mov	r13, r26
    1802:	ef 01       	movw	r28, r30
    1804:	76 d0       	rcall	.+236    	; 0x18f2 <__mulsf3x>
    1806:	fe 01       	movw	r30, r28
    1808:	e8 94       	clt
    180a:	a5 91       	lpm	r26, Z+
    180c:	25 91       	lpm	r18, Z+
    180e:	35 91       	lpm	r19, Z+
    1810:	45 91       	lpm	r20, Z+
    1812:	55 91       	lpm	r21, Z+
    1814:	ae f3       	brts	.-22     	; 0x1800 <__fp_powser+0x16>
    1816:	ef 01       	movw	r28, r30
    1818:	5d de       	rcall	.-838    	; 0x14d4 <__addsf3x>
    181a:	fe 01       	movw	r30, r28
    181c:	97 01       	movw	r18, r14
    181e:	a8 01       	movw	r20, r16
    1820:	da 94       	dec	r13
    1822:	79 f7       	brne	.-34     	; 0x1802 <__fp_powser+0x18>
    1824:	df 90       	pop	r13
    1826:	ef 90       	pop	r14
    1828:	ff 90       	pop	r15
    182a:	0f 91       	pop	r16
    182c:	1f 91       	pop	r17
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <__fp_pscA>:
    1834:	00 24       	eor	r0, r0
    1836:	0a 94       	dec	r0
    1838:	16 16       	cp	r1, r22
    183a:	17 06       	cpc	r1, r23
    183c:	18 06       	cpc	r1, r24
    183e:	09 06       	cpc	r0, r25
    1840:	08 95       	ret

00001842 <__fp_pscB>:
    1842:	00 24       	eor	r0, r0
    1844:	0a 94       	dec	r0
    1846:	12 16       	cp	r1, r18
    1848:	13 06       	cpc	r1, r19
    184a:	14 06       	cpc	r1, r20
    184c:	05 06       	cpc	r0, r21
    184e:	08 95       	ret

00001850 <__fp_round>:
    1850:	09 2e       	mov	r0, r25
    1852:	03 94       	inc	r0
    1854:	00 0c       	add	r0, r0
    1856:	11 f4       	brne	.+4      	; 0x185c <__fp_round+0xc>
    1858:	88 23       	and	r24, r24
    185a:	52 f0       	brmi	.+20     	; 0x1870 <__fp_round+0x20>
    185c:	bb 0f       	add	r27, r27
    185e:	40 f4       	brcc	.+16     	; 0x1870 <__fp_round+0x20>
    1860:	bf 2b       	or	r27, r31
    1862:	11 f4       	brne	.+4      	; 0x1868 <__fp_round+0x18>
    1864:	60 ff       	sbrs	r22, 0
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <__fp_round+0x20>
    1868:	6f 5f       	subi	r22, 0xFF	; 255
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	8f 4f       	sbci	r24, 0xFF	; 255
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	08 95       	ret

00001872 <__fp_split3>:
    1872:	57 fd       	sbrc	r21, 7
    1874:	90 58       	subi	r25, 0x80	; 128
    1876:	44 0f       	add	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	59 f0       	breq	.+22     	; 0x1892 <__fp_splitA+0x10>
    187c:	5f 3f       	cpi	r21, 0xFF	; 255
    187e:	71 f0       	breq	.+28     	; 0x189c <__fp_splitA+0x1a>
    1880:	47 95       	ror	r20

00001882 <__fp_splitA>:
    1882:	88 0f       	add	r24, r24
    1884:	97 fb       	bst	r25, 7
    1886:	99 1f       	adc	r25, r25
    1888:	61 f0       	breq	.+24     	; 0x18a2 <__fp_splitA+0x20>
    188a:	9f 3f       	cpi	r25, 0xFF	; 255
    188c:	79 f0       	breq	.+30     	; 0x18ac <__fp_splitA+0x2a>
    188e:	87 95       	ror	r24
    1890:	08 95       	ret
    1892:	12 16       	cp	r1, r18
    1894:	13 06       	cpc	r1, r19
    1896:	14 06       	cpc	r1, r20
    1898:	55 1f       	adc	r21, r21
    189a:	f2 cf       	rjmp	.-28     	; 0x1880 <__fp_split3+0xe>
    189c:	46 95       	lsr	r20
    189e:	f1 df       	rcall	.-30     	; 0x1882 <__fp_splitA>
    18a0:	08 c0       	rjmp	.+16     	; 0x18b2 <__fp_splitA+0x30>
    18a2:	16 16       	cp	r1, r22
    18a4:	17 06       	cpc	r1, r23
    18a6:	18 06       	cpc	r1, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	f1 cf       	rjmp	.-30     	; 0x188e <__fp_splitA+0xc>
    18ac:	86 95       	lsr	r24
    18ae:	71 05       	cpc	r23, r1
    18b0:	61 05       	cpc	r22, r1
    18b2:	08 94       	sec
    18b4:	08 95       	ret

000018b6 <__fp_zero>:
    18b6:	e8 94       	clt

000018b8 <__fp_szero>:
    18b8:	bb 27       	eor	r27, r27
    18ba:	66 27       	eor	r22, r22
    18bc:	77 27       	eor	r23, r23
    18be:	cb 01       	movw	r24, r22
    18c0:	97 f9       	bld	r25, 7
    18c2:	08 95       	ret

000018c4 <__gesf2>:
    18c4:	65 df       	rcall	.-310    	; 0x1790 <__fp_cmp>
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <__gesf2+0x6>
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	08 95       	ret

000018cc <inverse>:
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	80 e8       	ldi	r24, 0x80	; 128
    18d6:	9f e3       	ldi	r25, 0x3F	; 63
    18d8:	b6 ce       	rjmp	.-660    	; 0x1646 <__divsf3>

000018da <__mulsf3>:
    18da:	0b d0       	rcall	.+22     	; 0x18f2 <__mulsf3x>
    18dc:	b9 cf       	rjmp	.-142    	; 0x1850 <__fp_round>
    18de:	aa df       	rcall	.-172    	; 0x1834 <__fp_pscA>
    18e0:	28 f0       	brcs	.+10     	; 0x18ec <__mulsf3+0x12>
    18e2:	af df       	rcall	.-162    	; 0x1842 <__fp_pscB>
    18e4:	18 f0       	brcs	.+6      	; 0x18ec <__mulsf3+0x12>
    18e6:	95 23       	and	r25, r21
    18e8:	09 f0       	breq	.+2      	; 0x18ec <__mulsf3+0x12>
    18ea:	76 cf       	rjmp	.-276    	; 0x17d8 <__fp_inf>
    18ec:	7b cf       	rjmp	.-266    	; 0x17e4 <__fp_nan>
    18ee:	11 24       	eor	r1, r1
    18f0:	e3 cf       	rjmp	.-58     	; 0x18b8 <__fp_szero>

000018f2 <__mulsf3x>:
    18f2:	bf df       	rcall	.-130    	; 0x1872 <__fp_split3>
    18f4:	a0 f3       	brcs	.-24     	; 0x18de <__mulsf3+0x4>

000018f6 <__mulsf3_pse>:
    18f6:	95 9f       	mul	r25, r21
    18f8:	d1 f3       	breq	.-12     	; 0x18ee <__mulsf3+0x14>
    18fa:	95 0f       	add	r25, r21
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	55 1f       	adc	r21, r21
    1900:	62 9f       	mul	r22, r18
    1902:	f0 01       	movw	r30, r0
    1904:	72 9f       	mul	r23, r18
    1906:	bb 27       	eor	r27, r27
    1908:	f0 0d       	add	r31, r0
    190a:	b1 1d       	adc	r27, r1
    190c:	63 9f       	mul	r22, r19
    190e:	aa 27       	eor	r26, r26
    1910:	f0 0d       	add	r31, r0
    1912:	b1 1d       	adc	r27, r1
    1914:	aa 1f       	adc	r26, r26
    1916:	64 9f       	mul	r22, r20
    1918:	66 27       	eor	r22, r22
    191a:	b0 0d       	add	r27, r0
    191c:	a1 1d       	adc	r26, r1
    191e:	66 1f       	adc	r22, r22
    1920:	82 9f       	mul	r24, r18
    1922:	22 27       	eor	r18, r18
    1924:	b0 0d       	add	r27, r0
    1926:	a1 1d       	adc	r26, r1
    1928:	62 1f       	adc	r22, r18
    192a:	73 9f       	mul	r23, r19
    192c:	b0 0d       	add	r27, r0
    192e:	a1 1d       	adc	r26, r1
    1930:	62 1f       	adc	r22, r18
    1932:	83 9f       	mul	r24, r19
    1934:	a0 0d       	add	r26, r0
    1936:	61 1d       	adc	r22, r1
    1938:	22 1f       	adc	r18, r18
    193a:	74 9f       	mul	r23, r20
    193c:	33 27       	eor	r19, r19
    193e:	a0 0d       	add	r26, r0
    1940:	61 1d       	adc	r22, r1
    1942:	23 1f       	adc	r18, r19
    1944:	84 9f       	mul	r24, r20
    1946:	60 0d       	add	r22, r0
    1948:	21 1d       	adc	r18, r1
    194a:	82 2f       	mov	r24, r18
    194c:	76 2f       	mov	r23, r22
    194e:	6a 2f       	mov	r22, r26
    1950:	11 24       	eor	r1, r1
    1952:	9f 57       	subi	r25, 0x7F	; 127
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	8a f0       	brmi	.+34     	; 0x197a <__mulsf3_pse+0x84>
    1958:	e1 f0       	breq	.+56     	; 0x1992 <__mulsf3_pse+0x9c>
    195a:	88 23       	and	r24, r24
    195c:	4a f0       	brmi	.+18     	; 0x1970 <__mulsf3_pse+0x7a>
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	bb 1f       	adc	r27, r27
    1964:	66 1f       	adc	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	91 50       	subi	r25, 0x01	; 1
    196c:	50 40       	sbci	r21, 0x00	; 0
    196e:	a9 f7       	brne	.-22     	; 0x195a <__mulsf3_pse+0x64>
    1970:	9e 3f       	cpi	r25, 0xFE	; 254
    1972:	51 05       	cpc	r21, r1
    1974:	70 f0       	brcs	.+28     	; 0x1992 <__mulsf3_pse+0x9c>
    1976:	30 cf       	rjmp	.-416    	; 0x17d8 <__fp_inf>
    1978:	9f cf       	rjmp	.-194    	; 0x18b8 <__fp_szero>
    197a:	5f 3f       	cpi	r21, 0xFF	; 255
    197c:	ec f3       	brlt	.-6      	; 0x1978 <__mulsf3_pse+0x82>
    197e:	98 3e       	cpi	r25, 0xE8	; 232
    1980:	dc f3       	brlt	.-10     	; 0x1978 <__mulsf3_pse+0x82>
    1982:	86 95       	lsr	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	f7 95       	ror	r31
    198c:	e7 95       	ror	r30
    198e:	9f 5f       	subi	r25, 0xFF	; 255
    1990:	c1 f7       	brne	.-16     	; 0x1982 <__mulsf3_pse+0x8c>
    1992:	fe 2b       	or	r31, r30
    1994:	88 0f       	add	r24, r24
    1996:	91 1d       	adc	r25, r1
    1998:	96 95       	lsr	r25
    199a:	87 95       	ror	r24
    199c:	97 f9       	bld	r25, 7
    199e:	08 95       	ret

000019a0 <square>:
    19a0:	9b 01       	movw	r18, r22
    19a2:	ac 01       	movw	r20, r24
    19a4:	9a cf       	rjmp	.-204    	; 0x18da <__mulsf3>

000019a6 <__mulsi3>:
    19a6:	db 01       	movw	r26, r22
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	2d d0       	rcall	.+90     	; 0x1a08 <__muluhisi3>
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	a2 9f       	mul	r26, r18
    19b4:	80 0d       	add	r24, r0
    19b6:	91 1d       	adc	r25, r1
    19b8:	a3 9f       	mul	r26, r19
    19ba:	90 0d       	add	r25, r0
    19bc:	b2 9f       	mul	r27, r18
    19be:	90 0d       	add	r25, r0
    19c0:	11 24       	eor	r1, r1
    19c2:	08 95       	ret

000019c4 <__udivmodsi4>:
    19c4:	a1 e2       	ldi	r26, 0x21	; 33
    19c6:	1a 2e       	mov	r1, r26
    19c8:	aa 1b       	sub	r26, r26
    19ca:	bb 1b       	sub	r27, r27
    19cc:	fd 01       	movw	r30, r26
    19ce:	0d c0       	rjmp	.+26     	; 0x19ea <__udivmodsi4_ep>

000019d0 <__udivmodsi4_loop>:
    19d0:	aa 1f       	adc	r26, r26
    19d2:	bb 1f       	adc	r27, r27
    19d4:	ee 1f       	adc	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	a2 17       	cp	r26, r18
    19da:	b3 07       	cpc	r27, r19
    19dc:	e4 07       	cpc	r30, r20
    19de:	f5 07       	cpc	r31, r21
    19e0:	20 f0       	brcs	.+8      	; 0x19ea <__udivmodsi4_ep>
    19e2:	a2 1b       	sub	r26, r18
    19e4:	b3 0b       	sbc	r27, r19
    19e6:	e4 0b       	sbc	r30, r20
    19e8:	f5 0b       	sbc	r31, r21

000019ea <__udivmodsi4_ep>:
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	1a 94       	dec	r1
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <__udivmodsi4_loop>
    19f6:	60 95       	com	r22
    19f8:	70 95       	com	r23
    19fa:	80 95       	com	r24
    19fc:	90 95       	com	r25
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	bd 01       	movw	r22, r26
    1a04:	cf 01       	movw	r24, r30
    1a06:	08 95       	ret

00001a08 <__muluhisi3>:
    1a08:	0f d0       	rcall	.+30     	; 0x1a28 <__umulhisi3>
    1a0a:	a5 9f       	mul	r26, r21
    1a0c:	90 0d       	add	r25, r0
    1a0e:	b4 9f       	mul	r27, r20
    1a10:	90 0d       	add	r25, r0
    1a12:	a4 9f       	mul	r26, r20
    1a14:	80 0d       	add	r24, r0
    1a16:	91 1d       	adc	r25, r1
    1a18:	11 24       	eor	r1, r1
    1a1a:	08 95       	ret

00001a1c <__mulshisi3>:
    1a1c:	b7 ff       	sbrs	r27, 7
    1a1e:	f4 cf       	rjmp	.-24     	; 0x1a08 <__muluhisi3>

00001a20 <__mulohisi3>:
    1a20:	f3 df       	rcall	.-26     	; 0x1a08 <__muluhisi3>
    1a22:	82 1b       	sub	r24, r18
    1a24:	93 0b       	sbc	r25, r19
    1a26:	08 95       	ret

00001a28 <__umulhisi3>:
    1a28:	a2 9f       	mul	r26, r18
    1a2a:	b0 01       	movw	r22, r0
    1a2c:	b3 9f       	mul	r27, r19
    1a2e:	c0 01       	movw	r24, r0
    1a30:	a3 9f       	mul	r26, r19
    1a32:	70 0d       	add	r23, r0
    1a34:	81 1d       	adc	r24, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	91 1d       	adc	r25, r1
    1a3a:	b2 9f       	mul	r27, r18
    1a3c:	70 0d       	add	r23, r0
    1a3e:	81 1d       	adc	r24, r1
    1a40:	11 24       	eor	r1, r1
    1a42:	91 1d       	adc	r25, r1
    1a44:	08 95       	ret

00001a46 <dtostrf>:
    1a46:	ef 92       	push	r14
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	e8 01       	movw	r28, r16
    1a52:	47 ff       	sbrs	r20, 7
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <dtostrf+0x14>
    1a56:	34 e1       	ldi	r19, 0x14	; 20
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <dtostrf+0x16>
    1a5a:	34 e0       	ldi	r19, 0x04	; 4
    1a5c:	e4 2f       	mov	r30, r20
    1a5e:	ff 27       	eor	r31, r31
    1a60:	e7 fd       	sbrc	r30, 7
    1a62:	f0 95       	com	r31
    1a64:	f7 ff       	sbrs	r31, 7
    1a66:	03 c0       	rjmp	.+6      	; 0x1a6e <dtostrf+0x28>
    1a68:	f1 95       	neg	r31
    1a6a:	e1 95       	neg	r30
    1a6c:	f1 09       	sbc	r31, r1
    1a6e:	e3 2e       	mov	r14, r19
    1a70:	02 2f       	mov	r16, r18
    1a72:	2e 2f       	mov	r18, r30
    1a74:	ae 01       	movw	r20, r28
    1a76:	2a d0       	rcall	.+84     	; 0x1acc <dtoa_prf>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ef 90       	pop	r14
    1a84:	08 95       	ret

00001a86 <__itoa_ncheck>:
    1a86:	bb 27       	eor	r27, r27
    1a88:	4a 30       	cpi	r20, 0x0A	; 10
    1a8a:	31 f4       	brne	.+12     	; 0x1a98 <__itoa_ncheck+0x12>
    1a8c:	99 23       	and	r25, r25
    1a8e:	22 f4       	brpl	.+8      	; 0x1a98 <__itoa_ncheck+0x12>
    1a90:	bd e2       	ldi	r27, 0x2D	; 45
    1a92:	90 95       	com	r25
    1a94:	81 95       	neg	r24
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <__utoa_common>

00001a9a <__utoa_ncheck>:
    1a9a:	bb 27       	eor	r27, r27

00001a9c <__utoa_common>:
    1a9c:	fb 01       	movw	r30, r22
    1a9e:	55 27       	eor	r21, r21
    1aa0:	aa 27       	eor	r26, r26
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	a4 17       	cp	r26, r20
    1aaa:	10 f0       	brcs	.+4      	; 0x1ab0 <__utoa_common+0x14>
    1aac:	a4 1b       	sub	r26, r20
    1aae:	83 95       	inc	r24
    1ab0:	50 51       	subi	r21, 0x10	; 16
    1ab2:	b9 f7       	brne	.-18     	; 0x1aa2 <__utoa_common+0x6>
    1ab4:	a0 5d       	subi	r26, 0xD0	; 208
    1ab6:	aa 33       	cpi	r26, 0x3A	; 58
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <__utoa_common+0x20>
    1aba:	a9 5d       	subi	r26, 0xD9	; 217
    1abc:	a1 93       	st	Z+, r26
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	79 f7       	brne	.-34     	; 0x1aa0 <__utoa_common+0x4>
    1ac2:	b1 11       	cpse	r27, r1
    1ac4:	b1 93       	st	Z+, r27
    1ac6:	11 92       	st	Z+, r1
    1ac8:	cb 01       	movw	r24, r22
    1aca:	55 c2       	rjmp	.+1194   	; 0x1f76 <strrev>

00001acc <dtoa_prf>:
    1acc:	6f 92       	push	r6
    1ace:	7f 92       	push	r7
    1ad0:	9f 92       	push	r9
    1ad2:	af 92       	push	r10
    1ad4:	bf 92       	push	r11
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	29 97       	sbiw	r28, 0x09	; 9
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	6a 01       	movw	r12, r20
    1af8:	b2 2e       	mov	r11, r18
    1afa:	10 2f       	mov	r17, r16
    1afc:	0c 33       	cpi	r16, 0x3C	; 60
    1afe:	20 f4       	brcc	.+8      	; 0x1b08 <dtoa_prf+0x3c>
    1b00:	ff 24       	eor	r15, r15
    1b02:	f3 94       	inc	r15
    1b04:	f0 0e       	add	r15, r16
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <dtoa_prf+0x40>
    1b08:	4c e3       	ldi	r20, 0x3C	; 60
    1b0a:	f4 2e       	mov	r15, r20
    1b0c:	0f 2d       	mov	r16, r15
    1b0e:	27 e0       	ldi	r18, 0x07	; 7
    1b10:	ae 01       	movw	r20, r28
    1b12:	4f 5f       	subi	r20, 0xFF	; 255
    1b14:	5f 4f       	sbci	r21, 0xFF	; 255
    1b16:	57 d1       	rcall	.+686    	; 0x1dc6 <__ftoa_engine>
    1b18:	79 81       	ldd	r23, Y+1	; 0x01
    1b1a:	27 2f       	mov	r18, r23
    1b1c:	29 70       	andi	r18, 0x09	; 9
    1b1e:	21 30       	cpi	r18, 0x01	; 1
    1b20:	31 f0       	breq	.+12     	; 0x1b2e <dtoa_prf+0x62>
    1b22:	e1 fc       	sbrc	r14, 1
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <dtoa_prf+0x66>
    1b26:	e0 fc       	sbrc	r14, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <dtoa_prf+0x6a>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <dtoa_prf+0x6c>
    1b2e:	6d e2       	ldi	r22, 0x2D	; 45
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <dtoa_prf+0x6c>
    1b32:	6b e2       	ldi	r22, 0x2B	; 43
    1b34:	01 c0       	rjmp	.+2      	; 0x1b38 <dtoa_prf+0x6c>
    1b36:	60 e2       	ldi	r22, 0x20	; 32
    1b38:	ae 2d       	mov	r26, r14
    1b3a:	a0 71       	andi	r26, 0x10	; 16
    1b3c:	73 ff       	sbrs	r23, 3
    1b3e:	36 c0       	rjmp	.+108    	; 0x1bac <dtoa_prf+0xe0>
    1b40:	66 23       	and	r22, r22
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <dtoa_prf+0x7c>
    1b44:	84 e0       	ldi	r24, 0x04	; 4
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <dtoa_prf+0x7e>
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	8b 15       	cp	r24, r11
    1b4c:	10 f4       	brcc	.+4      	; 0x1b52 <dtoa_prf+0x86>
    1b4e:	b8 1a       	sub	r11, r24
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <dtoa_prf+0x88>
    1b52:	b1 2c       	mov	r11, r1
    1b54:	a1 11       	cpse	r26, r1
    1b56:	0b c0       	rjmp	.+22     	; 0x1b6e <dtoa_prf+0xa2>
    1b58:	f6 01       	movw	r30, r12
    1b5a:	8b 2d       	mov	r24, r11
    1b5c:	90 e2       	ldi	r25, 0x20	; 32
    1b5e:	88 23       	and	r24, r24
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <dtoa_prf+0x9c>
    1b62:	91 93       	st	Z+, r25
    1b64:	81 50       	subi	r24, 0x01	; 1
    1b66:	fb cf       	rjmp	.-10     	; 0x1b5e <dtoa_prf+0x92>
    1b68:	cb 0c       	add	r12, r11
    1b6a:	d1 1c       	adc	r13, r1
    1b6c:	b1 2c       	mov	r11, r1
    1b6e:	66 23       	and	r22, r22
    1b70:	31 f0       	breq	.+12     	; 0x1b7e <dtoa_prf+0xb2>
    1b72:	f6 01       	movw	r30, r12
    1b74:	60 83       	st	Z, r22
    1b76:	96 01       	movw	r18, r12
    1b78:	2f 5f       	subi	r18, 0xFF	; 255
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	69 01       	movw	r12, r18
    1b7e:	c6 01       	movw	r24, r12
    1b80:	03 96       	adiw	r24, 0x03	; 3
    1b82:	e2 fe       	sbrs	r14, 2
    1b84:	05 c0       	rjmp	.+10     	; 0x1b90 <dtoa_prf+0xc4>
    1b86:	2e e4       	ldi	r18, 0x4E	; 78
    1b88:	f6 01       	movw	r30, r12
    1b8a:	20 83       	st	Z, r18
    1b8c:	31 e4       	ldi	r19, 0x41	; 65
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <dtoa_prf+0xcc>
    1b90:	2e e6       	ldi	r18, 0x6E	; 110
    1b92:	f6 01       	movw	r30, r12
    1b94:	20 83       	st	Z, r18
    1b96:	31 e6       	ldi	r19, 0x61	; 97
    1b98:	31 83       	std	Z+1, r19	; 0x01
    1b9a:	22 83       	std	Z+2, r18	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	2b 2d       	mov	r18, r11
    1ba0:	30 e2       	ldi	r19, 0x20	; 32
    1ba2:	22 23       	and	r18, r18
    1ba4:	f1 f1       	breq	.+124    	; 0x1c22 <dtoa_prf+0x156>
    1ba6:	31 93       	st	Z+, r19
    1ba8:	21 50       	subi	r18, 0x01	; 1
    1baa:	fb cf       	rjmp	.-10     	; 0x1ba2 <dtoa_prf+0xd6>
    1bac:	72 ff       	sbrs	r23, 2
    1bae:	40 c0       	rjmp	.+128    	; 0x1c30 <dtoa_prf+0x164>
    1bb0:	66 23       	and	r22, r22
    1bb2:	11 f0       	breq	.+4      	; 0x1bb8 <dtoa_prf+0xec>
    1bb4:	84 e0       	ldi	r24, 0x04	; 4
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <dtoa_prf+0xee>
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	8b 15       	cp	r24, r11
    1bbc:	10 f4       	brcc	.+4      	; 0x1bc2 <dtoa_prf+0xf6>
    1bbe:	b8 1a       	sub	r11, r24
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <dtoa_prf+0xf8>
    1bc2:	b1 2c       	mov	r11, r1
    1bc4:	a1 11       	cpse	r26, r1
    1bc6:	0b c0       	rjmp	.+22     	; 0x1bde <dtoa_prf+0x112>
    1bc8:	f6 01       	movw	r30, r12
    1bca:	8b 2d       	mov	r24, r11
    1bcc:	90 e2       	ldi	r25, 0x20	; 32
    1bce:	88 23       	and	r24, r24
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <dtoa_prf+0x10c>
    1bd2:	91 93       	st	Z+, r25
    1bd4:	81 50       	subi	r24, 0x01	; 1
    1bd6:	fb cf       	rjmp	.-10     	; 0x1bce <dtoa_prf+0x102>
    1bd8:	cb 0c       	add	r12, r11
    1bda:	d1 1c       	adc	r13, r1
    1bdc:	b1 2c       	mov	r11, r1
    1bde:	66 23       	and	r22, r22
    1be0:	31 f0       	breq	.+12     	; 0x1bee <dtoa_prf+0x122>
    1be2:	f6 01       	movw	r30, r12
    1be4:	60 83       	st	Z, r22
    1be6:	96 01       	movw	r18, r12
    1be8:	2f 5f       	subi	r18, 0xFF	; 255
    1bea:	3f 4f       	sbci	r19, 0xFF	; 255
    1bec:	69 01       	movw	r12, r18
    1bee:	c6 01       	movw	r24, r12
    1bf0:	03 96       	adiw	r24, 0x03	; 3
    1bf2:	e2 fe       	sbrs	r14, 2
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <dtoa_prf+0x138>
    1bf6:	29 e4       	ldi	r18, 0x49	; 73
    1bf8:	f6 01       	movw	r30, r12
    1bfa:	20 83       	st	Z, r18
    1bfc:	2e e4       	ldi	r18, 0x4E	; 78
    1bfe:	21 83       	std	Z+1, r18	; 0x01
    1c00:	26 e4       	ldi	r18, 0x46	; 70
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <dtoa_prf+0x144>
    1c04:	29 e6       	ldi	r18, 0x69	; 105
    1c06:	f6 01       	movw	r30, r12
    1c08:	20 83       	st	Z, r18
    1c0a:	2e e6       	ldi	r18, 0x6E	; 110
    1c0c:	21 83       	std	Z+1, r18	; 0x01
    1c0e:	26 e6       	ldi	r18, 0x66	; 102
    1c10:	22 83       	std	Z+2, r18	; 0x02
    1c12:	fc 01       	movw	r30, r24
    1c14:	2b 2d       	mov	r18, r11
    1c16:	30 e2       	ldi	r19, 0x20	; 32
    1c18:	22 23       	and	r18, r18
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <dtoa_prf+0x156>
    1c1c:	31 93       	st	Z+, r19
    1c1e:	21 50       	subi	r18, 0x01	; 1
    1c20:	fb cf       	rjmp	.-10     	; 0x1c18 <dtoa_prf+0x14c>
    1c22:	fc 01       	movw	r30, r24
    1c24:	eb 0d       	add	r30, r11
    1c26:	f1 1d       	adc	r31, r1
    1c28:	10 82       	st	Z, r1
    1c2a:	8e ef       	ldi	r24, 0xFE	; 254
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	b7 c0       	rjmp	.+366    	; 0x1d9e <dtoa_prf+0x2d2>
    1c30:	b1 e0       	ldi	r27, 0x01	; 1
    1c32:	61 11       	cpse	r22, r1
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <dtoa_prf+0x16c>
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	4b 2f       	mov	r20, r27
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	18 16       	cp	r1, r24
    1c3e:	19 06       	cpc	r1, r25
    1c40:	24 f4       	brge	.+8      	; 0x1c4a <dtoa_prf+0x17e>
    1c42:	9c 01       	movw	r18, r24
    1c44:	2f 5f       	subi	r18, 0xFF	; 255
    1c46:	3f 4f       	sbci	r19, 0xFF	; 255
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <dtoa_prf+0x182>
    1c4a:	21 e0       	ldi	r18, 0x01	; 1
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	24 0f       	add	r18, r20
    1c50:	35 1f       	adc	r19, r21
    1c52:	11 23       	and	r17, r17
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <dtoa_prf+0x194>
    1c56:	41 2f       	mov	r20, r17
    1c58:	50 e0       	ldi	r21, 0x00	; 0
    1c5a:	4f 5f       	subi	r20, 0xFF	; 255
    1c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <dtoa_prf+0x198>
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	42 0f       	add	r20, r18
    1c66:	53 1f       	adc	r21, r19
    1c68:	2b 2d       	mov	r18, r11
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	42 17       	cp	r20, r18
    1c6e:	53 07       	cpc	r21, r19
    1c70:	14 f4       	brge	.+4      	; 0x1c76 <dtoa_prf+0x1aa>
    1c72:	b4 1a       	sub	r11, r20
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <dtoa_prf+0x1ac>
    1c76:	b1 2c       	mov	r11, r1
    1c78:	2e 2d       	mov	r18, r14
    1c7a:	28 71       	andi	r18, 0x18	; 24
    1c7c:	59 f4       	brne	.+22     	; 0x1c94 <dtoa_prf+0x1c8>
    1c7e:	f6 01       	movw	r30, r12
    1c80:	2b 2d       	mov	r18, r11
    1c82:	30 e2       	ldi	r19, 0x20	; 32
    1c84:	22 23       	and	r18, r18
    1c86:	19 f0       	breq	.+6      	; 0x1c8e <dtoa_prf+0x1c2>
    1c88:	31 93       	st	Z+, r19
    1c8a:	21 50       	subi	r18, 0x01	; 1
    1c8c:	fb cf       	rjmp	.-10     	; 0x1c84 <dtoa_prf+0x1b8>
    1c8e:	cb 0c       	add	r12, r11
    1c90:	d1 1c       	adc	r13, r1
    1c92:	b1 2c       	mov	r11, r1
    1c94:	bb 23       	and	r27, r27
    1c96:	31 f0       	breq	.+12     	; 0x1ca4 <dtoa_prf+0x1d8>
    1c98:	f6 01       	movw	r30, r12
    1c9a:	60 83       	st	Z, r22
    1c9c:	96 01       	movw	r18, r12
    1c9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	69 01       	movw	r12, r18
    1ca4:	a1 11       	cpse	r26, r1
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <dtoa_prf+0x1f2>
    1ca8:	f6 01       	movw	r30, r12
    1caa:	2b 2d       	mov	r18, r11
    1cac:	30 e3       	ldi	r19, 0x30	; 48
    1cae:	22 23       	and	r18, r18
    1cb0:	19 f0       	breq	.+6      	; 0x1cb8 <dtoa_prf+0x1ec>
    1cb2:	31 93       	st	Z+, r19
    1cb4:	21 50       	subi	r18, 0x01	; 1
    1cb6:	fb cf       	rjmp	.-10     	; 0x1cae <dtoa_prf+0x1e2>
    1cb8:	cb 0c       	add	r12, r11
    1cba:	d1 1c       	adc	r13, r1
    1cbc:	b1 2c       	mov	r11, r1
    1cbe:	f8 0e       	add	r15, r24
    1cc0:	0a 81       	ldd	r16, Y+2	; 0x02
    1cc2:	37 2f       	mov	r19, r23
    1cc4:	30 71       	andi	r19, 0x10	; 16
    1cc6:	a3 2e       	mov	r10, r19
    1cc8:	74 ff       	sbrs	r23, 4
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <dtoa_prf+0x206>
    1ccc:	01 33       	cpi	r16, 0x31	; 49
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <dtoa_prf+0x206>
    1cd0:	fa 94       	dec	r15
    1cd2:	1f 14       	cp	r1, r15
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <dtoa_prf+0x214>
    1cd6:	2f 2d       	mov	r18, r15
    1cd8:	29 30       	cpi	r18, 0x09	; 9
    1cda:	18 f0       	brcs	.+6      	; 0x1ce2 <dtoa_prf+0x216>
    1cdc:	28 e0       	ldi	r18, 0x08	; 8
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <dtoa_prf+0x216>
    1ce0:	21 e0       	ldi	r18, 0x01	; 1
    1ce2:	68 2f       	mov	r22, r24
    1ce4:	39 2f       	mov	r19, r25
    1ce6:	97 ff       	sbrs	r25, 7
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <dtoa_prf+0x222>
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	46 2f       	mov	r20, r22
    1cf0:	53 2f       	mov	r21, r19
    1cf2:	61 2c       	mov	r6, r1
    1cf4:	71 2c       	mov	r7, r1
    1cf6:	3e e2       	ldi	r19, 0x2E	; 46
    1cf8:	93 2e       	mov	r9, r19
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	62 1b       	sub	r22, r18
    1cfe:	71 09       	sbc	r23, r1
    1d00:	9b 01       	movw	r18, r22
    1d02:	dc 01       	movw	r26, r24
    1d04:	a4 1b       	sub	r26, r20
    1d06:	b5 0b       	sbc	r27, r21
    1d08:	e1 e0       	ldi	r30, 0x01	; 1
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	ec 0f       	add	r30, r28
    1d0e:	fd 1f       	adc	r31, r29
    1d10:	ae 0f       	add	r26, r30
    1d12:	bf 1f       	adc	r27, r31
    1d14:	e1 2e       	mov	r14, r17
    1d16:	f1 2c       	mov	r15, r1
    1d18:	f1 94       	neg	r15
    1d1a:	e1 94       	neg	r14
    1d1c:	f1 08       	sbc	r15, r1
    1d1e:	4f 3f       	cpi	r20, 0xFF	; 255
    1d20:	ff ef       	ldi	r31, 0xFF	; 255
    1d22:	5f 07       	cpc	r21, r31
    1d24:	31 f4       	brne	.+12     	; 0x1d32 <dtoa_prf+0x266>
    1d26:	f6 01       	movw	r30, r12
    1d28:	90 82       	st	Z, r9
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	6f 5f       	subi	r22, 0xFF	; 255
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	6b 01       	movw	r12, r22
    1d32:	84 17       	cp	r24, r20
    1d34:	95 07       	cpc	r25, r21
    1d36:	4c f0       	brlt	.+18     	; 0x1d4a <dtoa_prf+0x27e>
    1d38:	24 17       	cp	r18, r20
    1d3a:	35 07       	cpc	r19, r21
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <dtoa_prf+0x27e>
    1d3e:	bd 01       	movw	r22, r26
    1d40:	66 0d       	add	r22, r6
    1d42:	77 1d       	adc	r23, r7
    1d44:	fb 01       	movw	r30, r22
    1d46:	11 81       	ldd	r17, Z+1	; 0x01
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <dtoa_prf+0x280>
    1d4a:	10 e3       	ldi	r17, 0x30	; 48
    1d4c:	41 50       	subi	r20, 0x01	; 1
    1d4e:	51 09       	sbc	r21, r1
    1d50:	ff ef       	ldi	r31, 0xFF	; 255
    1d52:	6f 1a       	sub	r6, r31
    1d54:	7f 0a       	sbc	r7, r31
    1d56:	b6 01       	movw	r22, r12
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	4e 15       	cp	r20, r14
    1d5e:	5f 05       	cpc	r21, r15
    1d60:	24 f0       	brlt	.+8      	; 0x1d6a <dtoa_prf+0x29e>
    1d62:	f6 01       	movw	r30, r12
    1d64:	10 83       	st	Z, r17
    1d66:	6b 01       	movw	r12, r22
    1d68:	da cf       	rjmp	.-76     	; 0x1d1e <dtoa_prf+0x252>
    1d6a:	48 17       	cp	r20, r24
    1d6c:	59 07       	cpc	r21, r25
    1d6e:	39 f4       	brne	.+14     	; 0x1d7e <dtoa_prf+0x2b2>
    1d70:	06 33       	cpi	r16, 0x36	; 54
    1d72:	20 f4       	brcc	.+8      	; 0x1d7c <dtoa_prf+0x2b0>
    1d74:	05 33       	cpi	r16, 0x35	; 53
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <dtoa_prf+0x2b2>
    1d78:	a1 10       	cpse	r10, r1
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <dtoa_prf+0x2b2>
    1d7c:	11 e3       	ldi	r17, 0x31	; 49
    1d7e:	f6 01       	movw	r30, r12
    1d80:	10 83       	st	Z, r17
    1d82:	fb 01       	movw	r30, r22
    1d84:	8b 2d       	mov	r24, r11
    1d86:	90 e2       	ldi	r25, 0x20	; 32
    1d88:	88 23       	and	r24, r24
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <dtoa_prf+0x2c6>
    1d8c:	91 93       	st	Z+, r25
    1d8e:	81 50       	subi	r24, 0x01	; 1
    1d90:	fb cf       	rjmp	.-10     	; 0x1d88 <dtoa_prf+0x2bc>
    1d92:	fb 01       	movw	r30, r22
    1d94:	eb 0d       	add	r30, r11
    1d96:	f1 1d       	adc	r31, r1
    1d98:	10 82       	st	Z, r1
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	29 96       	adiw	r28, 0x09	; 9
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	bf 90       	pop	r11
    1dbc:	af 90       	pop	r10
    1dbe:	9f 90       	pop	r9
    1dc0:	7f 90       	pop	r7
    1dc2:	6f 90       	pop	r6
    1dc4:	08 95       	ret

00001dc6 <__ftoa_engine>:
    1dc6:	28 30       	cpi	r18, 0x08	; 8
    1dc8:	08 f0       	brcs	.+2      	; 0x1dcc <__ftoa_engine+0x6>
    1dca:	27 e0       	ldi	r18, 0x07	; 7
    1dcc:	33 27       	eor	r19, r19
    1dce:	da 01       	movw	r26, r20
    1dd0:	99 0f       	add	r25, r25
    1dd2:	31 1d       	adc	r19, r1
    1dd4:	87 fd       	sbrc	r24, 7
    1dd6:	91 60       	ori	r25, 0x01	; 1
    1dd8:	00 96       	adiw	r24, 0x00	; 0
    1dda:	61 05       	cpc	r22, r1
    1ddc:	71 05       	cpc	r23, r1
    1dde:	39 f4       	brne	.+14     	; 0x1dee <__ftoa_engine+0x28>
    1de0:	32 60       	ori	r19, 0x02	; 2
    1de2:	2e 5f       	subi	r18, 0xFE	; 254
    1de4:	3d 93       	st	X+, r19
    1de6:	30 e3       	ldi	r19, 0x30	; 48
    1de8:	2a 95       	dec	r18
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <__ftoa_engine+0x1e>
    1dec:	08 95       	ret
    1dee:	9f 3f       	cpi	r25, 0xFF	; 255
    1df0:	30 f0       	brcs	.+12     	; 0x1dfe <__ftoa_engine+0x38>
    1df2:	80 38       	cpi	r24, 0x80	; 128
    1df4:	71 05       	cpc	r23, r1
    1df6:	61 05       	cpc	r22, r1
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <__ftoa_engine+0x36>
    1dfa:	3c 5f       	subi	r19, 0xFC	; 252
    1dfc:	3c 5f       	subi	r19, 0xFC	; 252
    1dfe:	3d 93       	st	X+, r19
    1e00:	91 30       	cpi	r25, 0x01	; 1
    1e02:	08 f0       	brcs	.+2      	; 0x1e06 <__ftoa_engine+0x40>
    1e04:	80 68       	ori	r24, 0x80	; 128
    1e06:	91 1d       	adc	r25, r1
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	1f 93       	push	r17
    1e0e:	0f 93       	push	r16
    1e10:	ff 92       	push	r15
    1e12:	ef 92       	push	r14
    1e14:	19 2f       	mov	r17, r25
    1e16:	98 7f       	andi	r25, 0xF8	; 248
    1e18:	96 95       	lsr	r25
    1e1a:	e9 2f       	mov	r30, r25
    1e1c:	96 95       	lsr	r25
    1e1e:	96 95       	lsr	r25
    1e20:	e9 0f       	add	r30, r25
    1e22:	ff 27       	eor	r31, r31
    1e24:	e4 59       	subi	r30, 0x94	; 148
    1e26:	fe 4f       	sbci	r31, 0xFE	; 254
    1e28:	99 27       	eor	r25, r25
    1e2a:	33 27       	eor	r19, r19
    1e2c:	ee 24       	eor	r14, r14
    1e2e:	ff 24       	eor	r15, r15
    1e30:	a7 01       	movw	r20, r14
    1e32:	e7 01       	movw	r28, r14
    1e34:	05 90       	lpm	r0, Z+
    1e36:	08 94       	sec
    1e38:	07 94       	ror	r0
    1e3a:	28 f4       	brcc	.+10     	; 0x1e46 <__ftoa_engine+0x80>
    1e3c:	36 0f       	add	r19, r22
    1e3e:	e7 1e       	adc	r14, r23
    1e40:	f8 1e       	adc	r15, r24
    1e42:	49 1f       	adc	r20, r25
    1e44:	51 1d       	adc	r21, r1
    1e46:	66 0f       	add	r22, r22
    1e48:	77 1f       	adc	r23, r23
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	06 94       	lsr	r0
    1e50:	a1 f7       	brne	.-24     	; 0x1e3a <__ftoa_engine+0x74>
    1e52:	05 90       	lpm	r0, Z+
    1e54:	07 94       	ror	r0
    1e56:	28 f4       	brcc	.+10     	; 0x1e62 <__ftoa_engine+0x9c>
    1e58:	e7 0e       	add	r14, r23
    1e5a:	f8 1e       	adc	r15, r24
    1e5c:	49 1f       	adc	r20, r25
    1e5e:	56 1f       	adc	r21, r22
    1e60:	c1 1d       	adc	r28, r1
    1e62:	77 0f       	add	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	66 1f       	adc	r22, r22
    1e6a:	06 94       	lsr	r0
    1e6c:	a1 f7       	brne	.-24     	; 0x1e56 <__ftoa_engine+0x90>
    1e6e:	05 90       	lpm	r0, Z+
    1e70:	07 94       	ror	r0
    1e72:	28 f4       	brcc	.+10     	; 0x1e7e <__ftoa_engine+0xb8>
    1e74:	f8 0e       	add	r15, r24
    1e76:	49 1f       	adc	r20, r25
    1e78:	56 1f       	adc	r21, r22
    1e7a:	c7 1f       	adc	r28, r23
    1e7c:	d1 1d       	adc	r29, r1
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	66 1f       	adc	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	06 94       	lsr	r0
    1e88:	a1 f7       	brne	.-24     	; 0x1e72 <__ftoa_engine+0xac>
    1e8a:	05 90       	lpm	r0, Z+
    1e8c:	07 94       	ror	r0
    1e8e:	20 f4       	brcc	.+8      	; 0x1e98 <__ftoa_engine+0xd2>
    1e90:	49 0f       	add	r20, r25
    1e92:	56 1f       	adc	r21, r22
    1e94:	c7 1f       	adc	r28, r23
    1e96:	d8 1f       	adc	r29, r24
    1e98:	99 0f       	add	r25, r25
    1e9a:	66 1f       	adc	r22, r22
    1e9c:	77 1f       	adc	r23, r23
    1e9e:	88 1f       	adc	r24, r24
    1ea0:	06 94       	lsr	r0
    1ea2:	a9 f7       	brne	.-22     	; 0x1e8e <__ftoa_engine+0xc8>
    1ea4:	84 91       	lpm	r24, Z
    1ea6:	10 95       	com	r17
    1ea8:	17 70       	andi	r17, 0x07	; 7
    1eaa:	41 f0       	breq	.+16     	; 0x1ebc <__ftoa_engine+0xf6>
    1eac:	d6 95       	lsr	r29
    1eae:	c7 95       	ror	r28
    1eb0:	57 95       	ror	r21
    1eb2:	47 95       	ror	r20
    1eb4:	f7 94       	ror	r15
    1eb6:	e7 94       	ror	r14
    1eb8:	1a 95       	dec	r17
    1eba:	c1 f7       	brne	.-16     	; 0x1eac <__ftoa_engine+0xe6>
    1ebc:	e2 e1       	ldi	r30, 0x12	; 18
    1ebe:	f1 e0       	ldi	r31, 0x01	; 1
    1ec0:	68 94       	set
    1ec2:	15 90       	lpm	r1, Z+
    1ec4:	15 91       	lpm	r17, Z+
    1ec6:	35 91       	lpm	r19, Z+
    1ec8:	65 91       	lpm	r22, Z+
    1eca:	95 91       	lpm	r25, Z+
    1ecc:	05 90       	lpm	r0, Z+
    1ece:	7f e2       	ldi	r23, 0x2F	; 47
    1ed0:	73 95       	inc	r23
    1ed2:	e1 18       	sub	r14, r1
    1ed4:	f1 0a       	sbc	r15, r17
    1ed6:	43 0b       	sbc	r20, r19
    1ed8:	56 0b       	sbc	r21, r22
    1eda:	c9 0b       	sbc	r28, r25
    1edc:	d0 09       	sbc	r29, r0
    1ede:	c0 f7       	brcc	.-16     	; 0x1ed0 <__ftoa_engine+0x10a>
    1ee0:	e1 0c       	add	r14, r1
    1ee2:	f1 1e       	adc	r15, r17
    1ee4:	43 1f       	adc	r20, r19
    1ee6:	56 1f       	adc	r21, r22
    1ee8:	c9 1f       	adc	r28, r25
    1eea:	d0 1d       	adc	r29, r0
    1eec:	7e f4       	brtc	.+30     	; 0x1f0c <__ftoa_engine+0x146>
    1eee:	70 33       	cpi	r23, 0x30	; 48
    1ef0:	11 f4       	brne	.+4      	; 0x1ef6 <__ftoa_engine+0x130>
    1ef2:	8a 95       	dec	r24
    1ef4:	e6 cf       	rjmp	.-52     	; 0x1ec2 <__ftoa_engine+0xfc>
    1ef6:	e8 94       	clt
    1ef8:	01 50       	subi	r16, 0x01	; 1
    1efa:	30 f0       	brcs	.+12     	; 0x1f08 <__ftoa_engine+0x142>
    1efc:	08 0f       	add	r16, r24
    1efe:	0a f4       	brpl	.+2      	; 0x1f02 <__ftoa_engine+0x13c>
    1f00:	00 27       	eor	r16, r16
    1f02:	02 17       	cp	r16, r18
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <__ftoa_engine+0x142>
    1f06:	20 2f       	mov	r18, r16
    1f08:	23 95       	inc	r18
    1f0a:	02 2f       	mov	r16, r18
    1f0c:	7a 33       	cpi	r23, 0x3A	; 58
    1f0e:	28 f0       	brcs	.+10     	; 0x1f1a <__ftoa_engine+0x154>
    1f10:	79 e3       	ldi	r23, 0x39	; 57
    1f12:	7d 93       	st	X+, r23
    1f14:	2a 95       	dec	r18
    1f16:	e9 f7       	brne	.-6      	; 0x1f12 <__ftoa_engine+0x14c>
    1f18:	10 c0       	rjmp	.+32     	; 0x1f3a <__ftoa_engine+0x174>
    1f1a:	7d 93       	st	X+, r23
    1f1c:	2a 95       	dec	r18
    1f1e:	89 f6       	brne	.-94     	; 0x1ec2 <__ftoa_engine+0xfc>
    1f20:	06 94       	lsr	r0
    1f22:	97 95       	ror	r25
    1f24:	67 95       	ror	r22
    1f26:	37 95       	ror	r19
    1f28:	17 95       	ror	r17
    1f2a:	17 94       	ror	r1
    1f2c:	e1 18       	sub	r14, r1
    1f2e:	f1 0a       	sbc	r15, r17
    1f30:	43 0b       	sbc	r20, r19
    1f32:	56 0b       	sbc	r21, r22
    1f34:	c9 0b       	sbc	r28, r25
    1f36:	d0 09       	sbc	r29, r0
    1f38:	98 f0       	brcs	.+38     	; 0x1f60 <__ftoa_engine+0x19a>
    1f3a:	23 95       	inc	r18
    1f3c:	7e 91       	ld	r23, -X
    1f3e:	73 95       	inc	r23
    1f40:	7a 33       	cpi	r23, 0x3A	; 58
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <__ftoa_engine+0x180>
    1f44:	70 e3       	ldi	r23, 0x30	; 48
    1f46:	7c 93       	st	X, r23
    1f48:	20 13       	cpse	r18, r16
    1f4a:	b8 f7       	brcc	.-18     	; 0x1f3a <__ftoa_engine+0x174>
    1f4c:	7e 91       	ld	r23, -X
    1f4e:	70 61       	ori	r23, 0x10	; 16
    1f50:	7d 93       	st	X+, r23
    1f52:	30 f0       	brcs	.+12     	; 0x1f60 <__ftoa_engine+0x19a>
    1f54:	83 95       	inc	r24
    1f56:	71 e3       	ldi	r23, 0x31	; 49
    1f58:	7d 93       	st	X+, r23
    1f5a:	70 e3       	ldi	r23, 0x30	; 48
    1f5c:	2a 95       	dec	r18
    1f5e:	e1 f7       	brne	.-8      	; 0x1f58 <__ftoa_engine+0x192>
    1f60:	11 24       	eor	r1, r1
    1f62:	ef 90       	pop	r14
    1f64:	ff 90       	pop	r15
    1f66:	0f 91       	pop	r16
    1f68:	1f 91       	pop	r17
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	99 27       	eor	r25, r25
    1f70:	87 fd       	sbrc	r24, 7
    1f72:	90 95       	com	r25
    1f74:	08 95       	ret

00001f76 <strrev>:
    1f76:	dc 01       	movw	r26, r24
    1f78:	fc 01       	movw	r30, r24
    1f7a:	67 2f       	mov	r22, r23
    1f7c:	71 91       	ld	r23, Z+
    1f7e:	77 23       	and	r23, r23
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <strrev+0x4>
    1f82:	32 97       	sbiw	r30, 0x02	; 2
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <strrev+0x18>
    1f86:	7c 91       	ld	r23, X
    1f88:	6d 93       	st	X+, r22
    1f8a:	70 83       	st	Z, r23
    1f8c:	62 91       	ld	r22, -Z
    1f8e:	ae 17       	cp	r26, r30
    1f90:	bf 07       	cpc	r27, r31
    1f92:	c8 f3       	brcs	.-14     	; 0x1f86 <strrev+0x10>
    1f94:	08 95       	ret

00001f96 <_exit>:
    1f96:	f8 94       	cli

00001f98 <__stop_program>:
    1f98:	ff cf       	rjmp	.-2      	; 0x1f98 <__stop_program>
