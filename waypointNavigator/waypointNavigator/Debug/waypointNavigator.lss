
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  0000081e  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800238  00800238  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114f  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00001bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b17  00000000  00000000  000023c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000783  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c94  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  000046c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c0       	rjmp	.+328    	; 0x16e <__vector_9>
  26:	00 00       	nop
  28:	e4 c0       	rjmp	.+456    	; 0x1f2 <__vector_10>
  2a:	00 00       	nop
  2c:	24 c1       	rjmp	.+584    	; 0x276 <__vector_11>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c1       	rjmp	.+668    	; 0x2fa <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 35       	cpi	r26, 0x54	; 84
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	01 d2       	rcall	.+1026   	; 0x522 <main>
 120:	7c c3       	rjmp	.+1784   	; 0x81a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z11debug_printPKc>:

void debug_print(const char* debugString)
{
	if(DEBUG == true)	//only print debug messages if debugging is enabled.
	{
		USART_putstring(USART_PC,debugString);		//Just in case USART calls add overhead or slow system down too much later on, easy to disable all debug messages.
 124:	bc 01       	movw	r22, r24
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	e7 d1       	rcall	.+974    	; 0x4fa <_Z15USART_putstringiPKc>
		USART_putstring(USART_PC,"\n\r");
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	72 e0       	ldi	r23, 0x02	; 2
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	e2 c1       	rjmp	.+964    	; 0x4fa <_Z15USART_putstringiPKc>
 136:	08 95       	ret

00000138 <_Z11debug_printi>:
	}
}

void debug_print(int debugNum)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	2a 97       	sbiw	r28, 0x0a	; 10
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	2f d3       	rcall	.+1630   	; 0x7b4 <__itoa_ncheck>
	if(DEBUG == true)	//only print debug messages if debugging is enabled.
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	e4 df       	rcall	.-56     	; 0x124 <_Z11debug_printPKc>
	}
 15c:	2a 96       	adiw	r28, 0x0a	; 10
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <__vector_9>:
uint16_t rxInputGear;
uint16_t rxInputAux;

//Pin Change Interrupt for reading Throttle Value//
ISR(PCINT0_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	0b b6       	in	r0, 0x3b	; 59
 17a:	0f 92       	push	r0
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	//if pin input is attached to is high
	if(RX_PORT & _BV(THROTTLE_IN_PIN))
 194:	18 9b       	sbis	0x03, 0	; 3
 196:	0a c0       	rjmp	.+20     	; 0x1ac <__vector_9+0x3e>
	{
		ulThrottleStart = micros();
 198:	06 d1       	rcall	.+524    	; 0x3a6 <_Z6microsv>
 19a:	60 93 40 02 	sts	0x0240, r22
 19e:	70 93 41 02 	sts	0x0241, r23
 1a2:	80 93 42 02 	sts	0x0242, r24
 1a6:	90 93 43 02 	sts	0x0243, r25
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <__vector_9+0x5e>
	}
	else
	{
		unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);
 1ac:	fc d0       	rcall	.+504    	; 0x3a6 <_Z6microsv>
 1ae:	20 91 40 02 	lds	r18, 0x0240
 1b2:	30 91 41 02 	lds	r19, 0x0241
 1b6:	62 1b       	sub	r22, r18
 1b8:	73 0b       	sbc	r23, r19
 1ba:	70 93 4a 02 	sts	0x024A, r23
 1be:	60 93 49 02 	sts	0x0249, r22
		rxUpdateFlagsShared |= THROTTLE_FLAG;
 1c2:	80 91 44 02 	lds	r24, 0x0244
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	80 93 44 02 	sts	0x0244, r24
	}
	
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0b be       	out	0x3b, r0	; 59
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <__vector_10>:

//Pin Change Interrupt for reading Aileron Value//
ISR(PCINT1_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	0b b6       	in	r0, 0x3b	; 59
 1fe:	0f 92       	push	r0
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	//if pin input is attached to is high
	if(RX_PORT & _BV(AILERON_IN_PIN))
 218:	19 9b       	sbis	0x03, 1	; 3
 21a:	0a c0       	rjmp	.+20     	; 0x230 <__vector_10+0x3e>
	{
		ulAileronStart = micros();
 21c:	c4 d0       	rcall	.+392    	; 0x3a6 <_Z6microsv>
 21e:	60 93 3c 02 	sts	0x023C, r22
 222:	70 93 3d 02 	sts	0x023D, r23
 226:	80 93 3e 02 	sts	0x023E, r24
 22a:	90 93 3f 02 	sts	0x023F, r25
 22e:	10 c0       	rjmp	.+32     	; 0x250 <__vector_10+0x5e>
	}
	else
	{
		unAileronInShared = (uint16_t)(micros()-ulAileronStart);
 230:	ba d0       	rcall	.+372    	; 0x3a6 <_Z6microsv>
 232:	20 91 3c 02 	lds	r18, 0x023C
 236:	30 91 3d 02 	lds	r19, 0x023D
 23a:	62 1b       	sub	r22, r18
 23c:	73 0b       	sbc	r23, r19
 23e:	70 93 48 02 	sts	0x0248, r23
 242:	60 93 47 02 	sts	0x0247, r22
		rxUpdateFlagsShared |= AILERON_FLAG;
 246:	80 91 44 02 	lds	r24, 0x0244
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 93 44 02 	sts	0x0244, r24
	}
	
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0b be       	out	0x3b, r0	; 59
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_11>:

//Pin Change Interrupt for reading Elevator Value//
ISR(PCINT2_vect)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	0b b6       	in	r0, 0x3b	; 59
 282:	0f 92       	push	r0
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	//if pin input is attached to is high
	if(RX_PORT & _BV(ELEVATOR_IN_PIN))
 29c:	1a 9b       	sbis	0x03, 2	; 3
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <__vector_11+0x3e>
	{
		ulElevatorStart = micros();
 2a0:	82 d0       	rcall	.+260    	; 0x3a6 <_Z6microsv>
 2a2:	60 93 38 02 	sts	0x0238, r22
 2a6:	70 93 39 02 	sts	0x0239, r23
 2aa:	80 93 3a 02 	sts	0x023A, r24
 2ae:	90 93 3b 02 	sts	0x023B, r25
 2b2:	10 c0       	rjmp	.+32     	; 0x2d4 <__vector_11+0x5e>
	}
	else
	{
		unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
 2b4:	78 d0       	rcall	.+240    	; 0x3a6 <_Z6microsv>
 2b6:	20 91 38 02 	lds	r18, 0x0238
 2ba:	30 91 39 02 	lds	r19, 0x0239
 2be:	62 1b       	sub	r22, r18
 2c0:	73 0b       	sbc	r23, r19
 2c2:	70 93 46 02 	sts	0x0246, r23
 2c6:	60 93 45 02 	sts	0x0245, r22
		rxUpdateFlagsShared |= ELEVATOR_FLAG;
 2ca:	80 91 44 02 	lds	r24, 0x0244
 2ce:	84 60       	ori	r24, 0x04	; 4
 2d0:	80 93 44 02 	sts	0x0244, r24
	}
	
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_23>:

long lastIRTime = 0;


ISR(TIMER0_OVF_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 310:	80 91 4c 02 	lds	r24, 0x024C
 314:	90 91 4d 02 	lds	r25, 0x024D
 318:	a0 91 4e 02 	lds	r26, 0x024E
 31c:	b0 91 4f 02 	lds	r27, 0x024F
	unsigned char f = timer0_fract;
 320:	30 91 4b 02 	lds	r19, 0x024B

	m += MILLIS_INC;
	f += FRACT_INC;
 324:	23 e0       	ldi	r18, 0x03	; 3
 326:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 328:	2d 37       	cpi	r18, 0x7D	; 125
 32a:	20 f4       	brcc	.+8      	; 0x334 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	a1 1d       	adc	r26, r1
 330:	b1 1d       	adc	r27, r1
 332:	05 c0       	rjmp	.+10     	; 0x33e <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 334:	26 e8       	ldi	r18, 0x86	; 134
 336:	23 0f       	add	r18, r19
		m += 1;
 338:	02 96       	adiw	r24, 0x02	; 2
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 33e:	20 93 4b 02 	sts	0x024B, r18
	timer0_millis = m;
 342:	80 93 4c 02 	sts	0x024C, r24
 346:	90 93 4d 02 	sts	0x024D, r25
 34a:	a0 93 4e 02 	sts	0x024E, r26
 34e:	b0 93 4f 02 	sts	0x024F, r27
	timer0_overflow_count++;
 352:	80 91 50 02 	lds	r24, 0x0250
 356:	90 91 51 02 	lds	r25, 0x0251
 35a:	a0 91 52 02 	lds	r26, 0x0252
 35e:	b0 91 53 02 	lds	r27, 0x0253
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	80 93 50 02 	sts	0x0250, r24
 36c:	90 93 51 02 	sts	0x0251, r25
 370:	a0 93 52 02 	sts	0x0252, r26
 374:	b0 93 53 02 	sts	0x0253, r27
}
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <_Z6millisv>:

long  millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 38e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 390:	f8 94       	cli
	m = timer0_millis;
 392:	60 91 4c 02 	lds	r22, 0x024C
 396:	70 91 4d 02 	lds	r23, 0x024D
 39a:	80 91 4e 02 	lds	r24, 0x024E
 39e:	90 91 4f 02 	lds	r25, 0x024F
	SREG = oldSREG;
 3a2:	2f bf       	out	0x3f, r18	; 63

	return m;
}
 3a4:	08 95       	ret

000003a6 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
 3a6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 3a8:	f8 94       	cli
	m = timer0_overflow_count;
 3aa:	80 91 50 02 	lds	r24, 0x0250
 3ae:	90 91 51 02 	lds	r25, 0x0251
 3b2:	a0 91 52 02 	lds	r26, 0x0252
 3b6:	b0 91 53 02 	lds	r27, 0x0253
	t = TCNT0;
 3ba:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 3bc:	a8 9b       	sbis	0x15, 0	; 21
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_Z6microsv+0x1e>
 3c0:	2f 3f       	cpi	r18, 0xFF	; 255
 3c2:	a1 f4       	brne	.+40     	; 0x3ec <_Z6microsv+0x46>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 3c4:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 3c6:	ba 2f       	mov	r27, r26
 3c8:	a9 2f       	mov	r26, r25
 3ca:	98 2f       	mov	r25, r24
 3cc:	88 27       	eor	r24, r24
 3ce:	82 0f       	add	r24, r18
 3d0:	91 1d       	adc	r25, r1
 3d2:	a1 1d       	adc	r26, r1
 3d4:	b1 1d       	adc	r27, r1
 3d6:	bc 01       	movw	r22, r24
 3d8:	cd 01       	movw	r24, r26
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	88 1f       	adc	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	a1 1d       	adc	r26, r1
 3f0:	b1 1d       	adc	r27, r1
 3f2:	e8 cf       	rjmp	.-48     	; 0x3c4 <_Z6microsv+0x1e>

000003f4 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
 3fa:	cb 01       	movw	r24, r22
 3fc:	aa 27       	eor	r26, r26
 3fe:	97 fd       	sbrc	r25, 7
 400:	a0 95       	com	r26
 402:	ba 2f       	mov	r27, r26
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	aa 1f       	adc	r26, r26
 40a:	bb 1f       	adc	r27, r27
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	aa 1f       	adc	r26, r26
 412:	bb 1f       	adc	r27, r27
 414:	9c 01       	movw	r18, r24
 416:	ad 01       	movw	r20, r26
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	44 1f       	adc	r20, r20
 41e:	55 1f       	adc	r21, r21
 420:	22 0f       	add	r18, r18
 422:	33 1f       	adc	r19, r19
 424:	44 1f       	adc	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	74 e2       	ldi	r23, 0x24	; 36
 42c:	84 ef       	ldi	r24, 0xF4	; 244
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	83 d1       	rcall	.+774    	; 0x738 <__udivmodsi4>
 432:	21 50       	subi	r18, 0x01	; 1
 434:	31 09       	sbc	r19, r1
 436:	20 97       	sbiw	r28, 0x00	; 0
 438:	59 f4       	brne	.+22     	; 0x450 <_Z10USART_initii+0x5c>
 43a:	30 93 c5 00 	sts	0x00C5, r19
 43e:	20 93 c4 00 	sts	0x00C4, r18
 442:	88 e1       	ldi	r24, 0x18	; 24
 444:	80 93 c1 00 	sts	0x00C1, r24
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	80 93 c2 00 	sts	0x00C2, r24
 44e:	28 c0       	rjmp	.+80     	; 0x4a0 <_Z10USART_initii+0xac>
 450:	c1 30       	cpi	r28, 0x01	; 1
 452:	d1 05       	cpc	r29, r1
 454:	59 f4       	brne	.+22     	; 0x46c <_Z10USART_initii+0x78>
 456:	30 93 cd 00 	sts	0x00CD, r19
 45a:	20 93 cc 00 	sts	0x00CC, r18
 45e:	88 e1       	ldi	r24, 0x18	; 24
 460:	80 93 c9 00 	sts	0x00C9, r24
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	80 93 ca 00 	sts	0x00CA, r24
 46a:	1a c0       	rjmp	.+52     	; 0x4a0 <_Z10USART_initii+0xac>
 46c:	c2 30       	cpi	r28, 0x02	; 2
 46e:	d1 05       	cpc	r29, r1
 470:	59 f4       	brne	.+22     	; 0x488 <_Z10USART_initii+0x94>
 472:	30 93 d5 00 	sts	0x00D5, r19
 476:	20 93 d4 00 	sts	0x00D4, r18
 47a:	88 e1       	ldi	r24, 0x18	; 24
 47c:	80 93 d1 00 	sts	0x00D1, r24
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	80 93 d2 00 	sts	0x00D2, r24
 486:	0c c0       	rjmp	.+24     	; 0x4a0 <_Z10USART_initii+0xac>
 488:	23 97       	sbiw	r28, 0x03	; 3
 48a:	51 f4       	brne	.+20     	; 0x4a0 <_Z10USART_initii+0xac>
 48c:	30 93 35 01 	sts	0x0135, r19
 490:	20 93 34 01 	sts	0x0134, r18
 494:	88 e1       	ldi	r24, 0x18	; 24
 496:	80 93 31 01 	sts	0x0131, r24
 49a:	86 e0       	ldi	r24, 0x06	; 6
 49c:	80 93 32 01 	sts	0x0132, r24
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <_Z10USART_sendih>:
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	41 f4       	brne	.+16     	; 0x4ba <_Z10USART_sendih+0x14>
 4aa:	e0 ec       	ldi	r30, 0xC0	; 192
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	85 ff       	sbrs	r24, 5
 4b2:	fd cf       	rjmp	.-6      	; 0x4ae <_Z10USART_sendih+0x8>
 4b4:	60 93 c6 00 	sts	0x00C6, r22
 4b8:	08 95       	ret
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	91 05       	cpc	r25, r1
 4be:	41 f4       	brne	.+16     	; 0x4d0 <_Z10USART_sendih+0x2a>
 4c0:	e8 ec       	ldi	r30, 0xC8	; 200
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	85 ff       	sbrs	r24, 5
 4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <_Z10USART_sendih+0x1e>
 4ca:	60 93 ce 00 	sts	0x00CE, r22
 4ce:	08 95       	ret
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	91 05       	cpc	r25, r1
 4d4:	41 f4       	brne	.+16     	; 0x4e6 <_Z10USART_sendih+0x40>
 4d6:	e0 ed       	ldi	r30, 0xD0	; 208
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	85 ff       	sbrs	r24, 5
 4de:	fd cf       	rjmp	.-6      	; 0x4da <_Z10USART_sendih+0x34>
 4e0:	60 93 d6 00 	sts	0x00D6, r22
 4e4:	08 95       	ret
 4e6:	03 97       	sbiw	r24, 0x03	; 3
 4e8:	39 f4       	brne	.+14     	; 0x4f8 <_Z10USART_sendih+0x52>
 4ea:	e0 e3       	ldi	r30, 0x30	; 48
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	80 81       	ld	r24, Z
 4f0:	85 ff       	sbrs	r24, 5
 4f2:	fd cf       	rjmp	.-6      	; 0x4ee <_Z10USART_sendih+0x48>
 4f4:	60 93 36 01 	sts	0x0136, r22
 4f8:	08 95       	ret

000004fa <_Z15USART_putstringiPKc>:

void USART_putstring(int usartNum, const char* StringPtr){
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	8c 01       	movw	r16, r24
 504:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 506:	68 81       	ld	r22, Y
 508:	66 23       	and	r22, r22
 50a:	31 f0       	breq	.+12     	; 0x518 <_Z15USART_putstringiPKc+0x1e>
 50c:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
 50e:	c8 01       	movw	r24, r16
 510:	ca df       	rcall	.-108    	; 0x4a6 <_Z10USART_sendih>
	
}

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 512:	69 91       	ld	r22, Y+
 514:	61 11       	cpse	r22, r1
 516:	fb cf       	rjmp	.-10     	; 0x50e <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <main>:
float compass_get_heading();	//returns current heading, formatted as degrees relative to North (0-360)


int main(void)
{
	USART_init(USART_PC,9600);
 522:	60 e8       	ldi	r22, 0x80	; 128
 524:	75 e2       	ldi	r23, 0x25	; 37
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	64 df       	rcall	.-312    	; 0x3f4 <_Z10USART_initii>
	
	debug_print("Testing debug functionality...");
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	92 e0       	ldi	r25, 0x02	; 2
 530:	f9 dd       	rcall	.-1038   	; 0x124 <_Z11debug_printPKc>
	debug_print(1000);
 532:	88 ee       	ldi	r24, 0xE8	; 232
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	00 de       	rcall	.-1024   	; 0x138 <_Z11debug_printi>
	//benchmark_waypoint_get_distance();

    while(1)
    {
		debug_print("Looping, time is... ");
		debug_print((int)round(millis()/1000));
 538:	0f 2e       	mov	r0, r31
 53a:	f8 ee       	ldi	r31, 0xE8	; 232
 53c:	cf 2e       	mov	r12, r31
 53e:	f3 e0       	ldi	r31, 0x03	; 3
 540:	df 2e       	mov	r13, r31
 542:	e1 2c       	mov	r14, r1
 544:	f1 2c       	mov	r15, r1
 546:	f0 2d       	mov	r31, r0
	//test how fast distance function is
	//benchmark_waypoint_get_distance();

    while(1)
    {
		debug_print("Looping, time is... ");
 548:	82 e2       	ldi	r24, 0x22	; 34
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	eb dd       	rcall	.-1066   	; 0x124 <_Z11debug_printPKc>
		debug_print((int)round(millis()/1000));
 54e:	1f df       	rcall	.-450    	; 0x38e <_Z6millisv>
 550:	a7 01       	movw	r20, r14
 552:	96 01       	movw	r18, r12
 554:	13 d1       	rcall	.+550    	; 0x77c <__divmodsi4>
 556:	ca 01       	movw	r24, r20
 558:	b9 01       	movw	r22, r18
 55a:	41 d0       	rcall	.+130    	; 0x5de <__floatsisf>
 55c:	a4 d0       	rcall	.+328    	; 0x6a6 <round>
 55e:	0c d0       	rcall	.+24     	; 0x578 <__fixsfsi>
 560:	cb 01       	movw	r24, r22
 562:	ea dd       	rcall	.-1068   	; 0x138 <_Z11debug_printi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	83 ed       	ldi	r24, 0xD3	; 211
 568:	90 e3       	ldi	r25, 0x30	; 48
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x48>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x52>
 574:	00 00       	nop
 576:	e8 cf       	rjmp	.-48     	; 0x548 <main+0x26>

00000578 <__fixsfsi>:
 578:	04 d0       	rcall	.+8      	; 0x582 <__fixunssfsi>
 57a:	68 94       	set
 57c:	b1 11       	cpse	r27, r1
 57e:	8d c0       	rjmp	.+282    	; 0x69a <__fp_szero>
 580:	08 95       	ret

00000582 <__fixunssfsi>:
 582:	70 d0       	rcall	.+224    	; 0x664 <__fp_splitA>
 584:	88 f0       	brcs	.+34     	; 0x5a8 <__fixunssfsi+0x26>
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	90 f0       	brcs	.+36     	; 0x5ae <__fixunssfsi+0x2c>
 58a:	b9 2f       	mov	r27, r25
 58c:	99 27       	eor	r25, r25
 58e:	b7 51       	subi	r27, 0x17	; 23
 590:	a0 f0       	brcs	.+40     	; 0x5ba <__fixunssfsi+0x38>
 592:	d1 f0       	breq	.+52     	; 0x5c8 <__fixunssfsi+0x46>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a f0       	brmi	.+6      	; 0x5a4 <__fixunssfsi+0x22>
 59e:	ba 95       	dec	r27
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__fixunssfsi+0x12>
 5a2:	12 c0       	rjmp	.+36     	; 0x5c8 <__fixunssfsi+0x46>
 5a4:	b1 30       	cpi	r27, 0x01	; 1
 5a6:	81 f0       	breq	.+32     	; 0x5c8 <__fixunssfsi+0x46>
 5a8:	77 d0       	rcall	.+238    	; 0x698 <__fp_zero>
 5aa:	b1 e0       	ldi	r27, 0x01	; 1
 5ac:	08 95       	ret
 5ae:	74 c0       	rjmp	.+232    	; 0x698 <__fp_zero>
 5b0:	67 2f       	mov	r22, r23
 5b2:	78 2f       	mov	r23, r24
 5b4:	88 27       	eor	r24, r24
 5b6:	b8 5f       	subi	r27, 0xF8	; 248
 5b8:	39 f0       	breq	.+14     	; 0x5c8 <__fixunssfsi+0x46>
 5ba:	b9 3f       	cpi	r27, 0xF9	; 249
 5bc:	cc f3       	brlt	.-14     	; 0x5b0 <__fixunssfsi+0x2e>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b3 95       	inc	r27
 5c6:	d9 f7       	brne	.-10     	; 0x5be <__fixunssfsi+0x3c>
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__fixunssfsi+0x56>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	08 95       	ret

000005da <__floatunsisf>:
 5da:	e8 94       	clt
 5dc:	09 c0       	rjmp	.+18     	; 0x5f0 <__floatsisf+0x12>

000005de <__floatsisf>:
 5de:	97 fb       	bst	r25, 7
 5e0:	3e f4       	brtc	.+14     	; 0x5f0 <__floatsisf+0x12>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	99 23       	and	r25, r25
 5f2:	a9 f0       	breq	.+42     	; 0x61e <__floatsisf+0x40>
 5f4:	f9 2f       	mov	r31, r25
 5f6:	96 e9       	ldi	r25, 0x96	; 150
 5f8:	bb 27       	eor	r27, r27
 5fa:	93 95       	inc	r25
 5fc:	f6 95       	lsr	r31
 5fe:	87 95       	ror	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b7 95       	ror	r27
 606:	f1 11       	cpse	r31, r1
 608:	f8 cf       	rjmp	.-16     	; 0x5fa <__floatsisf+0x1c>
 60a:	fa f4       	brpl	.+62     	; 0x64a <__floatsisf+0x6c>
 60c:	bb 0f       	add	r27, r27
 60e:	11 f4       	brne	.+4      	; 0x614 <__floatsisf+0x36>
 610:	60 ff       	sbrs	r22, 0
 612:	1b c0       	rjmp	.+54     	; 0x64a <__floatsisf+0x6c>
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	8f 4f       	sbci	r24, 0xFF	; 255
 61a:	9f 4f       	sbci	r25, 0xFF	; 255
 61c:	16 c0       	rjmp	.+44     	; 0x64a <__floatsisf+0x6c>
 61e:	88 23       	and	r24, r24
 620:	11 f0       	breq	.+4      	; 0x626 <__floatsisf+0x48>
 622:	96 e9       	ldi	r25, 0x96	; 150
 624:	11 c0       	rjmp	.+34     	; 0x648 <__floatsisf+0x6a>
 626:	77 23       	and	r23, r23
 628:	21 f0       	breq	.+8      	; 0x632 <__floatsisf+0x54>
 62a:	9e e8       	ldi	r25, 0x8E	; 142
 62c:	87 2f       	mov	r24, r23
 62e:	76 2f       	mov	r23, r22
 630:	05 c0       	rjmp	.+10     	; 0x63c <__floatsisf+0x5e>
 632:	66 23       	and	r22, r22
 634:	71 f0       	breq	.+28     	; 0x652 <__floatsisf+0x74>
 636:	96 e8       	ldi	r25, 0x86	; 134
 638:	86 2f       	mov	r24, r22
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	2a f0       	brmi	.+10     	; 0x64a <__floatsisf+0x6c>
 640:	9a 95       	dec	r25
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	da f7       	brpl	.-10     	; 0x640 <__floatsisf+0x62>
 64a:	88 0f       	add	r24, r24
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__fp_split3>:
 654:	57 fd       	sbrc	r21, 7
 656:	90 58       	subi	r25, 0x80	; 128
 658:	44 0f       	add	r20, r20
 65a:	55 1f       	adc	r21, r21
 65c:	59 f0       	breq	.+22     	; 0x674 <__fp_splitA+0x10>
 65e:	5f 3f       	cpi	r21, 0xFF	; 255
 660:	71 f0       	breq	.+28     	; 0x67e <__fp_splitA+0x1a>
 662:	47 95       	ror	r20

00000664 <__fp_splitA>:
 664:	88 0f       	add	r24, r24
 666:	97 fb       	bst	r25, 7
 668:	99 1f       	adc	r25, r25
 66a:	61 f0       	breq	.+24     	; 0x684 <__fp_splitA+0x20>
 66c:	9f 3f       	cpi	r25, 0xFF	; 255
 66e:	79 f0       	breq	.+30     	; 0x68e <__fp_splitA+0x2a>
 670:	87 95       	ror	r24
 672:	08 95       	ret
 674:	12 16       	cp	r1, r18
 676:	13 06       	cpc	r1, r19
 678:	14 06       	cpc	r1, r20
 67a:	55 1f       	adc	r21, r21
 67c:	f2 cf       	rjmp	.-28     	; 0x662 <__fp_split3+0xe>
 67e:	46 95       	lsr	r20
 680:	f1 df       	rcall	.-30     	; 0x664 <__fp_splitA>
 682:	08 c0       	rjmp	.+16     	; 0x694 <__fp_splitA+0x30>
 684:	16 16       	cp	r1, r22
 686:	17 06       	cpc	r1, r23
 688:	18 06       	cpc	r1, r24
 68a:	99 1f       	adc	r25, r25
 68c:	f1 cf       	rjmp	.-30     	; 0x670 <__fp_splitA+0xc>
 68e:	86 95       	lsr	r24
 690:	71 05       	cpc	r23, r1
 692:	61 05       	cpc	r22, r1
 694:	08 94       	sec
 696:	08 95       	ret

00000698 <__fp_zero>:
 698:	e8 94       	clt

0000069a <__fp_szero>:
 69a:	bb 27       	eor	r27, r27
 69c:	66 27       	eor	r22, r22
 69e:	77 27       	eor	r23, r23
 6a0:	cb 01       	movw	r24, r22
 6a2:	97 f9       	bld	r25, 7
 6a4:	08 95       	ret

000006a6 <round>:
 6a6:	de df       	rcall	.-68     	; 0x664 <__fp_splitA>
 6a8:	e0 f0       	brcs	.+56     	; 0x6e2 <round+0x3c>
 6aa:	9e 37       	cpi	r25, 0x7E	; 126
 6ac:	d8 f0       	brcs	.+54     	; 0x6e4 <round+0x3e>
 6ae:	96 39       	cpi	r25, 0x96	; 150
 6b0:	b8 f4       	brcc	.+46     	; 0x6e0 <round+0x3a>
 6b2:	9e 38       	cpi	r25, 0x8E	; 142
 6b4:	48 f4       	brcc	.+18     	; 0x6c8 <round+0x22>
 6b6:	67 2f       	mov	r22, r23
 6b8:	78 2f       	mov	r23, r24
 6ba:	88 27       	eor	r24, r24
 6bc:	98 5f       	subi	r25, 0xF8	; 248
 6be:	f9 cf       	rjmp	.-14     	; 0x6b2 <round+0xc>
 6c0:	86 95       	lsr	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	93 95       	inc	r25
 6c8:	95 39       	cpi	r25, 0x95	; 149
 6ca:	d0 f3       	brcs	.-12     	; 0x6c0 <round+0x1a>
 6cc:	b6 2f       	mov	r27, r22
 6ce:	b1 70       	andi	r27, 0x01	; 1
 6d0:	6b 0f       	add	r22, r27
 6d2:	71 1d       	adc	r23, r1
 6d4:	81 1d       	adc	r24, r1
 6d6:	20 f4       	brcc	.+8      	; 0x6e0 <round+0x3a>
 6d8:	87 95       	ror	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	93 95       	inc	r25
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <__fp_mintl>
 6e2:	1c c0       	rjmp	.+56     	; 0x71c <__fp_mpack>
 6e4:	da cf       	rjmp	.-76     	; 0x69a <__fp_szero>

000006e6 <__fp_mintl>:
 6e6:	88 23       	and	r24, r24
 6e8:	71 f4       	brne	.+28     	; 0x706 <__fp_mintl+0x20>
 6ea:	77 23       	and	r23, r23
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <__fp_mintl+0x10>
 6ee:	98 50       	subi	r25, 0x08	; 8
 6f0:	87 2b       	or	r24, r23
 6f2:	76 2f       	mov	r23, r22
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <__fp_mintl+0x1e>
 6f6:	66 23       	and	r22, r22
 6f8:	11 f4       	brne	.+4      	; 0x6fe <__fp_mintl+0x18>
 6fa:	99 27       	eor	r25, r25
 6fc:	0d c0       	rjmp	.+26     	; 0x718 <__fp_mintl+0x32>
 6fe:	90 51       	subi	r25, 0x10	; 16
 700:	86 2b       	or	r24, r22
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	2a f0       	brmi	.+10     	; 0x712 <__fp_mintl+0x2c>
 708:	9a 95       	dec	r25
 70a:	66 0f       	add	r22, r22
 70c:	77 1f       	adc	r23, r23
 70e:	88 1f       	adc	r24, r24
 710:	da f7       	brpl	.-10     	; 0x708 <__fp_mintl+0x22>
 712:	88 0f       	add	r24, r24
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <__fp_mpack>:
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	31 f0       	breq	.+12     	; 0x72c <__fp_mpack_finite+0xc>

00000720 <__fp_mpack_finite>:
 720:	91 50       	subi	r25, 0x01	; 1
 722:	20 f4       	brcc	.+8      	; 0x72c <__fp_mpack_finite+0xc>
 724:	87 95       	ror	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	88 0f       	add	r24, r24
 72e:	91 1d       	adc	r25, r1
 730:	96 95       	lsr	r25
 732:	87 95       	ror	r24
 734:	97 f9       	bld	r25, 7
 736:	08 95       	ret

00000738 <__udivmodsi4>:
 738:	a1 e2       	ldi	r26, 0x21	; 33
 73a:	1a 2e       	mov	r1, r26
 73c:	aa 1b       	sub	r26, r26
 73e:	bb 1b       	sub	r27, r27
 740:	fd 01       	movw	r30, r26
 742:	0d c0       	rjmp	.+26     	; 0x75e <__udivmodsi4_ep>

00000744 <__udivmodsi4_loop>:
 744:	aa 1f       	adc	r26, r26
 746:	bb 1f       	adc	r27, r27
 748:	ee 1f       	adc	r30, r30
 74a:	ff 1f       	adc	r31, r31
 74c:	a2 17       	cp	r26, r18
 74e:	b3 07       	cpc	r27, r19
 750:	e4 07       	cpc	r30, r20
 752:	f5 07       	cpc	r31, r21
 754:	20 f0       	brcs	.+8      	; 0x75e <__udivmodsi4_ep>
 756:	a2 1b       	sub	r26, r18
 758:	b3 0b       	sbc	r27, r19
 75a:	e4 0b       	sbc	r30, r20
 75c:	f5 0b       	sbc	r31, r21

0000075e <__udivmodsi4_ep>:
 75e:	66 1f       	adc	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	88 1f       	adc	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	1a 94       	dec	r1
 768:	69 f7       	brne	.-38     	; 0x744 <__udivmodsi4_loop>
 76a:	60 95       	com	r22
 76c:	70 95       	com	r23
 76e:	80 95       	com	r24
 770:	90 95       	com	r25
 772:	9b 01       	movw	r18, r22
 774:	ac 01       	movw	r20, r24
 776:	bd 01       	movw	r22, r26
 778:	cf 01       	movw	r24, r30
 77a:	08 95       	ret

0000077c <__divmodsi4>:
 77c:	05 2e       	mov	r0, r21
 77e:	97 fb       	bst	r25, 7
 780:	16 f4       	brtc	.+4      	; 0x786 <__divmodsi4+0xa>
 782:	00 94       	com	r0
 784:	0f d0       	rcall	.+30     	; 0x7a4 <__negsi2>
 786:	57 fd       	sbrc	r21, 7
 788:	05 d0       	rcall	.+10     	; 0x794 <__divmodsi4_neg2>
 78a:	d6 df       	rcall	.-84     	; 0x738 <__udivmodsi4>
 78c:	07 fc       	sbrc	r0, 7
 78e:	02 d0       	rcall	.+4      	; 0x794 <__divmodsi4_neg2>
 790:	46 f4       	brtc	.+16     	; 0x7a2 <__divmodsi4_exit>
 792:	08 c0       	rjmp	.+16     	; 0x7a4 <__negsi2>

00000794 <__divmodsi4_neg2>:
 794:	50 95       	com	r21
 796:	40 95       	com	r20
 798:	30 95       	com	r19
 79a:	21 95       	neg	r18
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	4f 4f       	sbci	r20, 0xFF	; 255
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255

000007a2 <__divmodsi4_exit>:
 7a2:	08 95       	ret

000007a4 <__negsi2>:
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__itoa_ncheck>:
 7b4:	bb 27       	eor	r27, r27
 7b6:	4a 30       	cpi	r20, 0x0A	; 10
 7b8:	31 f4       	brne	.+12     	; 0x7c6 <__itoa_ncheck+0x12>
 7ba:	99 23       	and	r25, r25
 7bc:	22 f4       	brpl	.+8      	; 0x7c6 <__itoa_ncheck+0x12>
 7be:	bd e2       	ldi	r27, 0x2D	; 45
 7c0:	90 95       	com	r25
 7c2:	81 95       	neg	r24
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <__utoa_common>

000007c8 <__utoa_ncheck>:
 7c8:	bb 27       	eor	r27, r27

000007ca <__utoa_common>:
 7ca:	fb 01       	movw	r30, r22
 7cc:	55 27       	eor	r21, r21
 7ce:	aa 27       	eor	r26, r26
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	aa 1f       	adc	r26, r26
 7d6:	a4 17       	cp	r26, r20
 7d8:	10 f0       	brcs	.+4      	; 0x7de <__utoa_common+0x14>
 7da:	a4 1b       	sub	r26, r20
 7dc:	83 95       	inc	r24
 7de:	50 51       	subi	r21, 0x10	; 16
 7e0:	b9 f7       	brne	.-18     	; 0x7d0 <__utoa_common+0x6>
 7e2:	a0 5d       	subi	r26, 0xD0	; 208
 7e4:	aa 33       	cpi	r26, 0x3A	; 58
 7e6:	08 f0       	brcs	.+2      	; 0x7ea <__utoa_common+0x20>
 7e8:	a9 5d       	subi	r26, 0xD9	; 217
 7ea:	a1 93       	st	Z+, r26
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	79 f7       	brne	.-34     	; 0x7ce <__utoa_common+0x4>
 7f0:	b1 11       	cpse	r27, r1
 7f2:	b1 93       	st	Z+, r27
 7f4:	11 92       	st	Z+, r1
 7f6:	cb 01       	movw	r24, r22
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <strrev>

000007fa <strrev>:
 7fa:	dc 01       	movw	r26, r24
 7fc:	fc 01       	movw	r30, r24
 7fe:	67 2f       	mov	r22, r23
 800:	71 91       	ld	r23, Z+
 802:	77 23       	and	r23, r23
 804:	e1 f7       	brne	.-8      	; 0x7fe <strrev+0x4>
 806:	32 97       	sbiw	r30, 0x02	; 2
 808:	04 c0       	rjmp	.+8      	; 0x812 <strrev+0x18>
 80a:	7c 91       	ld	r23, X
 80c:	6d 93       	st	X+, r22
 80e:	70 83       	st	Z, r23
 810:	62 91       	ld	r22, -Z
 812:	ae 17       	cp	r26, r30
 814:	bf 07       	cpc	r27, r31
 816:	c8 f3       	brcs	.-14     	; 0x80a <strrev+0x10>
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
