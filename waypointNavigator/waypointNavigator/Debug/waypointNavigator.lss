
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800200  0000121a  000012ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000121a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800290  00800290  0000133e  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d8  00000000  00000000  000013b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000284a  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e8a  00000000  00000000  00003eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001856  00000000  00000000  00004d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000720  00000000  00000000  000065bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ee7  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001803  00000000  00000000  00007bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000208  00000000  00000000  000093c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	0b c1       	rjmp	.+534    	; 0x21c <__bad_interrupt>
       6:	00 00       	nop
       8:	09 c1       	rjmp	.+530    	; 0x21c <__bad_interrupt>
       a:	00 00       	nop
       c:	07 c1       	rjmp	.+526    	; 0x21c <__bad_interrupt>
       e:	00 00       	nop
      10:	05 c1       	rjmp	.+522    	; 0x21c <__bad_interrupt>
      12:	00 00       	nop
      14:	03 c1       	rjmp	.+518    	; 0x21c <__bad_interrupt>
      16:	00 00       	nop
      18:	01 c1       	rjmp	.+514    	; 0x21c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ff c0       	rjmp	.+510    	; 0x21c <__bad_interrupt>
      1e:	00 00       	nop
      20:	fd c0       	rjmp	.+506    	; 0x21c <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c2       	rjmp	.+1418   	; 0x5b0 <__vector_9>
      26:	00 00       	nop
      28:	f9 c0       	rjmp	.+498    	; 0x21c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f7 c0       	rjmp	.+494    	; 0x21c <__bad_interrupt>
      2e:	00 00       	nop
      30:	f5 c0       	rjmp	.+490    	; 0x21c <__bad_interrupt>
      32:	00 00       	nop
      34:	f3 c0       	rjmp	.+486    	; 0x21c <__bad_interrupt>
      36:	00 00       	nop
      38:	f1 c0       	rjmp	.+482    	; 0x21c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ef c0       	rjmp	.+478    	; 0x21c <__bad_interrupt>
      3e:	00 00       	nop
      40:	ed c0       	rjmp	.+474    	; 0x21c <__bad_interrupt>
      42:	00 00       	nop
      44:	eb c0       	rjmp	.+470    	; 0x21c <__bad_interrupt>
      46:	00 00       	nop
      48:	e9 c0       	rjmp	.+466    	; 0x21c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e7 c0       	rjmp	.+462    	; 0x21c <__bad_interrupt>
      4e:	00 00       	nop
      50:	e5 c0       	rjmp	.+458    	; 0x21c <__bad_interrupt>
      52:	00 00       	nop
      54:	e3 c0       	rjmp	.+454    	; 0x21c <__bad_interrupt>
      56:	00 00       	nop
      58:	e1 c0       	rjmp	.+450    	; 0x21c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8c c3       	rjmp	.+1816   	; 0x776 <__vector_23>
      5e:	00 00       	nop
      60:	dd c0       	rjmp	.+442    	; 0x21c <__bad_interrupt>
      62:	00 00       	nop
      64:	db c0       	rjmp	.+438    	; 0x21c <__bad_interrupt>
      66:	00 00       	nop
      68:	d9 c0       	rjmp	.+434    	; 0x21c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d7 c0       	rjmp	.+430    	; 0x21c <__bad_interrupt>
      6e:	00 00       	nop
      70:	d5 c0       	rjmp	.+426    	; 0x21c <__bad_interrupt>
      72:	00 00       	nop
      74:	d3 c0       	rjmp	.+422    	; 0x21c <__bad_interrupt>
      76:	00 00       	nop
      78:	d1 c0       	rjmp	.+418    	; 0x21c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cf c0       	rjmp	.+414    	; 0x21c <__bad_interrupt>
      7e:	00 00       	nop
      80:	cd c0       	rjmp	.+410    	; 0x21c <__bad_interrupt>
      82:	00 00       	nop
      84:	cb c0       	rjmp	.+406    	; 0x21c <__bad_interrupt>
      86:	00 00       	nop
      88:	c9 c0       	rjmp	.+402    	; 0x21c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 c0       	rjmp	.+398    	; 0x21c <__bad_interrupt>
      8e:	00 00       	nop
      90:	c5 c0       	rjmp	.+394    	; 0x21c <__bad_interrupt>
      92:	00 00       	nop
      94:	c3 c0       	rjmp	.+390    	; 0x21c <__bad_interrupt>
      96:	00 00       	nop
      98:	c1 c0       	rjmp	.+386    	; 0x21c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bf c0       	rjmp	.+382    	; 0x21c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bd c0       	rjmp	.+378    	; 0x21c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bb c0       	rjmp	.+374    	; 0x21c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b9 c0       	rjmp	.+370    	; 0x21c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b7 c0       	rjmp	.+366    	; 0x21c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b5 c0       	rjmp	.+362    	; 0x21c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b3 c0       	rjmp	.+358    	; 0x21c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b1 c0       	rjmp	.+354    	; 0x21c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	af c0       	rjmp	.+350    	; 0x21c <__bad_interrupt>
      be:	00 00       	nop
      c0:	ad c0       	rjmp	.+346    	; 0x21c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ab c0       	rjmp	.+342    	; 0x21c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a9 c0       	rjmp	.+338    	; 0x21c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a7 c0       	rjmp	.+334    	; 0x21c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a5 c0       	rjmp	.+330    	; 0x21c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a3 c0       	rjmp	.+326    	; 0x21c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a1 c0       	rjmp	.+322    	; 0x21c <__bad_interrupt>
      da:	00 00       	nop
      dc:	9f c0       	rjmp	.+318    	; 0x21c <__bad_interrupt>
      de:	00 00       	nop
      e0:	9d c0       	rjmp	.+314    	; 0x21c <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <__addsf3x+0x2e>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <__vector_9+0x17a>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <_Z10mpl_getAlth+0xf2>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <i2c_rep_start+0xa>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	12 e0       	ldi	r17, 0x02	; 2
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	ea e1       	ldi	r30, 0x1A	; 26
     1f6:	f2 e1       	ldi	r31, 0x12	; 18
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a0 39       	cpi	r26, 0x90	; 144
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	a0 e9       	ldi	r26, 0x90	; 144
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ab 3c       	cpi	r26, 0xCB	; 203
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	c9 d3       	rcall	.+1938   	; 0x9ac <main>
     21a:	fd c7       	rjmp	.+4090   	; 0x1216 <_exit>

0000021c <__bad_interrupt>:
     21c:	f1 ce       	rjmp	.-542    	; 0x0 <__vectors>

0000021e <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     21e:	00 c0       	rjmp	.+0      	; 0x220 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     220:	00 c0       	rjmp	.+0      	; 0x222 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     222:	00 c0       	rjmp	.+0      	; 0x224 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     224:	00 c0       	rjmp	.+0      	; 0x226 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     226:	00 c0       	rjmp	.+0      	; 0x228 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     228:	00 c0       	rjmp	.+0      	; 0x22a <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     22a:	00 00       	nop
	ret          ; 3   "
     22c:	08 95       	ret

0000022e <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     22e:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     230:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     232:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     234:	58 98       	cbi	0x0b, 0	; 11
	ret
     236:	08 95       	ret

00000238 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     238:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     23a:	f1 df       	rcall	.-30     	; 0x21e <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     23c:	1d c0       	rjmp	.+58     	; 0x278 <i2c_write>
	ret
     23e:	08 95       	ret

00000240 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     240:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     242:	ed df       	rcall	.-38     	; 0x21e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     244:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     246:	eb df       	rcall	.-42     	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     248:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     24a:	e9 df       	rcall	.-46     	; 0x21e <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     24c:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     24e:	e7 df       	rcall	.-50     	; 0x21e <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     250:	13 c0       	rjmp	.+38     	; 0x278 <i2c_write>
	ret
     252:	08 95       	ret

00000254 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     254:	08 2e       	mov	r0, r24

00000256 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     256:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     258:	e2 df       	rcall	.-60     	; 0x21e <i2c_delay_T2>
	mov	r24,__tmp_reg__
     25a:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     25c:	0d d0       	rcall	.+26     	; 0x278 <i2c_write>
	tst	r24		;if device not busy -> done
     25e:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     260:	11 f0       	breq	.+4      	; 0x266 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     262:	02 d0       	rcall	.+4      	; 0x268 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     264:	f8 cf       	rjmp	.-16     	; 0x256 <i2c_start_wait1>

00000266 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     266:	08 95       	ret

00000268 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     268:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     26a:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     26c:	d8 df       	rcall	.-80     	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     26e:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     270:	d6 df       	rcall	.-84     	; 0x21e <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     272:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     274:	d4 cf       	rjmp	.-88     	; 0x21e <i2c_delay_T2>
	ret
     276:	08 95       	ret

00000278 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     278:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     27a:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     27c:	01 c0       	rjmp	.+2      	; 0x280 <i2c_write_first>

0000027e <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     27e:	88 0f       	add	r24, r24

00000280 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     280:	59 f0       	breq	.+22     	; 0x298 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     282:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     284:	18 f4       	brcc	.+6      	; 0x28c <i2c_write_low>
	nop
     286:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     288:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     28a:	02 c0       	rjmp	.+4      	; 0x290 <i2c_write_high>

0000028c <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     28c:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     28e:	00 c0       	rjmp	.+0      	; 0x290 <i2c_write_high>

00000290 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     290:	c6 df       	rcall	.-116    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     292:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     294:	c4 df       	rcall	.-120    	; 0x21e <i2c_delay_T2>
	rjmp	i2c_write_bit
     296:	f3 cf       	rjmp	.-26     	; 0x27e <i2c_write_bit>

00000298 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     298:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     29a:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     29c:	c0 df       	rcall	.-128    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     29e:	50 98       	cbi	0x0a, 0	; 10

000002a0 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     2a0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <i2c_ack_wait>
	
	clr	r24		;return 0
     2a4:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     2a6:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     2a8:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     2aa:	b9 df       	rcall	.-142    	; 0x21e <i2c_delay_T2>
	clr	r25
     2ac:	99 27       	eor	r25, r25
	ret
     2ae:	08 95       	ret

000002b0 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     2b0:	88 27       	eor	r24, r24
	rjmp	i2c_read
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <i2c_read>

000002b4 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     2b4:	81 e0       	ldi	r24, 0x01	; 1

000002b6 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     2b6:	71 e0       	ldi	r23, 0x01	; 1

000002b8 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     2b8:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     2ba:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2bc:	b0 df       	rcall	.-160    	; 0x21e <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     2be:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     2c0:	ae df       	rcall	.-164    	; 0x21e <i2c_delay_T2>

000002c2 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     2c2:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <i2c_read_stretch>
    	
	clc			;clear carry flag
     2c6:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     2c8:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     2ca:	08 94       	sec
	
	rol	r23		;store bit
     2cc:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     2ce:	a0 f7       	brcc	.-24     	; 0x2b8 <i2c_read_bit>

000002d0 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     2d0:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     2d2:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     2d4:	11 f0       	breq	.+4      	; 0x2da <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     2d6:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <i2c_put_ack_high>

000002da <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     2da:	51 9a       	sbi	0x0a, 1	; 10

000002dc <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     2dc:	a0 df       	rcall	.-192    	; 0x21e <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2de:	50 98       	cbi	0x0a, 0	; 10

000002e0 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     2e0:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     2e4:	9c df       	rcall	.-200    	; 0x21e <i2c_delay_T2>
	mov	r24,r23
     2e6:	87 2f       	mov	r24, r23
	clr	r25
     2e8:	99 27       	eor	r25, r25
	ret
     2ea:	08 95       	ret

000002ec <_Z18altimeter_set_modev>:
	float altitude = -999;
	
	
	
	return altitude;
}
     2ec:	80 ec       	ldi	r24, 0xC0	; 192
     2ee:	b2 df       	rcall	.-156    	; 0x254 <i2c_start_wait>
     2f0:	86 e2       	ldi	r24, 0x26	; 38
     2f2:	c2 df       	rcall	.-124    	; 0x278 <i2c_write>
     2f4:	88 eb       	ldi	r24, 0xB8	; 184
     2f6:	c0 df       	rcall	.-128    	; 0x278 <i2c_write>
     2f8:	b7 cf       	rjmp	.-146    	; 0x268 <i2c_stop>
     2fa:	08 95       	ret

000002fc <_Z24altimeter_set_eventFlagsv>:
     2fc:	80 ec       	ldi	r24, 0xC0	; 192
     2fe:	aa df       	rcall	.-172    	; 0x254 <i2c_start_wait>
     300:	83 e1       	ldi	r24, 0x13	; 19
     302:	ba df       	rcall	.-140    	; 0x278 <i2c_write>
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	b8 df       	rcall	.-144    	; 0x278 <i2c_write>
     308:	af cf       	rjmp	.-162    	; 0x268 <i2c_stop>
     30a:	08 95       	ret

0000030c <_Z8mpl_initv>:
     30c:	90 df       	rcall	.-224    	; 0x22e <i2c_init>
     30e:	ee df       	rcall	.-36     	; 0x2ec <_Z18altimeter_set_modev>
     310:	f5 cf       	rjmp	.-22     	; 0x2fc <_Z24altimeter_set_eventFlagsv>
     312:	08 95       	ret

00000314 <_Z14altimeter_initv>:
     314:	fb df       	rcall	.-10     	; 0x30c <_Z8mpl_initv>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	21 c1       	rjmp	.+578    	; 0x55e <_Z13debug_printlnPKc>
     31c:	08 95       	ret

0000031e <_Z20altimeter_set_activev>:
	return altitude;
} 

void altimeter_set_active(void)
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     31e:	80 ec       	ldi	r24, 0xC0	; 192
     320:	99 df       	rcall	.-206    	; 0x254 <i2c_start_wait>
	i2c_write(CTRL_REG1);
     322:	86 e2       	ldi	r24, 0x26	; 38
     324:	a9 df       	rcall	.-174    	; 0x278 <i2c_write>
	i2c_write(0xB9);
     326:	89 eb       	ldi	r24, 0xB9	; 185
     328:	a7 df       	rcall	.-178    	; 0x278 <i2c_write>
	i2c_stop();
     32a:	9e cf       	rjmp	.-196    	; 0x268 <i2c_stop>
     32c:	08 95       	ret

0000032e <_Z20altimeter_get_statusv>:
}

uint8_t altimeter_get_status(void) 
{ 
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cb e0       	ldi	r28, 0x0B	; 11
     336:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t altStatus = 0x00; 
	int i = 0;
	while (((altStatus & 0x08) == 0) && (i <= 10))
	{
		i2c_start_wait(MPL3115a2+I2C_WRITE);
     338:	80 ec       	ldi	r24, 0xC0	; 192
     33a:	8c df       	rcall	.-232    	; 0x254 <i2c_start_wait>
		i2c_write(STATUS);
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	9c df       	rcall	.-200    	; 0x278 <i2c_write>
		i2c_rep_start(MPL3115a2+I2C_READ);
     340:	81 ec       	ldi	r24, 0xC1	; 193
     342:	7e df       	rcall	.-260    	; 0x240 <i2c_rep_start>
		altStatus = i2c_readNak();
     344:	b5 df       	rcall	.-150    	; 0x2b0 <i2c_readNak>
     346:	18 2f       	mov	r17, r24
		i2c_stop();
     348:	8f df       	rcall	.-226    	; 0x268 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34a:	8f e8       	ldi	r24, 0x8F	; 143
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <_Z20altimeter_get_statusv+0x20>
     352:	00 c0       	rjmp	.+0      	; 0x354 <_Z20altimeter_get_statusv+0x26>
     354:	00 00       	nop

uint8_t altimeter_get_status(void) 
{ 
	uint8_t altStatus = 0x00; 
	int i = 0;
	while (((altStatus & 0x08) == 0) && (i <= 10))
     356:	13 fd       	sbrc	r17, 3
     358:	03 c0       	rjmp	.+6      	; 0x360 <_Z20altimeter_get_statusv+0x32>
     35a:	21 97       	sbiw	r28, 0x01	; 1
     35c:	20 97       	sbiw	r28, 0x00	; 0
     35e:	61 f7       	brne	.-40     	; 0x338 <_Z20altimeter_get_statusv+0xa>
		_delay_us(100);
		i++;
	}
	//DDRB |= 0x30; PORTB |= 0x30;;
	return altStatus;
} 
     360:	81 2f       	mov	r24, r17
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	08 95       	ret

0000036a <_Z10mpl_getAlth>:
	
	return altitude;
}

float mpl_getAlt(uint8_t altStatus) 
{    
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
	debug_println("Starting mpl_getAlt");
     37c:	87 e1       	ldi	r24, 0x17	; 23
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	ee d0       	rcall	.+476    	; 0x55e <_Z13debug_printlnPKc>
	long temp = 0;
   
	altimeter_set_active();
     382:	cd df       	rcall	.-102    	; 0x31e <_Z20altimeter_set_activev>
    
	altimeter_get_status(); 
     384:	d4 df       	rcall	.-88     	; 0x32e <_Z20altimeter_get_statusv>
	
	debug_println("mpl_getAlt active and status complete");
     386:	8b e2       	ldi	r24, 0x2B	; 43
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	e9 d0       	rcall	.+466    	; 0x55e <_Z13debug_printlnPKc>
    
	int8_t msbA,csbA,lsbA,msbT,lsbT = 0x00; 
       
	i2c_start_wait(MPL3115a2+I2C_WRITE); 
     38c:	80 ec       	ldi	r24, 0xC0	; 192
     38e:	62 df       	rcall	.-316    	; 0x254 <i2c_start_wait>
	i2c_write(OUT_P_MSB); 
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	72 df       	rcall	.-284    	; 0x278 <i2c_write>
	i2c_rep_start(MPL3115a2+I2C_READ); 
     394:	81 ec       	ldi	r24, 0xC1	; 193
     396:	54 df       	rcall	.-344    	; 0x240 <i2c_rep_start>
	//_delay_ms(10);
	msbA = i2c_readAck(); 
     398:	8d df       	rcall	.-230    	; 0x2b4 <i2c_readAck>
     39a:	b8 2e       	mov	r11, r24
	csbA = i2c_readAck(); 
     39c:	8b df       	rcall	.-234    	; 0x2b4 <i2c_readAck>
     39e:	18 2f       	mov	r17, r24
	lsbA = i2c_readAck();
     3a0:	89 df       	rcall	.-238    	; 0x2b4 <i2c_readAck>
     3a2:	08 2f       	mov	r16, r24
	msbT = i2c_readAck();
     3a4:	87 df       	rcall	.-242    	; 0x2b4 <i2c_readAck>
     3a6:	d8 2f       	mov	r29, r24
	lsbT = i2c_readNak(); 
     3a8:	83 df       	rcall	.-250    	; 0x2b0 <i2c_readNak>
     3aa:	c8 2f       	mov	r28, r24
	i2c_stop(); 
     3ac:	5d df       	rcall	.-326    	; 0x268 <i2c_stop>
	
	debug_println("mpl_getAlt i2c stopped");
     3ae:	81 e5       	ldi	r24, 0x51	; 81
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	d5 d0       	rcall	.+426    	; 0x55e <_Z13debug_printlnPKc>
		altitude = (float) (temp >> 8) + (float) ((lsbA >> 4)/16.0); // Whole number plus fraction altitude in meters for negative altitude
		altitude *= -1.;
	}
	else 
	{
		temp = ((msbA << 8) | csbA);
     3b4:	6b 2d       	mov	r22, r11
     3b6:	77 27       	eor	r23, r23
     3b8:	67 fd       	sbrc	r22, 7
     3ba:	70 95       	com	r23
     3bc:	76 2f       	mov	r23, r22
     3be:	66 27       	eor	r22, r22
     3c0:	81 2f       	mov	r24, r17
     3c2:	99 27       	eor	r25, r25
     3c4:	87 fd       	sbrc	r24, 7
     3c6:	90 95       	com	r25
     3c8:	68 2b       	or	r22, r24
     3ca:	79 2b       	or	r23, r25
		altitude = (float) (temp) + (float) ((lsbA >> 4)/16.0);  // Whole number plus fraction altitude in meters
     3cc:	88 27       	eor	r24, r24
     3ce:	77 fd       	sbrc	r23, 7
     3d0:	80 95       	com	r24
     3d2:	98 2f       	mov	r25, r24
     3d4:	76 d3       	rcall	.+1772   	; 0xac2 <__floatsisf>
     3d6:	6b 01       	movw	r12, r22
     3d8:	7c 01       	movw	r14, r24
     3da:	60 2f       	mov	r22, r16
     3dc:	77 27       	eor	r23, r23
     3de:	67 fd       	sbrc	r22, 7
     3e0:	70 95       	com	r23
     3e2:	75 95       	asr	r23
     3e4:	67 95       	ror	r22
     3e6:	75 95       	asr	r23
     3e8:	67 95       	ror	r22
     3ea:	75 95       	asr	r23
     3ec:	67 95       	ror	r22
     3ee:	75 95       	asr	r23
     3f0:	67 95       	ror	r22
     3f2:	88 27       	eor	r24, r24
     3f4:	77 fd       	sbrc	r23, 7
     3f6:	80 95       	com	r24
     3f8:	98 2f       	mov	r25, r24
     3fa:	63 d3       	rcall	.+1734   	; 0xac2 <__floatsisf>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5d e3       	ldi	r21, 0x3D	; 61
     404:	0e d4       	rcall	.+2076   	; 0xc22 <__mulsf3>
     406:	9b 01       	movw	r18, r22
     408:	ac 01       	movw	r20, r24
     40a:	c7 01       	movw	r24, r14
     40c:	b6 01       	movw	r22, r12
     40e:	ef d2       	rcall	.+1502   	; 0x9ee <__addsf3>
     410:	60 93 98 02 	sts	0x0298, r22
     414:	70 93 99 02 	sts	0x0299, r23
     418:	80 93 9a 02 	sts	0x029A, r24
     41c:	90 93 9b 02 	sts	0x029B, r25
	}
	
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
     420:	4b 2d       	mov	r20, r11
     422:	55 27       	eor	r21, r21
     424:	47 fd       	sbrc	r20, 7
     426:	50 95       	com	r21
     428:	65 2f       	mov	r22, r21
     42a:	75 2f       	mov	r23, r21
     42c:	ba 01       	movw	r22, r20
     42e:	55 27       	eor	r21, r21
     430:	44 27       	eor	r20, r20
     432:	81 2f       	mov	r24, r17
     434:	99 27       	eor	r25, r25
     436:	87 fd       	sbrc	r24, 7
     438:	90 95       	com	r25
     43a:	a9 2f       	mov	r26, r25
     43c:	b9 2f       	mov	r27, r25
     43e:	ba 2f       	mov	r27, r26
     440:	a9 2f       	mov	r26, r25
     442:	98 2f       	mov	r25, r24
     444:	88 27       	eor	r24, r24
     446:	84 2b       	or	r24, r20
     448:	95 2b       	or	r25, r21
     44a:	a6 2b       	or	r26, r22
     44c:	b7 2b       	or	r27, r23
     44e:	40 2f       	mov	r20, r16
     450:	55 27       	eor	r21, r21
     452:	47 fd       	sbrc	r20, 7
     454:	50 95       	com	r21
     456:	65 2f       	mov	r22, r21
     458:	75 2f       	mov	r23, r21
     45a:	84 2b       	or	r24, r20
     45c:	95 2b       	or	r25, r21
     45e:	a6 2b       	or	r26, r22
     460:	b7 2b       	or	r27, r23
	pressure_whole >>= 6;
	
	lsbA &= 0x30;
     462:	00 73       	andi	r16, 0x30	; 48
	lsbA >>= 4;
     464:	11 27       	eor	r17, r17
     466:	07 fd       	sbrc	r16, 7
     468:	10 95       	com	r17
     46a:	15 95       	asr	r17
     46c:	07 95       	ror	r16
     46e:	15 95       	asr	r17
     470:	07 95       	ror	r16
     472:	15 95       	asr	r17
     474:	07 95       	ror	r16
     476:	15 95       	asr	r17
     478:	07 95       	ror	r16
		temp = ((msbA << 8) | csbA);
		altitude = (float) (temp) + (float) ((lsbA >> 4)/16.0);  // Whole number plus fraction altitude in meters
	}
	
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
	pressure_whole >>= 6;
     47a:	bc 01       	movw	r22, r24
     47c:	cd 01       	movw	r24, r26
     47e:	68 94       	set
     480:	15 f8       	bld	r1, 5
     482:	95 95       	asr	r25
     484:	87 95       	ror	r24
     486:	77 95       	ror	r23
     488:	67 95       	ror	r22
     48a:	16 94       	lsr	r1
     48c:	d1 f7       	brne	.-12     	; 0x482 <_Z10mpl_getAlth+0x118>
	
	lsbA &= 0x30;
	lsbA >>= 4;
	float pressure_frac = (float) lsbA/4.0;

	pressure = (float) (pressure_whole) + pressure_frac;
     48e:	19 d3       	rcall	.+1586   	; 0xac2 <__floatsisf>
     490:	6b 01       	movw	r12, r22
     492:	7c 01       	movw	r14, r24
	long pressure_whole =  ((long)msbA << 16 | (long)csbA << 8 | (long)lsbA) ; // Construct whole number pressure
	pressure_whole >>= 6;
	
	lsbA &= 0x30;
	lsbA >>= 4;
	float pressure_frac = (float) lsbA/4.0;
     494:	60 2f       	mov	r22, r16
     496:	77 27       	eor	r23, r23
     498:	67 fd       	sbrc	r22, 7
     49a:	70 95       	com	r23
     49c:	87 2f       	mov	r24, r23
     49e:	97 2f       	mov	r25, r23
     4a0:	10 d3       	rcall	.+1568   	; 0xac2 <__floatsisf>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5e e3       	ldi	r21, 0x3E	; 62
     4aa:	bb d3       	rcall	.+1910   	; 0xc22 <__mulsf3>
     4ac:	9b 01       	movw	r18, r22
     4ae:	ac 01       	movw	r20, r24

	pressure = (float) (pressure_whole) + pressure_frac;
     4b0:	c7 01       	movw	r24, r14
     4b2:	b6 01       	movw	r22, r12
     4b4:	9c d2       	rcall	.+1336   	; 0x9ee <__addsf3>
     4b6:	60 93 94 02 	sts	0x0294, r22
     4ba:	70 93 95 02 	sts	0x0295, r23
     4be:	80 93 96 02 	sts	0x0296, r24
     4c2:	90 93 97 02 	sts	0x0297, r25
		temperature = (float) (temp >> 8) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
		temperature *= -1.;
	}
else 
	{
		temperature = (float) (msbT) + (float)((lsbT >> 4)/16.0); // add whole and fractional degrees Centigrade
     4c6:	6d 2f       	mov	r22, r29
     4c8:	77 27       	eor	r23, r23
     4ca:	67 fd       	sbrc	r22, 7
     4cc:	70 95       	com	r23
     4ce:	87 2f       	mov	r24, r23
     4d0:	97 2f       	mov	r25, r23
     4d2:	f7 d2       	rcall	.+1518   	; 0xac2 <__floatsisf>
     4d4:	6b 01       	movw	r12, r22
     4d6:	7c 01       	movw	r14, r24
     4d8:	6c 2f       	mov	r22, r28
     4da:	77 27       	eor	r23, r23
     4dc:	67 fd       	sbrc	r22, 7
     4de:	70 95       	com	r23
     4e0:	75 95       	asr	r23
     4e2:	67 95       	ror	r22
     4e4:	75 95       	asr	r23
     4e6:	67 95       	ror	r22
     4e8:	75 95       	asr	r23
     4ea:	67 95       	ror	r22
     4ec:	75 95       	asr	r23
     4ee:	67 95       	ror	r22
     4f0:	88 27       	eor	r24, r24
     4f2:	77 fd       	sbrc	r23, 7
     4f4:	80 95       	com	r24
     4f6:	98 2f       	mov	r25, r24
     4f8:	e4 d2       	rcall	.+1480   	; 0xac2 <__floatsisf>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5d e3       	ldi	r21, 0x3D	; 61
     502:	8f d3       	rcall	.+1822   	; 0xc22 <__mulsf3>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	70 d2       	rcall	.+1248   	; 0x9ee <__addsf3>
     50e:	60 93 90 02 	sts	0x0290, r22
     512:	70 93 91 02 	sts	0x0291, r23
     516:	80 93 92 02 	sts	0x0292, r24
     51a:	90 93 93 02 	sts	0x0293, r25
	}
    
	if (temperature < 20) 
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 ea       	ldi	r20, 0xA0	; 160
     524:	51 e4       	ldi	r21, 0x41	; 65
     526:	c7 d2       	rcall	.+1422   	; 0xab6 <__cmpsf2>
     528:	88 23       	and	r24, r24
     52a:	14 f4       	brge	.+4      	; 0x530 <_Z10mpl_getAlth+0x1c6>
	{ 
		PINB = 0x30;
     52c:	80 e3       	ldi	r24, 0x30	; 48
     52e:	83 b9       	out	0x03, r24	; 3
	} 
   
	return altitude;
     530:	60 91 98 02 	lds	r22, 0x0298
     534:	70 91 99 02 	lds	r23, 0x0299
     538:	80 91 9a 02 	lds	r24, 0x029A
     53c:	90 91 9b 02 	lds	r25, 0x029B
} 
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	bf 90       	pop	r11
     552:	08 95       	ret

00000554 <_Z11debug_printPKc>:
	{
		char string[10]; 
		itoa(debugNum,string,10);
		debug_print(string);		
	}
}
     554:	bc 01       	movw	r22, r24
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	09 c2       	rjmp	.+1042   	; 0x96e <_Z15USART_putstringiPKc>
     55c:	08 95       	ret

0000055e <_Z13debug_printlnPKc>:
     55e:	bc 01       	movw	r22, r24
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	04 d2       	rcall	.+1032   	; 0x96e <_Z15USART_putstringiPKc>
     566:	68 e6       	ldi	r22, 0x68	; 104
     568:	72 e0       	ldi	r23, 0x02	; 2
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	ff c1       	rjmp	.+1022   	; 0x96e <_Z15USART_putstringiPKc>
     570:	08 95       	ret

00000572 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	64 97       	sbiw	r28, 0x14	; 20
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     58a:	8e 01       	movw	r16, r28
     58c:	0f 5f       	subi	r16, 0xFF	; 255
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	25 e0       	ldi	r18, 0x05	; 5
     592:	4a e0       	ldi	r20, 0x0A	; 10
     594:	cb d3       	rcall	.+1942   	; 0xd2c <dtostrf>
		debug_print(string);
     596:	c8 01       	movw	r24, r16
     598:	dd df       	rcall	.-70     	; 0x554 <_Z11debug_printPKc>
	}
}
     59a:	64 96       	adiw	r28, 0x14	; 20
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	4f 93       	push	r20
     5c4:	5f 93       	push	r21
     5c6:	6f 93       	push	r22
     5c8:	7f 93       	push	r23
     5ca:	8f 93       	push	r24
     5cc:	9f 93       	push	r25
     5ce:	af 93       	push	r26
     5d0:	bf 93       	push	r27
     5d2:	cf 93       	push	r28
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
     5d8:	83 b1       	in	r24, 0x03	; 3
     5da:	c0 91 9c 02 	lds	r28, 0x029C
     5de:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
     5e0:	83 b1       	in	r24, 0x03	; 3
     5e2:	80 93 9c 02 	sts	0x029C, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
     5e6:	c0 ff       	sbrs	r28, 0
     5e8:	1c c0       	rjmp	.+56     	; 0x622 <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
     5ea:	18 9b       	sbis	0x03, 0	; 3
     5ec:	0a c0       	rjmp	.+20     	; 0x602 <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
     5ee:	0d d1       	rcall	.+538    	; 0x80a <_Z6microsv>
     5f0:	60 93 b1 02 	sts	0x02B1, r22
     5f4:	70 93 b2 02 	sts	0x02B2, r23
     5f8:	80 93 b3 02 	sts	0x02B3, r24
     5fc:	90 93 b4 02 	sts	0x02B4, r25
     600:	10 c0       	rjmp	.+32     	; 0x622 <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
     602:	03 d1       	rcall	.+518    	; 0x80a <_Z6microsv>
     604:	20 91 b1 02 	lds	r18, 0x02B1
     608:	30 91 b2 02 	lds	r19, 0x02B2
     60c:	62 1b       	sub	r22, r18
     60e:	73 0b       	sbc	r23, r19
     610:	70 93 c1 02 	sts	0x02C1, r23
     614:	60 93 c0 02 	sts	0x02C0, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
     618:	80 91 b5 02 	lds	r24, 0x02B5
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
     622:	c1 ff       	sbrs	r28, 1
     624:	1c c0       	rjmp	.+56     	; 0x65e <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
     626:	19 9b       	sbis	0x03, 1	; 3
     628:	0a c0       	rjmp	.+20     	; 0x63e <__vector_9+0x8e>
		{
			ulAileronStart = micros();
     62a:	ef d0       	rcall	.+478    	; 0x80a <_Z6microsv>
     62c:	60 93 ad 02 	sts	0x02AD, r22
     630:	70 93 ae 02 	sts	0x02AE, r23
     634:	80 93 af 02 	sts	0x02AF, r24
     638:	90 93 b0 02 	sts	0x02B0, r25
     63c:	10 c0       	rjmp	.+32     	; 0x65e <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
     63e:	e5 d0       	rcall	.+458    	; 0x80a <_Z6microsv>
     640:	20 91 ad 02 	lds	r18, 0x02AD
     644:	30 91 ae 02 	lds	r19, 0x02AE
     648:	62 1b       	sub	r22, r18
     64a:	73 0b       	sbc	r23, r19
     64c:	70 93 bf 02 	sts	0x02BF, r23
     650:	60 93 be 02 	sts	0x02BE, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
     654:	80 91 b5 02 	lds	r24, 0x02B5
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
     65e:	c2 ff       	sbrs	r28, 2
     660:	1c c0       	rjmp	.+56     	; 0x69a <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
     662:	1a 9b       	sbis	0x03, 2	; 3
     664:	0a c0       	rjmp	.+20     	; 0x67a <__vector_9+0xca>
		{
			ulElevatorStart = micros();
     666:	d1 d0       	rcall	.+418    	; 0x80a <_Z6microsv>
     668:	60 93 a9 02 	sts	0x02A9, r22
     66c:	70 93 aa 02 	sts	0x02AA, r23
     670:	80 93 ab 02 	sts	0x02AB, r24
     674:	90 93 ac 02 	sts	0x02AC, r25
     678:	10 c0       	rjmp	.+32     	; 0x69a <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
     67a:	c7 d0       	rcall	.+398    	; 0x80a <_Z6microsv>
     67c:	20 91 a9 02 	lds	r18, 0x02A9
     680:	30 91 aa 02 	lds	r19, 0x02AA
     684:	62 1b       	sub	r22, r18
     686:	73 0b       	sbc	r23, r19
     688:	70 93 bd 02 	sts	0x02BD, r23
     68c:	60 93 bc 02 	sts	0x02BC, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
     690:	80 91 b5 02 	lds	r24, 0x02B5
     694:	84 60       	ori	r24, 0x04	; 4
     696:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
     69a:	c3 ff       	sbrs	r28, 3
     69c:	1c c0       	rjmp	.+56     	; 0x6d6 <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
     69e:	1b 9b       	sbis	0x03, 3	; 3
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <__vector_9+0x106>
		{
			ulRudderStart = micros();
     6a2:	b3 d0       	rcall	.+358    	; 0x80a <_Z6microsv>
     6a4:	60 93 a5 02 	sts	0x02A5, r22
     6a8:	70 93 a6 02 	sts	0x02A6, r23
     6ac:	80 93 a7 02 	sts	0x02A7, r24
     6b0:	90 93 a8 02 	sts	0x02A8, r25
     6b4:	10 c0       	rjmp	.+32     	; 0x6d6 <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
     6b6:	a9 d0       	rcall	.+338    	; 0x80a <_Z6microsv>
     6b8:	20 91 a5 02 	lds	r18, 0x02A5
     6bc:	30 91 a6 02 	lds	r19, 0x02A6
     6c0:	62 1b       	sub	r22, r18
     6c2:	73 0b       	sbc	r23, r19
     6c4:	70 93 bb 02 	sts	0x02BB, r23
     6c8:	60 93 ba 02 	sts	0x02BA, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
     6cc:	80 91 b5 02 	lds	r24, 0x02B5
     6d0:	88 60       	ori	r24, 0x08	; 8
     6d2:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
     6d6:	c4 ff       	sbrs	r28, 4
     6d8:	1c c0       	rjmp	.+56     	; 0x712 <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
     6da:	1c 9b       	sbis	0x03, 4	; 3
     6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <__vector_9+0x142>
		{
			ulGearStart = micros();
     6de:	95 d0       	rcall	.+298    	; 0x80a <_Z6microsv>
     6e0:	60 93 a1 02 	sts	0x02A1, r22
     6e4:	70 93 a2 02 	sts	0x02A2, r23
     6e8:	80 93 a3 02 	sts	0x02A3, r24
     6ec:	90 93 a4 02 	sts	0x02A4, r25
     6f0:	10 c0       	rjmp	.+32     	; 0x712 <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
     6f2:	8b d0       	rcall	.+278    	; 0x80a <_Z6microsv>
     6f4:	20 91 a1 02 	lds	r18, 0x02A1
     6f8:	30 91 a2 02 	lds	r19, 0x02A2
     6fc:	62 1b       	sub	r22, r18
     6fe:	73 0b       	sbc	r23, r19
     700:	70 93 b9 02 	sts	0x02B9, r23
     704:	60 93 b8 02 	sts	0x02B8, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
     708:	80 91 b5 02 	lds	r24, 0x02B5
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
     712:	c5 ff       	sbrs	r28, 5
     714:	1c c0       	rjmp	.+56     	; 0x74e <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
     716:	1d 9b       	sbis	0x03, 5	; 3
     718:	0a c0       	rjmp	.+20     	; 0x72e <__vector_9+0x17e>
		{
			ulAuxStart = micros();
     71a:	77 d0       	rcall	.+238    	; 0x80a <_Z6microsv>
     71c:	60 93 9d 02 	sts	0x029D, r22
     720:	70 93 9e 02 	sts	0x029E, r23
     724:	80 93 9f 02 	sts	0x029F, r24
     728:	90 93 a0 02 	sts	0x02A0, r25
     72c:	10 c0       	rjmp	.+32     	; 0x74e <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
     72e:	6d d0       	rcall	.+218    	; 0x80a <_Z6microsv>
     730:	20 91 9d 02 	lds	r18, 0x029D
     734:	30 91 9e 02 	lds	r19, 0x029E
     738:	62 1b       	sub	r22, r18
     73a:	73 0b       	sbc	r23, r19
     73c:	70 93 b7 02 	sts	0x02B7, r23
     740:	60 93 b6 02 	sts	0x02B6, r22
			rxUpdateFlagsShared |= AUX_FLAG;
     744:	80 91 b5 02 	lds	r24, 0x02B5
     748:	80 62       	ori	r24, 0x20	; 32
     74a:	80 93 b5 02 	sts	0x02B5, r24
		}
	}
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	cf 91       	pop	r28
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0b be       	out	0x3b, r0	; 59
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti

00000776 <__vector_23>:
	m = timer0_millis;
	SREG = oldSREG;
	sei();

	return m;
}
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	80 91 c3 02 	lds	r24, 0x02C3
     790:	90 91 c4 02 	lds	r25, 0x02C4
     794:	a0 91 c5 02 	lds	r26, 0x02C5
     798:	b0 91 c6 02 	lds	r27, 0x02C6
     79c:	30 91 c2 02 	lds	r19, 0x02C2
     7a0:	23 e0       	ldi	r18, 0x03	; 3
     7a2:	23 0f       	add	r18, r19
     7a4:	2d 37       	cpi	r18, 0x7D	; 125
     7a6:	20 f4       	brcc	.+8      	; 0x7b0 <__vector_23+0x3a>
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	a1 1d       	adc	r26, r1
     7ac:	b1 1d       	adc	r27, r1
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <__vector_23+0x44>
     7b0:	26 e8       	ldi	r18, 0x86	; 134
     7b2:	23 0f       	add	r18, r19
     7b4:	02 96       	adiw	r24, 0x02	; 2
     7b6:	a1 1d       	adc	r26, r1
     7b8:	b1 1d       	adc	r27, r1
     7ba:	20 93 c2 02 	sts	0x02C2, r18
     7be:	80 93 c3 02 	sts	0x02C3, r24
     7c2:	90 93 c4 02 	sts	0x02C4, r25
     7c6:	a0 93 c5 02 	sts	0x02C5, r26
     7ca:	b0 93 c6 02 	sts	0x02C6, r27
     7ce:	80 91 c7 02 	lds	r24, 0x02C7
     7d2:	90 91 c8 02 	lds	r25, 0x02C8
     7d6:	a0 91 c9 02 	lds	r26, 0x02C9
     7da:	b0 91 ca 02 	lds	r27, 0x02CA
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	a1 1d       	adc	r26, r1
     7e2:	b1 1d       	adc	r27, r1
     7e4:	80 93 c7 02 	sts	0x02C7, r24
     7e8:	90 93 c8 02 	sts	0x02C8, r25
     7ec:	a0 93 c9 02 	sts	0x02C9, r26
     7f0:	b0 93 ca 02 	sts	0x02CA, r27
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	3f 91       	pop	r19
     7fe:	2f 91       	pop	r18
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
     80a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     80c:	f8 94       	cli
	m = timer0_overflow_count;
     80e:	80 91 c7 02 	lds	r24, 0x02C7
     812:	90 91 c8 02 	lds	r25, 0x02C8
     816:	a0 91 c9 02 	lds	r26, 0x02C9
     81a:	b0 91 ca 02 	lds	r27, 0x02CA
	t = TCNT0;
     81e:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     820:	a8 9b       	sbis	0x15, 0	; 21
     822:	02 c0       	rjmp	.+4      	; 0x828 <_Z6microsv+0x1e>
     824:	2f 3f       	cpi	r18, 0xFF	; 255
     826:	a9 f4       	brne	.+42     	; 0x852 <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     828:	3f bf       	out	0x3f, r19	; 63
	
	sei();
     82a:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     82c:	ba 2f       	mov	r27, r26
     82e:	a9 2f       	mov	r26, r25
     830:	98 2f       	mov	r25, r24
     832:	88 27       	eor	r24, r24
     834:	82 0f       	add	r24, r18
     836:	91 1d       	adc	r25, r1
     838:	a1 1d       	adc	r26, r1
     83a:	b1 1d       	adc	r27, r1
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	66 0f       	add	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	88 1f       	adc	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	88 1f       	adc	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	a1 1d       	adc	r26, r1
     856:	b1 1d       	adc	r27, r1
     858:	e7 cf       	rjmp	.-50     	; 0x828 <_Z6microsv+0x1e>

0000085a <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
     860:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	85 bd       	out	0x25, r24	; 37
     866:	08 95       	ret

00000868 <_Z10USART_initii>:
	{
		while(!(UCSR3A & (1<<RXC3)));
		return UDR3;
	}
	
}
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	ec 01       	movw	r28, r24
     86e:	cb 01       	movw	r24, r22
     870:	aa 27       	eor	r26, r26
     872:	97 fd       	sbrc	r25, 7
     874:	a0 95       	com	r26
     876:	ba 2f       	mov	r27, r26
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	aa 1f       	adc	r26, r26
     87e:	bb 1f       	adc	r27, r27
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	aa 1f       	adc	r26, r26
     886:	bb 1f       	adc	r27, r27
     888:	9c 01       	movw	r18, r24
     88a:	ad 01       	movw	r20, r26
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	44 1f       	adc	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
     898:	44 1f       	adc	r20, r20
     89a:	55 1f       	adc	r21, r21
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	74 e2       	ldi	r23, 0x24	; 36
     8a0:	84 ef       	ldi	r24, 0xF4	; 244
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	21 d2       	rcall	.+1090   	; 0xce8 <__udivmodsi4>
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	20 97       	sbiw	r28, 0x00	; 0
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <_Z10USART_initii+0x5c>
     8ae:	30 93 c5 00 	sts	0x00C5, r19
     8b2:	20 93 c4 00 	sts	0x00C4, r18
     8b6:	88 e1       	ldi	r24, 0x18	; 24
     8b8:	80 93 c1 00 	sts	0x00C1, r24
     8bc:	86 e0       	ldi	r24, 0x06	; 6
     8be:	80 93 c2 00 	sts	0x00C2, r24
     8c2:	28 c0       	rjmp	.+80     	; 0x914 <_Z10USART_initii+0xac>
     8c4:	c1 30       	cpi	r28, 0x01	; 1
     8c6:	d1 05       	cpc	r29, r1
     8c8:	59 f4       	brne	.+22     	; 0x8e0 <_Z10USART_initii+0x78>
     8ca:	30 93 cd 00 	sts	0x00CD, r19
     8ce:	20 93 cc 00 	sts	0x00CC, r18
     8d2:	88 e1       	ldi	r24, 0x18	; 24
     8d4:	80 93 c9 00 	sts	0x00C9, r24
     8d8:	86 e0       	ldi	r24, 0x06	; 6
     8da:	80 93 ca 00 	sts	0x00CA, r24
     8de:	1a c0       	rjmp	.+52     	; 0x914 <_Z10USART_initii+0xac>
     8e0:	c2 30       	cpi	r28, 0x02	; 2
     8e2:	d1 05       	cpc	r29, r1
     8e4:	59 f4       	brne	.+22     	; 0x8fc <_Z10USART_initii+0x94>
     8e6:	30 93 d5 00 	sts	0x00D5, r19
     8ea:	20 93 d4 00 	sts	0x00D4, r18
     8ee:	88 e1       	ldi	r24, 0x18	; 24
     8f0:	80 93 d1 00 	sts	0x00D1, r24
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	80 93 d2 00 	sts	0x00D2, r24
     8fa:	0c c0       	rjmp	.+24     	; 0x914 <_Z10USART_initii+0xac>
     8fc:	23 97       	sbiw	r28, 0x03	; 3
     8fe:	51 f4       	brne	.+20     	; 0x914 <_Z10USART_initii+0xac>
     900:	30 93 35 01 	sts	0x0135, r19
     904:	20 93 34 01 	sts	0x0134, r18
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	80 93 31 01 	sts	0x0131, r24
     90e:	86 e0       	ldi	r24, 0x06	; 6
     910:	80 93 32 01 	sts	0x0132, r24
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <_Z10USART_sendih>:
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	41 f4       	brne	.+16     	; 0x92e <_Z10USART_sendih+0x14>
     91e:	e0 ec       	ldi	r30, 0xC0	; 192
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	85 ff       	sbrs	r24, 5
     926:	fd cf       	rjmp	.-6      	; 0x922 <_Z10USART_sendih+0x8>
     928:	60 93 c6 00 	sts	0x00C6, r22
     92c:	08 95       	ret
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	91 05       	cpc	r25, r1
     932:	41 f4       	brne	.+16     	; 0x944 <_Z10USART_sendih+0x2a>
     934:	e8 ec       	ldi	r30, 0xC8	; 200
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	85 ff       	sbrs	r24, 5
     93c:	fd cf       	rjmp	.-6      	; 0x938 <_Z10USART_sendih+0x1e>
     93e:	60 93 ce 00 	sts	0x00CE, r22
     942:	08 95       	ret
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	91 05       	cpc	r25, r1
     948:	41 f4       	brne	.+16     	; 0x95a <_Z10USART_sendih+0x40>
     94a:	e0 ed       	ldi	r30, 0xD0	; 208
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	85 ff       	sbrs	r24, 5
     952:	fd cf       	rjmp	.-6      	; 0x94e <_Z10USART_sendih+0x34>
     954:	60 93 d6 00 	sts	0x00D6, r22
     958:	08 95       	ret
     95a:	03 97       	sbiw	r24, 0x03	; 3
     95c:	39 f4       	brne	.+14     	; 0x96c <_Z10USART_sendih+0x52>
     95e:	e0 e3       	ldi	r30, 0x30	; 48
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	80 81       	ld	r24, Z
     964:	85 ff       	sbrs	r24, 5
     966:	fd cf       	rjmp	.-6      	; 0x962 <_Z10USART_sendih+0x48>
     968:	60 93 36 01 	sts	0x0136, r22
     96c:	08 95       	ret

0000096e <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	8c 01       	movw	r16, r24
     978:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     97a:	68 81       	ld	r22, Y
     97c:	66 23       	and	r22, r22
     97e:	31 f0       	breq	.+12     	; 0x98c <_Z15USART_putstringiPKc+0x1e>
     980:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
     982:	c8 01       	movw	r24, r16
     984:	ca df       	rcall	.-108    	; 0x91a <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
     986:	69 91       	ld	r22, Y+
     988:	61 11       	cpse	r22, r1
     98a:	fb cf       	rjmp	.-10     	; 0x982 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <_Z10initialisev>:
    }
}

void initialise()
{
	USART_init(USART_PC,9600);
     996:	60 e8       	ldi	r22, 0x80	; 128
     998:	75 e2       	ldi	r23, 0x25	; 37
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	64 df       	rcall	.-312    	; 0x868 <_Z10USART_initii>
	initTimers();
     9a0:	5c df       	rcall	.-328    	; 0x85a <_Z10initTimersv>
	//gps_init();
	//rx_init();
	//quad_output_init();
	altimeter_init();
     9a2:	b8 dc       	rcall	.-1680   	; 0x314 <_Z14altimeter_initv>
	
	debug_println("Initialization complete!");
     9a4:	8b e6       	ldi	r24, 0x6B	; 107
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	da cd       	rjmp	.-1100   	; 0x55e <_Z13debug_printlnPKc>
     9aa:	08 95       	ret

000009ac <main>:
float compass_get_heading();	//returns current heading, formatted as degrees relative to North (0-360)


int main(void)
{
	initialise();
     9ac:	f4 df       	rcall	.-24     	; 0x996 <_Z10initialisev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
     9b0:	83 ed       	ldi	r24, 0xD3	; 211
     9b2:	90 e3       	ldi	r25, 0x30	; 48
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <main+0x8>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <main+0x12>
     9be:	00 00       	nop
	_delay_ms(1000);
	debug_printf(mpl_getAlt(altimeter_get_status()));
     9c0:	b6 dc       	rcall	.-1684   	; 0x32e <_Z20altimeter_get_statusv>
     9c2:	d3 dc       	rcall	.-1626   	; 0x36a <_Z10mpl_getAlth>
     9c4:	d6 dd       	rcall	.-1108   	; 0x572 <_Z12debug_printff>
	debug_print("\n\r");
     9c6:	88 e6       	ldi	r24, 0x68	; 104
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	c4 dd       	rcall	.-1144   	; 0x554 <_Z11debug_printPKc>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	87 ea       	ldi	r24, 0xA7	; 167
     9d0:	91 e6       	ldi	r25, 0x61	; 97
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <main+0x26>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <main+0x30>
     9dc:	00 00       	nop
    while(1)
    {
		_delay_ms(2000);
		debug_printf(mpl_getAlt(altimeter_get_status()));
     9de:	a7 dc       	rcall	.-1714   	; 0x32e <_Z20altimeter_get_statusv>
     9e0:	c4 dc       	rcall	.-1656   	; 0x36a <_Z10mpl_getAlth>
     9e2:	c7 dd       	rcall	.-1138   	; 0x572 <_Z12debug_printff>
		debug_println("Looping...");
     9e4:	84 e8       	ldi	r24, 0x84	; 132
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	ba dd       	rcall	.-1164   	; 0x55e <_Z13debug_printlnPKc>
     9ea:	f0 cf       	rjmp	.-32     	; 0x9cc <main+0x20>

000009ec <__subsf3>:
     9ec:	50 58       	subi	r21, 0x80	; 128

000009ee <__addsf3>:
     9ee:	bb 27       	eor	r27, r27
     9f0:	aa 27       	eor	r26, r26
     9f2:	0e d0       	rcall	.+28     	; 0xa10 <__addsf3x>
     9f4:	dc c0       	rjmp	.+440    	; 0xbae <__fp_round>
     9f6:	cd d0       	rcall	.+410    	; 0xb92 <__fp_pscA>
     9f8:	30 f0       	brcs	.+12     	; 0xa06 <__addsf3+0x18>
     9fa:	d2 d0       	rcall	.+420    	; 0xba0 <__fp_pscB>
     9fc:	20 f0       	brcs	.+8      	; 0xa06 <__addsf3+0x18>
     9fe:	31 f4       	brne	.+12     	; 0xa0c <__addsf3+0x1e>
     a00:	9f 3f       	cpi	r25, 0xFF	; 255
     a02:	11 f4       	brne	.+4      	; 0xa08 <__addsf3+0x1a>
     a04:	1e f4       	brtc	.+6      	; 0xa0c <__addsf3+0x1e>
     a06:	c2 c0       	rjmp	.+388    	; 0xb8c <__fp_nan>
     a08:	0e f4       	brtc	.+2      	; 0xa0c <__addsf3+0x1e>
     a0a:	e0 95       	com	r30
     a0c:	e7 fb       	bst	r30, 7
     a0e:	b8 c0       	rjmp	.+368    	; 0xb80 <__fp_inf>

00000a10 <__addsf3x>:
     a10:	e9 2f       	mov	r30, r25
     a12:	de d0       	rcall	.+444    	; 0xbd0 <__fp_split3>
     a14:	80 f3       	brcs	.-32     	; 0x9f6 <__addsf3+0x8>
     a16:	ba 17       	cp	r27, r26
     a18:	62 07       	cpc	r22, r18
     a1a:	73 07       	cpc	r23, r19
     a1c:	84 07       	cpc	r24, r20
     a1e:	95 07       	cpc	r25, r21
     a20:	18 f0       	brcs	.+6      	; 0xa28 <__addsf3x+0x18>
     a22:	71 f4       	brne	.+28     	; 0xa40 <__addsf3x+0x30>
     a24:	9e f5       	brtc	.+102    	; 0xa8c <__addsf3x+0x7c>
     a26:	f6 c0       	rjmp	.+492    	; 0xc14 <__fp_zero>
     a28:	0e f4       	brtc	.+2      	; 0xa2c <__addsf3x+0x1c>
     a2a:	e0 95       	com	r30
     a2c:	0b 2e       	mov	r0, r27
     a2e:	ba 2f       	mov	r27, r26
     a30:	a0 2d       	mov	r26, r0
     a32:	0b 01       	movw	r0, r22
     a34:	b9 01       	movw	r22, r18
     a36:	90 01       	movw	r18, r0
     a38:	0c 01       	movw	r0, r24
     a3a:	ca 01       	movw	r24, r20
     a3c:	a0 01       	movw	r20, r0
     a3e:	11 24       	eor	r1, r1
     a40:	ff 27       	eor	r31, r31
     a42:	59 1b       	sub	r21, r25
     a44:	99 f0       	breq	.+38     	; 0xa6c <__addsf3x+0x5c>
     a46:	59 3f       	cpi	r21, 0xF9	; 249
     a48:	50 f4       	brcc	.+20     	; 0xa5e <__addsf3x+0x4e>
     a4a:	50 3e       	cpi	r21, 0xE0	; 224
     a4c:	68 f1       	brcs	.+90     	; 0xaa8 <__addsf3x+0x98>
     a4e:	1a 16       	cp	r1, r26
     a50:	f0 40       	sbci	r31, 0x00	; 0
     a52:	a2 2f       	mov	r26, r18
     a54:	23 2f       	mov	r18, r19
     a56:	34 2f       	mov	r19, r20
     a58:	44 27       	eor	r20, r20
     a5a:	58 5f       	subi	r21, 0xF8	; 248
     a5c:	f3 cf       	rjmp	.-26     	; 0xa44 <__addsf3x+0x34>
     a5e:	46 95       	lsr	r20
     a60:	37 95       	ror	r19
     a62:	27 95       	ror	r18
     a64:	a7 95       	ror	r26
     a66:	f0 40       	sbci	r31, 0x00	; 0
     a68:	53 95       	inc	r21
     a6a:	c9 f7       	brne	.-14     	; 0xa5e <__addsf3x+0x4e>
     a6c:	7e f4       	brtc	.+30     	; 0xa8c <__addsf3x+0x7c>
     a6e:	1f 16       	cp	r1, r31
     a70:	ba 0b       	sbc	r27, r26
     a72:	62 0b       	sbc	r22, r18
     a74:	73 0b       	sbc	r23, r19
     a76:	84 0b       	sbc	r24, r20
     a78:	ba f0       	brmi	.+46     	; 0xaa8 <__addsf3x+0x98>
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	a1 f0       	breq	.+40     	; 0xaa6 <__addsf3x+0x96>
     a7e:	ff 0f       	add	r31, r31
     a80:	bb 1f       	adc	r27, r27
     a82:	66 1f       	adc	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	88 1f       	adc	r24, r24
     a88:	c2 f7       	brpl	.-16     	; 0xa7a <__addsf3x+0x6a>
     a8a:	0e c0       	rjmp	.+28     	; 0xaa8 <__addsf3x+0x98>
     a8c:	ba 0f       	add	r27, r26
     a8e:	62 1f       	adc	r22, r18
     a90:	73 1f       	adc	r23, r19
     a92:	84 1f       	adc	r24, r20
     a94:	48 f4       	brcc	.+18     	; 0xaa8 <__addsf3x+0x98>
     a96:	87 95       	ror	r24
     a98:	77 95       	ror	r23
     a9a:	67 95       	ror	r22
     a9c:	b7 95       	ror	r27
     a9e:	f7 95       	ror	r31
     aa0:	9e 3f       	cpi	r25, 0xFE	; 254
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <__addsf3x+0x96>
     aa4:	b3 cf       	rjmp	.-154    	; 0xa0c <__addsf3+0x1e>
     aa6:	93 95       	inc	r25
     aa8:	88 0f       	add	r24, r24
     aaa:	08 f0       	brcs	.+2      	; 0xaae <__addsf3x+0x9e>
     aac:	99 27       	eor	r25, r25
     aae:	ee 0f       	add	r30, r30
     ab0:	97 95       	ror	r25
     ab2:	87 95       	ror	r24
     ab4:	08 95       	ret

00000ab6 <__cmpsf2>:
     ab6:	40 d0       	rcall	.+128    	; 0xb38 <__fp_cmp>
     ab8:	08 f4       	brcc	.+2      	; 0xabc <__cmpsf2+0x6>
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	08 95       	ret

00000abe <__floatunsisf>:
     abe:	e8 94       	clt
     ac0:	09 c0       	rjmp	.+18     	; 0xad4 <__floatsisf+0x12>

00000ac2 <__floatsisf>:
     ac2:	97 fb       	bst	r25, 7
     ac4:	3e f4       	brtc	.+14     	; 0xad4 <__floatsisf+0x12>
     ac6:	90 95       	com	r25
     ac8:	80 95       	com	r24
     aca:	70 95       	com	r23
     acc:	61 95       	neg	r22
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	8f 4f       	sbci	r24, 0xFF	; 255
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
     ad4:	99 23       	and	r25, r25
     ad6:	a9 f0       	breq	.+42     	; 0xb02 <__floatsisf+0x40>
     ad8:	f9 2f       	mov	r31, r25
     ada:	96 e9       	ldi	r25, 0x96	; 150
     adc:	bb 27       	eor	r27, r27
     ade:	93 95       	inc	r25
     ae0:	f6 95       	lsr	r31
     ae2:	87 95       	ror	r24
     ae4:	77 95       	ror	r23
     ae6:	67 95       	ror	r22
     ae8:	b7 95       	ror	r27
     aea:	f1 11       	cpse	r31, r1
     aec:	f8 cf       	rjmp	.-16     	; 0xade <__floatsisf+0x1c>
     aee:	fa f4       	brpl	.+62     	; 0xb2e <__floatsisf+0x6c>
     af0:	bb 0f       	add	r27, r27
     af2:	11 f4       	brne	.+4      	; 0xaf8 <__floatsisf+0x36>
     af4:	60 ff       	sbrs	r22, 0
     af6:	1b c0       	rjmp	.+54     	; 0xb2e <__floatsisf+0x6c>
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	8f 4f       	sbci	r24, 0xFF	; 255
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	16 c0       	rjmp	.+44     	; 0xb2e <__floatsisf+0x6c>
     b02:	88 23       	and	r24, r24
     b04:	11 f0       	breq	.+4      	; 0xb0a <__floatsisf+0x48>
     b06:	96 e9       	ldi	r25, 0x96	; 150
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <__floatsisf+0x6a>
     b0a:	77 23       	and	r23, r23
     b0c:	21 f0       	breq	.+8      	; 0xb16 <__floatsisf+0x54>
     b0e:	9e e8       	ldi	r25, 0x8E	; 142
     b10:	87 2f       	mov	r24, r23
     b12:	76 2f       	mov	r23, r22
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <__floatsisf+0x5e>
     b16:	66 23       	and	r22, r22
     b18:	71 f0       	breq	.+28     	; 0xb36 <__floatsisf+0x74>
     b1a:	96 e8       	ldi	r25, 0x86	; 134
     b1c:	86 2f       	mov	r24, r22
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	2a f0       	brmi	.+10     	; 0xb2e <__floatsisf+0x6c>
     b24:	9a 95       	dec	r25
     b26:	66 0f       	add	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	88 1f       	adc	r24, r24
     b2c:	da f7       	brpl	.-10     	; 0xb24 <__floatsisf+0x62>
     b2e:	88 0f       	add	r24, r24
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	97 f9       	bld	r25, 7
     b36:	08 95       	ret

00000b38 <__fp_cmp>:
     b38:	99 0f       	add	r25, r25
     b3a:	00 08       	sbc	r0, r0
     b3c:	55 0f       	add	r21, r21
     b3e:	aa 0b       	sbc	r26, r26
     b40:	e0 e8       	ldi	r30, 0x80	; 128
     b42:	fe ef       	ldi	r31, 0xFE	; 254
     b44:	16 16       	cp	r1, r22
     b46:	17 06       	cpc	r1, r23
     b48:	e8 07       	cpc	r30, r24
     b4a:	f9 07       	cpc	r31, r25
     b4c:	c0 f0       	brcs	.+48     	; 0xb7e <__fp_cmp+0x46>
     b4e:	12 16       	cp	r1, r18
     b50:	13 06       	cpc	r1, r19
     b52:	e4 07       	cpc	r30, r20
     b54:	f5 07       	cpc	r31, r21
     b56:	98 f0       	brcs	.+38     	; 0xb7e <__fp_cmp+0x46>
     b58:	62 1b       	sub	r22, r18
     b5a:	73 0b       	sbc	r23, r19
     b5c:	84 0b       	sbc	r24, r20
     b5e:	95 0b       	sbc	r25, r21
     b60:	39 f4       	brne	.+14     	; 0xb70 <__fp_cmp+0x38>
     b62:	0a 26       	eor	r0, r26
     b64:	61 f0       	breq	.+24     	; 0xb7e <__fp_cmp+0x46>
     b66:	23 2b       	or	r18, r19
     b68:	24 2b       	or	r18, r20
     b6a:	25 2b       	or	r18, r21
     b6c:	21 f4       	brne	.+8      	; 0xb76 <__fp_cmp+0x3e>
     b6e:	08 95       	ret
     b70:	0a 26       	eor	r0, r26
     b72:	09 f4       	brne	.+2      	; 0xb76 <__fp_cmp+0x3e>
     b74:	a1 40       	sbci	r26, 0x01	; 1
     b76:	a6 95       	lsr	r26
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	81 1d       	adc	r24, r1
     b7c:	81 1d       	adc	r24, r1
     b7e:	08 95       	ret

00000b80 <__fp_inf>:
     b80:	97 f9       	bld	r25, 7
     b82:	9f 67       	ori	r25, 0x7F	; 127
     b84:	80 e8       	ldi	r24, 0x80	; 128
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	08 95       	ret

00000b8c <__fp_nan>:
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	80 ec       	ldi	r24, 0xC0	; 192
     b90:	08 95       	ret

00000b92 <__fp_pscA>:
     b92:	00 24       	eor	r0, r0
     b94:	0a 94       	dec	r0
     b96:	16 16       	cp	r1, r22
     b98:	17 06       	cpc	r1, r23
     b9a:	18 06       	cpc	r1, r24
     b9c:	09 06       	cpc	r0, r25
     b9e:	08 95       	ret

00000ba0 <__fp_pscB>:
     ba0:	00 24       	eor	r0, r0
     ba2:	0a 94       	dec	r0
     ba4:	12 16       	cp	r1, r18
     ba6:	13 06       	cpc	r1, r19
     ba8:	14 06       	cpc	r1, r20
     baa:	05 06       	cpc	r0, r21
     bac:	08 95       	ret

00000bae <__fp_round>:
     bae:	09 2e       	mov	r0, r25
     bb0:	03 94       	inc	r0
     bb2:	00 0c       	add	r0, r0
     bb4:	11 f4       	brne	.+4      	; 0xbba <__fp_round+0xc>
     bb6:	88 23       	and	r24, r24
     bb8:	52 f0       	brmi	.+20     	; 0xbce <__fp_round+0x20>
     bba:	bb 0f       	add	r27, r27
     bbc:	40 f4       	brcc	.+16     	; 0xbce <__fp_round+0x20>
     bbe:	bf 2b       	or	r27, r31
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__fp_round+0x18>
     bc2:	60 ff       	sbrs	r22, 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__fp_round+0x20>
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	8f 4f       	sbci	r24, 0xFF	; 255
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	08 95       	ret

00000bd0 <__fp_split3>:
     bd0:	57 fd       	sbrc	r21, 7
     bd2:	90 58       	subi	r25, 0x80	; 128
     bd4:	44 0f       	add	r20, r20
     bd6:	55 1f       	adc	r21, r21
     bd8:	59 f0       	breq	.+22     	; 0xbf0 <__fp_splitA+0x10>
     bda:	5f 3f       	cpi	r21, 0xFF	; 255
     bdc:	71 f0       	breq	.+28     	; 0xbfa <__fp_splitA+0x1a>
     bde:	47 95       	ror	r20

00000be0 <__fp_splitA>:
     be0:	88 0f       	add	r24, r24
     be2:	97 fb       	bst	r25, 7
     be4:	99 1f       	adc	r25, r25
     be6:	61 f0       	breq	.+24     	; 0xc00 <__fp_splitA+0x20>
     be8:	9f 3f       	cpi	r25, 0xFF	; 255
     bea:	79 f0       	breq	.+30     	; 0xc0a <__fp_splitA+0x2a>
     bec:	87 95       	ror	r24
     bee:	08 95       	ret
     bf0:	12 16       	cp	r1, r18
     bf2:	13 06       	cpc	r1, r19
     bf4:	14 06       	cpc	r1, r20
     bf6:	55 1f       	adc	r21, r21
     bf8:	f2 cf       	rjmp	.-28     	; 0xbde <__fp_split3+0xe>
     bfa:	46 95       	lsr	r20
     bfc:	f1 df       	rcall	.-30     	; 0xbe0 <__fp_splitA>
     bfe:	08 c0       	rjmp	.+16     	; 0xc10 <__fp_splitA+0x30>
     c00:	16 16       	cp	r1, r22
     c02:	17 06       	cpc	r1, r23
     c04:	18 06       	cpc	r1, r24
     c06:	99 1f       	adc	r25, r25
     c08:	f1 cf       	rjmp	.-30     	; 0xbec <__fp_splitA+0xc>
     c0a:	86 95       	lsr	r24
     c0c:	71 05       	cpc	r23, r1
     c0e:	61 05       	cpc	r22, r1
     c10:	08 94       	sec
     c12:	08 95       	ret

00000c14 <__fp_zero>:
     c14:	e8 94       	clt

00000c16 <__fp_szero>:
     c16:	bb 27       	eor	r27, r27
     c18:	66 27       	eor	r22, r22
     c1a:	77 27       	eor	r23, r23
     c1c:	cb 01       	movw	r24, r22
     c1e:	97 f9       	bld	r25, 7
     c20:	08 95       	ret

00000c22 <__mulsf3>:
     c22:	0b d0       	rcall	.+22     	; 0xc3a <__mulsf3x>
     c24:	c4 cf       	rjmp	.-120    	; 0xbae <__fp_round>
     c26:	b5 df       	rcall	.-150    	; 0xb92 <__fp_pscA>
     c28:	28 f0       	brcs	.+10     	; 0xc34 <__mulsf3+0x12>
     c2a:	ba df       	rcall	.-140    	; 0xba0 <__fp_pscB>
     c2c:	18 f0       	brcs	.+6      	; 0xc34 <__mulsf3+0x12>
     c2e:	95 23       	and	r25, r21
     c30:	09 f0       	breq	.+2      	; 0xc34 <__mulsf3+0x12>
     c32:	a6 cf       	rjmp	.-180    	; 0xb80 <__fp_inf>
     c34:	ab cf       	rjmp	.-170    	; 0xb8c <__fp_nan>
     c36:	11 24       	eor	r1, r1
     c38:	ee cf       	rjmp	.-36     	; 0xc16 <__fp_szero>

00000c3a <__mulsf3x>:
     c3a:	ca df       	rcall	.-108    	; 0xbd0 <__fp_split3>
     c3c:	a0 f3       	brcs	.-24     	; 0xc26 <__mulsf3+0x4>

00000c3e <__mulsf3_pse>:
     c3e:	95 9f       	mul	r25, r21
     c40:	d1 f3       	breq	.-12     	; 0xc36 <__mulsf3+0x14>
     c42:	95 0f       	add	r25, r21
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	55 1f       	adc	r21, r21
     c48:	62 9f       	mul	r22, r18
     c4a:	f0 01       	movw	r30, r0
     c4c:	72 9f       	mul	r23, r18
     c4e:	bb 27       	eor	r27, r27
     c50:	f0 0d       	add	r31, r0
     c52:	b1 1d       	adc	r27, r1
     c54:	63 9f       	mul	r22, r19
     c56:	aa 27       	eor	r26, r26
     c58:	f0 0d       	add	r31, r0
     c5a:	b1 1d       	adc	r27, r1
     c5c:	aa 1f       	adc	r26, r26
     c5e:	64 9f       	mul	r22, r20
     c60:	66 27       	eor	r22, r22
     c62:	b0 0d       	add	r27, r0
     c64:	a1 1d       	adc	r26, r1
     c66:	66 1f       	adc	r22, r22
     c68:	82 9f       	mul	r24, r18
     c6a:	22 27       	eor	r18, r18
     c6c:	b0 0d       	add	r27, r0
     c6e:	a1 1d       	adc	r26, r1
     c70:	62 1f       	adc	r22, r18
     c72:	73 9f       	mul	r23, r19
     c74:	b0 0d       	add	r27, r0
     c76:	a1 1d       	adc	r26, r1
     c78:	62 1f       	adc	r22, r18
     c7a:	83 9f       	mul	r24, r19
     c7c:	a0 0d       	add	r26, r0
     c7e:	61 1d       	adc	r22, r1
     c80:	22 1f       	adc	r18, r18
     c82:	74 9f       	mul	r23, r20
     c84:	33 27       	eor	r19, r19
     c86:	a0 0d       	add	r26, r0
     c88:	61 1d       	adc	r22, r1
     c8a:	23 1f       	adc	r18, r19
     c8c:	84 9f       	mul	r24, r20
     c8e:	60 0d       	add	r22, r0
     c90:	21 1d       	adc	r18, r1
     c92:	82 2f       	mov	r24, r18
     c94:	76 2f       	mov	r23, r22
     c96:	6a 2f       	mov	r22, r26
     c98:	11 24       	eor	r1, r1
     c9a:	9f 57       	subi	r25, 0x7F	; 127
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	8a f0       	brmi	.+34     	; 0xcc2 <__mulsf3_pse+0x84>
     ca0:	e1 f0       	breq	.+56     	; 0xcda <__mulsf3_pse+0x9c>
     ca2:	88 23       	and	r24, r24
     ca4:	4a f0       	brmi	.+18     	; 0xcb8 <__mulsf3_pse+0x7a>
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	bb 1f       	adc	r27, r27
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	91 50       	subi	r25, 0x01	; 1
     cb4:	50 40       	sbci	r21, 0x00	; 0
     cb6:	a9 f7       	brne	.-22     	; 0xca2 <__mulsf3_pse+0x64>
     cb8:	9e 3f       	cpi	r25, 0xFE	; 254
     cba:	51 05       	cpc	r21, r1
     cbc:	70 f0       	brcs	.+28     	; 0xcda <__mulsf3_pse+0x9c>
     cbe:	60 cf       	rjmp	.-320    	; 0xb80 <__fp_inf>
     cc0:	aa cf       	rjmp	.-172    	; 0xc16 <__fp_szero>
     cc2:	5f 3f       	cpi	r21, 0xFF	; 255
     cc4:	ec f3       	brlt	.-6      	; 0xcc0 <__mulsf3_pse+0x82>
     cc6:	98 3e       	cpi	r25, 0xE8	; 232
     cc8:	dc f3       	brlt	.-10     	; 0xcc0 <__mulsf3_pse+0x82>
     cca:	86 95       	lsr	r24
     ccc:	77 95       	ror	r23
     cce:	67 95       	ror	r22
     cd0:	b7 95       	ror	r27
     cd2:	f7 95       	ror	r31
     cd4:	e7 95       	ror	r30
     cd6:	9f 5f       	subi	r25, 0xFF	; 255
     cd8:	c1 f7       	brne	.-16     	; 0xcca <__mulsf3_pse+0x8c>
     cda:	fe 2b       	or	r31, r30
     cdc:	88 0f       	add	r24, r24
     cde:	91 1d       	adc	r25, r1
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	97 f9       	bld	r25, 7
     ce6:	08 95       	ret

00000ce8 <__udivmodsi4>:
     ce8:	a1 e2       	ldi	r26, 0x21	; 33
     cea:	1a 2e       	mov	r1, r26
     cec:	aa 1b       	sub	r26, r26
     cee:	bb 1b       	sub	r27, r27
     cf0:	fd 01       	movw	r30, r26
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <__udivmodsi4_ep>

00000cf4 <__udivmodsi4_loop>:
     cf4:	aa 1f       	adc	r26, r26
     cf6:	bb 1f       	adc	r27, r27
     cf8:	ee 1f       	adc	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	a2 17       	cp	r26, r18
     cfe:	b3 07       	cpc	r27, r19
     d00:	e4 07       	cpc	r30, r20
     d02:	f5 07       	cpc	r31, r21
     d04:	20 f0       	brcs	.+8      	; 0xd0e <__udivmodsi4_ep>
     d06:	a2 1b       	sub	r26, r18
     d08:	b3 0b       	sbc	r27, r19
     d0a:	e4 0b       	sbc	r30, r20
     d0c:	f5 0b       	sbc	r31, r21

00000d0e <__udivmodsi4_ep>:
     d0e:	66 1f       	adc	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	1a 94       	dec	r1
     d18:	69 f7       	brne	.-38     	; 0xcf4 <__udivmodsi4_loop>
     d1a:	60 95       	com	r22
     d1c:	70 95       	com	r23
     d1e:	80 95       	com	r24
     d20:	90 95       	com	r25
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	bd 01       	movw	r22, r26
     d28:	cf 01       	movw	r24, r30
     d2a:	08 95       	ret

00000d2c <dtostrf>:
     d2c:	ef 92       	push	r14
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	e8 01       	movw	r28, r16
     d38:	47 ff       	sbrs	r20, 7
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <dtostrf+0x14>
     d3c:	34 e1       	ldi	r19, 0x14	; 20
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <dtostrf+0x16>
     d40:	34 e0       	ldi	r19, 0x04	; 4
     d42:	e4 2f       	mov	r30, r20
     d44:	ff 27       	eor	r31, r31
     d46:	e7 fd       	sbrc	r30, 7
     d48:	f0 95       	com	r31
     d4a:	f7 ff       	sbrs	r31, 7
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <dtostrf+0x28>
     d4e:	f1 95       	neg	r31
     d50:	e1 95       	neg	r30
     d52:	f1 09       	sbc	r31, r1
     d54:	e3 2e       	mov	r14, r19
     d56:	02 2f       	mov	r16, r18
     d58:	2e 2f       	mov	r18, r30
     d5a:	ae 01       	movw	r20, r28
     d5c:	07 d0       	rcall	.+14     	; 0xd6c <dtoa_prf>
     d5e:	ce 01       	movw	r24, r28
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ef 90       	pop	r14
     d6a:	08 95       	ret

00000d6c <dtoa_prf>:
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	29 97       	sbiw	r28, 0x09	; 9
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	6a 01       	movw	r12, r20
     d98:	b2 2e       	mov	r11, r18
     d9a:	10 2f       	mov	r17, r16
     d9c:	0c 33       	cpi	r16, 0x3C	; 60
     d9e:	20 f4       	brcc	.+8      	; 0xda8 <dtoa_prf+0x3c>
     da0:	ff 24       	eor	r15, r15
     da2:	f3 94       	inc	r15
     da4:	f0 0e       	add	r15, r16
     da6:	02 c0       	rjmp	.+4      	; 0xdac <dtoa_prf+0x40>
     da8:	4c e3       	ldi	r20, 0x3C	; 60
     daa:	f4 2e       	mov	r15, r20
     dac:	0f 2d       	mov	r16, r15
     dae:	27 e0       	ldi	r18, 0x07	; 7
     db0:	ae 01       	movw	r20, r28
     db2:	4f 5f       	subi	r20, 0xFF	; 255
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	57 d1       	rcall	.+686    	; 0x1066 <__ftoa_engine>
     db8:	79 81       	ldd	r23, Y+1	; 0x01
     dba:	27 2f       	mov	r18, r23
     dbc:	29 70       	andi	r18, 0x09	; 9
     dbe:	21 30       	cpi	r18, 0x01	; 1
     dc0:	31 f0       	breq	.+12     	; 0xdce <dtoa_prf+0x62>
     dc2:	e1 fc       	sbrc	r14, 1
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <dtoa_prf+0x66>
     dc6:	e0 fc       	sbrc	r14, 0
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <dtoa_prf+0x6a>
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <dtoa_prf+0x6c>
     dce:	6d e2       	ldi	r22, 0x2D	; 45
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <dtoa_prf+0x6c>
     dd2:	6b e2       	ldi	r22, 0x2B	; 43
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <dtoa_prf+0x6c>
     dd6:	60 e2       	ldi	r22, 0x20	; 32
     dd8:	ae 2d       	mov	r26, r14
     dda:	a0 71       	andi	r26, 0x10	; 16
     ddc:	73 ff       	sbrs	r23, 3
     dde:	36 c0       	rjmp	.+108    	; 0xe4c <dtoa_prf+0xe0>
     de0:	66 23       	and	r22, r22
     de2:	11 f0       	breq	.+4      	; 0xde8 <dtoa_prf+0x7c>
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	01 c0       	rjmp	.+2      	; 0xdea <dtoa_prf+0x7e>
     de8:	83 e0       	ldi	r24, 0x03	; 3
     dea:	8b 15       	cp	r24, r11
     dec:	10 f4       	brcc	.+4      	; 0xdf2 <dtoa_prf+0x86>
     dee:	b8 1a       	sub	r11, r24
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <dtoa_prf+0x88>
     df2:	b1 2c       	mov	r11, r1
     df4:	a1 11       	cpse	r26, r1
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <dtoa_prf+0xa2>
     df8:	f6 01       	movw	r30, r12
     dfa:	8b 2d       	mov	r24, r11
     dfc:	90 e2       	ldi	r25, 0x20	; 32
     dfe:	88 23       	and	r24, r24
     e00:	19 f0       	breq	.+6      	; 0xe08 <dtoa_prf+0x9c>
     e02:	91 93       	st	Z+, r25
     e04:	81 50       	subi	r24, 0x01	; 1
     e06:	fb cf       	rjmp	.-10     	; 0xdfe <dtoa_prf+0x92>
     e08:	cb 0c       	add	r12, r11
     e0a:	d1 1c       	adc	r13, r1
     e0c:	b1 2c       	mov	r11, r1
     e0e:	66 23       	and	r22, r22
     e10:	31 f0       	breq	.+12     	; 0xe1e <dtoa_prf+0xb2>
     e12:	f6 01       	movw	r30, r12
     e14:	60 83       	st	Z, r22
     e16:	96 01       	movw	r18, r12
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	69 01       	movw	r12, r18
     e1e:	c6 01       	movw	r24, r12
     e20:	03 96       	adiw	r24, 0x03	; 3
     e22:	e2 fe       	sbrs	r14, 2
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <dtoa_prf+0xc4>
     e26:	2e e4       	ldi	r18, 0x4E	; 78
     e28:	f6 01       	movw	r30, r12
     e2a:	20 83       	st	Z, r18
     e2c:	31 e4       	ldi	r19, 0x41	; 65
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <dtoa_prf+0xcc>
     e30:	2e e6       	ldi	r18, 0x6E	; 110
     e32:	f6 01       	movw	r30, r12
     e34:	20 83       	st	Z, r18
     e36:	31 e6       	ldi	r19, 0x61	; 97
     e38:	31 83       	std	Z+1, r19	; 0x01
     e3a:	22 83       	std	Z+2, r18	; 0x02
     e3c:	fc 01       	movw	r30, r24
     e3e:	2b 2d       	mov	r18, r11
     e40:	30 e2       	ldi	r19, 0x20	; 32
     e42:	22 23       	and	r18, r18
     e44:	f1 f1       	breq	.+124    	; 0xec2 <dtoa_prf+0x156>
     e46:	31 93       	st	Z+, r19
     e48:	21 50       	subi	r18, 0x01	; 1
     e4a:	fb cf       	rjmp	.-10     	; 0xe42 <dtoa_prf+0xd6>
     e4c:	72 ff       	sbrs	r23, 2
     e4e:	40 c0       	rjmp	.+128    	; 0xed0 <dtoa_prf+0x164>
     e50:	66 23       	and	r22, r22
     e52:	11 f0       	breq	.+4      	; 0xe58 <dtoa_prf+0xec>
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <dtoa_prf+0xee>
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	8b 15       	cp	r24, r11
     e5c:	10 f4       	brcc	.+4      	; 0xe62 <dtoa_prf+0xf6>
     e5e:	b8 1a       	sub	r11, r24
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <dtoa_prf+0xf8>
     e62:	b1 2c       	mov	r11, r1
     e64:	a1 11       	cpse	r26, r1
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <dtoa_prf+0x112>
     e68:	f6 01       	movw	r30, r12
     e6a:	8b 2d       	mov	r24, r11
     e6c:	90 e2       	ldi	r25, 0x20	; 32
     e6e:	88 23       	and	r24, r24
     e70:	19 f0       	breq	.+6      	; 0xe78 <dtoa_prf+0x10c>
     e72:	91 93       	st	Z+, r25
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	fb cf       	rjmp	.-10     	; 0xe6e <dtoa_prf+0x102>
     e78:	cb 0c       	add	r12, r11
     e7a:	d1 1c       	adc	r13, r1
     e7c:	b1 2c       	mov	r11, r1
     e7e:	66 23       	and	r22, r22
     e80:	31 f0       	breq	.+12     	; 0xe8e <dtoa_prf+0x122>
     e82:	f6 01       	movw	r30, r12
     e84:	60 83       	st	Z, r22
     e86:	96 01       	movw	r18, r12
     e88:	2f 5f       	subi	r18, 0xFF	; 255
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	69 01       	movw	r12, r18
     e8e:	c6 01       	movw	r24, r12
     e90:	03 96       	adiw	r24, 0x03	; 3
     e92:	e2 fe       	sbrs	r14, 2
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <dtoa_prf+0x138>
     e96:	29 e4       	ldi	r18, 0x49	; 73
     e98:	f6 01       	movw	r30, r12
     e9a:	20 83       	st	Z, r18
     e9c:	2e e4       	ldi	r18, 0x4E	; 78
     e9e:	21 83       	std	Z+1, r18	; 0x01
     ea0:	26 e4       	ldi	r18, 0x46	; 70
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <dtoa_prf+0x144>
     ea4:	29 e6       	ldi	r18, 0x69	; 105
     ea6:	f6 01       	movw	r30, r12
     ea8:	20 83       	st	Z, r18
     eaa:	2e e6       	ldi	r18, 0x6E	; 110
     eac:	21 83       	std	Z+1, r18	; 0x01
     eae:	26 e6       	ldi	r18, 0x66	; 102
     eb0:	22 83       	std	Z+2, r18	; 0x02
     eb2:	fc 01       	movw	r30, r24
     eb4:	2b 2d       	mov	r18, r11
     eb6:	30 e2       	ldi	r19, 0x20	; 32
     eb8:	22 23       	and	r18, r18
     eba:	19 f0       	breq	.+6      	; 0xec2 <dtoa_prf+0x156>
     ebc:	31 93       	st	Z+, r19
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	fb cf       	rjmp	.-10     	; 0xeb8 <dtoa_prf+0x14c>
     ec2:	fc 01       	movw	r30, r24
     ec4:	eb 0d       	add	r30, r11
     ec6:	f1 1d       	adc	r31, r1
     ec8:	10 82       	st	Z, r1
     eca:	8e ef       	ldi	r24, 0xFE	; 254
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	b7 c0       	rjmp	.+366    	; 0x103e <dtoa_prf+0x2d2>
     ed0:	b1 e0       	ldi	r27, 0x01	; 1
     ed2:	61 11       	cpse	r22, r1
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <dtoa_prf+0x16c>
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	4b 2f       	mov	r20, r27
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	18 16       	cp	r1, r24
     ede:	19 06       	cpc	r1, r25
     ee0:	24 f4       	brge	.+8      	; 0xeea <dtoa_prf+0x17e>
     ee2:	9c 01       	movw	r18, r24
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <dtoa_prf+0x182>
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	24 0f       	add	r18, r20
     ef0:	35 1f       	adc	r19, r21
     ef2:	11 23       	and	r17, r17
     ef4:	29 f0       	breq	.+10     	; 0xf00 <dtoa_prf+0x194>
     ef6:	41 2f       	mov	r20, r17
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	4f 5f       	subi	r20, 0xFF	; 255
     efc:	5f 4f       	sbci	r21, 0xFF	; 255
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <dtoa_prf+0x198>
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	42 0f       	add	r20, r18
     f06:	53 1f       	adc	r21, r19
     f08:	2b 2d       	mov	r18, r11
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	42 17       	cp	r20, r18
     f0e:	53 07       	cpc	r21, r19
     f10:	14 f4       	brge	.+4      	; 0xf16 <dtoa_prf+0x1aa>
     f12:	b4 1a       	sub	r11, r20
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <dtoa_prf+0x1ac>
     f16:	b1 2c       	mov	r11, r1
     f18:	2e 2d       	mov	r18, r14
     f1a:	28 71       	andi	r18, 0x18	; 24
     f1c:	59 f4       	brne	.+22     	; 0xf34 <dtoa_prf+0x1c8>
     f1e:	f6 01       	movw	r30, r12
     f20:	2b 2d       	mov	r18, r11
     f22:	30 e2       	ldi	r19, 0x20	; 32
     f24:	22 23       	and	r18, r18
     f26:	19 f0       	breq	.+6      	; 0xf2e <dtoa_prf+0x1c2>
     f28:	31 93       	st	Z+, r19
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	fb cf       	rjmp	.-10     	; 0xf24 <dtoa_prf+0x1b8>
     f2e:	cb 0c       	add	r12, r11
     f30:	d1 1c       	adc	r13, r1
     f32:	b1 2c       	mov	r11, r1
     f34:	bb 23       	and	r27, r27
     f36:	31 f0       	breq	.+12     	; 0xf44 <dtoa_prf+0x1d8>
     f38:	f6 01       	movw	r30, r12
     f3a:	60 83       	st	Z, r22
     f3c:	96 01       	movw	r18, r12
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	69 01       	movw	r12, r18
     f44:	a1 11       	cpse	r26, r1
     f46:	0b c0       	rjmp	.+22     	; 0xf5e <dtoa_prf+0x1f2>
     f48:	f6 01       	movw	r30, r12
     f4a:	2b 2d       	mov	r18, r11
     f4c:	30 e3       	ldi	r19, 0x30	; 48
     f4e:	22 23       	and	r18, r18
     f50:	19 f0       	breq	.+6      	; 0xf58 <dtoa_prf+0x1ec>
     f52:	31 93       	st	Z+, r19
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	fb cf       	rjmp	.-10     	; 0xf4e <dtoa_prf+0x1e2>
     f58:	cb 0c       	add	r12, r11
     f5a:	d1 1c       	adc	r13, r1
     f5c:	b1 2c       	mov	r11, r1
     f5e:	f8 0e       	add	r15, r24
     f60:	0a 81       	ldd	r16, Y+2	; 0x02
     f62:	37 2f       	mov	r19, r23
     f64:	30 71       	andi	r19, 0x10	; 16
     f66:	a3 2e       	mov	r10, r19
     f68:	74 ff       	sbrs	r23, 4
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <dtoa_prf+0x206>
     f6c:	01 33       	cpi	r16, 0x31	; 49
     f6e:	09 f4       	brne	.+2      	; 0xf72 <dtoa_prf+0x206>
     f70:	fa 94       	dec	r15
     f72:	1f 14       	cp	r1, r15
     f74:	2c f4       	brge	.+10     	; 0xf80 <dtoa_prf+0x214>
     f76:	2f 2d       	mov	r18, r15
     f78:	29 30       	cpi	r18, 0x09	; 9
     f7a:	18 f0       	brcs	.+6      	; 0xf82 <dtoa_prf+0x216>
     f7c:	28 e0       	ldi	r18, 0x08	; 8
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <dtoa_prf+0x216>
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	68 2f       	mov	r22, r24
     f84:	39 2f       	mov	r19, r25
     f86:	97 ff       	sbrs	r25, 7
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <dtoa_prf+0x222>
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	46 2f       	mov	r20, r22
     f90:	53 2f       	mov	r21, r19
     f92:	61 2c       	mov	r6, r1
     f94:	71 2c       	mov	r7, r1
     f96:	3e e2       	ldi	r19, 0x2E	; 46
     f98:	93 2e       	mov	r9, r19
     f9a:	bc 01       	movw	r22, r24
     f9c:	62 1b       	sub	r22, r18
     f9e:	71 09       	sbc	r23, r1
     fa0:	9b 01       	movw	r18, r22
     fa2:	dc 01       	movw	r26, r24
     fa4:	a4 1b       	sub	r26, r20
     fa6:	b5 0b       	sbc	r27, r21
     fa8:	e1 e0       	ldi	r30, 0x01	; 1
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	ec 0f       	add	r30, r28
     fae:	fd 1f       	adc	r31, r29
     fb0:	ae 0f       	add	r26, r30
     fb2:	bf 1f       	adc	r27, r31
     fb4:	e1 2e       	mov	r14, r17
     fb6:	f1 2c       	mov	r15, r1
     fb8:	f1 94       	neg	r15
     fba:	e1 94       	neg	r14
     fbc:	f1 08       	sbc	r15, r1
     fbe:	4f 3f       	cpi	r20, 0xFF	; 255
     fc0:	ff ef       	ldi	r31, 0xFF	; 255
     fc2:	5f 07       	cpc	r21, r31
     fc4:	31 f4       	brne	.+12     	; 0xfd2 <dtoa_prf+0x266>
     fc6:	f6 01       	movw	r30, r12
     fc8:	90 82       	st	Z, r9
     fca:	b6 01       	movw	r22, r12
     fcc:	6f 5f       	subi	r22, 0xFF	; 255
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	6b 01       	movw	r12, r22
     fd2:	84 17       	cp	r24, r20
     fd4:	95 07       	cpc	r25, r21
     fd6:	4c f0       	brlt	.+18     	; 0xfea <dtoa_prf+0x27e>
     fd8:	24 17       	cp	r18, r20
     fda:	35 07       	cpc	r19, r21
     fdc:	34 f4       	brge	.+12     	; 0xfea <dtoa_prf+0x27e>
     fde:	bd 01       	movw	r22, r26
     fe0:	66 0d       	add	r22, r6
     fe2:	77 1d       	adc	r23, r7
     fe4:	fb 01       	movw	r30, r22
     fe6:	11 81       	ldd	r17, Z+1	; 0x01
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <dtoa_prf+0x280>
     fea:	10 e3       	ldi	r17, 0x30	; 48
     fec:	41 50       	subi	r20, 0x01	; 1
     fee:	51 09       	sbc	r21, r1
     ff0:	ff ef       	ldi	r31, 0xFF	; 255
     ff2:	6f 1a       	sub	r6, r31
     ff4:	7f 0a       	sbc	r7, r31
     ff6:	b6 01       	movw	r22, r12
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	4e 15       	cp	r20, r14
     ffe:	5f 05       	cpc	r21, r15
    1000:	24 f0       	brlt	.+8      	; 0x100a <dtoa_prf+0x29e>
    1002:	f6 01       	movw	r30, r12
    1004:	10 83       	st	Z, r17
    1006:	6b 01       	movw	r12, r22
    1008:	da cf       	rjmp	.-76     	; 0xfbe <dtoa_prf+0x252>
    100a:	48 17       	cp	r20, r24
    100c:	59 07       	cpc	r21, r25
    100e:	39 f4       	brne	.+14     	; 0x101e <dtoa_prf+0x2b2>
    1010:	06 33       	cpi	r16, 0x36	; 54
    1012:	20 f4       	brcc	.+8      	; 0x101c <dtoa_prf+0x2b0>
    1014:	05 33       	cpi	r16, 0x35	; 53
    1016:	19 f4       	brne	.+6      	; 0x101e <dtoa_prf+0x2b2>
    1018:	a1 10       	cpse	r10, r1
    101a:	01 c0       	rjmp	.+2      	; 0x101e <dtoa_prf+0x2b2>
    101c:	11 e3       	ldi	r17, 0x31	; 49
    101e:	f6 01       	movw	r30, r12
    1020:	10 83       	st	Z, r17
    1022:	fb 01       	movw	r30, r22
    1024:	8b 2d       	mov	r24, r11
    1026:	90 e2       	ldi	r25, 0x20	; 32
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <dtoa_prf+0x2c6>
    102c:	91 93       	st	Z+, r25
    102e:	81 50       	subi	r24, 0x01	; 1
    1030:	fb cf       	rjmp	.-10     	; 0x1028 <dtoa_prf+0x2bc>
    1032:	fb 01       	movw	r30, r22
    1034:	eb 0d       	add	r30, r11
    1036:	f1 1d       	adc	r31, r1
    1038:	10 82       	st	Z, r1
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	29 96       	adiw	r28, 0x09	; 9
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	9f 90       	pop	r9
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	08 95       	ret

00001066 <__ftoa_engine>:
    1066:	28 30       	cpi	r18, 0x08	; 8
    1068:	08 f0       	brcs	.+2      	; 0x106c <__ftoa_engine+0x6>
    106a:	27 e0       	ldi	r18, 0x07	; 7
    106c:	33 27       	eor	r19, r19
    106e:	da 01       	movw	r26, r20
    1070:	99 0f       	add	r25, r25
    1072:	31 1d       	adc	r19, r1
    1074:	87 fd       	sbrc	r24, 7
    1076:	91 60       	ori	r25, 0x01	; 1
    1078:	00 96       	adiw	r24, 0x00	; 0
    107a:	61 05       	cpc	r22, r1
    107c:	71 05       	cpc	r23, r1
    107e:	39 f4       	brne	.+14     	; 0x108e <__ftoa_engine+0x28>
    1080:	32 60       	ori	r19, 0x02	; 2
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3d 93       	st	X+, r19
    1086:	30 e3       	ldi	r19, 0x30	; 48
    1088:	2a 95       	dec	r18
    108a:	e1 f7       	brne	.-8      	; 0x1084 <__ftoa_engine+0x1e>
    108c:	08 95       	ret
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	30 f0       	brcs	.+12     	; 0x109e <__ftoa_engine+0x38>
    1092:	80 38       	cpi	r24, 0x80	; 128
    1094:	71 05       	cpc	r23, r1
    1096:	61 05       	cpc	r22, r1
    1098:	09 f0       	breq	.+2      	; 0x109c <__ftoa_engine+0x36>
    109a:	3c 5f       	subi	r19, 0xFC	; 252
    109c:	3c 5f       	subi	r19, 0xFC	; 252
    109e:	3d 93       	st	X+, r19
    10a0:	91 30       	cpi	r25, 0x01	; 1
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__ftoa_engine+0x40>
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	91 1d       	adc	r25, r1
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	1f 93       	push	r17
    10ae:	0f 93       	push	r16
    10b0:	ff 92       	push	r15
    10b2:	ef 92       	push	r14
    10b4:	19 2f       	mov	r17, r25
    10b6:	98 7f       	andi	r25, 0xF8	; 248
    10b8:	96 95       	lsr	r25
    10ba:	e9 2f       	mov	r30, r25
    10bc:	96 95       	lsr	r25
    10be:	96 95       	lsr	r25
    10c0:	e9 0f       	add	r30, r25
    10c2:	ff 27       	eor	r31, r31
    10c4:	e2 5c       	subi	r30, 0xC2	; 194
    10c6:	fe 4f       	sbci	r31, 0xFE	; 254
    10c8:	99 27       	eor	r25, r25
    10ca:	33 27       	eor	r19, r19
    10cc:	ee 24       	eor	r14, r14
    10ce:	ff 24       	eor	r15, r15
    10d0:	a7 01       	movw	r20, r14
    10d2:	e7 01       	movw	r28, r14
    10d4:	05 90       	lpm	r0, Z+
    10d6:	08 94       	sec
    10d8:	07 94       	ror	r0
    10da:	28 f4       	brcc	.+10     	; 0x10e6 <__ftoa_engine+0x80>
    10dc:	36 0f       	add	r19, r22
    10de:	e7 1e       	adc	r14, r23
    10e0:	f8 1e       	adc	r15, r24
    10e2:	49 1f       	adc	r20, r25
    10e4:	51 1d       	adc	r21, r1
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	06 94       	lsr	r0
    10f0:	a1 f7       	brne	.-24     	; 0x10da <__ftoa_engine+0x74>
    10f2:	05 90       	lpm	r0, Z+
    10f4:	07 94       	ror	r0
    10f6:	28 f4       	brcc	.+10     	; 0x1102 <__ftoa_engine+0x9c>
    10f8:	e7 0e       	add	r14, r23
    10fa:	f8 1e       	adc	r15, r24
    10fc:	49 1f       	adc	r20, r25
    10fe:	56 1f       	adc	r21, r22
    1100:	c1 1d       	adc	r28, r1
    1102:	77 0f       	add	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	66 1f       	adc	r22, r22
    110a:	06 94       	lsr	r0
    110c:	a1 f7       	brne	.-24     	; 0x10f6 <__ftoa_engine+0x90>
    110e:	05 90       	lpm	r0, Z+
    1110:	07 94       	ror	r0
    1112:	28 f4       	brcc	.+10     	; 0x111e <__ftoa_engine+0xb8>
    1114:	f8 0e       	add	r15, r24
    1116:	49 1f       	adc	r20, r25
    1118:	56 1f       	adc	r21, r22
    111a:	c7 1f       	adc	r28, r23
    111c:	d1 1d       	adc	r29, r1
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	66 1f       	adc	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	06 94       	lsr	r0
    1128:	a1 f7       	brne	.-24     	; 0x1112 <__ftoa_engine+0xac>
    112a:	05 90       	lpm	r0, Z+
    112c:	07 94       	ror	r0
    112e:	20 f4       	brcc	.+8      	; 0x1138 <__ftoa_engine+0xd2>
    1130:	49 0f       	add	r20, r25
    1132:	56 1f       	adc	r21, r22
    1134:	c7 1f       	adc	r28, r23
    1136:	d8 1f       	adc	r29, r24
    1138:	99 0f       	add	r25, r25
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	06 94       	lsr	r0
    1142:	a9 f7       	brne	.-22     	; 0x112e <__ftoa_engine+0xc8>
    1144:	84 91       	lpm	r24, Z
    1146:	10 95       	com	r17
    1148:	17 70       	andi	r17, 0x07	; 7
    114a:	41 f0       	breq	.+16     	; 0x115c <__ftoa_engine+0xf6>
    114c:	d6 95       	lsr	r29
    114e:	c7 95       	ror	r28
    1150:	57 95       	ror	r21
    1152:	47 95       	ror	r20
    1154:	f7 94       	ror	r15
    1156:	e7 94       	ror	r14
    1158:	1a 95       	dec	r17
    115a:	c1 f7       	brne	.-16     	; 0x114c <__ftoa_engine+0xe6>
    115c:	e4 ee       	ldi	r30, 0xE4	; 228
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	68 94       	set
    1162:	15 90       	lpm	r1, Z+
    1164:	15 91       	lpm	r17, Z+
    1166:	35 91       	lpm	r19, Z+
    1168:	65 91       	lpm	r22, Z+
    116a:	95 91       	lpm	r25, Z+
    116c:	05 90       	lpm	r0, Z+
    116e:	7f e2       	ldi	r23, 0x2F	; 47
    1170:	73 95       	inc	r23
    1172:	e1 18       	sub	r14, r1
    1174:	f1 0a       	sbc	r15, r17
    1176:	43 0b       	sbc	r20, r19
    1178:	56 0b       	sbc	r21, r22
    117a:	c9 0b       	sbc	r28, r25
    117c:	d0 09       	sbc	r29, r0
    117e:	c0 f7       	brcc	.-16     	; 0x1170 <__ftoa_engine+0x10a>
    1180:	e1 0c       	add	r14, r1
    1182:	f1 1e       	adc	r15, r17
    1184:	43 1f       	adc	r20, r19
    1186:	56 1f       	adc	r21, r22
    1188:	c9 1f       	adc	r28, r25
    118a:	d0 1d       	adc	r29, r0
    118c:	7e f4       	brtc	.+30     	; 0x11ac <__ftoa_engine+0x146>
    118e:	70 33       	cpi	r23, 0x30	; 48
    1190:	11 f4       	brne	.+4      	; 0x1196 <__ftoa_engine+0x130>
    1192:	8a 95       	dec	r24
    1194:	e6 cf       	rjmp	.-52     	; 0x1162 <__ftoa_engine+0xfc>
    1196:	e8 94       	clt
    1198:	01 50       	subi	r16, 0x01	; 1
    119a:	30 f0       	brcs	.+12     	; 0x11a8 <__ftoa_engine+0x142>
    119c:	08 0f       	add	r16, r24
    119e:	0a f4       	brpl	.+2      	; 0x11a2 <__ftoa_engine+0x13c>
    11a0:	00 27       	eor	r16, r16
    11a2:	02 17       	cp	r16, r18
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <__ftoa_engine+0x142>
    11a6:	20 2f       	mov	r18, r16
    11a8:	23 95       	inc	r18
    11aa:	02 2f       	mov	r16, r18
    11ac:	7a 33       	cpi	r23, 0x3A	; 58
    11ae:	28 f0       	brcs	.+10     	; 0x11ba <__ftoa_engine+0x154>
    11b0:	79 e3       	ldi	r23, 0x39	; 57
    11b2:	7d 93       	st	X+, r23
    11b4:	2a 95       	dec	r18
    11b6:	e9 f7       	brne	.-6      	; 0x11b2 <__ftoa_engine+0x14c>
    11b8:	10 c0       	rjmp	.+32     	; 0x11da <__ftoa_engine+0x174>
    11ba:	7d 93       	st	X+, r23
    11bc:	2a 95       	dec	r18
    11be:	89 f6       	brne	.-94     	; 0x1162 <__ftoa_engine+0xfc>
    11c0:	06 94       	lsr	r0
    11c2:	97 95       	ror	r25
    11c4:	67 95       	ror	r22
    11c6:	37 95       	ror	r19
    11c8:	17 95       	ror	r17
    11ca:	17 94       	ror	r1
    11cc:	e1 18       	sub	r14, r1
    11ce:	f1 0a       	sbc	r15, r17
    11d0:	43 0b       	sbc	r20, r19
    11d2:	56 0b       	sbc	r21, r22
    11d4:	c9 0b       	sbc	r28, r25
    11d6:	d0 09       	sbc	r29, r0
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__ftoa_engine+0x19a>
    11da:	23 95       	inc	r18
    11dc:	7e 91       	ld	r23, -X
    11de:	73 95       	inc	r23
    11e0:	7a 33       	cpi	r23, 0x3A	; 58
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__ftoa_engine+0x180>
    11e4:	70 e3       	ldi	r23, 0x30	; 48
    11e6:	7c 93       	st	X, r23
    11e8:	20 13       	cpse	r18, r16
    11ea:	b8 f7       	brcc	.-18     	; 0x11da <__ftoa_engine+0x174>
    11ec:	7e 91       	ld	r23, -X
    11ee:	70 61       	ori	r23, 0x10	; 16
    11f0:	7d 93       	st	X+, r23
    11f2:	30 f0       	brcs	.+12     	; 0x1200 <__ftoa_engine+0x19a>
    11f4:	83 95       	inc	r24
    11f6:	71 e3       	ldi	r23, 0x31	; 49
    11f8:	7d 93       	st	X+, r23
    11fa:	70 e3       	ldi	r23, 0x30	; 48
    11fc:	2a 95       	dec	r18
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <__ftoa_engine+0x192>
    1200:	11 24       	eor	r1, r1
    1202:	ef 90       	pop	r14
    1204:	ff 90       	pop	r15
    1206:	0f 91       	pop	r16
    1208:	1f 91       	pop	r17
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	99 27       	eor	r25, r25
    1210:	87 fd       	sbrc	r24, 7
    1212:	90 95       	com	r25
    1214:	08 95       	ret

00001216 <_exit>:
    1216:	f8 94       	cli

00001218 <__stop_program>:
    1218:	ff cf       	rjmp	.-2      	; 0x1218 <__stop_program>
