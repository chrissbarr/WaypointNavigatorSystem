
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800200  00800200  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a1  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  000006a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  000007dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028a  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000234  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	1e c1       	rjmp	.+572    	; 0x262 <__vector_9>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__vector_23>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 31       	cpi	r26, 0x10	; 16
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	f0 d0       	rcall	.+480    	; 0x2e6 <main>
 106:	f1 c0       	rjmp	.+482    	; 0x2ea <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	80 91 08 02 	lds	r24, 0x0208
 124:	90 91 09 02 	lds	r25, 0x0209
 128:	a0 91 0a 02 	lds	r26, 0x020A
 12c:	b0 91 0b 02 	lds	r27, 0x020B
 130:	30 91 07 02 	lds	r19, 0x0207
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	23 0f       	add	r18, r19
 138:	2d 37       	cpi	r18, 0x7D	; 125
 13a:	20 f4       	brcc	.+8      	; 0x144 <__vector_23+0x3a>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	a1 1d       	adc	r26, r1
 140:	b1 1d       	adc	r27, r1
 142:	05 c0       	rjmp	.+10     	; 0x14e <__vector_23+0x44>
 144:	26 e8       	ldi	r18, 0x86	; 134
 146:	23 0f       	add	r18, r19
 148:	02 96       	adiw	r24, 0x02	; 2
 14a:	a1 1d       	adc	r26, r1
 14c:	b1 1d       	adc	r27, r1
 14e:	20 93 07 02 	sts	0x0207, r18
 152:	80 93 08 02 	sts	0x0208, r24
 156:	90 93 09 02 	sts	0x0209, r25
 15a:	a0 93 0a 02 	sts	0x020A, r26
 15e:	b0 93 0b 02 	sts	0x020B, r27
 162:	80 91 0c 02 	lds	r24, 0x020C
 166:	90 91 0d 02 	lds	r25, 0x020D
 16a:	a0 91 0e 02 	lds	r26, 0x020E
 16e:	b0 91 0f 02 	lds	r27, 0x020F
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	a1 1d       	adc	r26, r1
 176:	b1 1d       	adc	r27, r1
 178:	80 93 0c 02 	sts	0x020C, r24
 17c:	90 93 0d 02 	sts	0x020D, r25
 180:	a0 93 0e 02 	sts	0x020E, r26
 184:	b0 93 0f 02 	sts	0x020F, r27
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <_Z6microsv>:
	*   from arduino  lib
	*
	**************************/

	unsigned long m;
	uint8_t oldSREG = SREG, t;
 19e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 1a0:	f8 94       	cli
	m = timer0_overflow_count;
 1a2:	80 91 0c 02 	lds	r24, 0x020C
 1a6:	90 91 0d 02 	lds	r25, 0x020D
 1aa:	a0 91 0e 02 	lds	r26, 0x020E
 1ae:	b0 91 0f 02 	lds	r27, 0x020F
	t = TCNT0;
 1b2:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 1b4:	a8 9b       	sbis	0x15, 0	; 21
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <_Z6microsv+0x1e>
 1b8:	2f 3f       	cpi	r18, 0xFF	; 255
 1ba:	a1 f4       	brne	.+40     	; 0x1e4 <_Z6microsv+0x46>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 1bc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1be:	ba 2f       	mov	r27, r26
 1c0:	a9 2f       	mov	r26, r25
 1c2:	98 2f       	mov	r25, r24
 1c4:	88 27       	eor	r24, r24
 1c6:	82 0f       	add	r24, r18
 1c8:	91 1d       	adc	r25, r1
 1ca:	a1 1d       	adc	r26, r1
 1cc:	b1 1d       	adc	r27, r1
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	88 1f       	adc	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	e8 cf       	rjmp	.-48     	; 0x1bc <_Z6microsv+0x1e>

000001ec <_Z10initTimersv>:
	*
	**************************/

	// this needs to be called before setup() or some functions won't
	// work there
	cli();
 1ec:	f8 94       	cli
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
 
	sbi(TCCR0A, WGM01);
 1ee:	84 b5       	in	r24, 0x24	; 36
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	84 bd       	out	0x24, r24	; 36
 
 
	sbi(TCCR0B, CS01);
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 200:	85 b5       	in	r24, 0x25	; 37
 202:	81 60       	ori	r24, 0x01	; 1
 204:	85 bd       	out	0x25, r24	; 37
 
	// enable timer 0 overflow interrupt
 
	sbi(TIMSK0, TOIE0);
 206:	ee e6       	ldi	r30, 0x6E	; 110
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 210:	e1 e8       	ldi	r30, 0x81	; 129
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
 21a:	80 81       	ld	r24, Z
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	80 83       	st	Z, r24
	// put timer 1 in 8-bit phase correct pwm mode
	sbi(TCCR1A, WGM10);
 220:	e0 e8       	ldi	r30, 0x80	; 128
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
 
	sbi(TCCR2B, CS22);
 22a:	e1 eb       	ldi	r30, 0xB1	; 177
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	84 60       	ori	r24, 0x04	; 4
 232:	80 83       	st	Z, r24
 
	// configure timer 2 for phase correct pwm (8-bit)
 
	sbi(TCCR2A, WGM20);
 234:	e0 eb       	ldi	r30, 0xB0	; 176
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24

	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 23e:	ea e7       	ldi	r30, 0x7A	; 122
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	84 60       	ori	r24, 0x04	; 4
 246:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 24e:	80 81       	ld	r24, Z
 250:	81 60       	ori	r24, 0x01	; 1
 252:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 254:	80 81       	ld	r24, Z
 256:	80 68       	ori	r24, 0x80	; 128
 258:	80 83       	st	Z, r24

	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
 
	UCSR0B = 0;
 25a:	10 92 c1 00 	sts	0x00C1, r1

    sei();
 25e:	78 94       	sei
 260:	08 95       	ret

00000262 <__vector_9>:
static uint8_t rxUpdateFlags;


//Pin Change Interrupt for reading Throttle Value//
ISR(PCINT0_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	0b b6       	in	r0, 0x3b	; 59
 26e:	0f 92       	push	r0
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	//if pin input is attached to is high
	if(RX_PORT & _BV(THROTTLE_IN_PIN))
 288:	18 9b       	sbis	0x03, 0	; 3
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <__vector_9+0x3e>
	{
		ulThrottleStart = micros();
 28c:	88 df       	rcall	.-240    	; 0x19e <_Z6microsv>
 28e:	60 93 00 02 	sts	0x0200, r22
 292:	70 93 01 02 	sts	0x0201, r23
 296:	80 93 02 02 	sts	0x0202, r24
 29a:	90 93 03 02 	sts	0x0203, r25
 29e:	10 c0       	rjmp	.+32     	; 0x2c0 <__vector_9+0x5e>
	}
	else
	{
		unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);
 2a0:	7e df       	rcall	.-260    	; 0x19e <_Z6microsv>
 2a2:	20 91 00 02 	lds	r18, 0x0200
 2a6:	30 91 01 02 	lds	r19, 0x0201
 2aa:	62 1b       	sub	r22, r18
 2ac:	73 0b       	sbc	r23, r19
 2ae:	70 93 06 02 	sts	0x0206, r23
 2b2:	60 93 05 02 	sts	0x0205, r22
		rxUpdateFlagsShared |= THROTTLE_FLAG;
 2b6:	80 91 04 02 	lds	r24, 0x0204
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	80 93 04 02 	sts	0x0204, r24
	}
	
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0b be       	out	0x3b, r0	; 59
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <main>:
void init_rx_input()
{
	//Enable Pin Change Interrupts
		//todo
		
	initTimers();
 2e6:	82 df       	rcall	.-252    	; 0x1ec <_Z10initTimersv>
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <main+0x2>

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
