
waypointNavigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  000030c0  00003154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a6  008004d0  008004d0  00003424  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  00003466  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000490  00000000  00000000  000034c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000663f  00000000  00000000  00003958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001933  00000000  00000000  00009f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002c94  00000000  00000000  0000b8ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f24  00000000  00000000  0000e560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d56  00000000  00000000  0000f484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c09  00000000  00000000  000111da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  00014de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c1       	rjmp	.+614    	; 0x268 <__ctors_end>
       2:	00 00       	nop
       4:	62 c1       	rjmp	.+708    	; 0x2ca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c1       	rjmp	.+704    	; 0x2ca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c1       	rjmp	.+700    	; 0x2ca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c1       	rjmp	.+692    	; 0x2ca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c1       	rjmp	.+688    	; 0x2ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c1       	rjmp	.+684    	; 0x2ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c1       	rjmp	.+680    	; 0x2ca <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_9>
      28:	50 c1       	rjmp	.+672    	; 0x2ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c1       	rjmp	.+668    	; 0x2ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c1       	rjmp	.+664    	; 0x2ca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c1       	rjmp	.+660    	; 0x2ca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c1       	rjmp	.+656    	; 0x2ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c1       	rjmp	.+652    	; 0x2ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c1       	rjmp	.+648    	; 0x2ca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c1       	rjmp	.+644    	; 0x2ca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c1       	rjmp	.+640    	; 0x2ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c1       	rjmp	.+636    	; 0x2ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c1       	rjmp	.+632    	; 0x2ca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c1       	rjmp	.+628    	; 0x2ca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c1       	rjmp	.+624    	; 0x2ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_23>
      60:	34 c1       	rjmp	.+616    	; 0x2ca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c1       	rjmp	.+612    	; 0x2ca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c1       	rjmp	.+608    	; 0x2ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c1       	rjmp	.+604    	; 0x2ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c1       	rjmp	.+600    	; 0x2ca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c1       	rjmp	.+596    	; 0x2ca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c1       	rjmp	.+592    	; 0x2ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c1       	rjmp	.+588    	; 0x2ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c1       	rjmp	.+584    	; 0x2ca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c1       	rjmp	.+580    	; 0x2ca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c1       	rjmp	.+576    	; 0x2ca <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e c1       	rjmp	.+572    	; 0x2ca <__bad_interrupt>
      8e:	00 00       	nop
      90:	1c c1       	rjmp	.+568    	; 0x2ca <__bad_interrupt>
      92:	00 00       	nop
      94:	1a c1       	rjmp	.+564    	; 0x2ca <__bad_interrupt>
      96:	00 00       	nop
      98:	18 c1       	rjmp	.+560    	; 0x2ca <__bad_interrupt>
      9a:	00 00       	nop
      9c:	16 c1       	rjmp	.+556    	; 0x2ca <__bad_interrupt>
      9e:	00 00       	nop
      a0:	14 c1       	rjmp	.+552    	; 0x2ca <__bad_interrupt>
      a2:	00 00       	nop
      a4:	12 c1       	rjmp	.+548    	; 0x2ca <__bad_interrupt>
      a6:	00 00       	nop
      a8:	10 c1       	rjmp	.+544    	; 0x2ca <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0e c1       	rjmp	.+540    	; 0x2ca <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0c c1       	rjmp	.+536    	; 0x2ca <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0a c1       	rjmp	.+532    	; 0x2ca <__bad_interrupt>
      b6:	00 00       	nop
      b8:	08 c1       	rjmp	.+528    	; 0x2ca <__bad_interrupt>
      ba:	00 00       	nop
      bc:	06 c1       	rjmp	.+524    	; 0x2ca <__bad_interrupt>
      be:	00 00       	nop
      c0:	04 c1       	rjmp	.+520    	; 0x2ca <__bad_interrupt>
      c2:	00 00       	nop
      c4:	02 c1       	rjmp	.+516    	; 0x2ca <__bad_interrupt>
      c6:	00 00       	nop
      c8:	00 c1       	rjmp	.+512    	; 0x2ca <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fe c0       	rjmp	.+508    	; 0x2ca <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fc c0       	rjmp	.+504    	; 0x2ca <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fa c0       	rjmp	.+500    	; 0x2ca <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f8 c0       	rjmp	.+496    	; 0x2ca <__bad_interrupt>
      da:	00 00       	nop
      dc:	f6 c0       	rjmp	.+492    	; 0x2ca <__bad_interrupt>
      de:	00 00       	nop
      e0:	f4 c0       	rjmp	.+488    	; 0x2ca <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

00000130 <__trampolines_end>:
     130:	4e 41       	sbci	r20, 0x1E	; 30
     132:	4e 49       	sbci	r20, 0x9E	; 158

00000133 <pstr_inity>:
     133:	49 4e 49 54 59                                      INITY

00000138 <pstr_inf>:
     138:	49 4e 46                                            INF

0000013b <pwr_m10>:
     13b:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     14b:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000153 <pwr_p10>:
     153:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     163:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     173:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     183:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     193:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     1a3:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1b3:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1c3:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1d3:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     1e3:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     1f3:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     203:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     213:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     223:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     233:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     243:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     253:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     263:	3d 27 00                                            ='.

00000266 <__ctors_start>:
     266:	50 08       	sbc	r5, r0

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	14 e0       	ldi	r17, 0x04	; 4
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	e0 ec       	ldi	r30, 0xC0	; 192
     280:	f0 e3       	ldi	r31, 0x30	; 48
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a0 3d       	cpi	r26, 0xD0	; 208
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	26 e0       	ldi	r18, 0x06	; 6
     294:	a0 ed       	ldi	r26, 0xD0	; 208
     296:	b4 e0       	ldi	r27, 0x04	; 4
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	a6 37       	cpi	r26, 0x76	; 118
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>

000002a2 <__do_global_ctors>:
     2a2:	12 e0       	ldi	r17, 0x02	; 2
     2a4:	c8 e6       	ldi	r28, 0x68	; 104
     2a6:	d2 e0       	ldi	r29, 0x02	; 2
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__do_global_ctors+0x16>
     2ac:	22 97       	sbiw	r28, 0x02	; 2
     2ae:	01 09       	sbc	r16, r1
     2b0:	fe 01       	movw	r30, r28
     2b2:	0b bf       	out	0x3b, r16	; 59
     2b4:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__tablejump_elpm__>
     2b8:	c6 36       	cpi	r28, 0x66	; 102
     2ba:	d1 07       	cpc	r29, r17
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 07       	cpc	r16, r24
     2c0:	a9 f7       	brne	.-22     	; 0x2ac <__do_global_ctors+0xa>
     2c2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <main>
     2c6:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <_exit>

000002ca <__bad_interrupt>:
     2ca:	9a ce       	rjmp	.-716    	; 0x0 <__vectors>

000002cc <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     2d8:	00 00       	nop
	ret          ; 3   "
     2da:	08 95       	ret

000002dc <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     2dc:	51 98       	cbi	0x0a, 1	; 10
	cbi SCL_DDR,SCL		;release SCL
     2de:	50 98       	cbi	0x0a, 0	; 10
	cbi SDA_OUT,SDA
     2e0:	59 98       	cbi	0x0b, 1	; 11
	cbi SCL_OUT,SCL
     2e2:	58 98       	cbi	0x0b, 0	; 11
	ret
     2e4:	08 95       	ret

000002e6 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     2e6:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     2e8:	f1 df       	rcall	.-30     	; 0x2cc <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     2ea:	1d c0       	rjmp	.+58     	; 0x326 <i2c_write>
	ret
     2ec:	08 95       	ret

000002ee <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     2ee:	50 9a       	sbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     2f0:	ed df       	rcall	.-38     	; 0x2cc <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     2f2:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     2f4:	eb df       	rcall	.-42     	; 0x2cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     2f6:	50 98       	cbi	0x0a, 0	; 10
	rcall 	i2c_delay_T2	;delay  T/2
     2f8:	e9 df       	rcall	.-46     	; 0x2cc <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     2fa:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay	T/2
     2fc:	e7 df       	rcall	.-50     	; 0x2cc <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     2fe:	13 c0       	rjmp	.+38     	; 0x326 <i2c_write>
	ret
     300:	08 95       	ret

00000302 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     302:	08 2e       	mov	r0, r24

00000304 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     304:	51 9a       	sbi	0x0a, 1	; 10
	rcall 	i2c_delay_T2	;delay T/2
     306:	e2 df       	rcall	.-60     	; 0x2cc <i2c_delay_T2>
	mov	r24,__tmp_reg__
     308:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     30a:	0d d0       	rcall	.+26     	; 0x326 <i2c_write>
	tst	r24		;if device not busy -> done
     30c:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     30e:	11 f0       	breq	.+4      	; 0x314 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     310:	02 d0       	rcall	.+4      	; 0x316 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     312:	f8 cf       	rjmp	.-16     	; 0x304 <i2c_start_wait1>

00000314 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     314:	08 95       	ret

00000316 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     316:	50 9a       	sbi	0x0a, 0	; 10
	sbi	SDA_DDR,SDA	;force SDA low
     318:	51 9a       	sbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     31a:	d8 df       	rcall	.-80     	; 0x2cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     31c:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     31e:	d6 df       	rcall	.-84     	; 0x2cc <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     320:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     322:	d4 cf       	rjmp	.-88     	; 0x2cc <i2c_delay_T2>
	ret
     324:	08 95       	ret

00000326 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     326:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     328:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     32a:	01 c0       	rjmp	.+2      	; 0x32e <i2c_write_first>

0000032c <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     32c:	88 0f       	add	r24, r24

0000032e <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     32e:	59 f0       	breq	.+22     	; 0x346 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     330:	50 9a       	sbi	0x0a, 0	; 10
	brcc	i2c_write_low
     332:	18 f4       	brcc	.+6      	; 0x33a <i2c_write_low>
	nop
     334:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     336:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     338:	02 c0       	rjmp	.+4      	; 0x33e <i2c_write_high>

0000033a <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     33a:	51 9a       	sbi	0x0a, 1	; 10
	rjmp	i2c_write_high
     33c:	00 c0       	rjmp	.+0      	; 0x33e <i2c_write_high>

0000033e <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     33e:	c6 df       	rcall	.-116    	; 0x2cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     340:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     342:	c4 df       	rcall	.-120    	; 0x2cc <i2c_delay_T2>
	rjmp	i2c_write_bit
     344:	f3 cf       	rjmp	.-26     	; 0x32c <i2c_write_bit>

00000346 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     346:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA
     348:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     34a:	c0 df       	rcall	.-128    	; 0x2cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     34c:	50 98       	cbi	0x0a, 0	; 10

0000034e <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     34e:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_ack_wait
     350:	fe cf       	rjmp	.-4      	; 0x34e <i2c_ack_wait>
	
	clr	r24		;return 0
     352:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     354:	49 99       	sbic	0x09, 1	; 9
	ldi	r24,1
     356:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     358:	b9 df       	rcall	.-142    	; 0x2cc <i2c_delay_T2>
	clr	r25
     35a:	99 27       	eor	r25, r25
	ret
     35c:	08 95       	ret

0000035e <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     35e:	88 27       	eor	r24, r24
	rjmp	i2c_read
     360:	01 c0       	rjmp	.+2      	; 0x364 <i2c_read>

00000362 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     362:	81 e0       	ldi	r24, 0x01	; 1

00000364 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     364:	71 e0       	ldi	r23, 0x01	; 1

00000366 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     366:	50 9a       	sbi	0x0a, 0	; 10
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     368:	51 98       	cbi	0x0a, 1	; 10
	rcall	i2c_delay_T2	;delay T/2
     36a:	b0 df       	rcall	.-160    	; 0x2cc <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     36c:	50 98       	cbi	0x0a, 0	; 10
	rcall	i2c_delay_T2	;delay T/2
     36e:	ae df       	rcall	.-164    	; 0x2cc <i2c_delay_T2>

00000370 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     370:	48 9b       	sbis	0x09, 0	; 9
    rjmp	i2c_read_stretch
     372:	fe cf       	rjmp	.-4      	; 0x370 <i2c_read_stretch>
    	
	clc			;clear carry flag
     374:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     376:	49 99       	sbic	0x09, 1	; 9
	sec			;  set carry flag
     378:	08 94       	sec
	
	rol	r23		;store bit
     37a:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     37c:	a0 f7       	brcc	.-24     	; 0x366 <i2c_read_bit>

0000037e <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     37e:	50 9a       	sbi	0x0a, 0	; 10
	cpi	r24,1
     380:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     382:	11 f0       	breq	.+4      	; 0x388 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     384:	51 98       	cbi	0x0a, 1	; 10
	rjmp	i2c_put_ack_high
     386:	01 c0       	rjmp	.+2      	; 0x38a <i2c_put_ack_high>

00000388 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     388:	51 9a       	sbi	0x0a, 1	; 10

0000038a <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     38a:	a0 df       	rcall	.-192    	; 0x2cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     38c:	50 98       	cbi	0x0a, 0	; 10

0000038e <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     38e:	48 9b       	sbis	0x09, 0	; 9
	rjmp	i2c_put_ack_wait
     390:	fe cf       	rjmp	.-4      	; 0x38e <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     392:	9c df       	rcall	.-200    	; 0x2cc <i2c_delay_T2>
	mov	r24,r23
     394:	87 2f       	mov	r24, r23
	clr	r25
     396:	99 27       	eor	r25, r25
	ret
     398:	08 95       	ret

0000039a <_Z16enableEventFlagsv>:

//Enables the pressure and temp measurement event flags so that we can
//test against them. This is recommended in datasheet during setup.
void enableEventFlags()
{
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     39a:	80 ec       	ldi	r24, 0xC0	; 192
     39c:	b2 df       	rcall	.-156    	; 0x302 <i2c_start_wait>
	i2c_write(PT_DATA_CFG);
     39e:	83 e1       	ldi	r24, 0x13	; 19
     3a0:	c2 df       	rcall	.-124    	; 0x326 <i2c_write>
	i2c_write(0x07);
     3a2:	87 e0       	ldi	r24, 0x07	; 7
     3a4:	c0 cf       	rjmp	.-128    	; 0x326 <i2c_write>
     3a6:	08 95       	ret

000003a8 <_Z8IIC_Readh>:
}

byte IIC_Read(byte regAddr)
{
     3a8:	cf 93       	push	r28
     3aa:	c8 2f       	mov	r28, r24
	// This function reads one byte over IIC
	
	i2c_rep_start(MPL3115a2+I2C_WRITE);
     3ac:	80 ec       	ldi	r24, 0xC0	; 192
     3ae:	9f df       	rcall	.-194    	; 0x2ee <i2c_rep_start>
	i2c_write(regAddr);
     3b0:	8c 2f       	mov	r24, r28
     3b2:	b9 df       	rcall	.-142    	; 0x326 <i2c_write>
	
	i2c_rep_start(MPL3115a2+I2C_READ);
     3b4:	81 ec       	ldi	r24, 0xC1	; 193
     3b6:	9b df       	rcall	.-202    	; 0x2ee <i2c_rep_start>
	return i2c_readNak();
     3b8:	d2 df       	rcall	.-92     	; 0x35e <i2c_readNak>
}
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_Z9IIC_Writehh>:

void IIC_Write(byte regAddr, byte value)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	d8 2f       	mov	r29, r24
     3c4:	c6 2f       	mov	r28, r22
	i2c_start_wait(MPL3115a2+I2C_WRITE);
     3c6:	80 ec       	ldi	r24, 0xC0	; 192
     3c8:	9c df       	rcall	.-200    	; 0x302 <i2c_start_wait>
	i2c_write(regAddr);
     3ca:	8d 2f       	mov	r24, r29
     3cc:	ac df       	rcall	.-168    	; 0x326 <i2c_write>
	i2c_write(value);
     3ce:	8c 2f       	mov	r24, r28
     3d0:	aa df       	rcall	.-172    	; 0x326 <i2c_write>
	i2c_stop();
     3d2:	a1 df       	rcall	.-190    	; 0x316 <i2c_stop>
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <_Z24altimeter_toggle_oneShotv>:
}

void altimeter_toggle_oneShot(void) 
{ 
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     3da:	86 e2       	ldi	r24, 0x26	; 38
     3dc:	e5 df       	rcall	.-54     	; 0x3a8 <_Z8IIC_Readh>
	
	//Clear OST bit
	tempSetting &= ~(1<<1);
     3de:	68 2f       	mov	r22, r24
     3e0:	6d 7f       	andi	r22, 0xFD	; 253
	IIC_Write(CTRL_REG1,tempSetting);
     3e2:	86 e2       	ldi	r24, 0x26	; 38
     3e4:	ec df       	rcall	.-40     	; 0x3be <_Z9IIC_Writehh>
	
	//read CTRL_REG1
	tempSetting = IIC_Read(CTRL_REG1);
     3e6:	86 e2       	ldi	r24, 0x26	; 38
     3e8:	df df       	rcall	.-66     	; 0x3a8 <_Z8IIC_Readh>
	
	//set OST bit
	tempSetting |= (1<<1);
     3ea:	68 2f       	mov	r22, r24
     3ec:	62 60       	ori	r22, 0x02	; 2
	IIC_Write(CTRL_REG1,tempSetting); 
     3ee:	86 e2       	ldi	r24, 0x26	; 38
     3f0:	e6 cf       	rjmp	.-52     	; 0x3be <_Z9IIC_Writehh>
     3f2:	08 95       	ret

000003f4 <_Z20altimeter_get_metresv>:
	
	return start_height;
}

float altimeter_get_metres(void)
{
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	float altitude = -999;
			
	//if(working)
	//{
		altimeter_toggle_oneShot();
     400:	ec df       	rcall	.-40     	; 0x3da <_Z24altimeter_toggle_oneShotv>
		
		int counter = 0;
		
		while((IIC_Read(STATUS) & (1<<1)) == 0)
     402:	ca e5       	ldi	r28, 0x5A	; 90
     404:	d2 e0       	ldi	r29, 0x02	; 2
     406:	0a c0       	rjmp	.+20     	; 0x41c <_Z20altimeter_get_metresv+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     408:	8f e9       	ldi	r24, 0x9F	; 159
     40a:	9f e0       	ldi	r25, 0x0F	; 15
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <_Z20altimeter_get_metresv+0x18>
     410:	00 c0       	rjmp	.+0      	; 0x412 <_Z20altimeter_get_metresv+0x1e>
     412:	00 00       	nop
     414:	21 97       	sbiw	r28, 0x01	; 1
		{
			_delay_ms(1);
			if(counter++>600) return (-999);
     416:	20 97       	sbiw	r28, 0x00	; 0
     418:	09 f4       	brne	.+2      	; 0x41c <_Z20altimeter_get_metresv+0x28>
     41a:	49 c0       	rjmp	.+146    	; 0x4ae <_Z20altimeter_get_metresv+0xba>
	//{
		altimeter_toggle_oneShot();
		
		int counter = 0;
		
		while((IIC_Read(STATUS) & (1<<1)) == 0)
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	c4 df       	rcall	.-120    	; 0x3a8 <_Z8IIC_Readh>
     420:	81 ff       	sbrs	r24, 1
     422:	f2 cf       	rjmp	.-28     	; 0x408 <_Z20altimeter_get_metresv+0x14>
		}
		
		//if(counter >= 600) return (-999);
		//_delay_ms(100);
		
		i2c_start_wait(MPL3115a2+I2C_WRITE);
     424:	80 ec       	ldi	r24, 0xC0	; 192
     426:	6d df       	rcall	.-294    	; 0x302 <i2c_start_wait>
		i2c_write(OUT_P_MSB);
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	7d df       	rcall	.-262    	; 0x326 <i2c_write>
		i2c_rep_start(MPL3115a2+I2C_READ);
     42c:	81 ec       	ldi	r24, 0xC1	; 193
     42e:	5f df       	rcall	.-322    	; 0x2ee <i2c_rep_start>
		
		int8_t msbA,csbA,lsbA = 0x00;
		
		msbA = i2c_readAck();
     430:	98 df       	rcall	.-208    	; 0x362 <i2c_readAck>
     432:	f8 2e       	mov	r15, r24
		csbA = i2c_readAck();
     434:	96 df       	rcall	.-212    	; 0x362 <i2c_readAck>
     436:	d8 2f       	mov	r29, r24
		lsbA = i2c_readNak();
     438:	92 df       	rcall	.-220    	; 0x35e <i2c_readNak>
     43a:	c8 2f       	mov	r28, r24
		i2c_stop();
     43c:	6c df       	rcall	.-296    	; 0x316 <i2c_stop>
		
		altimeter_toggle_oneShot();
     43e:	cd df       	rcall	.-102    	; 0x3da <_Z24altimeter_toggle_oneShotv>
		
		float tempcsb = (lsbA>>4)/16.0;
		
		altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     440:	4f 2d       	mov	r20, r15
     442:	55 27       	eor	r21, r21
     444:	47 fd       	sbrc	r20, 7
     446:	50 95       	com	r21
     448:	74 2f       	mov	r23, r20
     44a:	66 27       	eor	r22, r22
     44c:	2d 2f       	mov	r18, r29
     44e:	33 27       	eor	r19, r19
     450:	27 fd       	sbrc	r18, 7
     452:	30 95       	com	r19
     454:	62 2b       	or	r22, r18
     456:	73 2b       	or	r23, r19
     458:	88 27       	eor	r24, r24
     45a:	77 fd       	sbrc	r23, 7
     45c:	80 95       	com	r24
     45e:	98 2f       	mov	r25, r24
     460:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     464:	6b 01       	movw	r12, r22
     466:	7c 01       	movw	r14, r24
		lsbA = i2c_readNak();
		i2c_stop();
		
		altimeter_toggle_oneShot();
		
		float tempcsb = (lsbA>>4)/16.0;
     468:	6c 2f       	mov	r22, r28
     46a:	77 27       	eor	r23, r23
     46c:	67 fd       	sbrc	r22, 7
     46e:	70 95       	com	r23
     470:	75 95       	asr	r23
     472:	67 95       	ror	r22
     474:	75 95       	asr	r23
     476:	67 95       	ror	r22
     478:	75 95       	asr	r23
     47a:	67 95       	ror	r22
     47c:	75 95       	asr	r23
     47e:	67 95       	ror	r22
     480:	88 27       	eor	r24, r24
     482:	77 fd       	sbrc	r23, 7
     484:	80 95       	com	r24
     486:	98 2f       	mov	r25, r24
     488:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5d e3       	ldi	r21, 0x3D	; 61
     494:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__mulsf3>
     498:	9b 01       	movw	r18, r22
     49a:	ac 01       	movw	r20, r24
		
		altitude = (float)( (msbA << 8) | csbA) + tempcsb;
     49c:	c7 01       	movw	r24, r14
     49e:	b6 01       	movw	r22, r12
     4a0:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3>
	//}
	
	return altitude;
     4a4:	56 2f       	mov	r21, r22
     4a6:	47 2f       	mov	r20, r23
     4a8:	38 2f       	mov	r19, r24
     4aa:	29 2f       	mov	r18, r25
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <_Z20altimeter_get_metresv+0xc2>
		int counter = 0;
		
		while((IIC_Read(STATUS) & (1<<1)) == 0)
		{
			_delay_ms(1);
			if(counter++>600) return (-999);
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	40 ec       	ldi	r20, 0xC0	; 192
     4b2:	39 e7       	ldi	r19, 0x79	; 121
     4b4:	24 ec       	ldi	r18, 0xC4	; 196
		
		altitude = (float)( (msbA << 8) | csbA) + tempcsb;
	//}
	
	return altitude;
}
     4b6:	65 2f       	mov	r22, r21
     4b8:	74 2f       	mov	r23, r20
     4ba:	83 2f       	mov	r24, r19
     4bc:	92 2f       	mov	r25, r18
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	ff 90       	pop	r15
     4c4:	ef 90       	pop	r14
     4c6:	df 90       	pop	r13
     4c8:	cf 90       	pop	r12
     4ca:	08 95       	ret

000004cc <_Z22altimeter_start_heightv>:
	working = success;
	return success;	
}

float altimeter_start_height()
{
     4cc:	4f 92       	push	r4
     4ce:	5f 92       	push	r5
     4d0:	6f 92       	push	r6
     4d2:	7f 92       	push	r7
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
	float start_height = 0;
	float start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 2s...");
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	69 d2       	rcall	.+1234   	; 0x9bc <_Z13debug_printlnPKc>
}

float altimeter_start_height()
{
	float start_height = 0;
	float start_height_samples = 0;
     4ea:	41 2c       	mov	r4, r1
     4ec:	51 2c       	mov	r5, r1
     4ee:	32 01       	movw	r6, r4
	return success;	
}

float altimeter_start_height()
{
	float start_height = 0;
     4f0:	53 01       	movw	r10, r6
     4f2:	42 01       	movw	r8, r4
	float start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 2s...");
	//sample the current height for 1 second
	while(millis()<2000)
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_Z22altimeter_start_heightv+0x64>
	{
		float temp_height = altimeter_get_metres();
     4f6:	7e df       	rcall	.-260    	; 0x3f4 <_Z20altimeter_get_metresv>
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
		
		//make sure recorded value isn't in error
		if(temp_height!=-999)
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 ec       	ldi	r19, 0xC0	; 192
     500:	49 e7       	ldi	r20, 0x79	; 121
     502:	54 ec       	ldi	r21, 0xC4	; 196
     504:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__cmpsf2>
     508:	88 23       	and	r24, r24
     50a:	91 f0       	breq	.+36     	; 0x530 <_Z22altimeter_start_heightv+0x64>
		{
			start_height += temp_height;
     50c:	a7 01       	movw	r20, r14
     50e:	96 01       	movw	r18, r12
     510:	c5 01       	movw	r24, r10
     512:	b4 01       	movw	r22, r8
     514:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3>
     518:	4b 01       	movw	r8, r22
     51a:	5c 01       	movw	r10, r24
			start_height_samples += 1;
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e8       	ldi	r20, 0x80	; 128
     522:	5f e3       	ldi	r21, 0x3F	; 63
     524:	c3 01       	movw	r24, r6
     526:	b2 01       	movw	r22, r4
     528:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3>
     52c:	2b 01       	movw	r4, r22
     52e:	3c 01       	movw	r6, r24
	float start_height = 0;
	float start_height_samples = 0;
	
	debug_println("Determining Altimeter Start height, sampling for 2s...");
	//sample the current height for 1 second
	while(millis()<2000)
     530:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_Z6millisv>
     534:	60 3d       	cpi	r22, 0xD0	; 208
     536:	77 40       	sbci	r23, 0x07	; 7
     538:	81 05       	cpc	r24, r1
     53a:	91 05       	cpc	r25, r1
     53c:	e4 f2       	brlt	.-72     	; 0x4f6 <_Z22altimeter_start_heightv+0x2a>
		}
		
	}
	
	//average the height
	start_height = start_height / start_height_samples;
     53e:	a3 01       	movw	r20, r6
     540:	92 01       	movw	r18, r4
     542:	c5 01       	movw	r24, r10
     544:	b4 01       	movw	r22, r8
     546:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divsf3>
     54a:	6b 01       	movw	r12, r22
     54c:	7c 01       	movw	r14, r24
	debug_print("Starting height initialised to: ");
     54e:	87 e4       	ldi	r24, 0x47	; 71
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	2f d2       	rcall	.+1118   	; 0x9b2 <_Z11debug_printPKc>
	debug_printf(start_height);
     554:	c7 01       	movw	r24, r14
     556:	b6 01       	movw	r22, r12
     558:	57 d2       	rcall	.+1198   	; 0xa08 <_Z12debug_printff>
	debug_println(" m");
     55a:	88 e6       	ldi	r24, 0x68	; 104
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	2e d2       	rcall	.+1116   	; 0x9bc <_Z13debug_printlnPKc>
	
	return start_height;
}
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	9f 90       	pop	r9
     572:	8f 90       	pop	r8
     574:	7f 90       	pop	r7
     576:	6f 90       	pop	r6
     578:	5f 90       	pop	r5
     57a:	4f 90       	pop	r4
     57c:	08 95       	ret

0000057e <_Z16setModeAltimeterv>:
}

void setModeAltimeter()
{
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     57e:	86 e2       	ldi	r24, 0x26	; 38
     580:	13 df       	rcall	.-474    	; 0x3a8 <_Z8IIC_Readh>
	
	tempSetting |= (1<<7);	//set ALT bit
     582:	68 2f       	mov	r22, r24
     584:	60 68       	ori	r22, 0x80	; 128
	
	IIC_Write(CTRL_REG1,tempSetting);
     586:	86 e2       	ldi	r24, 0x26	; 38
     588:	1a cf       	rjmp	.-460    	; 0x3be <_Z9IIC_Writehh>
     58a:	08 95       	ret

0000058c <_Z17setOversampleRateh>:
}

void setOversampleRate(uint8_t sampleRate)
{
     58c:	cf 93       	push	r28
     58e:	c8 2f       	mov	r28, r24
     590:	88 30       	cpi	r24, 0x08	; 8
     592:	08 f0       	brcs	.+2      	; 0x596 <_Z17setOversampleRateh+0xa>
     594:	c7 e0       	ldi	r28, 0x07	; 7
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
     596:	86 e2       	ldi	r24, 0x26	; 38
     598:	07 df       	rcall	.-498    	; 0x3a8 <_Z8IIC_Readh>
	
	tempSetting &= 0b11000111; //Clear out old OS bits
     59a:	87 7c       	andi	r24, 0xC7	; 199
}

void setOversampleRate(uint8_t sampleRate)
{
	if(sampleRate > 7) sampleRate = 7;	//OS cannot be large than 0b.0111
	sampleRate <<= 3;
     59c:	cc 0f       	add	r28, r28
     59e:	cc 0f       	add	r28, r28
     5a0:	cc 0f       	add	r28, r28
	
	//read CTRL_REG1
	uint8_t tempSetting = IIC_Read(CTRL_REG1);
	
	tempSetting &= 0b11000111; //Clear out old OS bits
	tempSetting |= sampleRate; //Mask in new OS bits
     5a2:	68 2f       	mov	r22, r24
     5a4:	6c 2b       	or	r22, r28
	
	IIC_Write(CTRL_REG1,tempSetting);
     5a6:	86 e2       	ldi	r24, 0x26	; 38
     5a8:	0a df       	rcall	.-492    	; 0x3be <_Z9IIC_Writehh>
	
}
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_Z14altimeter_initv>:
float start_height = 0;
bool working;

bool altimeter_init()
{
	i2c_init();
     5ae:	96 de       	rcall	.-724    	; 0x2dc <i2c_init>
	bool success = true;
	
	if(IIC_Read(WHO_AM_I) == 196)
     5b0:	8c e0       	ldi	r24, 0x0C	; 12
     5b2:	fa de       	rcall	.-524    	; 0x3a8 <_Z8IIC_Readh>
     5b4:	84 3c       	cpi	r24, 0xC4	; 196
     5b6:	c9 f4       	brne	.+50     	; 0x5ea <_Z14altimeter_initv+0x3c>
	{
		debug_println("Altimeter connected correctly!");
     5b8:	8b e6       	ldi	r24, 0x6B	; 107
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	ff d1       	rcall	.+1022   	; 0x9bc <_Z13debug_printlnPKc>
		success = false;
	}
	
	if(success)
	{
		setModeAltimeter();
     5be:	df df       	rcall	.-66     	; 0x57e <_Z16setModeAltimeterv>
		setOversampleRate(7);
     5c0:	87 e0       	ldi	r24, 0x07	; 7
     5c2:	e4 df       	rcall	.-56     	; 0x58c <_Z17setOversampleRateh>
		enableEventFlags();
     5c4:	ea de       	rcall	.-556    	; 0x39a <_Z16enableEventFlagsv>
	
		
		start_height = altimeter_start_height();
     5c6:	82 df       	rcall	.-252    	; 0x4cc <_Z22altimeter_start_heightv>
     5c8:	60 93 d1 04 	sts	0x04D1, r22
     5cc:	70 93 d2 04 	sts	0x04D2, r23
     5d0:	80 93 d3 04 	sts	0x04D3, r24
     5d4:	90 93 d4 04 	sts	0x04D4, r25
		
		if(start_height == -999)
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 ec       	ldi	r19, 0xC0	; 192
     5dc:	49 e7       	ldi	r20, 0x79	; 121
     5de:	54 ec       	ldi	r21, 0xC4	; 196
     5e0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__cmpsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	69 f0       	breq	.+26     	; 0x602 <_Z14altimeter_initv+0x54>
     5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <_Z14altimeter_initv+0x4a>
	{
		debug_println("Altimeter connected correctly!");
	}
	else
	{
		debug_println("Altimeter not connected!");
     5ea:	8a e8       	ldi	r24, 0x8A	; 138
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	e6 d1       	rcall	.+972    	; 0x9bc <_Z13debug_printlnPKc>
		success = false;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
			debug_println("Altimeter initialised correctly!");
		else
			debug_println("Altimeter failed to initialise!");
	}
	
	working = success;
     5f2:	80 93 d0 04 	sts	0x04D0, r24
     5f6:	08 95       	ret
		
		if(start_height == -999)
			success = false;
			
		if(success)
			debug_println("Altimeter initialised correctly!");
     5f8:	83 ea       	ldi	r24, 0xA3	; 163
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	df d1       	rcall	.+958    	; 0x9bc <_Z13debug_printlnPKc>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	f8 cf       	rjmp	.-16     	; 0x5f2 <_Z14altimeter_initv+0x44>
		else
			debug_println("Altimeter failed to initialise!");
     602:	84 ec       	ldi	r24, 0xC4	; 196
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	da d1       	rcall	.+948    	; 0x9bc <_Z13debug_printlnPKc>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	f3 cf       	rjmp	.-26     	; 0x5f2 <_Z14altimeter_initv+0x44>

0000060c <_Z19compass_get_headingv>:
	i2c_write(0x00);
	
	setMagGain(HMC5883_MAGGAIN_1_3);
}

float compass_get_heading(void){
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	cf 93       	push	r28
     626:	df 93       	push	r29

	i2c_start_wait(HMC5883L_WRITE);
     628:	8c e3       	ldi	r24, 0x3C	; 60
     62a:	6b de       	rcall	.-810    	; 0x302 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	7b de       	rcall	.-778    	; 0x326 <i2c_write>
	i2c_stop();
     630:	72 de       	rcall	.-796    	; 0x316 <i2c_stop>

	i2c_rep_start(HMC5883L_READ);
     632:	8d e3       	ldi	r24, 0x3D	; 61
     634:	5c de       	rcall	.-840    	; 0x2ee <i2c_rep_start>

	mag_raw_xhi = i2c_readAck();
     636:	95 de       	rcall	.-726    	; 0x362 <i2c_readAck>
     638:	80 93 ed 04 	sts	0x04ED, r24
	mag_raw_xlo = i2c_readAck();
     63c:	92 de       	rcall	.-732    	; 0x362 <i2c_readAck>
     63e:	80 93 ec 04 	sts	0x04EC, r24
	
	mag_raw_zhi = i2c_readAck();
     642:	8f de       	rcall	.-738    	; 0x362 <i2c_readAck>
     644:	80 93 eb 04 	sts	0x04EB, r24
	mag_raw_zlo = i2c_readAck();
     648:	8c de       	rcall	.-744    	; 0x362 <i2c_readAck>
     64a:	80 93 ea 04 	sts	0x04EA, r24
	
	mag_raw_yhi = i2c_readAck();
     64e:	89 de       	rcall	.-750    	; 0x362 <i2c_readAck>
     650:	80 93 e9 04 	sts	0x04E9, r24
	mag_raw_ylo = i2c_readNak();
     654:	84 de       	rcall	.-760    	; 0x35e <i2c_readNak>
     656:	80 93 e8 04 	sts	0x04E8, r24
	
	i2c_stop();
     65a:	5d de       	rcall	.-838    	; 0x316 <i2c_stop>
	
	//shift values to create properly formed integer (low byte first)
	mag_data_x = (int16_t) (mag_raw_xlo | (int16_t)mag_raw_xhi << 8);
     65c:	60 91 ed 04 	lds	r22, 0x04ED
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	76 2f       	mov	r23, r22
     664:	66 27       	eor	r22, r22
     666:	80 91 ec 04 	lds	r24, 0x04EC
     66a:	68 2b       	or	r22, r24
     66c:	70 93 e7 04 	sts	0x04E7, r23
     670:	60 93 e6 04 	sts	0x04E6, r22
	mag_data_y = (int16_t) (mag_raw_ylo | (int16_t)mag_raw_yhi << 8);
     674:	e0 90 e9 04 	lds	r14, 0x04E9
     678:	f1 2c       	mov	r15, r1
     67a:	fe 2c       	mov	r15, r14
     67c:	ee 24       	eor	r14, r14
     67e:	80 91 e8 04 	lds	r24, 0x04E8
     682:	e8 2a       	or	r14, r24
     684:	f0 92 e5 04 	sts	0x04E5, r15
     688:	e0 92 e4 04 	sts	0x04E4, r14
	mag_data_z = (int16_t) (mag_raw_zlo | (int16_t)mag_raw_zhi << 8);
     68c:	c0 91 eb 04 	lds	r28, 0x04EB
     690:	d0 e0       	ldi	r29, 0x00	; 0
     692:	dc 2f       	mov	r29, r28
     694:	cc 27       	eor	r28, r28
     696:	80 91 ea 04 	lds	r24, 0x04EA
     69a:	c8 2b       	or	r28, r24
     69c:	d0 93 e3 04 	sts	0x04E3, r29
     6a0:	c0 93 e2 04 	sts	0x04E2, r28
	
	mag_proc_x = mag_data_x / _hmc5883_Gauss_LSB_XY * GAUSS_TO_MICROTESLA;
     6a4:	40 90 04 02 	lds	r4, 0x0204
     6a8:	50 90 05 02 	lds	r5, 0x0205
     6ac:	60 90 06 02 	lds	r6, 0x0206
     6b0:	70 90 07 02 	lds	r7, 0x0207
     6b4:	88 27       	eor	r24, r24
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	80 95       	com	r24
     6ba:	98 2f       	mov	r25, r24
     6bc:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     6c0:	a3 01       	movw	r20, r6
     6c2:	92 01       	movw	r18, r4
     6c4:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divsf3>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	48 ec       	ldi	r20, 0xC8	; 200
     6ce:	52 e4       	ldi	r21, 0x42	; 66
     6d0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__mulsf3>
     6d4:	4b 01       	movw	r8, r22
     6d6:	5c 01       	movw	r10, r24
     6d8:	60 93 de 04 	sts	0x04DE, r22
     6dc:	70 93 df 04 	sts	0x04DF, r23
     6e0:	80 93 e0 04 	sts	0x04E0, r24
     6e4:	90 93 e1 04 	sts	0x04E1, r25
	mag_proc_y = mag_data_y / _hmc5883_Gauss_LSB_XY * GAUSS_TO_MICROTESLA;
     6e8:	b7 01       	movw	r22, r14
     6ea:	88 27       	eor	r24, r24
     6ec:	77 fd       	sbrc	r23, 7
     6ee:	80 95       	com	r24
     6f0:	98 2f       	mov	r25, r24
     6f2:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     6f6:	a3 01       	movw	r20, r6
     6f8:	92 01       	movw	r18, r4
     6fa:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divsf3>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	48 ec       	ldi	r20, 0xC8	; 200
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__mulsf3>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	60 93 da 04 	sts	0x04DA, r22
     712:	70 93 db 04 	sts	0x04DB, r23
     716:	80 93 dc 04 	sts	0x04DC, r24
     71a:	90 93 dd 04 	sts	0x04DD, r25
	mag_proc_z = mag_data_z / _hmc5883_Gauss_LSB_Z * GAUSS_TO_MICROTESLA;
     71e:	be 01       	movw	r22, r28
     720:	88 27       	eor	r24, r24
     722:	77 fd       	sbrc	r23, 7
     724:	80 95       	com	r24
     726:	98 2f       	mov	r25, r24
     728:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     72c:	20 91 00 02 	lds	r18, 0x0200
     730:	30 91 01 02 	lds	r19, 0x0201
     734:	40 91 02 02 	lds	r20, 0x0202
     738:	50 91 03 02 	lds	r21, 0x0203
     73c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divsf3>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	48 ec       	ldi	r20, 0xC8	; 200
     746:	52 e4       	ldi	r21, 0x42	; 66
     748:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__mulsf3>
     74c:	60 93 d6 04 	sts	0x04D6, r22
     750:	70 93 d7 04 	sts	0x04D7, r23
     754:	80 93 d8 04 	sts	0x04D8, r24
     758:	90 93 d9 04 	sts	0x04D9, r25
	//debug_print("X: ");debug_printf(mag_proc_x);debug_print(" ");
	//debug_print("Y: ");debug_printf(mag_proc_y);debug_print(" ");
	//debug_print("Z: ");debug_printf(mag_proc_z);debug_print(" ");debug_println("uT");
	
	//calculate heading
	float heading = atan2(mag_proc_y,mag_proc_x);
     75c:	a5 01       	movw	r20, r10
     75e:	94 01       	movw	r18, r8
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 94 10 	call	0x2128	; 0x2128 <atan2>
	
	heading += DECLINATION;
     768:	25 e3       	ldi	r18, 0x35	; 53
     76a:	3a ef       	ldi	r19, 0xFA	; 250
     76c:	4e e0       	ldi	r20, 0x0E	; 14
     76e:	5e e3       	ldi	r21, 0x3E	; 62
     770:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3>
     774:	6b 01       	movw	r12, r22
     776:	7c 01       	movw	r14, r24
	
	if(heading<0)
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	a9 01       	movw	r20, r18
     77e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__cmpsf2>
     782:	88 23       	and	r24, r24
     784:	54 f4       	brge	.+20     	; 0x79a <_Z19compass_get_headingv+0x18e>
		heading+=2*PI;
     786:	2b ed       	ldi	r18, 0xDB	; 219
     788:	3f e0       	ldi	r19, 0x0F	; 15
     78a:	49 ec       	ldi	r20, 0xC9	; 201
     78c:	50 e4       	ldi	r21, 0x40	; 64
     78e:	c7 01       	movw	r24, r14
     790:	b6 01       	movw	r22, r12
     792:	0e 94 21 10 	call	0x2042	; 0x2042 <__addsf3>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
	
	if(heading > 2*PI)
     79a:	2b ed       	ldi	r18, 0xDB	; 219
     79c:	3f e0       	ldi	r19, 0x0F	; 15
     79e:	49 ec       	ldi	r20, 0xC9	; 201
     7a0:	50 e4       	ldi	r21, 0x40	; 64
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__gesf2>
     7aa:	18 16       	cp	r1, r24
     7ac:	54 f4       	brge	.+20     	; 0x7c2 <_Z19compass_get_headingv+0x1b6>
		heading-=2*PI;
     7ae:	2b ed       	ldi	r18, 0xDB	; 219
     7b0:	3f e0       	ldi	r19, 0x0F	; 15
     7b2:	49 ec       	ldi	r20, 0xC9	; 201
     7b4:	50 e4       	ldi	r21, 0x40	; 64
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 20 10 	call	0x2040	; 0x2040 <__subsf3>
     7be:	6b 01       	movw	r12, r22
     7c0:	7c 01       	movw	r14, r24
		
	float heading_degrees = heading * 180 / PI;
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	44 e3       	ldi	r20, 0x34	; 52
     7c8:	53 e4       	ldi	r21, 0x43	; 67
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 f5 12 	call	0x25ea	; 0x25ea <__mulsf3>
     7d2:	2b ed       	ldi	r18, 0xDB	; 219
     7d4:	3f e0       	ldi	r19, 0x0F	; 15
     7d6:	49 e4       	ldi	r20, 0x49	; 73
     7d8:	50 e4       	ldi	r21, 0x40	; 64
     7da:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__divsf3>
	
	//debug_print("Heading (degrees): "); debug_printf(heading_degrees);debug_println("");
	
	return heading_degrees;
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	08 95       	ret

000007fc <_Z10setMagGain14hmc5883MagGain>:

void setMagGain(hmc5883MagGain gain)
{
     7fc:	cf 93       	push	r28
     7fe:	c8 2f       	mov	r28, r24
	i2c_start(HMC5883L_WRITE);
     800:	8c e3       	ldi	r24, 0x3C	; 60
     802:	71 dd       	rcall	.-1310   	; 0x2e6 <i2c_start>
	i2c_write(HMC5883_REGISTER_MAG_CRB_REG_M); // set pointer
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	8f dd       	rcall	.-1250   	; 0x326 <i2c_write>
	i2c_write((byte)gain); // write gain
     808:	8c 2f       	mov	r24, r28
     80a:	8d dd       	rcall	.-1254   	; 0x326 <i2c_write>
	i2c_stop();
     80c:	84 dd       	rcall	.-1272   	; 0x316 <i2c_stop>
	
	_magGain = gain;
     80e:	c0 93 d5 04 	sts	0x04D5, r28
	
	switch(gain)
     812:	c0 38       	cpi	r28, 0x80	; 128
     814:	09 f4       	brne	.+2      	; 0x818 <_Z10setMagGain14hmc5883MagGain+0x1c>
     816:	5f c0       	rjmp	.+190    	; 0x8d6 <_Z10setMagGain14hmc5883MagGain+0xda>
     818:	48 f4       	brcc	.+18     	; 0x82c <_Z10setMagGain14hmc5883MagGain+0x30>
     81a:	c0 34       	cpi	r28, 0x40	; 64
     81c:	51 f1       	breq	.+84     	; 0x872 <_Z10setMagGain14hmc5883MagGain+0x76>
     81e:	c0 36       	cpi	r28, 0x60	; 96
     820:	09 f4       	brne	.+2      	; 0x824 <_Z10setMagGain14hmc5883MagGain+0x28>
     822:	40 c0       	rjmp	.+128    	; 0x8a4 <_Z10setMagGain14hmc5883MagGain+0xa8>
     824:	c0 32       	cpi	r28, 0x20	; 32
     826:	09 f0       	breq	.+2      	; 0x82a <_Z10setMagGain14hmc5883MagGain+0x2e>
     828:	b9 c0       	rjmp	.+370    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
     82a:	0a c0       	rjmp	.+20     	; 0x840 <_Z10setMagGain14hmc5883MagGain+0x44>
     82c:	c0 3c       	cpi	r28, 0xC0	; 192
     82e:	09 f4       	brne	.+2      	; 0x832 <_Z10setMagGain14hmc5883MagGain+0x36>
     830:	84 c0       	rjmp	.+264    	; 0x93a <_Z10setMagGain14hmc5883MagGain+0x13e>
     832:	c0 3e       	cpi	r28, 0xE0	; 224
     834:	09 f4       	brne	.+2      	; 0x838 <_Z10setMagGain14hmc5883MagGain+0x3c>
     836:	9a c0       	rjmp	.+308    	; 0x96c <_Z10setMagGain14hmc5883MagGain+0x170>
     838:	c0 3a       	cpi	r28, 0xA0	; 160
     83a:	09 f0       	breq	.+2      	; 0x83e <_Z10setMagGain14hmc5883MagGain+0x42>
     83c:	af c0       	rjmp	.+350    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
     83e:	64 c0       	rjmp	.+200    	; 0x908 <_Z10setMagGain14hmc5883MagGain+0x10c>
	{
		case HMC5883_MAGGAIN_1_3:
			_hmc5883_Gauss_LSB_XY = 1100;
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e8       	ldi	r25, 0x80	; 128
     844:	a9 e8       	ldi	r26, 0x89	; 137
     846:	b4 e4       	ldi	r27, 0x44	; 68
     848:	80 93 04 02 	sts	0x0204, r24
     84c:	90 93 05 02 	sts	0x0205, r25
     850:	a0 93 06 02 	sts	0x0206, r26
     854:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 980;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a5 e7       	ldi	r26, 0x75	; 117
     85e:	b4 e4       	ldi	r27, 0x44	; 68
     860:	80 93 00 02 	sts	0x0200, r24
     864:	90 93 01 02 	sts	0x0201, r25
     868:	a0 93 02 02 	sts	0x0202, r26
     86c:	b0 93 03 02 	sts	0x0203, r27
			break;
     870:	95 c0       	rjmp	.+298    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_1_9:
			_hmc5883_Gauss_LSB_XY = 855;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 ec       	ldi	r25, 0xC0	; 192
     876:	a5 e5       	ldi	r26, 0x55	; 85
     878:	b4 e4       	ldi	r27, 0x44	; 68
     87a:	80 93 04 02 	sts	0x0204, r24
     87e:	90 93 05 02 	sts	0x0205, r25
     882:	a0 93 06 02 	sts	0x0206, r26
     886:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 760;
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	ae e3       	ldi	r26, 0x3E	; 62
     890:	b4 e4       	ldi	r27, 0x44	; 68
     892:	80 93 00 02 	sts	0x0200, r24
     896:	90 93 01 02 	sts	0x0201, r25
     89a:	a0 93 02 02 	sts	0x0202, r26
     89e:	b0 93 03 02 	sts	0x0203, r27
			break;
     8a2:	7c c0       	rjmp	.+248    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_2_5:
			_hmc5883_Gauss_LSB_XY = 670;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e8       	ldi	r25, 0x80	; 128
     8a8:	a7 e2       	ldi	r26, 0x27	; 39
     8aa:	b4 e4       	ldi	r27, 0x44	; 68
     8ac:	80 93 04 02 	sts	0x0204, r24
     8b0:	90 93 05 02 	sts	0x0205, r25
     8b4:	a0 93 06 02 	sts	0x0206, r26
     8b8:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 600;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a6 e1       	ldi	r26, 0x16	; 22
     8c2:	b4 e4       	ldi	r27, 0x44	; 68
     8c4:	80 93 00 02 	sts	0x0200, r24
     8c8:	90 93 01 02 	sts	0x0201, r25
     8cc:	a0 93 02 02 	sts	0x0202, r26
     8d0:	b0 93 03 02 	sts	0x0203, r27
			break;
     8d4:	63 c0       	rjmp	.+198    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_4_0:
			_hmc5883_Gauss_LSB_XY = 450;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a1 ee       	ldi	r26, 0xE1	; 225
     8dc:	b3 e4       	ldi	r27, 0x43	; 67
     8de:	80 93 04 02 	sts	0x0204, r24
     8e2:	90 93 05 02 	sts	0x0205, r25
     8e6:	a0 93 06 02 	sts	0x0206, r26
     8ea:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 400;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a8 ec       	ldi	r26, 0xC8	; 200
     8f4:	b3 e4       	ldi	r27, 0x43	; 67
     8f6:	80 93 00 02 	sts	0x0200, r24
     8fa:	90 93 01 02 	sts	0x0201, r25
     8fe:	a0 93 02 02 	sts	0x0202, r26
     902:	b0 93 03 02 	sts	0x0203, r27
			break;
     906:	4a c0       	rjmp	.+148    	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_4_7:
			_hmc5883_Gauss_LSB_XY = 400;
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a8 ec       	ldi	r26, 0xC8	; 200
     90e:	b3 e4       	ldi	r27, 0x43	; 67
     910:	80 93 04 02 	sts	0x0204, r24
     914:	90 93 05 02 	sts	0x0205, r25
     918:	a0 93 06 02 	sts	0x0206, r26
     91c:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 255;
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	af e7       	ldi	r26, 0x7F	; 127
     926:	b3 e4       	ldi	r27, 0x43	; 67
     928:	80 93 00 02 	sts	0x0200, r24
     92c:	90 93 01 02 	sts	0x0201, r25
     930:	a0 93 02 02 	sts	0x0202, r26
     934:	b0 93 03 02 	sts	0x0203, r27
			break;
     938:	31 c0       	rjmp	.+98     	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_5_6:
			_hmc5883_Gauss_LSB_XY = 330;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	a5 ea       	ldi	r26, 0xA5	; 165
     940:	b3 e4       	ldi	r27, 0x43	; 67
     942:	80 93 04 02 	sts	0x0204, r24
     946:	90 93 05 02 	sts	0x0205, r25
     94a:	a0 93 06 02 	sts	0x0206, r26
     94e:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 295;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e8       	ldi	r25, 0x80	; 128
     956:	a3 e9       	ldi	r26, 0x93	; 147
     958:	b3 e4       	ldi	r27, 0x43	; 67
     95a:	80 93 00 02 	sts	0x0200, r24
     95e:	90 93 01 02 	sts	0x0201, r25
     962:	a0 93 02 02 	sts	0x0202, r26
     966:	b0 93 03 02 	sts	0x0203, r27
			break;
     96a:	18 c0       	rjmp	.+48     	; 0x99c <_Z10setMagGain14hmc5883MagGain+0x1a0>
		case HMC5883_MAGGAIN_8_1:
			_hmc5883_Gauss_LSB_XY = 230;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	a6 e6       	ldi	r26, 0x66	; 102
     972:	b3 e4       	ldi	r27, 0x43	; 67
     974:	80 93 04 02 	sts	0x0204, r24
     978:	90 93 05 02 	sts	0x0205, r25
     97c:	a0 93 06 02 	sts	0x0206, r26
     980:	b0 93 07 02 	sts	0x0207, r27
			_hmc5883_Gauss_LSB_Z  = 205;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	ad e4       	ldi	r26, 0x4D	; 77
     98a:	b3 e4       	ldi	r27, 0x43	; 67
     98c:	80 93 00 02 	sts	0x0200, r24
     990:	90 93 01 02 	sts	0x0201, r25
     994:	a0 93 02 02 	sts	0x0202, r26
     998:	b0 93 03 02 	sts	0x0203, r27
			break;
	}

}
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <_Z13init_HMC5883Lv>:

//bool working;

void init_HMC5883L(void){

	i2c_start(HMC5883L_WRITE);
     9a0:	8c e3       	ldi	r24, 0x3C	; 60
     9a2:	a1 dc       	rcall	.-1726   	; 0x2e6 <i2c_start>
	i2c_write(HMC5883_REGISTER_MAG_MR_REG_M);
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	bf dc       	rcall	.-1666   	; 0x326 <i2c_write>
	i2c_write(0x00);
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	bd dc       	rcall	.-1670   	; 0x326 <i2c_write>
	
	setMagGain(HMC5883_MAGGAIN_1_3);
     9ac:	80 e2       	ldi	r24, 0x20	; 32
     9ae:	26 cf       	rjmp	.-436    	; 0x7fc <_Z10setMagGain14hmc5883MagGain>
     9b0:	08 95       	ret

000009b2 <_Z11debug_printPKc>:
	{
		char string[16];
		itoa(debugNum,string,16);
		debug_print(string);
	}
}
     9b2:	bc 01       	movw	r22, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	5d c7       	rjmp	.+3770   	; 0x1874 <_Z15USART_putstringiPKc>
     9ba:	08 95       	ret

000009bc <_Z13debug_printlnPKc>:
     9bc:	bc 01       	movw	r22, r24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	58 d7       	rcall	.+3760   	; 0x1874 <_Z15USART_putstringiPKc>
     9c4:	64 ee       	ldi	r22, 0xE4	; 228
     9c6:	72 e0       	ldi	r23, 0x02	; 2
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	53 c7       	rjmp	.+3750   	; 0x1874 <_Z15USART_putstringiPKc>
     9ce:	08 95       	ret

000009d0 <_Z12debug_printii>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	2a 97       	sbiw	r28, 0x0a	; 10
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	4a e0       	ldi	r20, 0x0A	; 10
     9e6:	be 01       	movw	r22, r28
     9e8:	6f 5f       	subi	r22, 0xFF	; 255
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	0e 94 2a 14 	call	0x2854	; 0x2854 <__itoa_ncheck>
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	de df       	rcall	.-68     	; 0x9b2 <_Z11debug_printPKc>
     9f6:	2a 96       	adiw	r28, 0x0a	; 10
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <_Z12debug_printff>:

void debug_printf(float debugNum)
{
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	64 97       	sbiw	r28, 0x14	; 20
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
	if(DEBUG_ENABLE == true)
	{
		char string[20];
		dtostrf(debugNum,10,5,string);
     a20:	8e 01       	movw	r16, r28
     a22:	0f 5f       	subi	r16, 0xFF	; 255
     a24:	1f 4f       	sbci	r17, 0xFF	; 255
     a26:	25 e0       	ldi	r18, 0x05	; 5
     a28:	4a e0       	ldi	r20, 0x0A	; 10
     a2a:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <dtostrf>
		debug_print(string);
     a2e:	c8 01       	movw	r24, r16
     a30:	c0 df       	rcall	.-128    	; 0x9b2 <_Z11debug_printPKc>
	}
}
     a32:	64 96       	adiw	r28, 0x14	; 20
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <_Z10debug_beepv>:


//beep for 50ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep()
{
	sbi(PORTB,7);
     a48:	2f 9a       	sbi	0x05, 7	; 5
     a4a:	2f ef       	ldi	r18, 0xFF	; 255
     a4c:	80 e7       	ldi	r24, 0x70	; 112
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <_Z10debug_beepv+0x8>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <_Z10debug_beepv+0x12>
     a5a:	00 00       	nop
	_delay_ms(50);
	cbi(PORTB,7);
     a5c:	2f 98       	cbi	0x05, 7	; 5
     a5e:	08 95       	ret

00000a60 <_Z15debug_beep_longv>:
}

//beep for 250ms, buzzer attached to PORTB.7 (Digital Pin 13, next to GND)
void debug_beep_long()
{
	sbi(PORTB,7);
     a60:	2f 9a       	sbi	0x05, 7	; 5
     a62:	2f ef       	ldi	r18, 0xFF	; 255
     a64:	84 e3       	ldi	r24, 0x34	; 52
     a66:	9c e0       	ldi	r25, 0x0C	; 12
     a68:	21 50       	subi	r18, 0x01	; 1
     a6a:	80 40       	sbci	r24, 0x00	; 0
     a6c:	90 40       	sbci	r25, 0x00	; 0
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <_Z15debug_beep_longv+0x8>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <_Z15debug_beep_longv+0x12>
     a72:	00 00       	nop
	_delay_ms(250);
	cbi(PORTB,7);
     a74:	2f 98       	cbi	0x05, 7	; 5
     a76:	08 95       	ret

00000a78 <_Z8get_timePcPi>:
		a[i] = nev[*p_j];
		*p_j = *p_j + 1;
	}
	alt = atof (ptr_a);
	return(alt);
}
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	29 97       	sbiw	r28, 0x09	; 9
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	8b 01       	movw	r16, r22
     a92:	fe 01       	movw	r30, r28
     a94:	31 96       	adiw	r30, 0x01	; 1
     a96:	be 01       	movw	r22, r28
     a98:	66 5f       	subi	r22, 0xF6	; 246
     a9a:	7f 4f       	sbci	r23, 0xFF	; 255
     a9c:	d8 01       	movw	r26, r16
     a9e:	2d 91       	ld	r18, X+
     aa0:	3c 91       	ld	r19, X
     aa2:	ac 01       	movw	r20, r24
     aa4:	42 0f       	add	r20, r18
     aa6:	53 1f       	adc	r21, r19
     aa8:	da 01       	movw	r26, r20
     aaa:	4c 91       	ld	r20, X
     aac:	41 93       	st	Z+, r20
     aae:	2f 5f       	subi	r18, 0xFF	; 255
     ab0:	3f 4f       	sbci	r19, 0xFF	; 255
     ab2:	d8 01       	movw	r26, r16
     ab4:	2d 93       	st	X+, r18
     ab6:	3c 93       	st	X, r19
     ab8:	e6 17       	cp	r30, r22
     aba:	f7 07       	cpc	r31, r23
     abc:	79 f7       	brne	.-34     	; 0xa9c <_Z8get_timePcPi+0x24>
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     ac6:	29 96       	adiw	r28, 0x09	; 9
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	08 95       	ret

00000adc <_Z12get_lat_distPc>:
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	2a 97       	sbiw	r28, 0x0a	; 10
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	fc 01       	movw	r30, r24
     af2:	83 85       	ldd	r24, Z+11	; 0x0b
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	84 85       	ldd	r24, Z+12	; 0x0c
     af8:	8a 83       	std	Y+2, r24	; 0x02
     afa:	85 85       	ldd	r24, Z+13	; 0x0d
     afc:	8b 83       	std	Y+3, r24	; 0x03
     afe:	86 85       	ldd	r24, Z+14	; 0x0e
     b00:	8c 83       	std	Y+4, r24	; 0x04
     b02:	80 89       	ldd	r24, Z+16	; 0x10
     b04:	8d 83       	std	Y+5, r24	; 0x05
     b06:	81 89       	ldd	r24, Z+17	; 0x11
     b08:	8e 83       	std	Y+6, r24	; 0x06
     b0a:	82 89       	ldd	r24, Z+18	; 0x12
     b0c:	8f 83       	std	Y+7, r24	; 0x07
     b0e:	18 86       	std	Y+8, r1	; 0x08
     b10:	ce 01       	movw	r24, r28
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     b18:	2a 96       	adiw	r28, 0x0a	; 10
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <_Z11get_lat_degPc>:
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	2a 97       	sbiw	r28, 0x0a	; 10
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	fc 01       	movw	r30, r24
     b40:	83 85       	ldd	r24, Z+11	; 0x0b
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	84 85       	ldd	r24, Z+12	; 0x0c
     b46:	8a 83       	std	Y+2, r24	; 0x02
     b48:	87 85       	ldd	r24, Z+15	; 0x0f
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	85 85       	ldd	r24, Z+13	; 0x0d
     b4e:	8c 83       	std	Y+4, r24	; 0x04
     b50:	86 85       	ldd	r24, Z+14	; 0x0e
     b52:	8d 83       	std	Y+5, r24	; 0x05
     b54:	80 89       	ldd	r24, Z+16	; 0x10
     b56:	8e 83       	std	Y+6, r24	; 0x06
     b58:	81 89       	ldd	r24, Z+17	; 0x11
     b5a:	8f 83       	std	Y+7, r24	; 0x07
     b5c:	82 89       	ldd	r24, Z+18	; 0x12
     b5e:	88 87       	std	Y+8, r24	; 0x08
     b60:	19 86       	std	Y+9, r1	; 0x09
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     b6a:	2a 96       	adiw	r28, 0x0a	; 10
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <_Z7get_latPcPi>:
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	2a 97       	sbiw	r28, 0x0a	; 10
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	8b 01       	movw	r16, r22
     b96:	db 01       	movw	r26, r22
     b98:	2d 91       	ld	r18, X+
     b9a:	3c 91       	ld	r19, X
     b9c:	11 97       	sbiw	r26, 0x01	; 1
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	2d 93       	st	X+, r18
     ba4:	3c 93       	st	X, r19
     ba6:	fe 01       	movw	r30, r28
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	be 01       	movw	r22, r28
     bac:	65 5f       	subi	r22, 0xF5	; 245
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	d8 01       	movw	r26, r16
     bb2:	2d 91       	ld	r18, X+
     bb4:	3c 91       	ld	r19, X
     bb6:	ac 01       	movw	r20, r24
     bb8:	42 0f       	add	r20, r18
     bba:	53 1f       	adc	r21, r19
     bbc:	da 01       	movw	r26, r20
     bbe:	4c 91       	ld	r20, X
     bc0:	41 93       	st	Z+, r20
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	2d 93       	st	X+, r18
     bca:	3c 93       	st	X, r19
     bcc:	e6 17       	cp	r30, r22
     bce:	f7 07       	cpc	r31, r23
     bd0:	79 f7       	brne	.-34     	; 0xbb0 <_Z7get_latPcPi+0x34>
     bd2:	9b 81       	ldd	r25, Y+3	; 0x03
     bd4:	8c 81       	ldd	r24, Y+4	; 0x04
     bd6:	2d 81       	ldd	r18, Y+5	; 0x05
     bd8:	2b 83       	std	Y+3, r18	; 0x03
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8d 83       	std	Y+5, r24	; 0x05
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     be6:	2a 96       	adiw	r28, 0x0a	; 10
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <_Z12get_lon_distPc>:
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	2b 97       	sbiw	r28, 0x0b	; 11
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	fc 01       	movw	r30, r24
     c12:	80 8d       	ldd	r24, Z+24	; 0x18
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	81 8d       	ldd	r24, Z+25	; 0x19
     c18:	8a 83       	std	Y+2, r24	; 0x02
     c1a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c1c:	8b 83       	std	Y+3, r24	; 0x03
     c1e:	83 8d       	ldd	r24, Z+27	; 0x1b
     c20:	8c 83       	std	Y+4, r24	; 0x04
     c22:	84 8d       	ldd	r24, Z+28	; 0x1c
     c24:	8d 83       	std	Y+5, r24	; 0x05
     c26:	86 8d       	ldd	r24, Z+30	; 0x1e
     c28:	8e 83       	std	Y+6, r24	; 0x06
     c2a:	87 8d       	ldd	r24, Z+31	; 0x1f
     c2c:	8f 83       	std	Y+7, r24	; 0x07
     c2e:	80 a1       	ldd	r24, Z+32	; 0x20
     c30:	88 87       	std	Y+8, r24	; 0x08
     c32:	19 86       	std	Y+9, r1	; 0x09
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     c3c:	2b 96       	adiw	r28, 0x0b	; 11
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <_Z11get_lon_degPc>:
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	2b 97       	sbiw	r28, 0x0b	; 11
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	fc 01       	movw	r30, r24
     c64:	81 8d       	ldd	r24, Z+25	; 0x19
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	82 8d       	ldd	r24, Z+26	; 0x1a
     c6a:	8a 83       	std	Y+2, r24	; 0x02
     c6c:	85 8d       	ldd	r24, Z+29	; 0x1d
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	83 8d       	ldd	r24, Z+27	; 0x1b
     c72:	8c 83       	std	Y+4, r24	; 0x04
     c74:	84 8d       	ldd	r24, Z+28	; 0x1c
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	86 8d       	ldd	r24, Z+30	; 0x1e
     c7a:	8e 83       	std	Y+6, r24	; 0x06
     c7c:	87 8d       	ldd	r24, Z+31	; 0x1f
     c7e:	8f 83       	std	Y+7, r24	; 0x07
     c80:	80 a1       	ldd	r24, Z+32	; 0x20
     c82:	88 87       	std	Y+8, r24	; 0x08
     c84:	19 86       	std	Y+9, r1	; 0x09
     c86:	ce 01       	movw	r24, r28
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     c8e:	2b 96       	adiw	r28, 0x0b	; 11
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <_Z7get_lonPcPi>:
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	2b 97       	sbiw	r28, 0x0b	; 11
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	8b 01       	movw	r16, r22
     cba:	db 01       	movw	r26, r22
     cbc:	2d 91       	ld	r18, X+
     cbe:	3c 91       	ld	r19, X
     cc0:	11 97       	sbiw	r26, 0x01	; 1
     cc2:	2d 5f       	subi	r18, 0xFD	; 253
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
     cc6:	2d 93       	st	X+, r18
     cc8:	3c 93       	st	X, r19
     cca:	fe 01       	movw	r30, r28
     ccc:	31 96       	adiw	r30, 0x01	; 1
     cce:	be 01       	movw	r22, r28
     cd0:	64 5f       	subi	r22, 0xF4	; 244
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	d8 01       	movw	r26, r16
     cd6:	2d 91       	ld	r18, X+
     cd8:	3c 91       	ld	r19, X
     cda:	ac 01       	movw	r20, r24
     cdc:	42 0f       	add	r20, r18
     cde:	53 1f       	adc	r21, r19
     ce0:	da 01       	movw	r26, r20
     ce2:	4c 91       	ld	r20, X
     ce4:	41 93       	st	Z+, r20
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	d8 01       	movw	r26, r16
     cec:	2d 93       	st	X+, r18
     cee:	3c 93       	st	X, r19
     cf0:	e6 17       	cp	r30, r22
     cf2:	f7 07       	cpc	r31, r23
     cf4:	79 f7       	brne	.-34     	; 0xcd4 <_Z7get_lonPcPi+0x34>
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	2e 81       	ldd	r18, Y+6	; 0x06
     cfc:	2c 83       	std	Y+4, r18	; 0x04
     cfe:	9d 83       	std	Y+5, r25	; 0x05
     d00:	8e 83       	std	Y+6, r24	; 0x06
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     d0a:	2b 96       	adiw	r28, 0x0b	; 11
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <_Z7get_fixPcPi>:
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	1f 92       	push	r1
     d26:	1f 92       	push	r1
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	fb 01       	movw	r30, r22
     d2e:	20 81       	ld	r18, Z
     d30:	31 81       	ldd	r19, Z+1	; 0x01
     d32:	a9 01       	movw	r20, r18
     d34:	4d 5f       	subi	r20, 0xFD	; 253
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	51 83       	std	Z+1, r21	; 0x01
     d3a:	40 83       	st	Z, r20
     d3c:	dc 01       	movw	r26, r24
     d3e:	a4 0f       	add	r26, r20
     d40:	b5 1f       	adc	r27, r21
     d42:	4c 91       	ld	r20, X
     d44:	49 83       	std	Y+1, r20	; 0x01
     d46:	a9 01       	movw	r20, r18
     d48:	4c 5f       	subi	r20, 0xFC	; 252
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	51 83       	std	Z+1, r21	; 0x01
     d4e:	40 83       	st	Z, r20
     d50:	dc 01       	movw	r26, r24
     d52:	a4 0f       	add	r26, r20
     d54:	b5 1f       	adc	r27, r21
     d56:	8c 91       	ld	r24, X
     d58:	8a 83       	std	Y+2, r24	; 0x02
     d5a:	2b 5f       	subi	r18, 0xFB	; 251
     d5c:	3f 4f       	sbci	r19, 0xFF	; 255
     d5e:	31 83       	std	Z+1, r19	; 0x01
     d60:	20 83       	st	Z, r18
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	0e 94 04 14 	call	0x2808	; 0x2808 <atoi>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <_Z8get_satsPcPi>:
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <_Z8get_satsPcPi+0xa>
     d7e:	1f 92       	push	r1
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	8b 01       	movw	r16, r22
     d86:	fe 01       	movw	r30, r28
     d88:	31 96       	adiw	r30, 0x01	; 1
     d8a:	be 01       	movw	r22, r28
     d8c:	6b 5f       	subi	r22, 0xFB	; 251
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	d8 01       	movw	r26, r16
     d92:	2d 91       	ld	r18, X+
     d94:	3c 91       	ld	r19, X
     d96:	ac 01       	movw	r20, r24
     d98:	42 0f       	add	r20, r18
     d9a:	53 1f       	adc	r21, r19
     d9c:	da 01       	movw	r26, r20
     d9e:	4c 91       	ld	r20, X
     da0:	41 93       	st	Z+, r20
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	d8 01       	movw	r26, r16
     da8:	2d 93       	st	X+, r18
     daa:	3c 93       	st	X, r19
     dac:	e6 17       	cp	r30, r22
     dae:	f7 07       	cpc	r31, r23
     db0:	79 f7       	brne	.-34     	; 0xd90 <_Z8get_satsPcPi+0x1c>
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 01 14 	call	0x2802	; 0x2802 <atof>
     dba:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
     dbe:	cb 01       	movw	r24, r22
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <_Z10gps_updatev>:
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	c1 2c       	mov	r12, r1
     de8:	0f 2e       	mov	r0, r31
     dea:	f5 e3       	ldi	r31, 0x35	; 53
     dec:	af 2e       	mov	r10, r31
     dee:	f5 e0       	ldi	r31, 0x05	; 5
     df0:	bf 2e       	mov	r11, r31
     df2:	f0 2d       	mov	r31, r0
     df4:	cf ee       	ldi	r28, 0xEF	; 239
     df6:	d4 e0       	ldi	r29, 0x04	; 4
     df8:	dd 24       	eor	r13, r13
     dfa:	d3 94       	inc	r13
     dfc:	0f 2e       	mov	r0, r31
     dfe:	f6 e3       	ldi	r31, 0x36	; 54
     e00:	ef 2e       	mov	r14, r31
     e02:	f5 e0       	ldi	r31, 0x05	; 5
     e04:	ff 2e       	mov	r15, r31
     e06:	f0 2d       	mov	r31, r0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0c d5       	rcall	.+2584   	; 0x1826 <_Z13USART_receivei>
     e0e:	80 93 8c 05 	sts	0x058C, r24
     e12:	90 91 09 02 	lds	r25, 0x0209
     e16:	89 13       	cpse	r24, r25
     e18:	f5 c0       	rjmp	.+490    	; 0x1004 <_Z10gps_updatev+0x232>
     e1a:	10 92 8b 05 	sts	0x058B, r1
     e1e:	10 92 8a 05 	sts	0x058A, r1
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fd d4       	rcall	.+2554   	; 0x1826 <_Z13USART_receivei>
     e2c:	f8 01       	movw	r30, r16
     e2e:	e5 58       	subi	r30, 0x85	; 133
     e30:	fa 4f       	sbci	r31, 0xFA	; 250
     e32:	80 83       	st	Z, r24
     e34:	20 91 8a 05 	lds	r18, 0x058A
     e38:	30 91 8b 05 	lds	r19, 0x058B
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	30 93 8b 05 	sts	0x058B, r19
     e44:	20 93 8a 05 	sts	0x058A, r18
     e48:	25 30       	cpi	r18, 0x05	; 5
     e4a:	31 05       	cpc	r19, r1
     e4c:	14 f4       	brge	.+4      	; 0xe52 <_Z10gps_updatev+0x80>
     e4e:	89 01       	movw	r16, r18
     e50:	ea cf       	rjmp	.-44     	; 0xe26 <_Z10gps_updatev+0x54>
     e52:	60 91 0c 02 	lds	r22, 0x020C
     e56:	70 91 0d 02 	lds	r23, 0x020D
     e5a:	87 ee       	ldi	r24, 0xE7	; 231
     e5c:	92 e0       	ldi	r25, 0x02	; 2
     e5e:	0e 94 21 14 	call	0x2842	; 0x2842 <strcmp>
     e62:	90 93 87 05 	sts	0x0587, r25
     e66:	80 93 86 05 	sts	0x0586, r24
     e6a:	89 2b       	or	r24, r25
     e6c:	69 f6       	brne	.-102    	; 0xe08 <_Z10gps_updatev+0x36>
     e6e:	10 92 8b 05 	sts	0x058B, r1
     e72:	10 92 8a 05 	sts	0x058A, r1
     e76:	00 e0       	ldi	r16, 0x00	; 0
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	d3 d4       	rcall	.+2470   	; 0x1826 <_Z13USART_receivei>
     e80:	f8 01       	movw	r30, r16
     e82:	eb 5c       	subi	r30, 0xCB	; 203
     e84:	fa 4f       	sbci	r31, 0xFA	; 250
     e86:	80 83       	st	Z, r24
     e88:	80 91 8a 05 	lds	r24, 0x058A
     e8c:	90 91 8b 05 	lds	r25, 0x058B
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	90 93 8b 05 	sts	0x058B, r25
     e96:	80 93 8a 05 	sts	0x058A, r24
     e9a:	86 34       	cpi	r24, 0x46	; 70
     e9c:	91 05       	cpc	r25, r1
     e9e:	14 f4       	brge	.+4      	; 0xea4 <_Z10gps_updatev+0xd2>
     ea0:	8c 01       	movw	r16, r24
     ea2:	eb cf       	rjmp	.-42     	; 0xe7a <_Z10gps_updatev+0xa8>
     ea4:	8d ee       	ldi	r24, 0xED	; 237
     ea6:	92 e0       	ldi	r25, 0x02	; 2
     ea8:	89 dd       	rcall	.-1262   	; 0x9bc <_Z13debug_printlnPKc>
     eaa:	f5 01       	movw	r30, r10
     eac:	20 81       	ld	r18, Z
     eae:	30 91 08 02 	lds	r19, 0x0208
     eb2:	23 17       	cp	r18, r19
     eb4:	59 f0       	breq	.+22     	; 0xecc <_Z10gps_updatev+0xfa>
     eb6:	fe 01       	movw	r30, r28
     eb8:	d7 01       	movw	r26, r14
     eba:	21 93       	st	Z+, r18
     ebc:	cf 01       	movw	r24, r30
     ebe:	8f 5e       	subi	r24, 0xEF	; 239
     ec0:	94 40       	sbci	r25, 0x04	; 4
     ec2:	2d 91       	ld	r18, X+
     ec4:	23 13       	cpse	r18, r19
     ec6:	f9 cf       	rjmp	.-14     	; 0xeba <_Z10gps_updatev+0xe8>
     ec8:	fc 01       	movw	r30, r24
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_Z10gps_updatev+0xfe>
     ecc:	e0 e0       	ldi	r30, 0x00	; 0
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	e1 51       	subi	r30, 0x11	; 17
     ed2:	fb 4f       	sbci	r31, 0xFB	; 251
     ed4:	80 91 ee 04 	lds	r24, 0x04EE
     ed8:	80 83       	st	Z, r24
     eda:	fe 01       	movw	r30, r28
     edc:	01 90       	ld	r0, Z+
     ede:	00 20       	and	r0, r0
     ee0:	e9 f7       	brne	.-6      	; 0xedc <_Z10gps_updatev+0x10a>
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	ef 5e       	subi	r30, 0xEF	; 239
     ee6:	f4 40       	sbci	r31, 0x04	; 4
     ee8:	f0 93 85 05 	sts	0x0585, r31
     eec:	e0 93 84 05 	sts	0x0584, r30
     ef0:	10 92 8b 05 	sts	0x058B, r1
     ef4:	10 92 8a 05 	sts	0x058A, r1
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	90 93 89 05 	sts	0x0589, r25
     f00:	80 93 88 05 	sts	0x0588, r24
     f04:	60 91 0e 02 	lds	r22, 0x020E
     f08:	70 91 0f 02 	lds	r23, 0x020F
     f0c:	80 91 0a 02 	lds	r24, 0x020A
     f10:	90 91 0b 02 	lds	r25, 0x020B
     f14:	b1 dd       	rcall	.-1182   	; 0xa78 <_Z8get_timePcPi>
     f16:	60 93 a1 05 	sts	0x05A1, r22
     f1a:	70 93 a2 05 	sts	0x05A2, r23
     f1e:	80 93 a3 05 	sts	0x05A3, r24
     f22:	90 93 a4 05 	sts	0x05A4, r25
     f26:	80 91 0a 02 	lds	r24, 0x020A
     f2a:	90 91 0b 02 	lds	r25, 0x020B
     f2e:	d6 dd       	rcall	.-1108   	; 0xadc <_Z12get_lat_distPc>
     f30:	80 91 0a 02 	lds	r24, 0x020A
     f34:	90 91 0b 02 	lds	r25, 0x020B
     f38:	61 de       	rcall	.-830    	; 0xbfc <_Z12get_lon_distPc>
     f3a:	80 91 0a 02 	lds	r24, 0x020A
     f3e:	90 91 0b 02 	lds	r25, 0x020B
     f42:	f3 dd       	rcall	.-1050   	; 0xb2a <_Z11get_lat_degPc>
     f44:	60 93 9d 05 	sts	0x059D, r22
     f48:	70 93 9e 05 	sts	0x059E, r23
     f4c:	80 93 9f 05 	sts	0x059F, r24
     f50:	90 93 a0 05 	sts	0x05A0, r25
     f54:	80 91 0a 02 	lds	r24, 0x020A
     f58:	90 91 0b 02 	lds	r25, 0x020B
     f5c:	78 de       	rcall	.-784    	; 0xc4e <_Z11get_lon_degPc>
     f5e:	60 93 99 05 	sts	0x0599, r22
     f62:	70 93 9a 05 	sts	0x059A, r23
     f66:	80 93 9b 05 	sts	0x059B, r24
     f6a:	90 93 9c 05 	sts	0x059C, r25
     f6e:	60 91 0e 02 	lds	r22, 0x020E
     f72:	70 91 0f 02 	lds	r23, 0x020F
     f76:	80 91 0a 02 	lds	r24, 0x020A
     f7a:	90 91 0b 02 	lds	r25, 0x020B
     f7e:	fe dd       	rcall	.-1028   	; 0xb7c <_Z7get_latPcPi>
     f80:	60 93 95 05 	sts	0x0595, r22
     f84:	70 93 96 05 	sts	0x0596, r23
     f88:	80 93 97 05 	sts	0x0597, r24
     f8c:	90 93 98 05 	sts	0x0598, r25
     f90:	60 91 0e 02 	lds	r22, 0x020E
     f94:	70 91 0f 02 	lds	r23, 0x020F
     f98:	80 91 0a 02 	lds	r24, 0x020A
     f9c:	90 91 0b 02 	lds	r25, 0x020B
     fa0:	7f de       	rcall	.-770    	; 0xca0 <_Z7get_lonPcPi>
     fa2:	60 93 91 05 	sts	0x0591, r22
     fa6:	70 93 92 05 	sts	0x0592, r23
     faa:	80 93 93 05 	sts	0x0593, r24
     fae:	90 93 94 05 	sts	0x0594, r25
     fb2:	60 91 0e 02 	lds	r22, 0x020E
     fb6:	70 91 0f 02 	lds	r23, 0x020F
     fba:	80 91 0a 02 	lds	r24, 0x020A
     fbe:	90 91 0b 02 	lds	r25, 0x020B
     fc2:	ae de       	rcall	.-676    	; 0xd20 <_Z7get_fixPcPi>
     fc4:	90 93 83 05 	sts	0x0583, r25
     fc8:	80 93 82 05 	sts	0x0582, r24
     fcc:	60 91 0e 02 	lds	r22, 0x020E
     fd0:	70 91 0f 02 	lds	r23, 0x020F
     fd4:	80 91 0a 02 	lds	r24, 0x020A
     fd8:	90 91 0b 02 	lds	r25, 0x020B
     fdc:	cb de       	rcall	.-618    	; 0xd74 <_Z8get_satsPcPi>
     fde:	bc 01       	movw	r22, r24
     fe0:	88 27       	eor	r24, r24
     fe2:	77 fd       	sbrc	r23, 7
     fe4:	80 95       	com	r24
     fe6:	98 2f       	mov	r25, r24
     fe8:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
     fec:	60 93 8d 05 	sts	0x058D, r22
     ff0:	70 93 8e 05 	sts	0x058E, r23
     ff4:	80 93 8f 05 	sts	0x058F, r24
     ff8:	90 93 90 05 	sts	0x0590, r25
     ffc:	81 e1       	ldi	r24, 0x11	; 17
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	dd dc       	rcall	.-1606   	; 0x9bc <_Z13debug_printlnPKc>
    1002:	cd 2c       	mov	r12, r13
    1004:	20 91 86 05 	lds	r18, 0x0586
    1008:	30 91 87 05 	lds	r19, 0x0587
    100c:	23 2b       	or	r18, r19
    100e:	09 f0       	breq	.+2      	; 0x1012 <_Z10gps_updatev+0x240>
    1010:	fb ce       	rjmp	.-522    	; 0xe08 <_Z10gps_updatev+0x36>
    1012:	8c 2d       	mov	r24, r12
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	08 95       	ret

0000102a <_Z8gps_initv>:
    102a:	60 e8       	ldi	r22, 0x80	; 128
    102c:	75 e2       	ldi	r23, 0x25	; 37
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	75 d3       	rcall	.+1770   	; 0x171e <_Z10USART_initii>
    1034:	83 e2       	ldi	r24, 0x23	; 35
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	c1 dc       	rcall	.-1662   	; 0x9bc <_Z13debug_printlnPKc>
    103a:	cb de       	rcall	.-618    	; 0xdd2 <_Z10gps_updatev>
    103c:	8f e2       	ldi	r24, 0x2F	; 47
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	b8 dc       	rcall	.-1680   	; 0x9b2 <_Z11debug_printPKc>
    1042:	60 91 8d 05 	lds	r22, 0x058D
    1046:	70 91 8e 05 	lds	r23, 0x058E
    104a:	80 91 8f 05 	lds	r24, 0x058F
    104e:	90 91 90 05 	lds	r25, 0x0590
    1052:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
    1056:	cb 01       	movw	r24, r22
    1058:	bb dc       	rcall	.-1674   	; 0x9d0 <_Z12debug_printii>
    105a:	8a e4       	ldi	r24, 0x4A	; 74
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	ae dc       	rcall	.-1700   	; 0x9bc <_Z13debug_printlnPKc>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	08 95       	ret

00001064 <_Z16gps_get_latitudev>:
///*debug_printf(altitude);debug_print(ptr_gps);*///USART_putstring(USART_PC,"\n\r");


//Getters for external functions
float gps_get_latitude(){
	return lat2_deg;
    1064:	60 91 9d 05 	lds	r22, 0x059D
    1068:	70 91 9e 05 	lds	r23, 0x059E
    106c:	80 91 9f 05 	lds	r24, 0x059F
    1070:	90 91 a0 05 	lds	r25, 0x05A0
}
    1074:	08 95       	ret

00001076 <_Z17gps_get_longitudev>:

float gps_get_longitude()
{
	return lon2_deg;
    1076:	60 91 99 05 	lds	r22, 0x0599
    107a:	70 91 9a 05 	lds	r23, 0x059A
    107e:	80 91 9b 05 	lds	r24, 0x059B
    1082:	90 91 9c 05 	lds	r25, 0x059C
}
    1086:	08 95       	ret

00001088 <_Z12gps_get_satsv>:

int gps_get_sats()
{
	return sats;
    1088:	60 91 8d 05 	lds	r22, 0x058D
    108c:	70 91 8e 05 	lds	r23, 0x058E
    1090:	80 91 8f 05 	lds	r24, 0x058F
    1094:	90 91 90 05 	lds	r25, 0x0590
    1098:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
    109c:	cb 01       	movw	r24, r22
    109e:	08 95       	ret

000010a0 <_GLOBAL__sub_I_timeUTC>:

WayPoint wps[MAX_WAYPOINTS];

int numwps = 0;
int i = 0;
int j = i+1;
    10a0:	80 91 8a 05 	lds	r24, 0x058A
    10a4:	90 91 8b 05 	lds	r25, 0x058B
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	90 93 89 05 	sts	0x0589, r25
    10ae:	80 93 88 05 	sts	0x0588, r24
    10b2:	08 95       	ret

000010b4 <_Z24quad_output_set_throttlei>:
}

//setters for outputs
void quad_output_set_throttle(int throttle)
{
	THROTTLE_OUT = throttle;
    10b4:	90 93 a9 00 	sts	0x00A9, r25
    10b8:	80 93 a8 00 	sts	0x00A8, r24
	throttle_out = throttle;
    10bc:	bc 01       	movw	r22, r24
    10be:	88 27       	eor	r24, r24
    10c0:	77 fd       	sbrc	r23, 7
    10c2:	80 95       	com	r24
    10c4:	98 2f       	mov	r25, r24
    10c6:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
    10ca:	60 93 a5 05 	sts	0x05A5, r22
    10ce:	70 93 a6 05 	sts	0x05A6, r23
    10d2:	80 93 a7 05 	sts	0x05A7, r24
    10d6:	90 93 a8 05 	sts	0x05A8, r25
    10da:	08 95       	ret

000010dc <_Z16quad_output_initv>:
#include "quad_output.h"

float throttle_out;

void quad_output_init()
{
    10dc:	8f 92       	push	r8
    10de:	9f 92       	push	r9
    10e0:	af 92       	push	r10
    10e2:	bf 92       	push	r11
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
	DDRH = 0xFF;  //set OC4x to output
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	80 93 01 01 	sts	0x0101, r24
	DDRE = 0xFF; //output
    10fa:	8d b9       	out	0x0d, r24	; 13
	//System Clock as source
	//Mode 8: Phase and Freq. Correct PWM top=ICR1
	//OC1A output: Non-inverted
	//OC1B output: currently disabled
	//OC1C output: currently disabled
	ICR4 = (F_CPU / (SERVO_HZ*8)) - 1;
    10fc:	8f e3       	ldi	r24, 0x3F	; 63
    10fe:	9c e9       	ldi	r25, 0x9C	; 156
    1100:	90 93 a7 00 	sts	0x00A7, r25
    1104:	80 93 a6 00 	sts	0x00A6, r24
	TCCR4A=(1<<COM4A1)|(1<<COM4B1)|(1<<COM4C1);//COM1A1 Clear OCnA when match counting up,Set on
    1108:	38 ea       	ldi	r19, 0xA8	; 168
    110a:	30 93 a0 00 	sts	0x00A0, r19
	TCCR4B=(1<<WGM43)|(1<<CS41);// Phase and Freq correct ICR1=Top
    110e:	22 e1       	ldi	r18, 0x12	; 18
    1110:	20 93 a1 00 	sts	0x00A1, r18
	
	ICR3 = (F_CPU / (SERVO_HZ*8)) - 1;
    1114:	90 93 97 00 	sts	0x0097, r25
    1118:	80 93 96 00 	sts	0x0096, r24
	TCCR3A=(1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1);//COM1A1 Clear OCnA when match counting up,Set on
    111c:	30 93 90 00 	sts	0x0090, r19
	TCCR3B=(1<<WGM33)|(1<<CS31);// Phase and Freq correct ICR1=Top
    1120:	20 93 91 00 	sts	0x0091, r18
		
	THROTTLE_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1124:	c6 eb       	ldi	r28, 0xB6	; 182
    1126:	d3 e0       	ldi	r29, 0x03	; 3
    1128:	d0 93 a9 00 	sts	0x00A9, r29
    112c:	c0 93 a8 00 	sts	0x00A8, r28
	AILERON_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1130:	0f 2e       	mov	r0, r31
    1132:	fa ea       	ldi	r31, 0xAA	; 170
    1134:	8f 2e       	mov	r8, r31
    1136:	91 2c       	mov	r9, r1
    1138:	f0 2d       	mov	r31, r0
    113a:	f4 01       	movw	r30, r8
    113c:	d1 83       	std	Z+1, r29	; 0x01
    113e:	c0 83       	st	Z, r28
	ELEVATOR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1140:	0f 2e       	mov	r0, r31
    1142:	fc ea       	ldi	r31, 0xAC	; 172
    1144:	af 2e       	mov	r10, r31
    1146:	b1 2c       	mov	r11, r1
    1148:	f0 2d       	mov	r31, r0
    114a:	f5 01       	movw	r30, r10
    114c:	d1 83       	std	Z+1, r29	; 0x01
    114e:	c0 83       	st	Z, r28
	RUDDER_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1150:	0f 2e       	mov	r0, r31
    1152:	f8 e9       	ldi	r31, 0x98	; 152
    1154:	cf 2e       	mov	r12, r31
    1156:	d1 2c       	mov	r13, r1
    1158:	f0 2d       	mov	r31, r0
    115a:	f6 01       	movw	r30, r12
    115c:	d1 83       	std	Z+1, r29	; 0x01
    115e:	c0 83       	st	Z, r28
	GEAR_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1160:	0f 2e       	mov	r0, r31
    1162:	fa e9       	ldi	r31, 0x9A	; 154
    1164:	ef 2e       	mov	r14, r31
    1166:	f1 2c       	mov	r15, r1
    1168:	f0 2d       	mov	r31, r0
    116a:	f7 01       	movw	r30, r14
    116c:	d1 83       	std	Z+1, r29	; 0x01
    116e:	c0 83       	st	Z, r28
	AUX_OUT = DEFAULT_PWM_OUTPUT; //start at low value so vehicle is not armed
    1170:	0c e9       	ldi	r16, 0x9C	; 156
    1172:	10 e0       	ldi	r17, 0x00	; 0
    1174:	f8 01       	movw	r30, r16
    1176:	d1 83       	std	Z+1, r29	; 0x01
    1178:	c0 83       	st	Z, r28
	
	quad_output_set_throttle(DEFAULT_PWM_OUTPUT);
    117a:	86 eb       	ldi	r24, 0xB6	; 182
    117c:	93 e0       	ldi	r25, 0x03	; 3
    117e:	9a df       	rcall	.-204    	; 0x10b4 <_Z24quad_output_set_throttlei>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
    1180:	f4 01       	movw	r30, r8
    1182:	d1 83       	std	Z+1, r29	; 0x01
    1184:	c0 83       	st	Z, r28
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
    1186:	f5 01       	movw	r30, r10
    1188:	d1 83       	std	Z+1, r29	; 0x01
    118a:	c0 83       	st	Z, r28
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
    118c:	f6 01       	movw	r30, r12
    118e:	d1 83       	std	Z+1, r29	; 0x01
    1190:	c0 83       	st	Z, r28
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
    1192:	f7 01       	movw	r30, r14
    1194:	d1 83       	std	Z+1, r29	; 0x01
    1196:	c0 83       	st	Z, r28
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
    1198:	f8 01       	movw	r30, r16
    119a:	d1 83       	std	Z+1, r29	; 0x01
    119c:	c0 83       	st	Z, r28
	quad_output_set_aileron(DEFAULT_PWM_OUTPUT);
	quad_output_set_elevator(DEFAULT_PWM_OUTPUT);
	quad_output_set_rudder(DEFAULT_PWM_OUTPUT);
	quad_output_set_gear(DEFAULT_PWM_OUTPUT);
	quad_output_set_aux(DEFAULT_PWM_OUTPUT);
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	bf 90       	pop	r11
    11b0:	af 90       	pop	r10
    11b2:	9f 90       	pop	r9
    11b4:	8f 90       	pop	r8
    11b6:	08 95       	ret

000011b8 <_Z23quad_output_passthroughbbbbbb>:


void quad_output_passthrough(bool throttle, bool aileron, bool elevator, bool rudder, bool gear, bool aux)
{
    11b8:	ef 92       	push	r14
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	16 2f       	mov	r17, r22
    11c4:	d4 2f       	mov	r29, r20
    11c6:	c2 2f       	mov	r28, r18
	if(throttle)
    11c8:	88 23       	and	r24, r24
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <_Z23quad_output_passthroughbbbbbb+0x18>
	{
		quad_output_set_throttle(rx_get_throttle());
    11cc:	f5 d1       	rcall	.+1002   	; 0x15b8 <_Z15rx_get_throttlev>
    11ce:	72 df       	rcall	.-284    	; 0x10b4 <_Z24quad_output_set_throttlei>
	}
	if(aileron)
    11d0:	11 23       	and	r17, r17
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <_Z23quad_output_passthroughbbbbbb+0x2a>
	{
		quad_output_set_aileron(rx_get_aileron());
    11d4:	f6 d1       	rcall	.+1004   	; 0x15c2 <_Z14rx_get_aileronv>
    11d6:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
	throttle_out = throttle;
}

void quad_output_set_aileron(int aileron)
{
	AILERON_OUT = aileron;
    11da:	70 93 ab 00 	sts	0x00AB, r23
    11de:	60 93 aa 00 	sts	0x00AA, r22
	}
	if(aileron)
	{
		quad_output_set_aileron(rx_get_aileron());
	}
	if(elevator)
    11e2:	dd 23       	and	r29, r29
    11e4:	39 f0       	breq	.+14     	; 0x11f4 <_Z23quad_output_passthroughbbbbbb+0x3c>
	{
		quad_output_set_elevator(rx_get_elevator());
    11e6:	f5 d1       	rcall	.+1002   	; 0x15d2 <_Z15rx_get_elevatorv>
    11e8:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
	AILERON_OUT = aileron;
}

void quad_output_set_elevator(int elevator)
{
	ELEVATOR_OUT = elevator;
    11ec:	70 93 ad 00 	sts	0x00AD, r23
    11f0:	60 93 ac 00 	sts	0x00AC, r22
	}
	if(elevator)
	{
		quad_output_set_elevator(rx_get_elevator());
	}
	if(rudder)
    11f4:	cc 23       	and	r28, r28
    11f6:	39 f0       	breq	.+14     	; 0x1206 <_Z23quad_output_passthroughbbbbbb+0x4e>
	{
		quad_output_set_rudder(rx_get_rudder());
    11f8:	f4 d1       	rcall	.+1000   	; 0x15e2 <_Z13rx_get_rudderv>
    11fa:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
	ELEVATOR_OUT = elevator;
}

void quad_output_set_rudder(int rudder)
{
	RUDDER_OUT = rudder;
    11fe:	70 93 99 00 	sts	0x0099, r23
    1202:	60 93 98 00 	sts	0x0098, r22
	}
	if(rudder)
	{
		quad_output_set_rudder(rx_get_rudder());
	}
	if(gear)
    1206:	00 23       	and	r16, r16
    1208:	39 f0       	breq	.+14     	; 0x1218 <_Z23quad_output_passthroughbbbbbb+0x60>
	{
		quad_output_set_gear(rx_get_gear());
    120a:	f3 d1       	rcall	.+998    	; 0x15f2 <_Z11rx_get_gearv>
    120c:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
	RUDDER_OUT = rudder;
}

void quad_output_set_gear(int gear)
{
	GEAR_OUT = gear;
    1210:	70 93 9b 00 	sts	0x009B, r23
    1214:	60 93 9a 00 	sts	0x009A, r22
	}
	if(gear)
	{
		quad_output_set_gear(rx_get_gear());
	}
	if(aux)
    1218:	ee 20       	and	r14, r14
    121a:	39 f0       	breq	.+14     	; 0x122a <_Z23quad_output_passthroughbbbbbb+0x72>
	{
		quad_output_set_aux(rx_get_aux());
    121c:	f2 d1       	rcall	.+996    	; 0x1602 <_Z10rx_get_auxv>
    121e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__fixsfsi>
	GEAR_OUT = gear;
}

void quad_output_set_aux(int aux)
{
	AUX_OUT = aux;
    1222:	70 93 9d 00 	sts	0x009D, r23
    1226:	60 93 9c 00 	sts	0x009C, r22
	}
	if(aux)
	{
		quad_output_set_aux(rx_get_aux());
	}
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <__vector_9>:

volatile uint8_t portHistory = 0x00;     // default is low

//Pin Change Interrupt for reading Channel Values
ISR(PCINT0_vect)
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	0b b6       	in	r0, 0x3b	; 59
    1242:	0f 92       	push	r0
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	4f 93       	push	r20
    124a:	5f 93       	push	r21
    124c:	6f 93       	push	r22
    124e:	7f 93       	push	r23
    1250:	8f 93       	push	r24
    1252:	9f 93       	push	r25
    1254:	af 93       	push	r26
    1256:	bf 93       	push	r27
    1258:	cf 93       	push	r28
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
	uint8_t changedBits;
	
	//determine which pin on RX_PORT changed:
	changedBits = RX_PORT ^ portHistory;
    125e:	83 b1       	in	r24, 0x03	; 3
    1260:	c0 91 b6 05 	lds	r28, 0x05B6
    1264:	c8 27       	eor	r28, r24
	portHistory = RX_PORT;
    1266:	83 b1       	in	r24, 0x03	; 3
    1268:	80 93 b6 05 	sts	0x05B6, r24
	
	
	//Now, operate for that pin:
	
	if(changedBits & (1 << THROTTLE_IN_PIN))	//if the pin assigned to throttle has changed (high->low or low->high)
    126c:	c0 ff       	sbrs	r28, 0
    126e:	1c c0       	rjmp	.+56     	; 0x12a8 <__vector_9+0x72>
	{
		if(RX_PORT & (1<<THROTTLE_IN_PIN))	//if the pin is high
    1270:	18 9b       	sbis	0x03, 0	; 3
    1272:	0a c0       	rjmp	.+20     	; 0x1288 <__vector_9+0x52>
		{
			ulThrottleStart = micros();	//note the current time
    1274:	25 d2       	rcall	.+1098   	; 0x16c0 <_Z6microsv>
    1276:	60 93 d7 05 	sts	0x05D7, r22
    127a:	70 93 d8 05 	sts	0x05D8, r23
    127e:	80 93 d9 05 	sts	0x05D9, r24
    1282:	90 93 da 05 	sts	0x05DA, r25
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <__vector_9+0x72>
		}
		else	//if the pin has gone low
		{
			unThrottleInShared = (uint16_t)(micros()-ulThrottleStart);		//we are interested in how long it was high for
    1288:	1b d2       	rcall	.+1078   	; 0x16c0 <_Z6microsv>
    128a:	20 91 d7 05 	lds	r18, 0x05D7
    128e:	30 91 d8 05 	lds	r19, 0x05D8
    1292:	62 1b       	sub	r22, r18
    1294:	73 0b       	sbc	r23, r19
    1296:	70 93 e7 05 	sts	0x05E7, r23
    129a:	60 93 e6 05 	sts	0x05E6, r22
			rxUpdateFlagsShared |= THROTTLE_FLAG;		//and we need to let our code know that there is new data for the throttle
    129e:	80 91 db 05 	lds	r24, 0x05DB
    12a2:	81 60       	ori	r24, 0x01	; 1
    12a4:	80 93 db 05 	sts	0x05DB, r24
		}
	}
	
	if(changedBits & (1 << AILERON_IN_PIN))
    12a8:	c1 ff       	sbrs	r28, 1
    12aa:	1c c0       	rjmp	.+56     	; 0x12e4 <__vector_9+0xae>
	{
		if(RX_PORT & (1<<AILERON_IN_PIN))
    12ac:	19 9b       	sbis	0x03, 1	; 3
    12ae:	0a c0       	rjmp	.+20     	; 0x12c4 <__vector_9+0x8e>
		{
			ulAileronStart = micros();
    12b0:	07 d2       	rcall	.+1038   	; 0x16c0 <_Z6microsv>
    12b2:	60 93 d3 05 	sts	0x05D3, r22
    12b6:	70 93 d4 05 	sts	0x05D4, r23
    12ba:	80 93 d5 05 	sts	0x05D5, r24
    12be:	90 93 d6 05 	sts	0x05D6, r25
    12c2:	10 c0       	rjmp	.+32     	; 0x12e4 <__vector_9+0xae>
		}
		else
		{
			unAileronInShared = (uint16_t)(micros()-ulAileronStart);
    12c4:	fd d1       	rcall	.+1018   	; 0x16c0 <_Z6microsv>
    12c6:	20 91 d3 05 	lds	r18, 0x05D3
    12ca:	30 91 d4 05 	lds	r19, 0x05D4
    12ce:	62 1b       	sub	r22, r18
    12d0:	73 0b       	sbc	r23, r19
    12d2:	70 93 e5 05 	sts	0x05E5, r23
    12d6:	60 93 e4 05 	sts	0x05E4, r22
			rxUpdateFlagsShared |= AILERON_FLAG;
    12da:	80 91 db 05 	lds	r24, 0x05DB
    12de:	82 60       	ori	r24, 0x02	; 2
    12e0:	80 93 db 05 	sts	0x05DB, r24
		}
	}
	
	if(changedBits & (1 << ELEVATOR_IN_PIN))
    12e4:	c2 ff       	sbrs	r28, 2
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <__vector_9+0xea>
	{
		if(RX_PORT & (1<<ELEVATOR_IN_PIN))
    12e8:	1a 9b       	sbis	0x03, 2	; 3
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <__vector_9+0xca>
		{
			ulElevatorStart = micros();
    12ec:	e9 d1       	rcall	.+978    	; 0x16c0 <_Z6microsv>
    12ee:	60 93 cf 05 	sts	0x05CF, r22
    12f2:	70 93 d0 05 	sts	0x05D0, r23
    12f6:	80 93 d1 05 	sts	0x05D1, r24
    12fa:	90 93 d2 05 	sts	0x05D2, r25
    12fe:	10 c0       	rjmp	.+32     	; 0x1320 <__vector_9+0xea>
		}
		else
		{
			unElevatorInShared = (uint16_t)(micros()-ulElevatorStart);
    1300:	df d1       	rcall	.+958    	; 0x16c0 <_Z6microsv>
    1302:	20 91 cf 05 	lds	r18, 0x05CF
    1306:	30 91 d0 05 	lds	r19, 0x05D0
    130a:	62 1b       	sub	r22, r18
    130c:	73 0b       	sbc	r23, r19
    130e:	70 93 e3 05 	sts	0x05E3, r23
    1312:	60 93 e2 05 	sts	0x05E2, r22
			rxUpdateFlagsShared |= ELEVATOR_FLAG;
    1316:	80 91 db 05 	lds	r24, 0x05DB
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	80 93 db 05 	sts	0x05DB, r24
		}
	}
	
	if(changedBits & (1 << RUDDER_IN_PIN))
    1320:	c3 ff       	sbrs	r28, 3
    1322:	1c c0       	rjmp	.+56     	; 0x135c <__vector_9+0x126>
	{
		if(RX_PORT & (1<<RUDDER_IN_PIN))
    1324:	1b 9b       	sbis	0x03, 3	; 3
    1326:	0a c0       	rjmp	.+20     	; 0x133c <__vector_9+0x106>
		{
			ulRudderStart = micros();
    1328:	cb d1       	rcall	.+918    	; 0x16c0 <_Z6microsv>
    132a:	60 93 cb 05 	sts	0x05CB, r22
    132e:	70 93 cc 05 	sts	0x05CC, r23
    1332:	80 93 cd 05 	sts	0x05CD, r24
    1336:	90 93 ce 05 	sts	0x05CE, r25
    133a:	10 c0       	rjmp	.+32     	; 0x135c <__vector_9+0x126>
		}
		else
		{
			unRudderInShared = (uint16_t)(micros()-ulRudderStart);
    133c:	c1 d1       	rcall	.+898    	; 0x16c0 <_Z6microsv>
    133e:	20 91 cb 05 	lds	r18, 0x05CB
    1342:	30 91 cc 05 	lds	r19, 0x05CC
    1346:	62 1b       	sub	r22, r18
    1348:	73 0b       	sbc	r23, r19
    134a:	70 93 e1 05 	sts	0x05E1, r23
    134e:	60 93 e0 05 	sts	0x05E0, r22
			rxUpdateFlagsShared |= RUDDER_FLAG;
    1352:	80 91 db 05 	lds	r24, 0x05DB
    1356:	88 60       	ori	r24, 0x08	; 8
    1358:	80 93 db 05 	sts	0x05DB, r24
		}
	}
	
	if(changedBits & (1 << GEAR_IN_PIN))
    135c:	c4 ff       	sbrs	r28, 4
    135e:	1c c0       	rjmp	.+56     	; 0x1398 <__vector_9+0x162>
	{
		if(RX_PORT & (1<<GEAR_IN_PIN))
    1360:	1c 9b       	sbis	0x03, 4	; 3
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <__vector_9+0x142>
		{
			ulGearStart = micros();
    1364:	ad d1       	rcall	.+858    	; 0x16c0 <_Z6microsv>
    1366:	60 93 c7 05 	sts	0x05C7, r22
    136a:	70 93 c8 05 	sts	0x05C8, r23
    136e:	80 93 c9 05 	sts	0x05C9, r24
    1372:	90 93 ca 05 	sts	0x05CA, r25
    1376:	10 c0       	rjmp	.+32     	; 0x1398 <__vector_9+0x162>
		}
		else
		{
			unGearInShared = (uint16_t)(micros()-ulGearStart);
    1378:	a3 d1       	rcall	.+838    	; 0x16c0 <_Z6microsv>
    137a:	20 91 c7 05 	lds	r18, 0x05C7
    137e:	30 91 c8 05 	lds	r19, 0x05C8
    1382:	62 1b       	sub	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	70 93 df 05 	sts	0x05DF, r23
    138a:	60 93 de 05 	sts	0x05DE, r22
			rxUpdateFlagsShared |= GEAR_FLAG;
    138e:	80 91 db 05 	lds	r24, 0x05DB
    1392:	80 61       	ori	r24, 0x10	; 16
    1394:	80 93 db 05 	sts	0x05DB, r24
		}
	}
	
	if(changedBits & (1 << AUX_IN_PIN))
    1398:	c5 ff       	sbrs	r28, 5
    139a:	1c c0       	rjmp	.+56     	; 0x13d4 <__vector_9+0x19e>
	{
		if(RX_PORT & (1<<AUX_IN_PIN))
    139c:	1d 9b       	sbis	0x03, 5	; 3
    139e:	0a c0       	rjmp	.+20     	; 0x13b4 <__vector_9+0x17e>
		{
			ulAuxStart = micros();
    13a0:	8f d1       	rcall	.+798    	; 0x16c0 <_Z6microsv>
    13a2:	60 93 c3 05 	sts	0x05C3, r22
    13a6:	70 93 c4 05 	sts	0x05C4, r23
    13aa:	80 93 c5 05 	sts	0x05C5, r24
    13ae:	90 93 c6 05 	sts	0x05C6, r25
    13b2:	10 c0       	rjmp	.+32     	; 0x13d4 <__vector_9+0x19e>
		}
		else
		{
			unAuxInShared = (uint16_t)(micros()-ulAuxStart);
    13b4:	85 d1       	rcall	.+778    	; 0x16c0 <_Z6microsv>
    13b6:	20 91 c3 05 	lds	r18, 0x05C3
    13ba:	30 91 c4 05 	lds	r19, 0x05C4
    13be:	62 1b       	sub	r22, r18
    13c0:	73 0b       	sbc	r23, r19
    13c2:	70 93 dd 05 	sts	0x05DD, r23
    13c6:	60 93 dc 05 	sts	0x05DC, r22
			rxUpdateFlagsShared |= AUX_FLAG;
    13ca:	80 91 db 05 	lds	r24, 0x05DB
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	80 93 db 05 	sts	0x05DB, r24
		}
	}
}
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	cf 91       	pop	r28
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0b be       	out	0x3b, r0	; 59
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <_Z7rx_initv>:

void rx_init()
{
	DDRB = 0x00;
    13fc:	14 b8       	out	0x04, r1	; 4
	sbi(DDRB,7);
    13fe:	27 9a       	sbi	0x04, 7	; 4
	//Enable pin change interrupts
	PCMSK0 |= (1<<PCINT0);	//enable PCINT0
    1400:	eb e6       	ldi	r30, 0x6B	; 107
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	81 60       	ori	r24, 0x01	; 1
    1408:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);	//enable PCINT1
    140a:	80 81       	ld	r24, Z
    140c:	82 60       	ori	r24, 0x02	; 2
    140e:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);	//enable PCINT2
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);	//enable PCINT3
    1416:	80 81       	ld	r24, Z
    1418:	88 60       	ori	r24, 0x08	; 8
    141a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT4);	//enable PCINT4
    141c:	80 81       	ld	r24, Z
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT5);	//enable PCINT5
    1422:	80 81       	ld	r24, Z
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	//enable pin change interrupts 0:7
    1428:	e8 e6       	ldi	r30, 0x68	; 104
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	80 83       	st	Z, r24
	sei(); //enable interrupts
    1432:	78 94       	sei
    1434:	08 95       	ret

00001436 <_Z9rx_updatev>:
	static uint16_t unAuxIn;
	  
	// local copy of update flags
	static uint8_t rxUpdateFlags;
	  
	if(rxUpdateFlagsShared)
    1436:	80 91 db 05 	lds	r24, 0x05DB
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <_Z9rx_updatev+0xa>
    143e:	44 c0       	rjmp	.+136    	; 0x14c8 <_Z9rx_updatev+0x92>
	{
		cli();	//disable all interrupts. Can't have something change now!
    1440:	f8 94       	cli
		
		rxUpdateFlags = rxUpdateFlagsShared;	//retrieve data on which channel changed from the volatile variable.
    1442:	20 91 db 05 	lds	r18, 0x05DB
    1446:	20 93 b5 05 	sts	0x05B5, r18
		
		if(rxUpdateFlags & THROTTLE_FLAG)
    144a:	20 ff       	sbrs	r18, 0
    144c:	08 c0       	rjmp	.+16     	; 0x145e <_Z9rx_updatev+0x28>
		{
			unThrottleIn = unThrottleInShared;
    144e:	80 91 e6 05 	lds	r24, 0x05E6
    1452:	90 91 e7 05 	lds	r25, 0x05E7
    1456:	90 93 b4 05 	sts	0x05B4, r25
    145a:	80 93 b3 05 	sts	0x05B3, r24
		}
		
		if(rxUpdateFlags & AILERON_FLAG)
    145e:	21 ff       	sbrs	r18, 1
    1460:	08 c0       	rjmp	.+16     	; 0x1472 <_Z9rx_updatev+0x3c>
		{
			unAileronIn = unAileronInShared;
    1462:	80 91 e4 05 	lds	r24, 0x05E4
    1466:	90 91 e5 05 	lds	r25, 0x05E5
    146a:	90 93 b2 05 	sts	0x05B2, r25
    146e:	80 93 b1 05 	sts	0x05B1, r24
		}
		
		if(rxUpdateFlags & ELEVATOR_FLAG)
    1472:	22 ff       	sbrs	r18, 2
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <_Z9rx_updatev+0x50>
		{
			unElevatorIn = unElevatorInShared;
    1476:	80 91 e2 05 	lds	r24, 0x05E2
    147a:	90 91 e3 05 	lds	r25, 0x05E3
    147e:	90 93 b0 05 	sts	0x05B0, r25
    1482:	80 93 af 05 	sts	0x05AF, r24
		}
		
		if(rxUpdateFlags & RUDDER_FLAG)
    1486:	23 ff       	sbrs	r18, 3
    1488:	08 c0       	rjmp	.+16     	; 0x149a <_Z9rx_updatev+0x64>
		{
			unRudderIn = unRudderInShared;
    148a:	80 91 e0 05 	lds	r24, 0x05E0
    148e:	90 91 e1 05 	lds	r25, 0x05E1
    1492:	90 93 ae 05 	sts	0x05AE, r25
    1496:	80 93 ad 05 	sts	0x05AD, r24
		}
		
		if(rxUpdateFlags & GEAR_FLAG)
    149a:	24 ff       	sbrs	r18, 4
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <_Z9rx_updatev+0x78>
		{
			unGearIn = unGearInShared;
    149e:	80 91 de 05 	lds	r24, 0x05DE
    14a2:	90 91 df 05 	lds	r25, 0x05DF
    14a6:	90 93 ac 05 	sts	0x05AC, r25
    14aa:	80 93 ab 05 	sts	0x05AB, r24
		}
		
		if(rxUpdateFlags & AUX_FLAG)
    14ae:	25 ff       	sbrs	r18, 5
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <_Z9rx_updatev+0x8c>
		{
			unAuxIn = unAuxInShared;
    14b2:	80 91 dc 05 	lds	r24, 0x05DC
    14b6:	90 91 dd 05 	lds	r25, 0x05DD
    14ba:	90 93 aa 05 	sts	0x05AA, r25
    14be:	80 93 a9 05 	sts	0x05A9, r24
		}
		
		rxUpdateFlagsShared = 0;
    14c2:	10 92 db 05 	sts	0x05DB, r1
		
		sei();	//all needed data is now in local variables. We can safely re-enable interrupts!
    14c6:	78 94       	sei
		
		}
		
		if(rxUpdateFlags)
    14c8:	80 91 b5 05 	lds	r24, 0x05B5
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <_Z9rx_updatev+0x9c>
    14d0:	72 c0       	rjmp	.+228    	; 0x15b6 <_Z9rx_updatev+0x180>
		{
			rxInputThrottle = unThrottleIn;
    14d2:	60 91 b3 05 	lds	r22, 0x05B3
    14d6:	70 91 b4 05 	lds	r23, 0x05B4
    14da:	70 93 c2 05 	sts	0x05C2, r23
    14de:	60 93 c1 05 	sts	0x05C1, r22
			rxInputAileron = unAileronIn;
    14e2:	80 91 b1 05 	lds	r24, 0x05B1
    14e6:	90 91 b2 05 	lds	r25, 0x05B2
    14ea:	90 93 c0 05 	sts	0x05C0, r25
    14ee:	80 93 bf 05 	sts	0x05BF, r24
			rxInputElevator = unElevatorIn;
    14f2:	80 91 af 05 	lds	r24, 0x05AF
    14f6:	90 91 b0 05 	lds	r25, 0x05B0
    14fa:	90 93 be 05 	sts	0x05BE, r25
    14fe:	80 93 bd 05 	sts	0x05BD, r24
			rxInputRudder = unRudderIn;
    1502:	80 91 ad 05 	lds	r24, 0x05AD
    1506:	90 91 ae 05 	lds	r25, 0x05AE
    150a:	90 93 bc 05 	sts	0x05BC, r25
    150e:	80 93 bb 05 	sts	0x05BB, r24
			rxInputGear = unGearIn;
    1512:	80 91 ab 05 	lds	r24, 0x05AB
    1516:	90 91 ac 05 	lds	r25, 0x05AC
    151a:	90 93 ba 05 	sts	0x05BA, r25
    151e:	80 93 b9 05 	sts	0x05B9, r24
			rxInputAux = unAuxIn;
    1522:	80 91 a9 05 	lds	r24, 0x05A9
    1526:	90 91 aa 05 	lds	r25, 0x05AA
    152a:	90 93 b8 05 	sts	0x05B8, r25
    152e:	80 93 b7 05 	sts	0x05B7, r24
			
			if(RX_VERBOSE_OUTPUT)
			{
				debug_printf(rx_get_throttle());
    1532:	88 27       	eor	r24, r24
    1534:	77 fd       	sbrc	r23, 7
    1536:	80 95       	com	r24
    1538:	98 2f       	mov	r25, r24
    153a:	eb d6       	rcall	.+3542   	; 0x2312 <__floatsisf>
    153c:	65 da       	rcall	.-2870   	; 0xa08 <_Z12debug_printff>
				debug_print("\t");
    153e:	85 e8       	ldi	r24, 0x85	; 133
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	37 da       	rcall	.-2962   	; 0x9b2 <_Z11debug_printPKc>
	return rxInputThrottle;
}

float rx_get_aileron()
{
	return rxInputAileron;
    1544:	60 91 bf 05 	lds	r22, 0x05BF
    1548:	70 91 c0 05 	lds	r23, 0x05C0
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	de d6       	rcall	.+3516   	; 0x230e <__floatunsisf>
			
			if(RX_VERBOSE_OUTPUT)
			{
				debug_printf(rx_get_throttle());
				debug_print("\t");
				debug_printf(rx_get_aileron());
    1552:	5a da       	rcall	.-2892   	; 0xa08 <_Z12debug_printff>
				debug_print("\t");
    1554:	85 e8       	ldi	r24, 0x85	; 133
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	2c da       	rcall	.-2984   	; 0x9b2 <_Z11debug_printPKc>
	return rxInputAileron;
}

float rx_get_elevator()
{
	return rxInputElevator;
    155a:	60 91 bd 05 	lds	r22, 0x05BD
    155e:	70 91 be 05 	lds	r23, 0x05BE
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	d3 d6       	rcall	.+3494   	; 0x230e <__floatunsisf>
			{
				debug_printf(rx_get_throttle());
				debug_print("\t");
				debug_printf(rx_get_aileron());
				debug_print("\t");
				debug_printf(rx_get_elevator());
    1568:	4f da       	rcall	.-2914   	; 0xa08 <_Z12debug_printff>
				debug_print("\t");
    156a:	85 e8       	ldi	r24, 0x85	; 133
    156c:	93 e0       	ldi	r25, 0x03	; 3
    156e:	21 da       	rcall	.-3006   	; 0x9b2 <_Z11debug_printPKc>
	return rxInputElevator;
}

float rx_get_rudder()
{
	return rxInputRudder;
    1570:	60 91 bb 05 	lds	r22, 0x05BB
    1574:	70 91 bc 05 	lds	r23, 0x05BC
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	c8 d6       	rcall	.+3472   	; 0x230e <__floatunsisf>
				debug_print("\t");
				debug_printf(rx_get_aileron());
				debug_print("\t");
				debug_printf(rx_get_elevator());
				debug_print("\t");
				debug_printf(rx_get_rudder());
    157e:	44 da       	rcall	.-2936   	; 0xa08 <_Z12debug_printff>
				debug_print("\t");
    1580:	85 e8       	ldi	r24, 0x85	; 133
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	16 da       	rcall	.-3028   	; 0x9b2 <_Z11debug_printPKc>
	return rxInputRudder;
}

float rx_get_gear()
{
	return rxInputGear;
    1586:	60 91 b9 05 	lds	r22, 0x05B9
    158a:	70 91 ba 05 	lds	r23, 0x05BA
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	bd d6       	rcall	.+3450   	; 0x230e <__floatunsisf>
				debug_print("\t");
				debug_printf(rx_get_elevator());
				debug_print("\t");
				debug_printf(rx_get_rudder());
				debug_print("\t");
				debug_printf(rx_get_gear());
    1594:	39 da       	rcall	.-2958   	; 0xa08 <_Z12debug_printff>
				debug_print("\t");
    1596:	85 e8       	ldi	r24, 0x85	; 133
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	0b da       	rcall	.-3050   	; 0x9b2 <_Z11debug_printPKc>
	return rxInputGear;
}

float rx_get_aux()
{
	return rxInputAux;
    159c:	60 91 b7 05 	lds	r22, 0x05B7
    15a0:	70 91 b8 05 	lds	r23, 0x05B8
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	b2 d6       	rcall	.+3428   	; 0x230e <__floatunsisf>
				debug_print("\t");
				debug_printf(rx_get_rudder());
				debug_print("\t");
				debug_printf(rx_get_gear());
				debug_print("\t");
				debug_printf(rx_get_aux());
    15aa:	2e da       	rcall	.-2980   	; 0xa08 <_Z12debug_printff>
				debug_print("\n\r");
    15ac:	84 ee       	ldi	r24, 0xE4	; 228
    15ae:	92 e0       	ldi	r25, 0x02	; 2
    15b0:	00 da       	rcall	.-3072   	; 0x9b2 <_Z11debug_printPKc>
			}
			
			rxUpdateFlags = 0;
    15b2:	10 92 b5 05 	sts	0x05B5, r1
    15b6:	08 95       	ret

000015b8 <_Z15rx_get_throttlev>:
}

int rx_get_throttle()
{
	return rxInputThrottle;
}
    15b8:	80 91 c1 05 	lds	r24, 0x05C1
    15bc:	90 91 c2 05 	lds	r25, 0x05C2
    15c0:	08 95       	ret

000015c2 <_Z14rx_get_aileronv>:

float rx_get_aileron()
{
	return rxInputAileron;
    15c2:	60 91 bf 05 	lds	r22, 0x05BF
    15c6:	70 91 c0 05 	lds	r23, 0x05C0
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9f c6       	rjmp	.+3390   	; 0x230e <__floatunsisf>
}
    15d0:	08 95       	ret

000015d2 <_Z15rx_get_elevatorv>:

float rx_get_elevator()
{
	return rxInputElevator;
    15d2:	60 91 bd 05 	lds	r22, 0x05BD
    15d6:	70 91 be 05 	lds	r23, 0x05BE
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	97 c6       	rjmp	.+3374   	; 0x230e <__floatunsisf>
}
    15e0:	08 95       	ret

000015e2 <_Z13rx_get_rudderv>:

float rx_get_rudder()
{
	return rxInputRudder;
    15e2:	60 91 bb 05 	lds	r22, 0x05BB
    15e6:	70 91 bc 05 	lds	r23, 0x05BC
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	8f c6       	rjmp	.+3358   	; 0x230e <__floatunsisf>
}
    15f0:	08 95       	ret

000015f2 <_Z11rx_get_gearv>:

float rx_get_gear()
{
	return rxInputGear;
    15f2:	60 91 b9 05 	lds	r22, 0x05B9
    15f6:	70 91 ba 05 	lds	r23, 0x05BA
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	87 c6       	rjmp	.+3342   	; 0x230e <__floatunsisf>
}
    1600:	08 95       	ret

00001602 <_Z10rx_get_auxv>:

float rx_get_aux()
{
	return rxInputAux;
    1602:	60 91 b7 05 	lds	r22, 0x05B7
    1606:	70 91 b8 05 	lds	r23, 0x05B8
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	7f c6       	rjmp	.+3326   	; 0x230e <__floatunsisf>
}
    1610:	08 95       	ret

00001612 <__vector_23>:
long lastIRTime = 0;


//This timer is used for the millis() and micros() functions.
ISR(TIMER0_OVF_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1628:	80 91 e9 05 	lds	r24, 0x05E9
    162c:	90 91 ea 05 	lds	r25, 0x05EA
    1630:	a0 91 eb 05 	lds	r26, 0x05EB
    1634:	b0 91 ec 05 	lds	r27, 0x05EC
	unsigned char f = timer0_fract;
    1638:	30 91 e8 05 	lds	r19, 0x05E8

	m += MILLIS_INC;
	f += FRACT_INC;
    163c:	23 e0       	ldi	r18, 0x03	; 3
    163e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1640:	2d 37       	cpi	r18, 0x7D	; 125
    1642:	20 f4       	brcc	.+8      	; 0x164c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	a1 1d       	adc	r26, r1
    1648:	b1 1d       	adc	r27, r1
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    164c:	26 e8       	ldi	r18, 0x86	; 134
    164e:	23 0f       	add	r18, r19
		m += 1;
    1650:	02 96       	adiw	r24, 0x02	; 2
    1652:	a1 1d       	adc	r26, r1
    1654:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1656:	20 93 e8 05 	sts	0x05E8, r18
	timer0_millis = m;
    165a:	80 93 e9 05 	sts	0x05E9, r24
    165e:	90 93 ea 05 	sts	0x05EA, r25
    1662:	a0 93 eb 05 	sts	0x05EB, r26
    1666:	b0 93 ec 05 	sts	0x05EC, r27
	timer0_overflow_count++;
    166a:	80 91 ed 05 	lds	r24, 0x05ED
    166e:	90 91 ee 05 	lds	r25, 0x05EE
    1672:	a0 91 ef 05 	lds	r26, 0x05EF
    1676:	b0 91 f0 05 	lds	r27, 0x05F0
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	a1 1d       	adc	r26, r1
    167e:	b1 1d       	adc	r27, r1
    1680:	80 93 ed 05 	sts	0x05ED, r24
    1684:	90 93 ee 05 	sts	0x05EE, r25
    1688:	a0 93 ef 05 	sts	0x05EF, r26
    168c:	b0 93 f0 05 	sts	0x05F0, r27
}
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <_Z6millisv>:

long  millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    16a6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    16a8:	f8 94       	cli
	m = timer0_millis;
    16aa:	60 91 e9 05 	lds	r22, 0x05E9
    16ae:	70 91 ea 05 	lds	r23, 0x05EA
    16b2:	80 91 eb 05 	lds	r24, 0x05EB
    16b6:	90 91 ec 05 	lds	r25, 0x05EC
	SREG = oldSREG;
    16ba:	2f bf       	out	0x3f, r18	; 63
	sei();
    16bc:	78 94       	sei

	return m;
}
    16be:	08 95       	ret

000016c0 <_Z6microsv>:

long  micros() {

	unsigned long m;
	uint8_t oldSREG = SREG, t;
    16c0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    16c2:	f8 94       	cli
	m = timer0_overflow_count;
    16c4:	80 91 ed 05 	lds	r24, 0x05ED
    16c8:	90 91 ee 05 	lds	r25, 0x05EE
    16cc:	a0 91 ef 05 	lds	r26, 0x05EF
    16d0:	b0 91 f0 05 	lds	r27, 0x05F0
	t = TCNT0;
    16d4:	26 b5       	in	r18, 0x26	; 38
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    16d6:	a8 9b       	sbis	0x15, 0	; 21
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <_Z6microsv+0x1e>
    16da:	2f 3f       	cpi	r18, 0xFF	; 255
    16dc:	a9 f4       	brne	.+42     	; 0x1708 <_Z6microsv+0x48>
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    16de:	3f bf       	out	0x3f, r19	; 63
	
	sei();
    16e0:	78 94       	sei
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    16e2:	ba 2f       	mov	r27, r26
    16e4:	a9 2f       	mov	r26, r25
    16e6:	98 2f       	mov	r25, r24
    16e8:	88 27       	eor	r24, r24
    16ea:	82 0f       	add	r24, r18
    16ec:	91 1d       	adc	r25, r1
    16ee:	a1 1d       	adc	r26, r1
    16f0:	b1 1d       	adc	r27, r1
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	08 95       	ret
	m = timer0_overflow_count;
	t = TCNT0;
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	a1 1d       	adc	r26, r1
    170c:	b1 1d       	adc	r27, r1
    170e:	e7 cf       	rjmp	.-50     	; 0x16de <_Z6microsv+0x1e>

00001710 <_Z10initTimersv>:


void initTimers()
{
	// enable timer overflow interrupt for Timer0
	TIMSK0=(1<<TOIE0);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 6e 00 	sts	0x006E, r24
	
	//set timer to zero
	TCNT0=0x00;
    1716:	16 bc       	out	0x26, r1	; 38

	// start timer0 with /1024 prescaler
	TCCR0B = (1<<CS01) | (1<<CS00);
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	85 bd       	out	0x25, r24	; 37
    171c:	08 95       	ret

0000171e <_Z10USART_initii>:
 */ 
#include "usart.h"


void USART_init(int usartNum, int baudRate)
{
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
	int baudPrescaler = (((F_CPU / (baudRate * 16UL))) - 1);
    1724:	cb 01       	movw	r24, r22
    1726:	aa 27       	eor	r26, r26
    1728:	97 fd       	sbrc	r25, 7
    172a:	a0 95       	com	r26
    172c:	ba 2f       	mov	r27, r26
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	aa 1f       	adc	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	9c 01       	movw	r18, r24
    1740:	ad 01       	movw	r20, r26
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	44 1f       	adc	r20, r20
    1748:	55 1f       	adc	r21, r21
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	44 1f       	adc	r20, r20
    1750:	55 1f       	adc	r21, r21
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	74 e2       	ldi	r23, 0x24	; 36
    1756:	84 ef       	ldi	r24, 0xF4	; 244
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 bb 13 	call	0x2776	; 0x2776 <__udivmodsi4>
    175e:	21 50       	subi	r18, 0x01	; 1
    1760:	31 09       	sbc	r19, r1
	
	if(usartNum == 0)
    1762:	20 97       	sbiw	r28, 0x00	; 0
    1764:	59 f4       	brne	.+22     	; 0x177c <_Z10USART_initii+0x5e>
	{
		UBRR0H = (uint8_t)(baudPrescaler>>8);
    1766:	30 93 c5 00 	sts	0x00C5, r19
		UBRR0L = (uint8_t)(baudPrescaler);
    176a:	20 93 c4 00 	sts	0x00C4, r18
		UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    176e:	88 e1       	ldi	r24, 0x18	; 24
    1770:	80 93 c1 00 	sts	0x00C1, r24
		UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
    1774:	86 e0       	ldi	r24, 0x06	; 6
    1776:	80 93 c2 00 	sts	0x00C2, r24
    177a:	28 c0       	rjmp	.+80     	; 0x17cc <_Z10USART_initii+0xae>
	}
	else if(usartNum == 1)
    177c:	c1 30       	cpi	r28, 0x01	; 1
    177e:	d1 05       	cpc	r29, r1
    1780:	59 f4       	brne	.+22     	; 0x1798 <_Z10USART_initii+0x7a>
	{
		UBRR1H = (uint8_t)(baudPrescaler>>8);
    1782:	30 93 cd 00 	sts	0x00CD, r19
		UBRR1L = (uint8_t)(baudPrescaler);
    1786:	20 93 cc 00 	sts	0x00CC, r18
		UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    178a:	88 e1       	ldi	r24, 0x18	; 24
    178c:	80 93 c9 00 	sts	0x00C9, r24
		UCSR1C = ((1<<UCSZ10)|(1<<UCSZ11));
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	80 93 ca 00 	sts	0x00CA, r24
    1796:	1a c0       	rjmp	.+52     	; 0x17cc <_Z10USART_initii+0xae>
	}
	else if(usartNum == 2)
    1798:	c2 30       	cpi	r28, 0x02	; 2
    179a:	d1 05       	cpc	r29, r1
    179c:	59 f4       	brne	.+22     	; 0x17b4 <_Z10USART_initii+0x96>
	{
		UBRR2H = (uint8_t)(baudPrescaler>>8);
    179e:	30 93 d5 00 	sts	0x00D5, r19
		UBRR2L = (uint8_t)(baudPrescaler);
    17a2:	20 93 d4 00 	sts	0x00D4, r18
		UCSR2B = (1<<RXEN2)|(1<<TXEN2);
    17a6:	88 e1       	ldi	r24, 0x18	; 24
    17a8:	80 93 d1 00 	sts	0x00D1, r24
		UCSR2C = ((1<<UCSZ20)|(1<<UCSZ21));
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	80 93 d2 00 	sts	0x00D2, r24
    17b2:	0c c0       	rjmp	.+24     	; 0x17cc <_Z10USART_initii+0xae>
	}
	else if(usartNum == 3)
    17b4:	23 97       	sbiw	r28, 0x03	; 3
    17b6:	51 f4       	brne	.+20     	; 0x17cc <_Z10USART_initii+0xae>
	{
		UBRR3H = (uint8_t)(baudPrescaler>>8);
    17b8:	30 93 35 01 	sts	0x0135, r19
		UBRR3L = (uint8_t)(baudPrescaler);
    17bc:	20 93 34 01 	sts	0x0134, r18
		UCSR3B = (1<<RXEN3)|(1<<TXEN3);
    17c0:	88 e1       	ldi	r24, 0x18	; 24
    17c2:	80 93 31 01 	sts	0x0131, r24
		UCSR3C = ((1<<UCSZ30)|(1<<UCSZ31));
    17c6:	86 e0       	ldi	r24, 0x06	; 6
    17c8:	80 93 32 01 	sts	0x0132, r24
	}
	
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <_Z10USART_sendih>:

void USART_send(int usartNum, unsigned char data){
	
	if(usartNum == 0)
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	41 f4       	brne	.+16     	; 0x17e6 <_Z10USART_sendih+0x14>
	{
		while(!(UCSR0A & (1<<UDRE0)));
    17d6:	e0 ec       	ldi	r30, 0xC0	; 192
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	85 ff       	sbrs	r24, 5
    17de:	fd cf       	rjmp	.-6      	; 0x17da <_Z10USART_sendih+0x8>
		UDR0 = data;
    17e0:	60 93 c6 00 	sts	0x00C6, r22
    17e4:	08 95       	ret
	}
	else if(usartNum == 1)
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	41 f4       	brne	.+16     	; 0x17fc <_Z10USART_sendih+0x2a>
	{
		while(!(UCSR1A & (1<<UDRE1)));
    17ec:	e8 ec       	ldi	r30, 0xC8	; 200
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	85 ff       	sbrs	r24, 5
    17f4:	fd cf       	rjmp	.-6      	; 0x17f0 <_Z10USART_sendih+0x1e>
		UDR1 = data;
    17f6:	60 93 ce 00 	sts	0x00CE, r22
    17fa:	08 95       	ret
	}
	else if(usartNum == 2)
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	91 05       	cpc	r25, r1
    1800:	41 f4       	brne	.+16     	; 0x1812 <_Z10USART_sendih+0x40>
	{
		while(!(UCSR2A & (1<<UDRE2)));
    1802:	e0 ed       	ldi	r30, 0xD0	; 208
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	85 ff       	sbrs	r24, 5
    180a:	fd cf       	rjmp	.-6      	; 0x1806 <_Z10USART_sendih+0x34>
		UDR2 = data;
    180c:	60 93 d6 00 	sts	0x00D6, r22
    1810:	08 95       	ret
	}
	else if(usartNum == 3)
    1812:	03 97       	sbiw	r24, 0x03	; 3
    1814:	39 f4       	brne	.+14     	; 0x1824 <_Z10USART_sendih+0x52>
	{
		while(!(UCSR3A & (1<<UDRE3)));
    1816:	e0 e3       	ldi	r30, 0x30	; 48
    1818:	f1 e0       	ldi	r31, 0x01	; 1
    181a:	80 81       	ld	r24, Z
    181c:	85 ff       	sbrs	r24, 5
    181e:	fd cf       	rjmp	.-6      	; 0x181a <_Z10USART_sendih+0x48>
		UDR3 = data;
    1820:	60 93 36 01 	sts	0x0136, r22
    1824:	08 95       	ret

00001826 <_Z13USART_receivei>:
	}
}

unsigned char USART_receive(int usartNum){
	if(usartNum == 0)
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	41 f4       	brne	.+16     	; 0x183a <_Z13USART_receivei+0x14>
	{
		while(!(UCSR0A & (1<<RXC0)));
    182a:	e0 ec       	ldi	r30, 0xC0	; 192
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	88 23       	and	r24, r24
    1832:	ec f7       	brge	.-6      	; 0x182e <_Z13USART_receivei+0x8>
		return UDR0;
    1834:	80 91 c6 00 	lds	r24, 0x00C6
    1838:	08 95       	ret
	}
	else if(usartNum == 1)
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	41 f4       	brne	.+16     	; 0x1850 <_Z13USART_receivei+0x2a>
	{
		while(!(UCSR1A & (1<<RXC1)));
    1840:	e8 ec       	ldi	r30, 0xC8	; 200
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	88 23       	and	r24, r24
    1848:	ec f7       	brge	.-6      	; 0x1844 <_Z13USART_receivei+0x1e>
		return UDR1;
    184a:	80 91 ce 00 	lds	r24, 0x00CE
    184e:	08 95       	ret
	}
	else if(usartNum == 2)
    1850:	02 97       	sbiw	r24, 0x02	; 2
    1852:	41 f4       	brne	.+16     	; 0x1864 <_Z13USART_receivei+0x3e>
	{
		while(!(UCSR2A & (1<<RXC2)));
    1854:	e0 ed       	ldi	r30, 0xD0	; 208
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	ec f7       	brge	.-6      	; 0x1858 <_Z13USART_receivei+0x32>
		return UDR2;
    185e:	80 91 d6 00 	lds	r24, 0x00D6
    1862:	08 95       	ret
	}
	else
	{
		while(!(UCSR3A & (1<<RXC3)));
    1864:	e0 e3       	ldi	r30, 0x30	; 48
    1866:	f1 e0       	ldi	r31, 0x01	; 1
    1868:	80 81       	ld	r24, Z
    186a:	88 23       	and	r24, r24
    186c:	ec f7       	brge	.-6      	; 0x1868 <_Z13USART_receivei+0x42>
		return UDR3;
    186e:	80 91 36 01 	lds	r24, 0x0136
	}
	
}
    1872:	08 95       	ret

00001874 <_Z15USART_putstringiPKc>:

	//return the received string
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	8c 01       	movw	r16, r24
    187e:	eb 01       	movw	r28, r22
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
    1880:	68 81       	ld	r22, Y
    1882:	66 23       	and	r22, r22
    1884:	31 f0       	breq	.+12     	; 0x1892 <_Z15USART_putstringiPKc+0x1e>
    1886:	21 96       	adiw	r28, 0x01	; 1
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
    1888:	c8 01       	movw	r24, r16
    188a:	a3 df       	rcall	.-186    	; 0x17d2 <_Z10USART_sendih>
	return(string);
}*/

void USART_putstring(int usartNum, const char* StringPtr){
	
	while(*StringPtr != 0x00){    //Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
    188c:	69 91       	ld	r22, Y+
    188e:	61 11       	cpse	r22, r1
    1890:	fb cf       	rjmp	.-10     	; 0x1888 <_Z15USART_putstringiPKc+0x14>
		USART_send(usartNum, *StringPtr);    //Using the simple send function we send one char at a time
	StringPtr++;}        //We increment the pointer so we can read the next char
	
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <_Z21waypoint_get_distanceffff>:
//getter for desired heading
float waypoint_get_heading()
{
	//waypoint_get_bearing(gps_get_latitude(),gps_get_longitude(),)
	return 999;
}
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	60 97       	sbiw	r28, 0x10	; 16
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	2b 01       	movw	r4, r22
    18ce:	3c 01       	movw	r6, r24
    18d0:	2d 87       	std	Y+13, r18	; 0x0d
    18d2:	3e 87       	std	Y+14, r19	; 0x0e
    18d4:	4f 87       	std	Y+15, r20	; 0x0f
    18d6:	58 8b       	std	Y+16, r21	; 0x10
    18d8:	ed 82       	std	Y+5, r14	; 0x05
    18da:	fe 82       	std	Y+6, r15	; 0x06
    18dc:	0f 83       	std	Y+7, r16	; 0x07
    18de:	18 87       	std	Y+8, r17	; 0x08
    18e0:	2b ed       	ldi	r18, 0xDB	; 219
    18e2:	3f e0       	ldi	r19, 0x0F	; 15
    18e4:	49 e4       	ldi	r20, 0x49	; 73
    18e6:	50 e4       	ldi	r21, 0x40	; 64
    18e8:	c8 01       	movw	r24, r16
    18ea:	b7 01       	movw	r22, r14
    18ec:	7e d6       	rcall	.+3324   	; 0x25ea <__mulsf3>
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	44 e3       	ldi	r20, 0x34	; 52
    18f4:	53 e4       	ldi	r21, 0x43	; 67
    18f6:	72 d4       	rcall	.+2276   	; 0x21dc <__divsf3>
    18f8:	69 83       	std	Y+1, r22	; 0x01
    18fa:	7a 83       	std	Y+2, r23	; 0x02
    18fc:	8b 83       	std	Y+3, r24	; 0x03
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	2b ed       	ldi	r18, 0xDB	; 219
    1902:	3f e0       	ldi	r19, 0x0F	; 15
    1904:	49 e4       	ldi	r20, 0x49	; 73
    1906:	50 e4       	ldi	r21, 0x40	; 64
    1908:	c3 01       	movw	r24, r6
    190a:	b2 01       	movw	r22, r4
    190c:	6e d6       	rcall	.+3292   	; 0x25ea <__mulsf3>
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	44 e3       	ldi	r20, 0x34	; 52
    1914:	53 e4       	ldi	r21, 0x43	; 67
    1916:	62 d4       	rcall	.+2244   	; 0x21dc <__divsf3>
    1918:	9b 01       	movw	r18, r22
    191a:	ac 01       	movw	r20, r24
    191c:	69 81       	ldd	r22, Y+1	; 0x01
    191e:	7a 81       	ldd	r23, Y+2	; 0x02
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	8d d3       	rcall	.+1818   	; 0x2040 <__subsf3>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	5d d6       	rcall	.+3258   	; 0x25ea <__mulsf3>
    1930:	bf d6       	rcall	.+3454   	; 0x26b0 <sin>
    1932:	69 83       	std	Y+1, r22	; 0x01
    1934:	7a 83       	std	Y+2, r23	; 0x02
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	c8 01       	movw	r24, r16
    193c:	b7 01       	movw	r22, r14
    193e:	4b d4       	rcall	.+2198   	; 0x21d6 <cos>
    1940:	6d 83       	std	Y+5, r22	; 0x05
    1942:	7e 83       	std	Y+6, r23	; 0x06
    1944:	8f 83       	std	Y+7, r24	; 0x07
    1946:	98 87       	std	Y+8, r25	; 0x08
    1948:	c3 01       	movw	r24, r6
    194a:	b2 01       	movw	r22, r4
    194c:	44 d4       	rcall	.+2184   	; 0x21d6 <cos>
    194e:	69 87       	std	Y+9, r22	; 0x09
    1950:	7a 87       	std	Y+10, r23	; 0x0a
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	2b ed       	ldi	r18, 0xDB	; 219
    1958:	3f e0       	ldi	r19, 0x0F	; 15
    195a:	49 e4       	ldi	r20, 0x49	; 73
    195c:	50 e4       	ldi	r21, 0x40	; 64
    195e:	c6 01       	movw	r24, r12
    1960:	b5 01       	movw	r22, r10
    1962:	43 d6       	rcall	.+3206   	; 0x25ea <__mulsf3>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	44 e3       	ldi	r20, 0x34	; 52
    196a:	53 e4       	ldi	r21, 0x43	; 67
    196c:	37 d4       	rcall	.+2158   	; 0x21dc <__divsf3>
    196e:	2b 01       	movw	r4, r22
    1970:	3c 01       	movw	r6, r24
    1972:	2b ed       	ldi	r18, 0xDB	; 219
    1974:	3f e0       	ldi	r19, 0x0F	; 15
    1976:	49 e4       	ldi	r20, 0x49	; 73
    1978:	50 e4       	ldi	r21, 0x40	; 64
    197a:	6d 85       	ldd	r22, Y+13	; 0x0d
    197c:	7e 85       	ldd	r23, Y+14	; 0x0e
    197e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1980:	98 89       	ldd	r25, Y+16	; 0x10
    1982:	33 d6       	rcall	.+3174   	; 0x25ea <__mulsf3>
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	44 e3       	ldi	r20, 0x34	; 52
    198a:	53 e4       	ldi	r21, 0x43	; 67
    198c:	27 d4       	rcall	.+2126   	; 0x21dc <__divsf3>
    198e:	9b 01       	movw	r18, r22
    1990:	ac 01       	movw	r20, r24
    1992:	c3 01       	movw	r24, r6
    1994:	b2 01       	movw	r22, r4
    1996:	54 d3       	rcall	.+1704   	; 0x2040 <__subsf3>
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	24 d6       	rcall	.+3144   	; 0x25ea <__mulsf3>
    19a2:	86 d6       	rcall	.+3340   	; 0x26b0 <sin>
    19a4:	9b 01       	movw	r18, r22
    19a6:	ac 01       	movw	r20, r24
    19a8:	20 d6       	rcall	.+3136   	; 0x25ea <__mulsf3>
    19aa:	2b 01       	movw	r4, r22
    19ac:	3c 01       	movw	r6, r24
    19ae:	29 85       	ldd	r18, Y+9	; 0x09
    19b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    19b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    19b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    19b6:	6d 81       	ldd	r22, Y+5	; 0x05
    19b8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ba:	8f 81       	ldd	r24, Y+7	; 0x07
    19bc:	98 85       	ldd	r25, Y+8	; 0x08
    19be:	15 d6       	rcall	.+3114   	; 0x25ea <__mulsf3>
    19c0:	9b 01       	movw	r18, r22
    19c2:	ac 01       	movw	r20, r24
    19c4:	c3 01       	movw	r24, r6
    19c6:	b2 01       	movw	r22, r4
    19c8:	10 d6       	rcall	.+3104   	; 0x25ea <__mulsf3>
    19ca:	4b 01       	movw	r8, r22
    19cc:	5c 01       	movw	r10, r24
    19ce:	29 81       	ldd	r18, Y+1	; 0x01
    19d0:	3a 81       	ldd	r19, Y+2	; 0x02
    19d2:	4b 81       	ldd	r20, Y+3	; 0x03
    19d4:	5c 81       	ldd	r21, Y+4	; 0x04
    19d6:	ca 01       	movw	r24, r20
    19d8:	b9 01       	movw	r22, r18
    19da:	07 d6       	rcall	.+3086   	; 0x25ea <__mulsf3>
    19dc:	9b 01       	movw	r18, r22
    19de:	ac 01       	movw	r20, r24
    19e0:	c5 01       	movw	r24, r10
    19e2:	b4 01       	movw	r22, r8
    19e4:	2e d3       	rcall	.+1628   	; 0x2042 <__addsf3>
    19e6:	6b 01       	movw	r12, r22
    19e8:	7c 01       	movw	r14, r24
    19ea:	9b 01       	movw	r18, r22
    19ec:	ac 01       	movw	r20, r24
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	80 e8       	ldi	r24, 0x80	; 128
    19f4:	9f e3       	ldi	r25, 0x3F	; 63
    19f6:	24 d3       	rcall	.+1608   	; 0x2040 <__subsf3>
    19f8:	65 d6       	rcall	.+3274   	; 0x26c4 <sqrt>
    19fa:	4b 01       	movw	r8, r22
    19fc:	5c 01       	movw	r10, r24
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 01       	movw	r22, r12
    1a02:	60 d6       	rcall	.+3264   	; 0x26c4 <sqrt>
    1a04:	a5 01       	movw	r20, r10
    1a06:	94 01       	movw	r18, r8
    1a08:	8f d3       	rcall	.+1822   	; 0x2128 <atan2>
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	19 d3       	rcall	.+1586   	; 0x2042 <__addsf3>
    1a10:	20 e7       	ldi	r18, 0x70	; 112
    1a12:	3d e6       	ldi	r19, 0x6D	; 109
    1a14:	42 ec       	ldi	r20, 0xC2	; 194
    1a16:	5a e4       	ldi	r21, 0x4A	; 74
    1a18:	e8 d5       	rcall	.+3024   	; 0x25ea <__mulsf3>
    1a1a:	60 96       	adiw	r28, 0x10	; 16
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	7f 90       	pop	r7
    1a40:	6f 90       	pop	r6
    1a42:	5f 90       	pop	r5
    1a44:	4f 90       	pop	r4
    1a46:	08 95       	ret

00001a48 <_Z20waypoint_get_bearingffff>:
    1a48:	4f 92       	push	r4
    1a4a:	5f 92       	push	r5
    1a4c:	6f 92       	push	r6
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	64 97       	sbiw	r28, 0x14	; 20
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	69 83       	std	Y+1, r22	; 0x01
    1a7a:	7a 83       	std	Y+2, r23	; 0x02
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	2d 83       	std	Y+5, r18	; 0x05
    1a82:	3e 83       	std	Y+6, r19	; 0x06
    1a84:	4f 83       	std	Y+7, r20	; 0x07
    1a86:	58 87       	std	Y+8, r21	; 0x08
    1a88:	a6 d3       	rcall	.+1868   	; 0x21d6 <cos>
    1a8a:	69 87       	std	Y+9, r22	; 0x09
    1a8c:	7a 87       	std	Y+10, r23	; 0x0a
    1a8e:	8b 87       	std	Y+11, r24	; 0x0b
    1a90:	9c 87       	std	Y+12, r25	; 0x0c
    1a92:	c8 01       	movw	r24, r16
    1a94:	b7 01       	movw	r22, r14
    1a96:	0c d6       	rcall	.+3096   	; 0x26b0 <sin>
    1a98:	6d 87       	std	Y+13, r22	; 0x0d
    1a9a:	7e 87       	std	Y+14, r23	; 0x0e
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
    1a9e:	98 8b       	std	Y+16, r25	; 0x10
    1aa0:	69 81       	ldd	r22, Y+1	; 0x01
    1aa2:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	03 d6       	rcall	.+3078   	; 0x26b0 <sin>
    1aaa:	69 83       	std	Y+1, r22	; 0x01
    1aac:	7a 83       	std	Y+2, r23	; 0x02
    1aae:	8b 83       	std	Y+3, r24	; 0x03
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	b7 01       	movw	r22, r14
    1ab6:	8f d3       	rcall	.+1822   	; 0x21d6 <cos>
    1ab8:	2b 01       	movw	r4, r22
    1aba:	3c 01       	movw	r6, r24
    1abc:	2d 81       	ldd	r18, Y+5	; 0x05
    1abe:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ac2:	58 85       	ldd	r21, Y+8	; 0x08
    1ac4:	c6 01       	movw	r24, r12
    1ac6:	b5 01       	movw	r22, r10
    1ac8:	bb d2       	rcall	.+1398   	; 0x2040 <__subsf3>
    1aca:	4b 01       	movw	r8, r22
    1acc:	5c 01       	movw	r10, r24
    1ace:	83 d3       	rcall	.+1798   	; 0x21d6 <cos>
    1ad0:	6d 83       	std	Y+5, r22	; 0x05
    1ad2:	7e 83       	std	Y+6, r23	; 0x06
    1ad4:	8f 83       	std	Y+7, r24	; 0x07
    1ad6:	98 87       	std	Y+8, r25	; 0x08
    1ad8:	c5 01       	movw	r24, r10
    1ada:	b4 01       	movw	r22, r8
    1adc:	e9 d5       	rcall	.+3026   	; 0x26b0 <sin>
    1ade:	69 8b       	std	Y+17, r22	; 0x11
    1ae0:	7a 8b       	std	Y+18, r23	; 0x12
    1ae2:	8b 8b       	std	Y+19, r24	; 0x13
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ae8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1aea:	4f 85       	ldd	r20, Y+15	; 0x0f
    1aec:	58 89       	ldd	r21, Y+16	; 0x10
    1aee:	69 85       	ldd	r22, Y+9	; 0x09
    1af0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1af2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1af4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1af6:	79 d5       	rcall	.+2802   	; 0x25ea <__mulsf3>
    1af8:	4b 01       	movw	r8, r22
    1afa:	5c 01       	movw	r10, r24
    1afc:	a3 01       	movw	r20, r6
    1afe:	92 01       	movw	r18, r4
    1b00:	69 81       	ldd	r22, Y+1	; 0x01
    1b02:	7a 81       	ldd	r23, Y+2	; 0x02
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	70 d5       	rcall	.+2784   	; 0x25ea <__mulsf3>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	4f 81       	ldd	r20, Y+7	; 0x07
    1b10:	58 85       	ldd	r21, Y+8	; 0x08
    1b12:	6b d5       	rcall	.+2774   	; 0x25ea <__mulsf3>
    1b14:	9b 01       	movw	r18, r22
    1b16:	ac 01       	movw	r20, r24
    1b18:	c5 01       	movw	r24, r10
    1b1a:	b4 01       	movw	r22, r8
    1b1c:	91 d2       	rcall	.+1314   	; 0x2040 <__subsf3>
    1b1e:	4b 01       	movw	r8, r22
    1b20:	5c 01       	movw	r10, r24
    1b22:	29 89       	ldd	r18, Y+17	; 0x11
    1b24:	3a 89       	ldd	r19, Y+18	; 0x12
    1b26:	4b 89       	ldd	r20, Y+19	; 0x13
    1b28:	5c 89       	ldd	r21, Y+20	; 0x14
    1b2a:	c3 01       	movw	r24, r6
    1b2c:	b2 01       	movw	r22, r4
    1b2e:	5d d5       	rcall	.+2746   	; 0x25ea <__mulsf3>
    1b30:	a5 01       	movw	r20, r10
    1b32:	94 01       	movw	r18, r8
    1b34:	f9 d2       	rcall	.+1522   	; 0x2128 <atan2>
    1b36:	6b 01       	movw	r12, r22
    1b38:	7c 01       	movw	r14, r24
    1b3a:	2b ed       	ldi	r18, 0xDB	; 219
    1b3c:	3f e0       	ldi	r19, 0x0F	; 15
    1b3e:	49 ec       	ldi	r20, 0xC9	; 201
    1b40:	50 e4       	ldi	r21, 0x40	; 64
    1b42:	4c d3       	rcall	.+1688   	; 0x21dc <__divsf3>
    1b44:	21 d4       	rcall	.+2114   	; 0x2388 <floor>
    1b46:	2b ed       	ldi	r18, 0xDB	; 219
    1b48:	3f e0       	ldi	r19, 0x0F	; 15
    1b4a:	49 ec       	ldi	r20, 0xC9	; 201
    1b4c:	50 e4       	ldi	r21, 0x40	; 64
    1b4e:	4d d5       	rcall	.+2714   	; 0x25ea <__mulsf3>
    1b50:	9b 01       	movw	r18, r22
    1b52:	ac 01       	movw	r20, r24
    1b54:	c7 01       	movw	r24, r14
    1b56:	b6 01       	movw	r22, r12
    1b58:	73 d2       	rcall	.+1254   	; 0x2040 <__subsf3>
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	44 e3       	ldi	r20, 0x34	; 52
    1b60:	53 e4       	ldi	r21, 0x43	; 67
    1b62:	43 d5       	rcall	.+2694   	; 0x25ea <__mulsf3>
    1b64:	2b ed       	ldi	r18, 0xDB	; 219
    1b66:	3f e0       	ldi	r19, 0x0F	; 15
    1b68:	49 e4       	ldi	r20, 0x49	; 73
    1b6a:	50 e4       	ldi	r21, 0x40	; 64
    1b6c:	37 d3       	rcall	.+1646   	; 0x21dc <__divsf3>
    1b6e:	64 96       	adiw	r28, 0x14	; 20
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	9f 90       	pop	r9
    1b90:	8f 90       	pop	r8
    1b92:	7f 90       	pop	r7
    1b94:	6f 90       	pop	r6
    1b96:	5f 90       	pop	r5
    1b98:	4f 90       	pop	r4
    1b9a:	08 95       	ret

00001b9c <_Z18chris_waypoint_addff>:
	
	chris_array_index=0;

}
void chris_waypoint_add(float lat, float lon)
{
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
	c_lat_array[chris_array_index] = lat;
    1ba0:	e0 91 71 06 	lds	r30, 0x0671
    1ba4:	f0 91 72 06 	lds	r31, 0x0672
    1ba8:	df 01       	movw	r26, r30
    1baa:	aa 0f       	add	r26, r26
    1bac:	bb 1f       	adc	r27, r27
    1bae:	aa 0f       	add	r26, r26
    1bb0:	bb 1f       	adc	r27, r27
    1bb2:	ed 01       	movw	r28, r26
    1bb4:	cf 5c       	subi	r28, 0xCF	; 207
    1bb6:	d9 4f       	sbci	r29, 0xF9	; 249
    1bb8:	68 83       	st	Y, r22
    1bba:	79 83       	std	Y+1, r23	; 0x01
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
    1bbe:	9b 83       	std	Y+3, r25	; 0x03
	c_long_array[chris_array_index] = lon;
    1bc0:	af 50       	subi	r26, 0x0F	; 15
    1bc2:	ba 4f       	sbci	r27, 0xFA	; 250
    1bc4:	2d 93       	st	X+, r18
    1bc6:	3d 93       	st	X+, r19
    1bc8:	4d 93       	st	X+, r20
    1bca:	5c 93       	st	X, r21
    1bcc:	13 97       	sbiw	r26, 0x03	; 3
	chris_array_index++;
    1bce:	31 96       	adiw	r30, 0x01	; 1
    1bd0:	f0 93 72 06 	sts	0x0672, r31
    1bd4:	e0 93 71 06 	sts	0x0671, r30
}
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <_Z19chris_waypoint_initv>:
}


//Chris's last minute demo stuff
void chris_waypoint_init()
{
    1bde:	4f 92       	push	r4
    1be0:	5f 92       	push	r5
    1be2:	6f 92       	push	r6
    1be4:	7f 92       	push	r7
    1be6:	8f 92       	push	r8
    1be8:	9f 92       	push	r9
    1bea:	af 92       	push	r10
    1bec:	bf 92       	push	r11
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <_Z19chris_waypoint_initv+0x22>
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
	do 
	{
		gps_update();
    1c06:	e5 d8       	rcall	.-3638   	; 0xdd2 <_Z10gps_updatev>
	} while (gps_get_latitude()==0 || gps_get_longitude()==0);
    1c08:	2d da       	rcall	.-2982   	; 0x1064 <_Z16gps_get_latitudev>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	de d2       	rcall	.+1468   	; 0x21ce <__cmpsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	c1 f3       	breq	.-16     	; 0x1c06 <_Z19chris_waypoint_initv+0x28>
    1c16:	2f da       	rcall	.-2978   	; 0x1076 <_Z17gps_get_longitudev>


//Chris's last minute demo stuff
void chris_waypoint_init()
{
	do 
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	a9 01       	movw	r20, r18
    1c1e:	d7 d2       	rcall	.+1454   	; 0x21ce <__cmpsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	89 f3       	breq	.-30     	; 0x1c06 <_Z19chris_waypoint_initv+0x28>
	{
		gps_update();
	} while (gps_get_latitude()==0 || gps_get_longitude()==0);
	
	float center_lat = gps_get_latitude();
    1c24:	1f da       	rcall	.-3010   	; 0x1064 <_Z16gps_get_latitudev>
    1c26:	2b 01       	movw	r4, r22
    1c28:	3c 01       	movw	r6, r24
	float center_long = gps_get_longitude();
    1c2a:	25 da       	rcall	.-2998   	; 0x1076 <_Z17gps_get_longitudev>
    1c2c:	69 83       	std	Y+1, r22	; 0x01
    1c2e:	7a 83       	std	Y+2, r23	; 0x02
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	9c 83       	std	Y+4, r25	; 0x04
	float circle_scale = 10000;	//100 = radius of ~1000m, 1000 = radius of ~100m, 4000 = radius of ~ 25m
	
	debug_print("Generating circle of waypoints around center latitude ");
    1c34:	8c e4       	ldi	r24, 0x4C	; 76
    1c36:	94 e0       	ldi	r25, 0x04	; 4
    1c38:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
	debug_printf(center_lat);
    1c3c:	c3 01       	movw	r24, r6
    1c3e:	b2 01       	movw	r22, r4
    1c40:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
	debug_print(", longitude ");
    1c44:	83 e8       	ldi	r24, 0x83	; 131
    1c46:	94 e0       	ldi	r25, 0x04	; 4
    1c48:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
	debug_printf(center_lat);
    1c4c:	c3 01       	movw	r24, r6
    1c4e:	b2 01       	movw	r22, r4
    1c50:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
	debug_println("...");
    1c54:	8d e0       	ldi	r24, 0x0D	; 13
    1c56:	93 e0       	ldi	r25, 0x03	; 3
    1c58:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z13debug_printlnPKc>
	for(int i = 0; i < NUM_WAYPOINTS; i++)
    1c5c:	00 e0       	ldi	r16, 0x00	; 0
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
	{
		float temp_lat, temp_long;
		
		temp_lat = center_lat-cos((2*PI*i)/NUM_WAYPOINTS)/circle_scale;
    1c60:	b8 01       	movw	r22, r16
    1c62:	88 27       	eor	r24, r24
    1c64:	77 fd       	sbrc	r23, 7
    1c66:	80 95       	com	r24
    1c68:	98 2f       	mov	r25, r24
    1c6a:	53 d3       	rcall	.+1702   	; 0x2312 <__floatsisf>
    1c6c:	2b ed       	ldi	r18, 0xDB	; 219
    1c6e:	3f e0       	ldi	r19, 0x0F	; 15
    1c70:	49 ec       	ldi	r20, 0xC9	; 201
    1c72:	50 e4       	ldi	r21, 0x40	; 64
    1c74:	ba d4       	rcall	.+2420   	; 0x25ea <__mulsf3>
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5d e3       	ldi	r21, 0x3D	; 61
    1c7e:	b5 d4       	rcall	.+2410   	; 0x25ea <__mulsf3>
    1c80:	6b 01       	movw	r12, r22
    1c82:	7c 01       	movw	r14, r24
    1c84:	a8 d2       	rcall	.+1360   	; 0x21d6 <cos>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e4       	ldi	r19, 0x40	; 64
    1c8a:	4c e1       	ldi	r20, 0x1C	; 28
    1c8c:	56 e4       	ldi	r21, 0x46	; 70
    1c8e:	a6 d2       	rcall	.+1356   	; 0x21dc <__divsf3>
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	c3 01       	movw	r24, r6
    1c96:	b2 01       	movw	r22, r4
    1c98:	d3 d1       	rcall	.+934    	; 0x2040 <__subsf3>
    1c9a:	4b 01       	movw	r8, r22
    1c9c:	5c 01       	movw	r10, r24
		temp_long = center_long+sin((2*PI*i)/NUM_WAYPOINTS)/circle_scale;
    1c9e:	c7 01       	movw	r24, r14
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	06 d5       	rcall	.+2572   	; 0x26b0 <sin>
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e4       	ldi	r19, 0x40	; 64
    1ca8:	4c e1       	ldi	r20, 0x1C	; 28
    1caa:	56 e4       	ldi	r21, 0x46	; 70
    1cac:	97 d2       	rcall	.+1326   	; 0x21dc <__divsf3>
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb6:	c5 d1       	rcall	.+906    	; 0x2042 <__addsf3>
    1cb8:	6b 01       	movw	r12, r22
    1cba:	7c 01       	movw	r14, r24
		chris_waypoint_add(temp_lat,temp_long);
    1cbc:	9b 01       	movw	r18, r22
    1cbe:	ac 01       	movw	r20, r24
    1cc0:	c5 01       	movw	r24, r10
    1cc2:	b4 01       	movw	r22, r8
    1cc4:	6b df       	rcall	.-298    	; 0x1b9c <_Z18chris_waypoint_addff>
		debug_printf(temp_lat);
    1cc6:	c5 01       	movw	r24, r10
    1cc8:	b4 01       	movw	r22, r8
    1cca:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
		debug_print(", ");
    1cce:	80 e9       	ldi	r24, 0x90	; 144
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
		debug_printf(temp_long);
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	b6 01       	movw	r22, r12
    1cda:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
		debug_println("");
    1cde:	86 e8       	ldi	r24, 0x86	; 134
    1ce0:	93 e0       	ldi	r25, 0x03	; 3
    1ce2:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z13debug_printlnPKc>
	debug_print("Generating circle of waypoints around center latitude ");
	debug_printf(center_lat);
	debug_print(", longitude ");
	debug_printf(center_lat);
	debug_println("...");
	for(int i = 0; i < NUM_WAYPOINTS; i++)
    1ce6:	0f 5f       	subi	r16, 0xFF	; 255
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	00 31       	cpi	r16, 0x10	; 16
    1cec:	11 05       	cpc	r17, r1
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <_Z19chris_waypoint_initv+0x114>
    1cf0:	b7 cf       	rjmp	.-146    	; 0x1c60 <_Z19chris_waypoint_initv+0x82>
		debug_print(", ");
		debug_printf(temp_long);
		debug_println("");
	}
	
	chris_array_index=0;
    1cf2:	10 92 72 06 	sts	0x0672, r1
    1cf6:	10 92 71 06 	sts	0x0671, r1

}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ff 90       	pop	r15
    1d0c:	ef 90       	pop	r14
    1d0e:	df 90       	pop	r13
    1d10:	cf 90       	pop	r12
    1d12:	bf 90       	pop	r11
    1d14:	af 90       	pop	r10
    1d16:	9f 90       	pop	r9
    1d18:	8f 90       	pop	r8
    1d1a:	7f 90       	pop	r7
    1d1c:	6f 90       	pop	r6
    1d1e:	5f 90       	pop	r5
    1d20:	4f 90       	pop	r4
    1d22:	08 95       	ret

00001d24 <_Z30chris_waypoint_current_bearingv>:
		chris_set_waypoint_current_index(0);
}

//return the bearing to the next waypoint
float chris_waypoint_current_bearing()
{
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
	//return waypoint_get_bearing(gps_get_latitude(),gps_get_longitude(),c_lat_array[chris_array_index],c_long_array[chris_array_index]);
	return waypoint_get_bearing(c_lat_array[chris_array_index],c_long_array[chris_array_index],gps_get_latitude(),gps_get_longitude());
    1d34:	a0 d9       	rcall	.-3264   	; 0x1076 <_Z17gps_get_longitudev>
    1d36:	5b 01       	movw	r10, r22
    1d38:	6c 01       	movw	r12, r24
    1d3a:	94 d9       	rcall	.-3288   	; 0x1064 <_Z16gps_get_latitudev>
    1d3c:	7b 01       	movw	r14, r22
    1d3e:	8c 01       	movw	r16, r24
    1d40:	80 91 71 06 	lds	r24, 0x0671
    1d44:	90 91 72 06 	lds	r25, 0x0672
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	fc 01       	movw	r30, r24
    1d52:	ef 50       	subi	r30, 0x0F	; 15
    1d54:	fa 4f       	sbci	r31, 0xFA	; 250
    1d56:	20 81       	ld	r18, Z
    1d58:	31 81       	ldd	r19, Z+1	; 0x01
    1d5a:	42 81       	ldd	r20, Z+2	; 0x02
    1d5c:	53 81       	ldd	r21, Z+3	; 0x03
    1d5e:	fc 01       	movw	r30, r24
    1d60:	ef 5c       	subi	r30, 0xCF	; 207
    1d62:	f9 4f       	sbci	r31, 0xF9	; 249
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	6d de       	rcall	.-806    	; 0x1a48 <_Z20waypoint_get_bearingffff>
}
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
    1d7a:	bf 90       	pop	r11
    1d7c:	af 90       	pop	r10
    1d7e:	08 95       	ret

00001d80 <_Z31chris_waypoint_current_distancev>:

//return the distance to the next waypoint
float chris_waypoint_current_distance()
{
    1d80:	4f 92       	push	r4
    1d82:	5f 92       	push	r5
    1d84:	6f 92       	push	r6
    1d86:	7f 92       	push	r7
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <_Z31chris_waypoint_current_distancev+0x1e>
    1d9e:	1f 92       	push	r1
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
	return waypoint_get_distance(gps_get_latitude(),gps_get_longitude(),c_lat_array[chris_array_index],c_long_array[chris_array_index]);
    1da4:	80 91 71 06 	lds	r24, 0x0671
    1da8:	90 91 72 06 	lds	r25, 0x0672
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	fc 01       	movw	r30, r24
    1db6:	ef 50       	subi	r30, 0x0F	; 15
    1db8:	fa 4f       	sbci	r31, 0xFA	; 250
    1dba:	a0 80       	ld	r10, Z
    1dbc:	b1 80       	ldd	r11, Z+1	; 0x01
    1dbe:	c2 80       	ldd	r12, Z+2	; 0x02
    1dc0:	d3 80       	ldd	r13, Z+3	; 0x03
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	ef 5c       	subi	r30, 0xCF	; 207
    1dc6:	f9 4f       	sbci	r31, 0xF9	; 249
    1dc8:	40 80       	ld	r4, Z
    1dca:	51 80       	ldd	r5, Z+1	; 0x01
    1dcc:	62 80       	ldd	r6, Z+2	; 0x02
    1dce:	73 80       	ldd	r7, Z+3	; 0x03
    1dd0:	52 d9       	rcall	.-3420   	; 0x1076 <_Z17gps_get_longitudev>
    1dd2:	69 83       	std	Y+1, r22	; 0x01
    1dd4:	7a 83       	std	Y+2, r23	; 0x02
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	44 d9       	rcall	.-3448   	; 0x1064 <_Z16gps_get_latitudev>
    1ddc:	83 01       	movw	r16, r6
    1dde:	72 01       	movw	r14, r4
    1de0:	29 81       	ldd	r18, Y+1	; 0x01
    1de2:	3a 81       	ldd	r19, Y+2	; 0x02
    1de4:	4b 81       	ldd	r20, Y+3	; 0x03
    1de6:	5c 81       	ldd	r21, Y+4	; 0x04
    1de8:	59 dd       	rcall	.-1358   	; 0x189c <_Z21waypoint_get_distanceffff>
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	7f 90       	pop	r7
    1e08:	6f 90       	pop	r6
    1e0a:	5f 90       	pop	r5
    1e0c:	4f 90       	pop	r4
    1e0e:	08 95       	ret

00001e10 <_Z21chris_waypoint_updatev>:
}

//check if we're at the waypoint, if so, move on
void chris_waypoint_update()
{
	if(chris_waypoint_current_distance()<1)
    1e10:	b7 df       	rcall	.-146    	; 0x1d80 <_Z31chris_waypoint_current_distancev>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	d9 d1       	rcall	.+946    	; 0x21ce <__cmpsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	4c f4       	brge	.+18     	; 0x1e32 <_Z21chris_waypoint_updatev+0x22>
		chris_array_index++;
    1e20:	80 91 71 06 	lds	r24, 0x0671
    1e24:	90 91 72 06 	lds	r25, 0x0672
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	90 93 72 06 	sts	0x0672, r25
    1e2e:	80 93 71 06 	sts	0x0671, r24
	
	if(chris_waypoint_current_index()>NUM_WAYPOINTS)
    1e32:	80 91 71 06 	lds	r24, 0x0671
    1e36:	90 91 72 06 	lds	r25, 0x0672
    1e3a:	41 97       	sbiw	r24, 0x11	; 17
    1e3c:	24 f0       	brlt	.+8      	; 0x1e46 <_Z21chris_waypoint_updatev+0x36>
	return chris_array_index;
}

void chris_set_waypoint_current_index(int new_index)
{
	chris_array_index = new_index;
    1e3e:	10 92 72 06 	sts	0x0672, r1
    1e42:	10 92 71 06 	sts	0x0671, r1
    1e46:	08 95       	ret

00001e48 <_Z28chris_waypoint_current_indexv>:
}

int chris_waypoint_current_index()
{
	return chris_array_index;
}
    1e48:	80 91 71 06 	lds	r24, 0x0671
    1e4c:	90 91 72 06 	lds	r25, 0x0672
    1e50:	08 95       	ret

00001e52 <_Z32chris_set_waypoint_current_indexi>:

void chris_set_waypoint_current_index(int new_index)
{
	chris_array_index = new_index;
    1e52:	90 93 72 06 	sts	0x0672, r25
    1e56:	80 93 71 06 	sts	0x0671, r24
    1e5a:	08 95       	ret

00001e5c <_Z23chris_get_max_waypointsv>:
}

int chris_get_max_waypoints()
{
	return NUM_WAYPOINTS;
}
    1e5c:	80 e1       	ldi	r24, 0x10	; 16
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	08 95       	ret

00001e62 <_Z13array_get_lati>:

float array_get_lat(int index)
{
	return c_lat_array[index];
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	ef 5c       	subi	r30, 0xCF	; 207
    1e6e:	f9 4f       	sbci	r31, 0xF9	; 249
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
}
    1e78:	08 95       	ret

00001e7a <_Z13array_get_loni>:

float array_get_lon(int index)
{
	return c_long_array[index];
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	fc 01       	movw	r30, r24
    1e84:	ef 50       	subi	r30, 0x0F	; 15
    1e86:	fa 4f       	sbci	r31, 0xFA	; 250
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	08 95       	ret

00001e92 <_Z10initialisev>:
{
	
	bool success = true;

	
	USART_init(USART_PC,9600);
    1e92:	60 e8       	ldi	r22, 0x80	; 128
    1e94:	75 e2       	ldi	r23, 0x25	; 37
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	41 dc       	rcall	.-1918   	; 0x171e <_Z10USART_initii>
	debug_println("Begininning Initialisation...");
    1e9c:	83 e9       	ldi	r24, 0x93	; 147
    1e9e:	94 e0       	ldi	r25, 0x04	; 4
    1ea0:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z13debug_printlnPKc>
	
	initTimers();
    1ea4:	35 dc       	rcall	.-1942   	; 0x1710 <_Z10initTimersv>
	
	if(gps_demonstration==true)
    1ea6:	80 91 73 06 	lds	r24, 0x0673
    1eaa:	88 23       	and	r24, r24
    1eac:	81 f0       	breq	.+32     	; 0x1ece <_Z10initialisev+0x3c>
	{
		//GPS Demonstration
		altimeter_init();
    1eae:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z14altimeter_initv>
		
		init_HMC5883L();
    1eb2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_Z13init_HMC5883Lv>
		
		
		gps_init();
    1eb6:	b9 d8       	rcall	.-3726   	; 0x102a <_Z8gps_initv>
    1eb8:	2f ef       	ldi	r18, 0xFF	; 255
    1eba:	83 ed       	ldi	r24, 0xD3	; 211
    1ebc:	90 e3       	ldi	r25, 0x30	; 48
    1ebe:	21 50       	subi	r18, 0x01	; 1
    1ec0:	80 40       	sbci	r24, 0x00	; 0
    1ec2:	90 40       	sbci	r25, 0x00	; 0
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <_Z10initialisev+0x2c>
    1ec6:	00 c0       	rjmp	.+0      	; 0x1ec8 <_Z10initialisev+0x36>
    1ec8:	00 00       	nop
		
		//Initialise a series of waypoints in a circle around the current coordinates..
		_delay_ms(1000);
		chris_waypoint_init();
    1eca:	89 de       	rcall	.-750    	; 0x1bde <_Z19chris_waypoint_initv>
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <_Z10initialisev+0x40>
	}
	else
	{
		//RX and servo Demonstration
		rx_init();
    1ece:	96 da       	rcall	.-2772   	; 0x13fc <_Z7rx_initv>
		quad_output_init();
    1ed0:	05 d9       	rcall	.-3574   	; 0x10dc <_Z16quad_output_initv>
	}
	
	
	debug_println("Initialization succeeded!");
    1ed2:	81 eb       	ldi	r24, 0xB1	; 177
    1ed4:	94 e0       	ldi	r25, 0x04	; 4
    1ed6:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z13debug_printlnPKc>
	
	//beep some pattern I can recognize
	debug_beep_long();
    1eda:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z15debug_beep_longv>
    1ede:	2f ef       	ldi	r18, 0xFF	; 255
    1ee0:	84 e3       	ldi	r24, 0x34	; 52
    1ee2:	9c e0       	ldi	r25, 0x0C	; 12
    1ee4:	21 50       	subi	r18, 0x01	; 1
    1ee6:	80 40       	sbci	r24, 0x00	; 0
    1ee8:	90 40       	sbci	r25, 0x00	; 0
    1eea:	e1 f7       	brne	.-8      	; 0x1ee4 <_Z10initialisev+0x52>
    1eec:	00 c0       	rjmp	.+0      	; 0x1eee <_Z10initialisev+0x5c>
    1eee:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    1ef0:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z10debug_beepv>
    1ef4:	2f ef       	ldi	r18, 0xFF	; 255
    1ef6:	84 e3       	ldi	r24, 0x34	; 52
    1ef8:	9c e0       	ldi	r25, 0x0C	; 12
    1efa:	21 50       	subi	r18, 0x01	; 1
    1efc:	80 40       	sbci	r24, 0x00	; 0
    1efe:	90 40       	sbci	r25, 0x00	; 0
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <_Z10initialisev+0x68>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <_Z10initialisev+0x72>
    1f04:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    1f06:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z10debug_beepv>
    1f0a:	2f ef       	ldi	r18, 0xFF	; 255
    1f0c:	84 e3       	ldi	r24, 0x34	; 52
    1f0e:	9c e0       	ldi	r25, 0x0C	; 12
    1f10:	21 50       	subi	r18, 0x01	; 1
    1f12:	80 40       	sbci	r24, 0x00	; 0
    1f14:	90 40       	sbci	r25, 0x00	; 0
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <_Z10initialisev+0x7e>
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <_Z10initialisev+0x88>
    1f1a:	00 00       	nop
	_delay_ms(250);
	debug_beep();
    1f1c:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z10debug_beepv>
    1f20:	2f ef       	ldi	r18, 0xFF	; 255
    1f22:	84 e3       	ldi	r24, 0x34	; 52
    1f24:	9c e0       	ldi	r25, 0x0C	; 12
    1f26:	21 50       	subi	r18, 0x01	; 1
    1f28:	80 40       	sbci	r24, 0x00	; 0
    1f2a:	90 40       	sbci	r25, 0x00	; 0
    1f2c:	e1 f7       	brne	.-8      	; 0x1f26 <_Z10initialisev+0x94>
    1f2e:	00 c0       	rjmp	.+0      	; 0x1f30 <_Z10initialisev+0x9e>
    1f30:	00 00       	nop
	_delay_ms(250);
	debug_beep_long();
    1f32:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z15debug_beep_longv>
	
	return success;
}
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	08 95       	ret

00001f3a <main>:

bool initialise();

int main(void)
{
	initialise();
    1f3a:	ab df       	rcall	.-170    	; 0x1e92 <_Z10initialisev>
	uint16_t last_changed = millis();
    1f3c:	b4 db       	rcall	.-2200   	; 0x16a6 <_Z6millisv>
	
	while(1)
	{

		if(gps_demonstration==true)
    1f3e:	80 91 73 06 	lds	r24, 0x0673
    1f42:	88 23       	and	r24, r24
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <main+0xe>
    1f46:	72 c0       	rjmp	.+228    	; 0x202c <main+0xf2>
		{
			if(gps_update())
    1f48:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <_Z10gps_updatev>
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <main+0x18>
    1f50:	61 c0       	rjmp	.+194    	; 0x2014 <main+0xda>
			{
					chris_waypoint_update();
    1f52:	5e df       	rcall	.-324    	; 0x1e10 <_Z21chris_waypoint_updatev>
					debug_print("H");
    1f54:	8b ec       	ldi	r24, 0xCB	; 203
    1f56:	94 e0       	ldi	r25, 0x04	; 4
    1f58:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_print(",");
    1f5c:	8d ec       	ldi	r24, 0xCD	; 205
    1f5e:	94 e0       	ldi	r25, 0x04	; 4
    1f60:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(gps_get_latitude());
    1f64:	7f d8       	rcall	.-3842   	; 0x1064 <_Z16gps_get_latitudev>
    1f66:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1f6a:	8d ec       	ldi	r24, 0xCD	; 205
    1f6c:	94 e0       	ldi	r25, 0x04	; 4
    1f6e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(gps_get_longitude());
    1f72:	81 d8       	rcall	.-3838   	; 0x1076 <_Z17gps_get_longitudev>
    1f74:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1f78:	8d ec       	ldi	r24, 0xCD	; 205
    1f7a:	94 e0       	ldi	r25, 0x04	; 4
    1f7c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printi(gps_get_sats());
    1f80:	83 d8       	rcall	.-3834   	; 0x1088 <_Z12gps_get_satsv>
    1f82:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_Z12debug_printii>
					debug_print(",");
    1f86:	8d ec       	ldi	r24, 0xCD	; 205
    1f88:	94 e0       	ldi	r25, 0x04	; 4
    1f8a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(altimeter_get_metres());
    1f8e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z20altimeter_get_metresv>
    1f92:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1f96:	8d ec       	ldi	r24, 0xCD	; 205
    1f98:	94 e0       	ldi	r25, 0x04	; 4
    1f9a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(chris_waypoint_current_bearing());	//target heading
    1f9e:	c2 de       	rcall	.-636    	; 0x1d24 <_Z30chris_waypoint_current_bearingv>
    1fa0:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1fa4:	8d ec       	ldi	r24, 0xCD	; 205
    1fa6:	94 e0       	ldi	r25, 0x04	; 4
    1fa8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					float current_heading = compass_get_heading();
    1fac:	0e 94 06 03 	call	0x60c	; 0x60c <_Z19compass_get_headingv>
    1fb0:	6b 01       	movw	r12, r22
    1fb2:	7c 01       	movw	r14, r24
					debug_printf(current_heading);
    1fb4:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1fb8:	8d ec       	ldi	r24, 0xCD	; 205
    1fba:	94 e0       	ldi	r25, 0x04	; 4
    1fbc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(current_heading-chris_waypoint_current_bearing());
    1fc0:	b1 de       	rcall	.-670    	; 0x1d24 <_Z30chris_waypoint_current_bearingv>
    1fc2:	9b 01       	movw	r18, r22
    1fc4:	ac 01       	movw	r20, r24
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	b6 01       	movw	r22, r12
    1fca:	3a d0       	rcall	.+116    	; 0x2040 <__subsf3>
    1fcc:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1fd0:	8d ec       	ldi	r24, 0xCD	; 205
    1fd2:	94 e0       	ldi	r25, 0x04	; 4
    1fd4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printi(chris_waypoint_current_index());
    1fd8:	37 df       	rcall	.-402    	; 0x1e48 <_Z28chris_waypoint_current_indexv>
    1fda:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_Z12debug_printii>
					debug_print(",");
    1fde:	8d ec       	ldi	r24, 0xCD	; 205
    1fe0:	94 e0       	ldi	r25, 0x04	; 4
    1fe2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(chris_waypoint_current_distance());
    1fe6:	cc de       	rcall	.-616    	; 0x1d80 <_Z31chris_waypoint_current_distancev>
    1fe8:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1fec:	8d ec       	ldi	r24, 0xCD	; 205
    1fee:	94 e0       	ldi	r25, 0x04	; 4
    1ff0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(array_get_lat(chris_waypoint_current_index()));
    1ff4:	29 df       	rcall	.-430    	; 0x1e48 <_Z28chris_waypoint_current_indexv>
    1ff6:	35 df       	rcall	.-406    	; 0x1e62 <_Z13array_get_lati>
    1ff8:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_print(",");
    1ffc:	8d ec       	ldi	r24, 0xCD	; 205
    1ffe:	94 e0       	ldi	r25, 0x04	; 4
    2000:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z11debug_printPKc>
					debug_printf(array_get_lon(chris_waypoint_current_index()));
    2004:	21 df       	rcall	.-446    	; 0x1e48 <_Z28chris_waypoint_current_indexv>
    2006:	39 df       	rcall	.-398    	; 0x1e7a <_Z13array_get_loni>
    2008:	0e 94 04 05 	call	0xa08	; 0xa08 <_Z12debug_printff>
					debug_println(",");
    200c:	8d ec       	ldi	r24, 0xCD	; 205
    200e:	94 e0       	ldi	r25, 0x04	; 4
    2010:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z13debug_printlnPKc>
				}
		
				//automatic testing, every 3 seconds change to the next waypoint
				if(millis()-last_changed>3000 && 1==2)
    2014:	48 db       	rcall	.-2416   	; 0x16a6 <_Z6millisv>
				{
					chris_set_waypoint_current_index(chris_waypoint_current_index()+1);
					last_changed=millis();
				}
		
				if(chris_waypoint_current_index()>chris_get_max_waypoints())
    2016:	18 df       	rcall	.-464    	; 0x1e48 <_Z28chris_waypoint_current_indexv>
    2018:	7c 01       	movw	r14, r24
    201a:	20 df       	rcall	.-448    	; 0x1e5c <_Z23chris_get_max_waypointsv>
    201c:	8e 15       	cp	r24, r14
    201e:	9f 05       	cpc	r25, r15
    2020:	0c f0       	brlt	.+2      	; 0x2024 <main+0xea>
    2022:	8d cf       	rjmp	.-230    	; 0x1f3e <main+0x4>
				chris_set_waypoint_current_index(0);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	14 df       	rcall	.-472    	; 0x1e52 <_Z32chris_set_waypoint_current_indexi>
    202a:	89 cf       	rjmp	.-238    	; 0x1f3e <main+0x4>
			}
			else
			{
				//demonstrate reading receiver
				rx_update();
    202c:	04 da       	rcall	.-3064   	; 0x1436 <_Z9rx_updatev>
				quad_output_passthrough(true,true,true,true,true,true);
    202e:	ee 24       	eor	r14, r14
    2030:	e3 94       	inc	r14
    2032:	01 e0       	ldi	r16, 0x01	; 1
    2034:	21 e0       	ldi	r18, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	bd d8       	rcall	.-3718   	; 0x11b8 <_Z23quad_output_passthroughbbbbbb>
    203e:	7f cf       	rjmp	.-258    	; 0x1f3e <main+0x4>

00002040 <__subsf3>:
    2040:	50 58       	subi	r21, 0x80	; 128

00002042 <__addsf3>:
    2042:	bb 27       	eor	r27, r27
    2044:	aa 27       	eor	r26, r26
    2046:	0e d0       	rcall	.+28     	; 0x2064 <__addsf3x>
    2048:	63 c2       	rjmp	.+1222   	; 0x2510 <__fp_round>
    204a:	2c d2       	rcall	.+1112   	; 0x24a4 <__fp_pscA>
    204c:	30 f0       	brcs	.+12     	; 0x205a <__addsf3+0x18>
    204e:	31 d2       	rcall	.+1122   	; 0x24b2 <__fp_pscB>
    2050:	20 f0       	brcs	.+8      	; 0x205a <__addsf3+0x18>
    2052:	31 f4       	brne	.+12     	; 0x2060 <__addsf3+0x1e>
    2054:	9f 3f       	cpi	r25, 0xFF	; 255
    2056:	11 f4       	brne	.+4      	; 0x205c <__addsf3+0x1a>
    2058:	1e f4       	brtc	.+6      	; 0x2060 <__addsf3+0x1e>
    205a:	fc c1       	rjmp	.+1016   	; 0x2454 <__fp_nan>
    205c:	0e f4       	brtc	.+2      	; 0x2060 <__addsf3+0x1e>
    205e:	e0 95       	com	r30
    2060:	e7 fb       	bst	r30, 7
    2062:	c9 c1       	rjmp	.+914    	; 0x23f6 <__fp_inf>

00002064 <__addsf3x>:
    2064:	e9 2f       	mov	r30, r25
    2066:	76 d2       	rcall	.+1260   	; 0x2554 <__fp_split3>
    2068:	80 f3       	brcs	.-32     	; 0x204a <__addsf3+0x8>
    206a:	ba 17       	cp	r27, r26
    206c:	62 07       	cpc	r22, r18
    206e:	73 07       	cpc	r23, r19
    2070:	84 07       	cpc	r24, r20
    2072:	95 07       	cpc	r25, r21
    2074:	18 f0       	brcs	.+6      	; 0x207c <__addsf3x+0x18>
    2076:	71 f4       	brne	.+28     	; 0x2094 <__addsf3x+0x30>
    2078:	9e f5       	brtc	.+102    	; 0x20e0 <__addsf3x+0x7c>
    207a:	a5 c2       	rjmp	.+1354   	; 0x25c6 <__fp_zero>
    207c:	0e f4       	brtc	.+2      	; 0x2080 <__addsf3x+0x1c>
    207e:	e0 95       	com	r30
    2080:	0b 2e       	mov	r0, r27
    2082:	ba 2f       	mov	r27, r26
    2084:	a0 2d       	mov	r26, r0
    2086:	0b 01       	movw	r0, r22
    2088:	b9 01       	movw	r22, r18
    208a:	90 01       	movw	r18, r0
    208c:	0c 01       	movw	r0, r24
    208e:	ca 01       	movw	r24, r20
    2090:	a0 01       	movw	r20, r0
    2092:	11 24       	eor	r1, r1
    2094:	ff 27       	eor	r31, r31
    2096:	59 1b       	sub	r21, r25
    2098:	99 f0       	breq	.+38     	; 0x20c0 <__addsf3x+0x5c>
    209a:	59 3f       	cpi	r21, 0xF9	; 249
    209c:	50 f4       	brcc	.+20     	; 0x20b2 <__addsf3x+0x4e>
    209e:	50 3e       	cpi	r21, 0xE0	; 224
    20a0:	68 f1       	brcs	.+90     	; 0x20fc <__addsf3x+0x98>
    20a2:	1a 16       	cp	r1, r26
    20a4:	f0 40       	sbci	r31, 0x00	; 0
    20a6:	a2 2f       	mov	r26, r18
    20a8:	23 2f       	mov	r18, r19
    20aa:	34 2f       	mov	r19, r20
    20ac:	44 27       	eor	r20, r20
    20ae:	58 5f       	subi	r21, 0xF8	; 248
    20b0:	f3 cf       	rjmp	.-26     	; 0x2098 <__addsf3x+0x34>
    20b2:	46 95       	lsr	r20
    20b4:	37 95       	ror	r19
    20b6:	27 95       	ror	r18
    20b8:	a7 95       	ror	r26
    20ba:	f0 40       	sbci	r31, 0x00	; 0
    20bc:	53 95       	inc	r21
    20be:	c9 f7       	brne	.-14     	; 0x20b2 <__addsf3x+0x4e>
    20c0:	7e f4       	brtc	.+30     	; 0x20e0 <__addsf3x+0x7c>
    20c2:	1f 16       	cp	r1, r31
    20c4:	ba 0b       	sbc	r27, r26
    20c6:	62 0b       	sbc	r22, r18
    20c8:	73 0b       	sbc	r23, r19
    20ca:	84 0b       	sbc	r24, r20
    20cc:	ba f0       	brmi	.+46     	; 0x20fc <__addsf3x+0x98>
    20ce:	91 50       	subi	r25, 0x01	; 1
    20d0:	a1 f0       	breq	.+40     	; 0x20fa <__addsf3x+0x96>
    20d2:	ff 0f       	add	r31, r31
    20d4:	bb 1f       	adc	r27, r27
    20d6:	66 1f       	adc	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	c2 f7       	brpl	.-16     	; 0x20ce <__addsf3x+0x6a>
    20de:	0e c0       	rjmp	.+28     	; 0x20fc <__addsf3x+0x98>
    20e0:	ba 0f       	add	r27, r26
    20e2:	62 1f       	adc	r22, r18
    20e4:	73 1f       	adc	r23, r19
    20e6:	84 1f       	adc	r24, r20
    20e8:	48 f4       	brcc	.+18     	; 0x20fc <__addsf3x+0x98>
    20ea:	87 95       	ror	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	b7 95       	ror	r27
    20f2:	f7 95       	ror	r31
    20f4:	9e 3f       	cpi	r25, 0xFE	; 254
    20f6:	08 f0       	brcs	.+2      	; 0x20fa <__addsf3x+0x96>
    20f8:	b3 cf       	rjmp	.-154    	; 0x2060 <__addsf3+0x1e>
    20fa:	93 95       	inc	r25
    20fc:	88 0f       	add	r24, r24
    20fe:	08 f0       	brcs	.+2      	; 0x2102 <__addsf3x+0x9e>
    2100:	99 27       	eor	r25, r25
    2102:	ee 0f       	add	r30, r30
    2104:	97 95       	ror	r25
    2106:	87 95       	ror	r24
    2108:	08 95       	ret
    210a:	cc d1       	rcall	.+920    	; 0x24a4 <__fp_pscA>
    210c:	58 f0       	brcs	.+22     	; 0x2124 <__addsf3x+0xc0>
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	09 f4       	brne	.+2      	; 0x2116 <__addsf3x+0xb2>
    2114:	9e ef       	ldi	r25, 0xFE	; 254
    2116:	cd d1       	rcall	.+922    	; 0x24b2 <__fp_pscB>
    2118:	28 f0       	brcs	.+10     	; 0x2124 <__addsf3x+0xc0>
    211a:	40 e8       	ldi	r20, 0x80	; 128
    211c:	51 e0       	ldi	r21, 0x01	; 1
    211e:	59 f4       	brne	.+22     	; 0x2136 <atan2+0xe>
    2120:	5e ef       	ldi	r21, 0xFE	; 254
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <atan2+0xe>
    2124:	97 c1       	rjmp	.+814    	; 0x2454 <__fp_nan>
    2126:	4f c2       	rjmp	.+1182   	; 0x25c6 <__fp_zero>

00002128 <atan2>:
    2128:	e9 2f       	mov	r30, r25
    212a:	e0 78       	andi	r30, 0x80	; 128
    212c:	13 d2       	rcall	.+1062   	; 0x2554 <__fp_split3>
    212e:	68 f3       	brcs	.-38     	; 0x210a <__addsf3x+0xa6>
    2130:	09 2e       	mov	r0, r25
    2132:	05 2a       	or	r0, r21
    2134:	c1 f3       	breq	.-16     	; 0x2126 <__addsf3x+0xc2>
    2136:	26 17       	cp	r18, r22
    2138:	37 07       	cpc	r19, r23
    213a:	48 07       	cpc	r20, r24
    213c:	59 07       	cpc	r21, r25
    213e:	38 f0       	brcs	.+14     	; 0x214e <atan2+0x26>
    2140:	0e 2e       	mov	r0, r30
    2142:	07 f8       	bld	r0, 7
    2144:	e0 25       	eor	r30, r0
    2146:	69 f0       	breq	.+26     	; 0x2162 <atan2+0x3a>
    2148:	e0 25       	eor	r30, r0
    214a:	e0 64       	ori	r30, 0x40	; 64
    214c:	0a c0       	rjmp	.+20     	; 0x2162 <atan2+0x3a>
    214e:	ef 63       	ori	r30, 0x3F	; 63
    2150:	07 f8       	bld	r0, 7
    2152:	00 94       	com	r0
    2154:	07 fa       	bst	r0, 7
    2156:	db 01       	movw	r26, r22
    2158:	b9 01       	movw	r22, r18
    215a:	9d 01       	movw	r18, r26
    215c:	dc 01       	movw	r26, r24
    215e:	ca 01       	movw	r24, r20
    2160:	ad 01       	movw	r20, r26
    2162:	ef 93       	push	r30
    2164:	4a d0       	rcall	.+148    	; 0x21fa <__divsf3_pse>
    2166:	d4 d1       	rcall	.+936    	; 0x2510 <__fp_round>
    2168:	0a d0       	rcall	.+20     	; 0x217e <atan>
    216a:	5f 91       	pop	r21
    216c:	55 23       	and	r21, r21
    216e:	31 f0       	breq	.+12     	; 0x217c <atan2+0x54>
    2170:	2b ed       	ldi	r18, 0xDB	; 219
    2172:	3f e0       	ldi	r19, 0x0F	; 15
    2174:	49 e4       	ldi	r20, 0x49	; 73
    2176:	50 fd       	sbrc	r21, 0
    2178:	49 ec       	ldi	r20, 0xC9	; 201
    217a:	63 cf       	rjmp	.-314    	; 0x2042 <__addsf3>
    217c:	08 95       	ret

0000217e <atan>:
    217e:	df 93       	push	r29
    2180:	dd 27       	eor	r29, r29
    2182:	b9 2f       	mov	r27, r25
    2184:	bf 77       	andi	r27, 0x7F	; 127
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	16 16       	cp	r1, r22
    218c:	17 06       	cpc	r1, r23
    218e:	48 07       	cpc	r20, r24
    2190:	5b 07       	cpc	r21, r27
    2192:	10 f4       	brcc	.+4      	; 0x2198 <atan+0x1a>
    2194:	d9 2f       	mov	r29, r25
    2196:	22 d2       	rcall	.+1092   	; 0x25dc <inverse>
    2198:	9f 93       	push	r25
    219a:	8f 93       	push	r24
    219c:	7f 93       	push	r23
    219e:	6f 93       	push	r22
    21a0:	cf d2       	rcall	.+1438   	; 0x2740 <square>
    21a2:	e4 ee       	ldi	r30, 0xE4	; 228
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	59 d1       	rcall	.+690    	; 0x245a <__fp_powser>
    21a8:	b3 d1       	rcall	.+870    	; 0x2510 <__fp_round>
    21aa:	2f 91       	pop	r18
    21ac:	3f 91       	pop	r19
    21ae:	4f 91       	pop	r20
    21b0:	5f 91       	pop	r21
    21b2:	27 d2       	rcall	.+1102   	; 0x2602 <__mulsf3x>
    21b4:	dd 23       	and	r29, r29
    21b6:	49 f0       	breq	.+18     	; 0x21ca <atan+0x4c>
    21b8:	90 58       	subi	r25, 0x80	; 128
    21ba:	a2 ea       	ldi	r26, 0xA2	; 162
    21bc:	2a ed       	ldi	r18, 0xDA	; 218
    21be:	3f e0       	ldi	r19, 0x0F	; 15
    21c0:	49 ec       	ldi	r20, 0xC9	; 201
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	d0 78       	andi	r29, 0x80	; 128
    21c6:	5d 27       	eor	r21, r29
    21c8:	4d df       	rcall	.-358    	; 0x2064 <__addsf3x>
    21ca:	df 91       	pop	r29
    21cc:	a1 c1       	rjmp	.+834    	; 0x2510 <__fp_round>

000021ce <__cmpsf2>:
    21ce:	ef d0       	rcall	.+478    	; 0x23ae <__fp_cmp>
    21d0:	08 f4       	brcc	.+2      	; 0x21d4 <__cmpsf2+0x6>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	08 95       	ret

000021d6 <cos>:
    21d6:	75 d1       	rcall	.+746    	; 0x24c2 <__fp_rempio2>
    21d8:	e3 95       	inc	r30
    21da:	ab c1       	rjmp	.+854    	; 0x2532 <__fp_sinus>

000021dc <__divsf3>:
    21dc:	0c d0       	rcall	.+24     	; 0x21f6 <__divsf3x>
    21de:	98 c1       	rjmp	.+816    	; 0x2510 <__fp_round>
    21e0:	68 d1       	rcall	.+720    	; 0x24b2 <__fp_pscB>
    21e2:	40 f0       	brcs	.+16     	; 0x21f4 <__divsf3+0x18>
    21e4:	5f d1       	rcall	.+702    	; 0x24a4 <__fp_pscA>
    21e6:	30 f0       	brcs	.+12     	; 0x21f4 <__divsf3+0x18>
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__divsf3+0x16>
    21ea:	5f 3f       	cpi	r21, 0xFF	; 255
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <__divsf3+0x18>
    21ee:	03 c1       	rjmp	.+518    	; 0x23f6 <__fp_inf>
    21f0:	51 11       	cpse	r21, r1
    21f2:	ea c1       	rjmp	.+980    	; 0x25c8 <__fp_szero>
    21f4:	2f c1       	rjmp	.+606    	; 0x2454 <__fp_nan>

000021f6 <__divsf3x>:
    21f6:	ae d1       	rcall	.+860    	; 0x2554 <__fp_split3>
    21f8:	98 f3       	brcs	.-26     	; 0x21e0 <__divsf3+0x4>

000021fa <__divsf3_pse>:
    21fa:	99 23       	and	r25, r25
    21fc:	c9 f3       	breq	.-14     	; 0x21f0 <__divsf3+0x14>
    21fe:	55 23       	and	r21, r21
    2200:	b1 f3       	breq	.-20     	; 0x21ee <__divsf3+0x12>
    2202:	95 1b       	sub	r25, r21
    2204:	55 0b       	sbc	r21, r21
    2206:	bb 27       	eor	r27, r27
    2208:	aa 27       	eor	r26, r26
    220a:	62 17       	cp	r22, r18
    220c:	73 07       	cpc	r23, r19
    220e:	84 07       	cpc	r24, r20
    2210:	38 f0       	brcs	.+14     	; 0x2220 <__stack+0x21>
    2212:	9f 5f       	subi	r25, 0xFF	; 255
    2214:	5f 4f       	sbci	r21, 0xFF	; 255
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	44 1f       	adc	r20, r20
    221c:	aa 1f       	adc	r26, r26
    221e:	a9 f3       	breq	.-22     	; 0x220a <__stack+0xb>
    2220:	33 d0       	rcall	.+102    	; 0x2288 <__stack+0x89>
    2222:	0e 2e       	mov	r0, r30
    2224:	3a f0       	brmi	.+14     	; 0x2234 <__stack+0x35>
    2226:	e0 e8       	ldi	r30, 0x80	; 128
    2228:	30 d0       	rcall	.+96     	; 0x228a <__stack+0x8b>
    222a:	91 50       	subi	r25, 0x01	; 1
    222c:	50 40       	sbci	r21, 0x00	; 0
    222e:	e6 95       	lsr	r30
    2230:	00 1c       	adc	r0, r0
    2232:	ca f7       	brpl	.-14     	; 0x2226 <__stack+0x27>
    2234:	29 d0       	rcall	.+82     	; 0x2288 <__stack+0x89>
    2236:	fe 2f       	mov	r31, r30
    2238:	27 d0       	rcall	.+78     	; 0x2288 <__stack+0x89>
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	bb 1f       	adc	r27, r27
    2242:	26 17       	cp	r18, r22
    2244:	37 07       	cpc	r19, r23
    2246:	48 07       	cpc	r20, r24
    2248:	ab 07       	cpc	r26, r27
    224a:	b0 e8       	ldi	r27, 0x80	; 128
    224c:	09 f0       	breq	.+2      	; 0x2250 <__stack+0x51>
    224e:	bb 0b       	sbc	r27, r27
    2250:	80 2d       	mov	r24, r0
    2252:	bf 01       	movw	r22, r30
    2254:	ff 27       	eor	r31, r31
    2256:	93 58       	subi	r25, 0x83	; 131
    2258:	5f 4f       	sbci	r21, 0xFF	; 255
    225a:	2a f0       	brmi	.+10     	; 0x2266 <__stack+0x67>
    225c:	9e 3f       	cpi	r25, 0xFE	; 254
    225e:	51 05       	cpc	r21, r1
    2260:	68 f0       	brcs	.+26     	; 0x227c <__stack+0x7d>
    2262:	c9 c0       	rjmp	.+402    	; 0x23f6 <__fp_inf>
    2264:	b1 c1       	rjmp	.+866    	; 0x25c8 <__fp_szero>
    2266:	5f 3f       	cpi	r21, 0xFF	; 255
    2268:	ec f3       	brlt	.-6      	; 0x2264 <__stack+0x65>
    226a:	98 3e       	cpi	r25, 0xE8	; 232
    226c:	dc f3       	brlt	.-10     	; 0x2264 <__stack+0x65>
    226e:	86 95       	lsr	r24
    2270:	77 95       	ror	r23
    2272:	67 95       	ror	r22
    2274:	b7 95       	ror	r27
    2276:	f7 95       	ror	r31
    2278:	9f 5f       	subi	r25, 0xFF	; 255
    227a:	c9 f7       	brne	.-14     	; 0x226e <__stack+0x6f>
    227c:	88 0f       	add	r24, r24
    227e:	91 1d       	adc	r25, r1
    2280:	96 95       	lsr	r25
    2282:	87 95       	ror	r24
    2284:	97 f9       	bld	r25, 7
    2286:	08 95       	ret
    2288:	e1 e0       	ldi	r30, 0x01	; 1
    228a:	66 0f       	add	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	bb 1f       	adc	r27, r27
    2292:	62 17       	cp	r22, r18
    2294:	73 07       	cpc	r23, r19
    2296:	84 07       	cpc	r24, r20
    2298:	ba 07       	cpc	r27, r26
    229a:	20 f0       	brcs	.+8      	; 0x22a4 <__stack+0xa5>
    229c:	62 1b       	sub	r22, r18
    229e:	73 0b       	sbc	r23, r19
    22a0:	84 0b       	sbc	r24, r20
    22a2:	ba 0b       	sbc	r27, r26
    22a4:	ee 1f       	adc	r30, r30
    22a6:	88 f7       	brcc	.-30     	; 0x228a <__stack+0x8b>
    22a8:	e0 95       	com	r30
    22aa:	08 95       	ret

000022ac <__fixsfsi>:
    22ac:	04 d0       	rcall	.+8      	; 0x22b6 <__fixunssfsi>
    22ae:	68 94       	set
    22b0:	b1 11       	cpse	r27, r1
    22b2:	8a c1       	rjmp	.+788    	; 0x25c8 <__fp_szero>
    22b4:	08 95       	ret

000022b6 <__fixunssfsi>:
    22b6:	56 d1       	rcall	.+684    	; 0x2564 <__fp_splitA>
    22b8:	88 f0       	brcs	.+34     	; 0x22dc <__fixunssfsi+0x26>
    22ba:	9f 57       	subi	r25, 0x7F	; 127
    22bc:	90 f0       	brcs	.+36     	; 0x22e2 <__fixunssfsi+0x2c>
    22be:	b9 2f       	mov	r27, r25
    22c0:	99 27       	eor	r25, r25
    22c2:	b7 51       	subi	r27, 0x17	; 23
    22c4:	a0 f0       	brcs	.+40     	; 0x22ee <__fixunssfsi+0x38>
    22c6:	d1 f0       	breq	.+52     	; 0x22fc <__fixunssfsi+0x46>
    22c8:	66 0f       	add	r22, r22
    22ca:	77 1f       	adc	r23, r23
    22cc:	88 1f       	adc	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	1a f0       	brmi	.+6      	; 0x22d8 <__fixunssfsi+0x22>
    22d2:	ba 95       	dec	r27
    22d4:	c9 f7       	brne	.-14     	; 0x22c8 <__fixunssfsi+0x12>
    22d6:	12 c0       	rjmp	.+36     	; 0x22fc <__fixunssfsi+0x46>
    22d8:	b1 30       	cpi	r27, 0x01	; 1
    22da:	81 f0       	breq	.+32     	; 0x22fc <__fixunssfsi+0x46>
    22dc:	74 d1       	rcall	.+744    	; 0x25c6 <__fp_zero>
    22de:	b1 e0       	ldi	r27, 0x01	; 1
    22e0:	08 95       	ret
    22e2:	71 c1       	rjmp	.+738    	; 0x25c6 <__fp_zero>
    22e4:	67 2f       	mov	r22, r23
    22e6:	78 2f       	mov	r23, r24
    22e8:	88 27       	eor	r24, r24
    22ea:	b8 5f       	subi	r27, 0xF8	; 248
    22ec:	39 f0       	breq	.+14     	; 0x22fc <__fixunssfsi+0x46>
    22ee:	b9 3f       	cpi	r27, 0xF9	; 249
    22f0:	cc f3       	brlt	.-14     	; 0x22e4 <__fixunssfsi+0x2e>
    22f2:	86 95       	lsr	r24
    22f4:	77 95       	ror	r23
    22f6:	67 95       	ror	r22
    22f8:	b3 95       	inc	r27
    22fa:	d9 f7       	brne	.-10     	; 0x22f2 <__fixunssfsi+0x3c>
    22fc:	3e f4       	brtc	.+14     	; 0x230c <__fixunssfsi+0x56>
    22fe:	90 95       	com	r25
    2300:	80 95       	com	r24
    2302:	70 95       	com	r23
    2304:	61 95       	neg	r22
    2306:	7f 4f       	sbci	r23, 0xFF	; 255
    2308:	8f 4f       	sbci	r24, 0xFF	; 255
    230a:	9f 4f       	sbci	r25, 0xFF	; 255
    230c:	08 95       	ret

0000230e <__floatunsisf>:
    230e:	e8 94       	clt
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <__floatsisf+0x12>

00002312 <__floatsisf>:
    2312:	97 fb       	bst	r25, 7
    2314:	3e f4       	brtc	.+14     	; 0x2324 <__floatsisf+0x12>
    2316:	90 95       	com	r25
    2318:	80 95       	com	r24
    231a:	70 95       	com	r23
    231c:	61 95       	neg	r22
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	99 23       	and	r25, r25
    2326:	a9 f0       	breq	.+42     	; 0x2352 <__floatsisf+0x40>
    2328:	f9 2f       	mov	r31, r25
    232a:	96 e9       	ldi	r25, 0x96	; 150
    232c:	bb 27       	eor	r27, r27
    232e:	93 95       	inc	r25
    2330:	f6 95       	lsr	r31
    2332:	87 95       	ror	r24
    2334:	77 95       	ror	r23
    2336:	67 95       	ror	r22
    2338:	b7 95       	ror	r27
    233a:	f1 11       	cpse	r31, r1
    233c:	f8 cf       	rjmp	.-16     	; 0x232e <__floatsisf+0x1c>
    233e:	fa f4       	brpl	.+62     	; 0x237e <__floatsisf+0x6c>
    2340:	bb 0f       	add	r27, r27
    2342:	11 f4       	brne	.+4      	; 0x2348 <__floatsisf+0x36>
    2344:	60 ff       	sbrs	r22, 0
    2346:	1b c0       	rjmp	.+54     	; 0x237e <__floatsisf+0x6c>
    2348:	6f 5f       	subi	r22, 0xFF	; 255
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	8f 4f       	sbci	r24, 0xFF	; 255
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	16 c0       	rjmp	.+44     	; 0x237e <__floatsisf+0x6c>
    2352:	88 23       	and	r24, r24
    2354:	11 f0       	breq	.+4      	; 0x235a <__floatsisf+0x48>
    2356:	96 e9       	ldi	r25, 0x96	; 150
    2358:	11 c0       	rjmp	.+34     	; 0x237c <__floatsisf+0x6a>
    235a:	77 23       	and	r23, r23
    235c:	21 f0       	breq	.+8      	; 0x2366 <__floatsisf+0x54>
    235e:	9e e8       	ldi	r25, 0x8E	; 142
    2360:	87 2f       	mov	r24, r23
    2362:	76 2f       	mov	r23, r22
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <__floatsisf+0x5e>
    2366:	66 23       	and	r22, r22
    2368:	71 f0       	breq	.+28     	; 0x2386 <__floatsisf+0x74>
    236a:	96 e8       	ldi	r25, 0x86	; 134
    236c:	86 2f       	mov	r24, r22
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	2a f0       	brmi	.+10     	; 0x237e <__floatsisf+0x6c>
    2374:	9a 95       	dec	r25
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	da f7       	brpl	.-10     	; 0x2374 <__floatsisf+0x62>
    237e:	88 0f       	add	r24, r24
    2380:	96 95       	lsr	r25
    2382:	87 95       	ror	r24
    2384:	97 f9       	bld	r25, 7
    2386:	08 95       	ret

00002388 <floor>:
    2388:	07 d1       	rcall	.+526    	; 0x2598 <__fp_trunc>
    238a:	80 f0       	brcs	.+32     	; 0x23ac <floor+0x24>
    238c:	9f 37       	cpi	r25, 0x7F	; 127
    238e:	40 f4       	brcc	.+16     	; 0x23a0 <floor+0x18>
    2390:	91 11       	cpse	r25, r1
    2392:	0e f0       	brts	.+2      	; 0x2396 <floor+0xe>
    2394:	19 c1       	rjmp	.+562    	; 0x25c8 <__fp_szero>
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	80 e8       	ldi	r24, 0x80	; 128
    239c:	9f eb       	ldi	r25, 0xBF	; 191
    239e:	08 95       	ret
    23a0:	26 f4       	brtc	.+8      	; 0x23aa <floor+0x22>
    23a2:	1b 16       	cp	r1, r27
    23a4:	61 1d       	adc	r22, r1
    23a6:	71 1d       	adc	r23, r1
    23a8:	81 1d       	adc	r24, r1
    23aa:	2b c0       	rjmp	.+86     	; 0x2402 <__fp_mintl>
    23ac:	45 c0       	rjmp	.+138    	; 0x2438 <__fp_mpack>

000023ae <__fp_cmp>:
    23ae:	99 0f       	add	r25, r25
    23b0:	00 08       	sbc	r0, r0
    23b2:	55 0f       	add	r21, r21
    23b4:	aa 0b       	sbc	r26, r26
    23b6:	e0 e8       	ldi	r30, 0x80	; 128
    23b8:	fe ef       	ldi	r31, 0xFE	; 254
    23ba:	16 16       	cp	r1, r22
    23bc:	17 06       	cpc	r1, r23
    23be:	e8 07       	cpc	r30, r24
    23c0:	f9 07       	cpc	r31, r25
    23c2:	c0 f0       	brcs	.+48     	; 0x23f4 <__fp_cmp+0x46>
    23c4:	12 16       	cp	r1, r18
    23c6:	13 06       	cpc	r1, r19
    23c8:	e4 07       	cpc	r30, r20
    23ca:	f5 07       	cpc	r31, r21
    23cc:	98 f0       	brcs	.+38     	; 0x23f4 <__fp_cmp+0x46>
    23ce:	62 1b       	sub	r22, r18
    23d0:	73 0b       	sbc	r23, r19
    23d2:	84 0b       	sbc	r24, r20
    23d4:	95 0b       	sbc	r25, r21
    23d6:	39 f4       	brne	.+14     	; 0x23e6 <__fp_cmp+0x38>
    23d8:	0a 26       	eor	r0, r26
    23da:	61 f0       	breq	.+24     	; 0x23f4 <__fp_cmp+0x46>
    23dc:	23 2b       	or	r18, r19
    23de:	24 2b       	or	r18, r20
    23e0:	25 2b       	or	r18, r21
    23e2:	21 f4       	brne	.+8      	; 0x23ec <__fp_cmp+0x3e>
    23e4:	08 95       	ret
    23e6:	0a 26       	eor	r0, r26
    23e8:	09 f4       	brne	.+2      	; 0x23ec <__fp_cmp+0x3e>
    23ea:	a1 40       	sbci	r26, 0x01	; 1
    23ec:	a6 95       	lsr	r26
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	81 1d       	adc	r24, r1
    23f2:	81 1d       	adc	r24, r1
    23f4:	08 95       	ret

000023f6 <__fp_inf>:
    23f6:	97 f9       	bld	r25, 7
    23f8:	9f 67       	ori	r25, 0x7F	; 127
    23fa:	80 e8       	ldi	r24, 0x80	; 128
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	08 95       	ret

00002402 <__fp_mintl>:
    2402:	88 23       	and	r24, r24
    2404:	71 f4       	brne	.+28     	; 0x2422 <__fp_mintl+0x20>
    2406:	77 23       	and	r23, r23
    2408:	21 f0       	breq	.+8      	; 0x2412 <__fp_mintl+0x10>
    240a:	98 50       	subi	r25, 0x08	; 8
    240c:	87 2b       	or	r24, r23
    240e:	76 2f       	mov	r23, r22
    2410:	07 c0       	rjmp	.+14     	; 0x2420 <__fp_mintl+0x1e>
    2412:	66 23       	and	r22, r22
    2414:	11 f4       	brne	.+4      	; 0x241a <__fp_mintl+0x18>
    2416:	99 27       	eor	r25, r25
    2418:	0d c0       	rjmp	.+26     	; 0x2434 <__fp_mintl+0x32>
    241a:	90 51       	subi	r25, 0x10	; 16
    241c:	86 2b       	or	r24, r22
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	2a f0       	brmi	.+10     	; 0x242e <__fp_mintl+0x2c>
    2424:	9a 95       	dec	r25
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	da f7       	brpl	.-10     	; 0x2424 <__fp_mintl+0x22>
    242e:	88 0f       	add	r24, r24
    2430:	96 95       	lsr	r25
    2432:	87 95       	ror	r24
    2434:	97 f9       	bld	r25, 7
    2436:	08 95       	ret

00002438 <__fp_mpack>:
    2438:	9f 3f       	cpi	r25, 0xFF	; 255
    243a:	31 f0       	breq	.+12     	; 0x2448 <__fp_mpack_finite+0xc>

0000243c <__fp_mpack_finite>:
    243c:	91 50       	subi	r25, 0x01	; 1
    243e:	20 f4       	brcc	.+8      	; 0x2448 <__fp_mpack_finite+0xc>
    2440:	87 95       	ror	r24
    2442:	77 95       	ror	r23
    2444:	67 95       	ror	r22
    2446:	b7 95       	ror	r27
    2448:	88 0f       	add	r24, r24
    244a:	91 1d       	adc	r25, r1
    244c:	96 95       	lsr	r25
    244e:	87 95       	ror	r24
    2450:	97 f9       	bld	r25, 7
    2452:	08 95       	ret

00002454 <__fp_nan>:
    2454:	9f ef       	ldi	r25, 0xFF	; 255
    2456:	80 ec       	ldi	r24, 0xC0	; 192
    2458:	08 95       	ret

0000245a <__fp_powser>:
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	1f 93       	push	r17
    2460:	0f 93       	push	r16
    2462:	ff 92       	push	r15
    2464:	ef 92       	push	r14
    2466:	df 92       	push	r13
    2468:	7b 01       	movw	r14, r22
    246a:	8c 01       	movw	r16, r24
    246c:	68 94       	set
    246e:	05 c0       	rjmp	.+10     	; 0x247a <__fp_powser+0x20>
    2470:	da 2e       	mov	r13, r26
    2472:	ef 01       	movw	r28, r30
    2474:	c6 d0       	rcall	.+396    	; 0x2602 <__mulsf3x>
    2476:	fe 01       	movw	r30, r28
    2478:	e8 94       	clt
    247a:	a5 91       	lpm	r26, Z+
    247c:	25 91       	lpm	r18, Z+
    247e:	35 91       	lpm	r19, Z+
    2480:	45 91       	lpm	r20, Z+
    2482:	55 91       	lpm	r21, Z+
    2484:	ae f3       	brts	.-22     	; 0x2470 <__fp_powser+0x16>
    2486:	ef 01       	movw	r28, r30
    2488:	ed dd       	rcall	.-1062   	; 0x2064 <__addsf3x>
    248a:	fe 01       	movw	r30, r28
    248c:	97 01       	movw	r18, r14
    248e:	a8 01       	movw	r20, r16
    2490:	da 94       	dec	r13
    2492:	79 f7       	brne	.-34     	; 0x2472 <__fp_powser+0x18>
    2494:	df 90       	pop	r13
    2496:	ef 90       	pop	r14
    2498:	ff 90       	pop	r15
    249a:	0f 91       	pop	r16
    249c:	1f 91       	pop	r17
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <__fp_pscA>:
    24a4:	00 24       	eor	r0, r0
    24a6:	0a 94       	dec	r0
    24a8:	16 16       	cp	r1, r22
    24aa:	17 06       	cpc	r1, r23
    24ac:	18 06       	cpc	r1, r24
    24ae:	09 06       	cpc	r0, r25
    24b0:	08 95       	ret

000024b2 <__fp_pscB>:
    24b2:	00 24       	eor	r0, r0
    24b4:	0a 94       	dec	r0
    24b6:	12 16       	cp	r1, r18
    24b8:	13 06       	cpc	r1, r19
    24ba:	14 06       	cpc	r1, r20
    24bc:	05 06       	cpc	r0, r21
    24be:	08 95       	ret
    24c0:	c9 cf       	rjmp	.-110    	; 0x2454 <__fp_nan>

000024c2 <__fp_rempio2>:
    24c2:	50 d0       	rcall	.+160    	; 0x2564 <__fp_splitA>
    24c4:	e8 f3       	brcs	.-6      	; 0x24c0 <__fp_pscB+0xe>
    24c6:	e8 94       	clt
    24c8:	e0 e0       	ldi	r30, 0x00	; 0
    24ca:	bb 27       	eor	r27, r27
    24cc:	9f 57       	subi	r25, 0x7F	; 127
    24ce:	f0 f0       	brcs	.+60     	; 0x250c <__fp_rempio2+0x4a>
    24d0:	2a ed       	ldi	r18, 0xDA	; 218
    24d2:	3f e0       	ldi	r19, 0x0F	; 15
    24d4:	49 ec       	ldi	r20, 0xC9	; 201
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <__fp_rempio2+0x22>
    24d8:	ee 0f       	add	r30, r30
    24da:	bb 0f       	add	r27, r27
    24dc:	66 1f       	adc	r22, r22
    24de:	77 1f       	adc	r23, r23
    24e0:	88 1f       	adc	r24, r24
    24e2:	28 f0       	brcs	.+10     	; 0x24ee <__fp_rempio2+0x2c>
    24e4:	b2 3a       	cpi	r27, 0xA2	; 162
    24e6:	62 07       	cpc	r22, r18
    24e8:	73 07       	cpc	r23, r19
    24ea:	84 07       	cpc	r24, r20
    24ec:	28 f0       	brcs	.+10     	; 0x24f8 <__fp_rempio2+0x36>
    24ee:	b2 5a       	subi	r27, 0xA2	; 162
    24f0:	62 0b       	sbc	r22, r18
    24f2:	73 0b       	sbc	r23, r19
    24f4:	84 0b       	sbc	r24, r20
    24f6:	e3 95       	inc	r30
    24f8:	9a 95       	dec	r25
    24fa:	72 f7       	brpl	.-36     	; 0x24d8 <__fp_rempio2+0x16>
    24fc:	80 38       	cpi	r24, 0x80	; 128
    24fe:	30 f4       	brcc	.+12     	; 0x250c <__fp_rempio2+0x4a>
    2500:	9a 95       	dec	r25
    2502:	bb 0f       	add	r27, r27
    2504:	66 1f       	adc	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	88 1f       	adc	r24, r24
    250a:	d2 f7       	brpl	.-12     	; 0x2500 <__fp_rempio2+0x3e>
    250c:	90 48       	sbci	r25, 0x80	; 128
    250e:	96 cf       	rjmp	.-212    	; 0x243c <__fp_mpack_finite>

00002510 <__fp_round>:
    2510:	09 2e       	mov	r0, r25
    2512:	03 94       	inc	r0
    2514:	00 0c       	add	r0, r0
    2516:	11 f4       	brne	.+4      	; 0x251c <__fp_round+0xc>
    2518:	88 23       	and	r24, r24
    251a:	52 f0       	brmi	.+20     	; 0x2530 <__fp_round+0x20>
    251c:	bb 0f       	add	r27, r27
    251e:	40 f4       	brcc	.+16     	; 0x2530 <__fp_round+0x20>
    2520:	bf 2b       	or	r27, r31
    2522:	11 f4       	brne	.+4      	; 0x2528 <__fp_round+0x18>
    2524:	60 ff       	sbrs	r22, 0
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <__fp_round+0x20>
    2528:	6f 5f       	subi	r22, 0xFF	; 255
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	8f 4f       	sbci	r24, 0xFF	; 255
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	08 95       	ret

00002532 <__fp_sinus>:
    2532:	ef 93       	push	r30
    2534:	e0 ff       	sbrs	r30, 0
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <__fp_sinus+0x12>
    2538:	a2 ea       	ldi	r26, 0xA2	; 162
    253a:	2a ed       	ldi	r18, 0xDA	; 218
    253c:	3f e0       	ldi	r19, 0x0F	; 15
    253e:	49 ec       	ldi	r20, 0xC9	; 201
    2540:	5f eb       	ldi	r21, 0xBF	; 191
    2542:	90 dd       	rcall	.-1248   	; 0x2064 <__addsf3x>
    2544:	e5 df       	rcall	.-54     	; 0x2510 <__fp_round>
    2546:	0f 90       	pop	r0
    2548:	03 94       	inc	r0
    254a:	01 fc       	sbrc	r0, 1
    254c:	90 58       	subi	r25, 0x80	; 128
    254e:	e1 e1       	ldi	r30, 0x11	; 17
    2550:	f1 e0       	ldi	r31, 0x01	; 1
    2552:	00 c1       	rjmp	.+512    	; 0x2754 <__fp_powsodd>

00002554 <__fp_split3>:
    2554:	57 fd       	sbrc	r21, 7
    2556:	90 58       	subi	r25, 0x80	; 128
    2558:	44 0f       	add	r20, r20
    255a:	55 1f       	adc	r21, r21
    255c:	59 f0       	breq	.+22     	; 0x2574 <__fp_splitA+0x10>
    255e:	5f 3f       	cpi	r21, 0xFF	; 255
    2560:	71 f0       	breq	.+28     	; 0x257e <__fp_splitA+0x1a>
    2562:	47 95       	ror	r20

00002564 <__fp_splitA>:
    2564:	88 0f       	add	r24, r24
    2566:	97 fb       	bst	r25, 7
    2568:	99 1f       	adc	r25, r25
    256a:	61 f0       	breq	.+24     	; 0x2584 <__fp_splitA+0x20>
    256c:	9f 3f       	cpi	r25, 0xFF	; 255
    256e:	79 f0       	breq	.+30     	; 0x258e <__fp_splitA+0x2a>
    2570:	87 95       	ror	r24
    2572:	08 95       	ret
    2574:	12 16       	cp	r1, r18
    2576:	13 06       	cpc	r1, r19
    2578:	14 06       	cpc	r1, r20
    257a:	55 1f       	adc	r21, r21
    257c:	f2 cf       	rjmp	.-28     	; 0x2562 <__fp_split3+0xe>
    257e:	46 95       	lsr	r20
    2580:	f1 df       	rcall	.-30     	; 0x2564 <__fp_splitA>
    2582:	08 c0       	rjmp	.+16     	; 0x2594 <__fp_splitA+0x30>
    2584:	16 16       	cp	r1, r22
    2586:	17 06       	cpc	r1, r23
    2588:	18 06       	cpc	r1, r24
    258a:	99 1f       	adc	r25, r25
    258c:	f1 cf       	rjmp	.-30     	; 0x2570 <__fp_splitA+0xc>
    258e:	86 95       	lsr	r24
    2590:	71 05       	cpc	r23, r1
    2592:	61 05       	cpc	r22, r1
    2594:	08 94       	sec
    2596:	08 95       	ret

00002598 <__fp_trunc>:
    2598:	e5 df       	rcall	.-54     	; 0x2564 <__fp_splitA>
    259a:	a0 f0       	brcs	.+40     	; 0x25c4 <__fp_trunc+0x2c>
    259c:	be e7       	ldi	r27, 0x7E	; 126
    259e:	b9 17       	cp	r27, r25
    25a0:	88 f4       	brcc	.+34     	; 0x25c4 <__fp_trunc+0x2c>
    25a2:	bb 27       	eor	r27, r27
    25a4:	9f 38       	cpi	r25, 0x8F	; 143
    25a6:	60 f4       	brcc	.+24     	; 0x25c0 <__fp_trunc+0x28>
    25a8:	16 16       	cp	r1, r22
    25aa:	b1 1d       	adc	r27, r1
    25ac:	67 2f       	mov	r22, r23
    25ae:	78 2f       	mov	r23, r24
    25b0:	88 27       	eor	r24, r24
    25b2:	98 5f       	subi	r25, 0xF8	; 248
    25b4:	f7 cf       	rjmp	.-18     	; 0x25a4 <__fp_trunc+0xc>
    25b6:	86 95       	lsr	r24
    25b8:	77 95       	ror	r23
    25ba:	67 95       	ror	r22
    25bc:	b1 1d       	adc	r27, r1
    25be:	93 95       	inc	r25
    25c0:	96 39       	cpi	r25, 0x96	; 150
    25c2:	c8 f3       	brcs	.-14     	; 0x25b6 <__fp_trunc+0x1e>
    25c4:	08 95       	ret

000025c6 <__fp_zero>:
    25c6:	e8 94       	clt

000025c8 <__fp_szero>:
    25c8:	bb 27       	eor	r27, r27
    25ca:	66 27       	eor	r22, r22
    25cc:	77 27       	eor	r23, r23
    25ce:	cb 01       	movw	r24, r22
    25d0:	97 f9       	bld	r25, 7
    25d2:	08 95       	ret

000025d4 <__gesf2>:
    25d4:	ec de       	rcall	.-552    	; 0x23ae <__fp_cmp>
    25d6:	08 f4       	brcc	.+2      	; 0x25da <__gesf2+0x6>
    25d8:	8f ef       	ldi	r24, 0xFF	; 255
    25da:	08 95       	ret

000025dc <inverse>:
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	80 e8       	ldi	r24, 0x80	; 128
    25e6:	9f e3       	ldi	r25, 0x3F	; 63
    25e8:	f9 cd       	rjmp	.-1038   	; 0x21dc <__divsf3>

000025ea <__mulsf3>:
    25ea:	0b d0       	rcall	.+22     	; 0x2602 <__mulsf3x>
    25ec:	91 cf       	rjmp	.-222    	; 0x2510 <__fp_round>
    25ee:	5a df       	rcall	.-332    	; 0x24a4 <__fp_pscA>
    25f0:	28 f0       	brcs	.+10     	; 0x25fc <__mulsf3+0x12>
    25f2:	5f df       	rcall	.-322    	; 0x24b2 <__fp_pscB>
    25f4:	18 f0       	brcs	.+6      	; 0x25fc <__mulsf3+0x12>
    25f6:	95 23       	and	r25, r21
    25f8:	09 f0       	breq	.+2      	; 0x25fc <__mulsf3+0x12>
    25fa:	fd ce       	rjmp	.-518    	; 0x23f6 <__fp_inf>
    25fc:	2b cf       	rjmp	.-426    	; 0x2454 <__fp_nan>
    25fe:	11 24       	eor	r1, r1
    2600:	e3 cf       	rjmp	.-58     	; 0x25c8 <__fp_szero>

00002602 <__mulsf3x>:
    2602:	a8 df       	rcall	.-176    	; 0x2554 <__fp_split3>
    2604:	a0 f3       	brcs	.-24     	; 0x25ee <__mulsf3+0x4>

00002606 <__mulsf3_pse>:
    2606:	95 9f       	mul	r25, r21
    2608:	d1 f3       	breq	.-12     	; 0x25fe <__mulsf3+0x14>
    260a:	95 0f       	add	r25, r21
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	55 1f       	adc	r21, r21
    2610:	62 9f       	mul	r22, r18
    2612:	f0 01       	movw	r30, r0
    2614:	72 9f       	mul	r23, r18
    2616:	bb 27       	eor	r27, r27
    2618:	f0 0d       	add	r31, r0
    261a:	b1 1d       	adc	r27, r1
    261c:	63 9f       	mul	r22, r19
    261e:	aa 27       	eor	r26, r26
    2620:	f0 0d       	add	r31, r0
    2622:	b1 1d       	adc	r27, r1
    2624:	aa 1f       	adc	r26, r26
    2626:	64 9f       	mul	r22, r20
    2628:	66 27       	eor	r22, r22
    262a:	b0 0d       	add	r27, r0
    262c:	a1 1d       	adc	r26, r1
    262e:	66 1f       	adc	r22, r22
    2630:	82 9f       	mul	r24, r18
    2632:	22 27       	eor	r18, r18
    2634:	b0 0d       	add	r27, r0
    2636:	a1 1d       	adc	r26, r1
    2638:	62 1f       	adc	r22, r18
    263a:	73 9f       	mul	r23, r19
    263c:	b0 0d       	add	r27, r0
    263e:	a1 1d       	adc	r26, r1
    2640:	62 1f       	adc	r22, r18
    2642:	83 9f       	mul	r24, r19
    2644:	a0 0d       	add	r26, r0
    2646:	61 1d       	adc	r22, r1
    2648:	22 1f       	adc	r18, r18
    264a:	74 9f       	mul	r23, r20
    264c:	33 27       	eor	r19, r19
    264e:	a0 0d       	add	r26, r0
    2650:	61 1d       	adc	r22, r1
    2652:	23 1f       	adc	r18, r19
    2654:	84 9f       	mul	r24, r20
    2656:	60 0d       	add	r22, r0
    2658:	21 1d       	adc	r18, r1
    265a:	82 2f       	mov	r24, r18
    265c:	76 2f       	mov	r23, r22
    265e:	6a 2f       	mov	r22, r26
    2660:	11 24       	eor	r1, r1
    2662:	9f 57       	subi	r25, 0x7F	; 127
    2664:	50 40       	sbci	r21, 0x00	; 0
    2666:	8a f0       	brmi	.+34     	; 0x268a <__mulsf3_pse+0x84>
    2668:	e1 f0       	breq	.+56     	; 0x26a2 <__mulsf3_pse+0x9c>
    266a:	88 23       	and	r24, r24
    266c:	4a f0       	brmi	.+18     	; 0x2680 <__mulsf3_pse+0x7a>
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	bb 1f       	adc	r27, r27
    2674:	66 1f       	adc	r22, r22
    2676:	77 1f       	adc	r23, r23
    2678:	88 1f       	adc	r24, r24
    267a:	91 50       	subi	r25, 0x01	; 1
    267c:	50 40       	sbci	r21, 0x00	; 0
    267e:	a9 f7       	brne	.-22     	; 0x266a <__mulsf3_pse+0x64>
    2680:	9e 3f       	cpi	r25, 0xFE	; 254
    2682:	51 05       	cpc	r21, r1
    2684:	70 f0       	brcs	.+28     	; 0x26a2 <__mulsf3_pse+0x9c>
    2686:	b7 ce       	rjmp	.-658    	; 0x23f6 <__fp_inf>
    2688:	9f cf       	rjmp	.-194    	; 0x25c8 <__fp_szero>
    268a:	5f 3f       	cpi	r21, 0xFF	; 255
    268c:	ec f3       	brlt	.-6      	; 0x2688 <__mulsf3_pse+0x82>
    268e:	98 3e       	cpi	r25, 0xE8	; 232
    2690:	dc f3       	brlt	.-10     	; 0x2688 <__mulsf3_pse+0x82>
    2692:	86 95       	lsr	r24
    2694:	77 95       	ror	r23
    2696:	67 95       	ror	r22
    2698:	b7 95       	ror	r27
    269a:	f7 95       	ror	r31
    269c:	e7 95       	ror	r30
    269e:	9f 5f       	subi	r25, 0xFF	; 255
    26a0:	c1 f7       	brne	.-16     	; 0x2692 <__mulsf3_pse+0x8c>
    26a2:	fe 2b       	or	r31, r30
    26a4:	88 0f       	add	r24, r24
    26a6:	91 1d       	adc	r25, r1
    26a8:	96 95       	lsr	r25
    26aa:	87 95       	ror	r24
    26ac:	97 f9       	bld	r25, 7
    26ae:	08 95       	ret

000026b0 <sin>:
    26b0:	9f 93       	push	r25
    26b2:	07 df       	rcall	.-498    	; 0x24c2 <__fp_rempio2>
    26b4:	0f 90       	pop	r0
    26b6:	07 fc       	sbrc	r0, 7
    26b8:	ee 5f       	subi	r30, 0xFE	; 254
    26ba:	3b cf       	rjmp	.-394    	; 0x2532 <__fp_sinus>
    26bc:	11 f4       	brne	.+4      	; 0x26c2 <sin+0x12>
    26be:	0e f4       	brtc	.+2      	; 0x26c2 <sin+0x12>
    26c0:	c9 ce       	rjmp	.-622    	; 0x2454 <__fp_nan>
    26c2:	ba ce       	rjmp	.-652    	; 0x2438 <__fp_mpack>

000026c4 <sqrt>:
    26c4:	4f df       	rcall	.-354    	; 0x2564 <__fp_splitA>
    26c6:	d0 f3       	brcs	.-12     	; 0x26bc <sin+0xc>
    26c8:	99 23       	and	r25, r25
    26ca:	d9 f3       	breq	.-10     	; 0x26c2 <sin+0x12>
    26cc:	ce f3       	brts	.-14     	; 0x26c0 <sin+0x10>
    26ce:	9f 57       	subi	r25, 0x7F	; 127
    26d0:	55 0b       	sbc	r21, r21
    26d2:	87 ff       	sbrs	r24, 7
    26d4:	38 d0       	rcall	.+112    	; 0x2746 <__fp_norm2>
    26d6:	00 24       	eor	r0, r0
    26d8:	a0 e6       	ldi	r26, 0x60	; 96
    26da:	40 ea       	ldi	r20, 0xA0	; 160
    26dc:	90 01       	movw	r18, r0
    26de:	80 58       	subi	r24, 0x80	; 128
    26e0:	56 95       	lsr	r21
    26e2:	97 95       	ror	r25
    26e4:	28 f4       	brcc	.+10     	; 0x26f0 <sqrt+0x2c>
    26e6:	80 5c       	subi	r24, 0xC0	; 192
    26e8:	66 0f       	add	r22, r22
    26ea:	77 1f       	adc	r23, r23
    26ec:	88 1f       	adc	r24, r24
    26ee:	20 f0       	brcs	.+8      	; 0x26f8 <sqrt+0x34>
    26f0:	26 17       	cp	r18, r22
    26f2:	37 07       	cpc	r19, r23
    26f4:	48 07       	cpc	r20, r24
    26f6:	30 f4       	brcc	.+12     	; 0x2704 <sqrt+0x40>
    26f8:	62 1b       	sub	r22, r18
    26fa:	73 0b       	sbc	r23, r19
    26fc:	84 0b       	sbc	r24, r20
    26fe:	20 29       	or	r18, r0
    2700:	31 29       	or	r19, r1
    2702:	4a 2b       	or	r20, r26
    2704:	a6 95       	lsr	r26
    2706:	17 94       	ror	r1
    2708:	07 94       	ror	r0
    270a:	20 25       	eor	r18, r0
    270c:	31 25       	eor	r19, r1
    270e:	4a 27       	eor	r20, r26
    2710:	58 f7       	brcc	.-42     	; 0x26e8 <sqrt+0x24>
    2712:	66 0f       	add	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	20 f0       	brcs	.+8      	; 0x2722 <sqrt+0x5e>
    271a:	26 17       	cp	r18, r22
    271c:	37 07       	cpc	r19, r23
    271e:	48 07       	cpc	r20, r24
    2720:	30 f4       	brcc	.+12     	; 0x272e <sqrt+0x6a>
    2722:	62 0b       	sbc	r22, r18
    2724:	73 0b       	sbc	r23, r19
    2726:	84 0b       	sbc	r24, r20
    2728:	20 0d       	add	r18, r0
    272a:	31 1d       	adc	r19, r1
    272c:	41 1d       	adc	r20, r1
    272e:	a0 95       	com	r26
    2730:	81 f7       	brne	.-32     	; 0x2712 <sqrt+0x4e>
    2732:	b9 01       	movw	r22, r18
    2734:	84 2f       	mov	r24, r20
    2736:	91 58       	subi	r25, 0x81	; 129
    2738:	88 0f       	add	r24, r24
    273a:	96 95       	lsr	r25
    273c:	87 95       	ror	r24
    273e:	08 95       	ret

00002740 <square>:
    2740:	9b 01       	movw	r18, r22
    2742:	ac 01       	movw	r20, r24
    2744:	52 cf       	rjmp	.-348    	; 0x25ea <__mulsf3>

00002746 <__fp_norm2>:
    2746:	91 50       	subi	r25, 0x01	; 1
    2748:	50 40       	sbci	r21, 0x00	; 0
    274a:	66 0f       	add	r22, r22
    274c:	77 1f       	adc	r23, r23
    274e:	88 1f       	adc	r24, r24
    2750:	d2 f7       	brpl	.-12     	; 0x2746 <__fp_norm2>
    2752:	08 95       	ret

00002754 <__fp_powsodd>:
    2754:	9f 93       	push	r25
    2756:	8f 93       	push	r24
    2758:	7f 93       	push	r23
    275a:	6f 93       	push	r22
    275c:	ff 93       	push	r31
    275e:	ef 93       	push	r30
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	42 df       	rcall	.-380    	; 0x25ea <__mulsf3>
    2766:	ef 91       	pop	r30
    2768:	ff 91       	pop	r31
    276a:	77 de       	rcall	.-786    	; 0x245a <__fp_powser>
    276c:	2f 91       	pop	r18
    276e:	3f 91       	pop	r19
    2770:	4f 91       	pop	r20
    2772:	5f 91       	pop	r21
    2774:	3a cf       	rjmp	.-396    	; 0x25ea <__mulsf3>

00002776 <__udivmodsi4>:
    2776:	a1 e2       	ldi	r26, 0x21	; 33
    2778:	1a 2e       	mov	r1, r26
    277a:	aa 1b       	sub	r26, r26
    277c:	bb 1b       	sub	r27, r27
    277e:	fd 01       	movw	r30, r26
    2780:	0d c0       	rjmp	.+26     	; 0x279c <__udivmodsi4_ep>

00002782 <__udivmodsi4_loop>:
    2782:	aa 1f       	adc	r26, r26
    2784:	bb 1f       	adc	r27, r27
    2786:	ee 1f       	adc	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	a2 17       	cp	r26, r18
    278c:	b3 07       	cpc	r27, r19
    278e:	e4 07       	cpc	r30, r20
    2790:	f5 07       	cpc	r31, r21
    2792:	20 f0       	brcs	.+8      	; 0x279c <__udivmodsi4_ep>
    2794:	a2 1b       	sub	r26, r18
    2796:	b3 0b       	sbc	r27, r19
    2798:	e4 0b       	sbc	r30, r20
    279a:	f5 0b       	sbc	r31, r21

0000279c <__udivmodsi4_ep>:
    279c:	66 1f       	adc	r22, r22
    279e:	77 1f       	adc	r23, r23
    27a0:	88 1f       	adc	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	1a 94       	dec	r1
    27a6:	69 f7       	brne	.-38     	; 0x2782 <__udivmodsi4_loop>
    27a8:	60 95       	com	r22
    27aa:	70 95       	com	r23
    27ac:	80 95       	com	r24
    27ae:	90 95       	com	r25
    27b0:	9b 01       	movw	r18, r22
    27b2:	ac 01       	movw	r20, r24
    27b4:	bd 01       	movw	r22, r26
    27b6:	cf 01       	movw	r24, r30
    27b8:	08 95       	ret

000027ba <__tablejump_elpm__>:
    27ba:	07 90       	elpm	r0, Z+
    27bc:	f6 91       	elpm	r31, Z
    27be:	e0 2d       	mov	r30, r0
    27c0:	19 94       	eijmp

000027c2 <dtostrf>:
    27c2:	ef 92       	push	r14
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	e8 01       	movw	r28, r16
    27ce:	47 ff       	sbrs	r20, 7
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <dtostrf+0x14>
    27d2:	34 e1       	ldi	r19, 0x14	; 20
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <dtostrf+0x16>
    27d6:	34 e0       	ldi	r19, 0x04	; 4
    27d8:	e4 2f       	mov	r30, r20
    27da:	ff 27       	eor	r31, r31
    27dc:	e7 fd       	sbrc	r30, 7
    27de:	f0 95       	com	r31
    27e0:	f7 ff       	sbrs	r31, 7
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <dtostrf+0x28>
    27e4:	f1 95       	neg	r31
    27e6:	e1 95       	neg	r30
    27e8:	f1 09       	sbc	r31, r1
    27ea:	e3 2e       	mov	r14, r19
    27ec:	02 2f       	mov	r16, r18
    27ee:	2e 2f       	mov	r18, r30
    27f0:	ae 01       	movw	r20, r28
    27f2:	5b d0       	rcall	.+182    	; 0x28aa <dtoa_prf>
    27f4:	ce 01       	movw	r24, r28
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ef 90       	pop	r14
    2800:	08 95       	ret

00002802 <atof>:
    2802:	66 27       	eor	r22, r22
    2804:	77 27       	eor	r23, r23
    2806:	ce c1       	rjmp	.+924    	; 0x2ba4 <strtod>

00002808 <atoi>:
    2808:	fc 01       	movw	r30, r24
    280a:	88 27       	eor	r24, r24
    280c:	99 27       	eor	r25, r25
    280e:	e8 94       	clt
    2810:	21 91       	ld	r18, Z+
    2812:	20 32       	cpi	r18, 0x20	; 32
    2814:	e9 f3       	breq	.-6      	; 0x2810 <atoi+0x8>
    2816:	29 30       	cpi	r18, 0x09	; 9
    2818:	10 f0       	brcs	.+4      	; 0x281e <atoi+0x16>
    281a:	2e 30       	cpi	r18, 0x0E	; 14
    281c:	c8 f3       	brcs	.-14     	; 0x2810 <atoi+0x8>
    281e:	2b 32       	cpi	r18, 0x2B	; 43
    2820:	39 f0       	breq	.+14     	; 0x2830 <atoi+0x28>
    2822:	2d 32       	cpi	r18, 0x2D	; 45
    2824:	31 f4       	brne	.+12     	; 0x2832 <atoi+0x2a>
    2826:	68 94       	set
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <atoi+0x28>
    282a:	1e d0       	rcall	.+60     	; 0x2868 <__mulhi_const_10>
    282c:	82 0f       	add	r24, r18
    282e:	91 1d       	adc	r25, r1
    2830:	21 91       	ld	r18, Z+
    2832:	20 53       	subi	r18, 0x30	; 48
    2834:	2a 30       	cpi	r18, 0x0A	; 10
    2836:	c8 f3       	brcs	.-14     	; 0x282a <atoi+0x22>
    2838:	1e f4       	brtc	.+6      	; 0x2840 <atoi+0x38>
    283a:	90 95       	com	r25
    283c:	81 95       	neg	r24
    283e:	9f 4f       	sbci	r25, 0xFF	; 255
    2840:	08 95       	ret

00002842 <strcmp>:
    2842:	fb 01       	movw	r30, r22
    2844:	dc 01       	movw	r26, r24
    2846:	8d 91       	ld	r24, X+
    2848:	01 90       	ld	r0, Z+
    284a:	80 19       	sub	r24, r0
    284c:	01 10       	cpse	r0, r1
    284e:	d9 f3       	breq	.-10     	; 0x2846 <strcmp+0x4>
    2850:	99 0b       	sbc	r25, r25
    2852:	08 95       	ret

00002854 <__itoa_ncheck>:
    2854:	bb 27       	eor	r27, r27
    2856:	4a 30       	cpi	r20, 0x0A	; 10
    2858:	31 f4       	brne	.+12     	; 0x2866 <__itoa_ncheck+0x12>
    285a:	99 23       	and	r25, r25
    285c:	22 f4       	brpl	.+8      	; 0x2866 <__itoa_ncheck+0x12>
    285e:	bd e2       	ldi	r27, 0x2D	; 45
    2860:	90 95       	com	r25
    2862:	81 95       	neg	r24
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	09 c0       	rjmp	.+18     	; 0x287a <__utoa_common>

00002868 <__mulhi_const_10>:
    2868:	7a e0       	ldi	r23, 0x0A	; 10
    286a:	97 9f       	mul	r25, r23
    286c:	90 2d       	mov	r25, r0
    286e:	87 9f       	mul	r24, r23
    2870:	80 2d       	mov	r24, r0
    2872:	91 0d       	add	r25, r1
    2874:	11 24       	eor	r1, r1
    2876:	08 95       	ret

00002878 <__utoa_ncheck>:
    2878:	bb 27       	eor	r27, r27

0000287a <__utoa_common>:
    287a:	fb 01       	movw	r30, r22
    287c:	55 27       	eor	r21, r21
    287e:	aa 27       	eor	r26, r26
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	aa 1f       	adc	r26, r26
    2886:	a4 17       	cp	r26, r20
    2888:	10 f0       	brcs	.+4      	; 0x288e <__utoa_common+0x14>
    288a:	a4 1b       	sub	r26, r20
    288c:	83 95       	inc	r24
    288e:	50 51       	subi	r21, 0x10	; 16
    2890:	b9 f7       	brne	.-18     	; 0x2880 <__utoa_common+0x6>
    2892:	a0 5d       	subi	r26, 0xD0	; 208
    2894:	aa 33       	cpi	r26, 0x3A	; 58
    2896:	08 f0       	brcs	.+2      	; 0x289a <__utoa_common+0x20>
    2898:	a9 5d       	subi	r26, 0xD9	; 217
    289a:	a1 93       	st	Z+, r26
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	79 f7       	brne	.-34     	; 0x287e <__utoa_common+0x4>
    28a0:	b1 11       	cpse	r27, r1
    28a2:	b1 93       	st	Z+, r27
    28a4:	11 92       	st	Z+, r1
    28a6:	cb 01       	movw	r24, r22
    28a8:	dd c3       	rjmp	.+1978   	; 0x3064 <strrev>

000028aa <dtoa_prf>:
    28aa:	6f 92       	push	r6
    28ac:	7f 92       	push	r7
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	29 97       	sbiw	r28, 0x09	; 9
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	6a 01       	movw	r12, r20
    28d6:	b2 2e       	mov	r11, r18
    28d8:	10 2f       	mov	r17, r16
    28da:	0c 33       	cpi	r16, 0x3C	; 60
    28dc:	20 f4       	brcc	.+8      	; 0x28e6 <dtoa_prf+0x3c>
    28de:	ff 24       	eor	r15, r15
    28e0:	f3 94       	inc	r15
    28e2:	f0 0e       	add	r15, r16
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <dtoa_prf+0x40>
    28e6:	4c e3       	ldi	r20, 0x3C	; 60
    28e8:	f4 2e       	mov	r15, r20
    28ea:	0f 2d       	mov	r16, r15
    28ec:	27 e0       	ldi	r18, 0x07	; 7
    28ee:	ae 01       	movw	r20, r28
    28f0:	4f 5f       	subi	r20, 0xFF	; 255
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255
    28f4:	bf d2       	rcall	.+1406   	; 0x2e74 <__ftoa_engine>
    28f6:	79 81       	ldd	r23, Y+1	; 0x01
    28f8:	27 2f       	mov	r18, r23
    28fa:	29 70       	andi	r18, 0x09	; 9
    28fc:	21 30       	cpi	r18, 0x01	; 1
    28fe:	31 f0       	breq	.+12     	; 0x290c <dtoa_prf+0x62>
    2900:	e1 fc       	sbrc	r14, 1
    2902:	06 c0       	rjmp	.+12     	; 0x2910 <dtoa_prf+0x66>
    2904:	e0 fc       	sbrc	r14, 0
    2906:	06 c0       	rjmp	.+12     	; 0x2914 <dtoa_prf+0x6a>
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <dtoa_prf+0x6c>
    290c:	6d e2       	ldi	r22, 0x2D	; 45
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <dtoa_prf+0x6c>
    2910:	6b e2       	ldi	r22, 0x2B	; 43
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <dtoa_prf+0x6c>
    2914:	60 e2       	ldi	r22, 0x20	; 32
    2916:	ae 2d       	mov	r26, r14
    2918:	a0 71       	andi	r26, 0x10	; 16
    291a:	73 ff       	sbrs	r23, 3
    291c:	36 c0       	rjmp	.+108    	; 0x298a <dtoa_prf+0xe0>
    291e:	66 23       	and	r22, r22
    2920:	11 f0       	breq	.+4      	; 0x2926 <dtoa_prf+0x7c>
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <dtoa_prf+0x7e>
    2926:	83 e0       	ldi	r24, 0x03	; 3
    2928:	8b 15       	cp	r24, r11
    292a:	10 f4       	brcc	.+4      	; 0x2930 <dtoa_prf+0x86>
    292c:	b8 1a       	sub	r11, r24
    292e:	01 c0       	rjmp	.+2      	; 0x2932 <dtoa_prf+0x88>
    2930:	b1 2c       	mov	r11, r1
    2932:	a1 11       	cpse	r26, r1
    2934:	0b c0       	rjmp	.+22     	; 0x294c <dtoa_prf+0xa2>
    2936:	f6 01       	movw	r30, r12
    2938:	8b 2d       	mov	r24, r11
    293a:	90 e2       	ldi	r25, 0x20	; 32
    293c:	88 23       	and	r24, r24
    293e:	19 f0       	breq	.+6      	; 0x2946 <dtoa_prf+0x9c>
    2940:	91 93       	st	Z+, r25
    2942:	81 50       	subi	r24, 0x01	; 1
    2944:	fb cf       	rjmp	.-10     	; 0x293c <dtoa_prf+0x92>
    2946:	cb 0c       	add	r12, r11
    2948:	d1 1c       	adc	r13, r1
    294a:	b1 2c       	mov	r11, r1
    294c:	66 23       	and	r22, r22
    294e:	31 f0       	breq	.+12     	; 0x295c <dtoa_prf+0xb2>
    2950:	f6 01       	movw	r30, r12
    2952:	60 83       	st	Z, r22
    2954:	96 01       	movw	r18, r12
    2956:	2f 5f       	subi	r18, 0xFF	; 255
    2958:	3f 4f       	sbci	r19, 0xFF	; 255
    295a:	69 01       	movw	r12, r18
    295c:	c6 01       	movw	r24, r12
    295e:	03 96       	adiw	r24, 0x03	; 3
    2960:	e2 fe       	sbrs	r14, 2
    2962:	05 c0       	rjmp	.+10     	; 0x296e <dtoa_prf+0xc4>
    2964:	2e e4       	ldi	r18, 0x4E	; 78
    2966:	f6 01       	movw	r30, r12
    2968:	20 83       	st	Z, r18
    296a:	31 e4       	ldi	r19, 0x41	; 65
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <dtoa_prf+0xcc>
    296e:	2e e6       	ldi	r18, 0x6E	; 110
    2970:	f6 01       	movw	r30, r12
    2972:	20 83       	st	Z, r18
    2974:	31 e6       	ldi	r19, 0x61	; 97
    2976:	31 83       	std	Z+1, r19	; 0x01
    2978:	22 83       	std	Z+2, r18	; 0x02
    297a:	fc 01       	movw	r30, r24
    297c:	2b 2d       	mov	r18, r11
    297e:	30 e2       	ldi	r19, 0x20	; 32
    2980:	22 23       	and	r18, r18
    2982:	f1 f1       	breq	.+124    	; 0x2a00 <dtoa_prf+0x156>
    2984:	31 93       	st	Z+, r19
    2986:	21 50       	subi	r18, 0x01	; 1
    2988:	fb cf       	rjmp	.-10     	; 0x2980 <dtoa_prf+0xd6>
    298a:	72 ff       	sbrs	r23, 2
    298c:	40 c0       	rjmp	.+128    	; 0x2a0e <dtoa_prf+0x164>
    298e:	66 23       	and	r22, r22
    2990:	11 f0       	breq	.+4      	; 0x2996 <dtoa_prf+0xec>
    2992:	84 e0       	ldi	r24, 0x04	; 4
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <dtoa_prf+0xee>
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	8b 15       	cp	r24, r11
    299a:	10 f4       	brcc	.+4      	; 0x29a0 <dtoa_prf+0xf6>
    299c:	b8 1a       	sub	r11, r24
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <dtoa_prf+0xf8>
    29a0:	b1 2c       	mov	r11, r1
    29a2:	a1 11       	cpse	r26, r1
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <dtoa_prf+0x112>
    29a6:	f6 01       	movw	r30, r12
    29a8:	8b 2d       	mov	r24, r11
    29aa:	90 e2       	ldi	r25, 0x20	; 32
    29ac:	88 23       	and	r24, r24
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <dtoa_prf+0x10c>
    29b0:	91 93       	st	Z+, r25
    29b2:	81 50       	subi	r24, 0x01	; 1
    29b4:	fb cf       	rjmp	.-10     	; 0x29ac <dtoa_prf+0x102>
    29b6:	cb 0c       	add	r12, r11
    29b8:	d1 1c       	adc	r13, r1
    29ba:	b1 2c       	mov	r11, r1
    29bc:	66 23       	and	r22, r22
    29be:	31 f0       	breq	.+12     	; 0x29cc <dtoa_prf+0x122>
    29c0:	f6 01       	movw	r30, r12
    29c2:	60 83       	st	Z, r22
    29c4:	96 01       	movw	r18, r12
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	69 01       	movw	r12, r18
    29cc:	c6 01       	movw	r24, r12
    29ce:	03 96       	adiw	r24, 0x03	; 3
    29d0:	e2 fe       	sbrs	r14, 2
    29d2:	07 c0       	rjmp	.+14     	; 0x29e2 <dtoa_prf+0x138>
    29d4:	29 e4       	ldi	r18, 0x49	; 73
    29d6:	f6 01       	movw	r30, r12
    29d8:	20 83       	st	Z, r18
    29da:	2e e4       	ldi	r18, 0x4E	; 78
    29dc:	21 83       	std	Z+1, r18	; 0x01
    29de:	26 e4       	ldi	r18, 0x46	; 70
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <dtoa_prf+0x144>
    29e2:	29 e6       	ldi	r18, 0x69	; 105
    29e4:	f6 01       	movw	r30, r12
    29e6:	20 83       	st	Z, r18
    29e8:	2e e6       	ldi	r18, 0x6E	; 110
    29ea:	21 83       	std	Z+1, r18	; 0x01
    29ec:	26 e6       	ldi	r18, 0x66	; 102
    29ee:	22 83       	std	Z+2, r18	; 0x02
    29f0:	fc 01       	movw	r30, r24
    29f2:	2b 2d       	mov	r18, r11
    29f4:	30 e2       	ldi	r19, 0x20	; 32
    29f6:	22 23       	and	r18, r18
    29f8:	19 f0       	breq	.+6      	; 0x2a00 <dtoa_prf+0x156>
    29fa:	31 93       	st	Z+, r19
    29fc:	21 50       	subi	r18, 0x01	; 1
    29fe:	fb cf       	rjmp	.-10     	; 0x29f6 <dtoa_prf+0x14c>
    2a00:	fc 01       	movw	r30, r24
    2a02:	eb 0d       	add	r30, r11
    2a04:	f1 1d       	adc	r31, r1
    2a06:	10 82       	st	Z, r1
    2a08:	8e ef       	ldi	r24, 0xFE	; 254
    2a0a:	9f ef       	ldi	r25, 0xFF	; 255
    2a0c:	b7 c0       	rjmp	.+366    	; 0x2b7c <dtoa_prf+0x2d2>
    2a0e:	b1 e0       	ldi	r27, 0x01	; 1
    2a10:	61 11       	cpse	r22, r1
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <dtoa_prf+0x16c>
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	4b 2f       	mov	r20, r27
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	18 16       	cp	r1, r24
    2a1c:	19 06       	cpc	r1, r25
    2a1e:	24 f4       	brge	.+8      	; 0x2a28 <dtoa_prf+0x17e>
    2a20:	9c 01       	movw	r18, r24
    2a22:	2f 5f       	subi	r18, 0xFF	; 255
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <dtoa_prf+0x182>
    2a28:	21 e0       	ldi	r18, 0x01	; 1
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	24 0f       	add	r18, r20
    2a2e:	35 1f       	adc	r19, r21
    2a30:	11 23       	and	r17, r17
    2a32:	29 f0       	breq	.+10     	; 0x2a3e <dtoa_prf+0x194>
    2a34:	41 2f       	mov	r20, r17
    2a36:	50 e0       	ldi	r21, 0x00	; 0
    2a38:	4f 5f       	subi	r20, 0xFF	; 255
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <dtoa_prf+0x198>
    2a3e:	40 e0       	ldi	r20, 0x00	; 0
    2a40:	50 e0       	ldi	r21, 0x00	; 0
    2a42:	42 0f       	add	r20, r18
    2a44:	53 1f       	adc	r21, r19
    2a46:	2b 2d       	mov	r18, r11
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	42 17       	cp	r20, r18
    2a4c:	53 07       	cpc	r21, r19
    2a4e:	14 f4       	brge	.+4      	; 0x2a54 <dtoa_prf+0x1aa>
    2a50:	b4 1a       	sub	r11, r20
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <dtoa_prf+0x1ac>
    2a54:	b1 2c       	mov	r11, r1
    2a56:	2e 2d       	mov	r18, r14
    2a58:	28 71       	andi	r18, 0x18	; 24
    2a5a:	59 f4       	brne	.+22     	; 0x2a72 <dtoa_prf+0x1c8>
    2a5c:	f6 01       	movw	r30, r12
    2a5e:	2b 2d       	mov	r18, r11
    2a60:	30 e2       	ldi	r19, 0x20	; 32
    2a62:	22 23       	and	r18, r18
    2a64:	19 f0       	breq	.+6      	; 0x2a6c <dtoa_prf+0x1c2>
    2a66:	31 93       	st	Z+, r19
    2a68:	21 50       	subi	r18, 0x01	; 1
    2a6a:	fb cf       	rjmp	.-10     	; 0x2a62 <dtoa_prf+0x1b8>
    2a6c:	cb 0c       	add	r12, r11
    2a6e:	d1 1c       	adc	r13, r1
    2a70:	b1 2c       	mov	r11, r1
    2a72:	bb 23       	and	r27, r27
    2a74:	31 f0       	breq	.+12     	; 0x2a82 <dtoa_prf+0x1d8>
    2a76:	f6 01       	movw	r30, r12
    2a78:	60 83       	st	Z, r22
    2a7a:	96 01       	movw	r18, r12
    2a7c:	2f 5f       	subi	r18, 0xFF	; 255
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a80:	69 01       	movw	r12, r18
    2a82:	a1 11       	cpse	r26, r1
    2a84:	0b c0       	rjmp	.+22     	; 0x2a9c <dtoa_prf+0x1f2>
    2a86:	f6 01       	movw	r30, r12
    2a88:	2b 2d       	mov	r18, r11
    2a8a:	30 e3       	ldi	r19, 0x30	; 48
    2a8c:	22 23       	and	r18, r18
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <dtoa_prf+0x1ec>
    2a90:	31 93       	st	Z+, r19
    2a92:	21 50       	subi	r18, 0x01	; 1
    2a94:	fb cf       	rjmp	.-10     	; 0x2a8c <dtoa_prf+0x1e2>
    2a96:	cb 0c       	add	r12, r11
    2a98:	d1 1c       	adc	r13, r1
    2a9a:	b1 2c       	mov	r11, r1
    2a9c:	f8 0e       	add	r15, r24
    2a9e:	0a 81       	ldd	r16, Y+2	; 0x02
    2aa0:	37 2f       	mov	r19, r23
    2aa2:	30 71       	andi	r19, 0x10	; 16
    2aa4:	a3 2e       	mov	r10, r19
    2aa6:	74 ff       	sbrs	r23, 4
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <dtoa_prf+0x206>
    2aaa:	01 33       	cpi	r16, 0x31	; 49
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <dtoa_prf+0x206>
    2aae:	fa 94       	dec	r15
    2ab0:	1f 14       	cp	r1, r15
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <dtoa_prf+0x214>
    2ab4:	2f 2d       	mov	r18, r15
    2ab6:	29 30       	cpi	r18, 0x09	; 9
    2ab8:	18 f0       	brcs	.+6      	; 0x2ac0 <dtoa_prf+0x216>
    2aba:	28 e0       	ldi	r18, 0x08	; 8
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <dtoa_prf+0x216>
    2abe:	21 e0       	ldi	r18, 0x01	; 1
    2ac0:	68 2f       	mov	r22, r24
    2ac2:	39 2f       	mov	r19, r25
    2ac4:	97 ff       	sbrs	r25, 7
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <dtoa_prf+0x222>
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	46 2f       	mov	r20, r22
    2ace:	53 2f       	mov	r21, r19
    2ad0:	61 2c       	mov	r6, r1
    2ad2:	71 2c       	mov	r7, r1
    2ad4:	3e e2       	ldi	r19, 0x2E	; 46
    2ad6:	93 2e       	mov	r9, r19
    2ad8:	bc 01       	movw	r22, r24
    2ada:	62 1b       	sub	r22, r18
    2adc:	71 09       	sbc	r23, r1
    2ade:	9b 01       	movw	r18, r22
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	a4 1b       	sub	r26, r20
    2ae4:	b5 0b       	sbc	r27, r21
    2ae6:	e1 e0       	ldi	r30, 0x01	; 1
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	ec 0f       	add	r30, r28
    2aec:	fd 1f       	adc	r31, r29
    2aee:	ae 0f       	add	r26, r30
    2af0:	bf 1f       	adc	r27, r31
    2af2:	e1 2e       	mov	r14, r17
    2af4:	f1 2c       	mov	r15, r1
    2af6:	f1 94       	neg	r15
    2af8:	e1 94       	neg	r14
    2afa:	f1 08       	sbc	r15, r1
    2afc:	4f 3f       	cpi	r20, 0xFF	; 255
    2afe:	ff ef       	ldi	r31, 0xFF	; 255
    2b00:	5f 07       	cpc	r21, r31
    2b02:	31 f4       	brne	.+12     	; 0x2b10 <dtoa_prf+0x266>
    2b04:	f6 01       	movw	r30, r12
    2b06:	90 82       	st	Z, r9
    2b08:	b6 01       	movw	r22, r12
    2b0a:	6f 5f       	subi	r22, 0xFF	; 255
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	6b 01       	movw	r12, r22
    2b10:	84 17       	cp	r24, r20
    2b12:	95 07       	cpc	r25, r21
    2b14:	4c f0       	brlt	.+18     	; 0x2b28 <dtoa_prf+0x27e>
    2b16:	24 17       	cp	r18, r20
    2b18:	35 07       	cpc	r19, r21
    2b1a:	34 f4       	brge	.+12     	; 0x2b28 <dtoa_prf+0x27e>
    2b1c:	bd 01       	movw	r22, r26
    2b1e:	66 0d       	add	r22, r6
    2b20:	77 1d       	adc	r23, r7
    2b22:	fb 01       	movw	r30, r22
    2b24:	11 81       	ldd	r17, Z+1	; 0x01
    2b26:	01 c0       	rjmp	.+2      	; 0x2b2a <dtoa_prf+0x280>
    2b28:	10 e3       	ldi	r17, 0x30	; 48
    2b2a:	41 50       	subi	r20, 0x01	; 1
    2b2c:	51 09       	sbc	r21, r1
    2b2e:	ff ef       	ldi	r31, 0xFF	; 255
    2b30:	6f 1a       	sub	r6, r31
    2b32:	7f 0a       	sbc	r7, r31
    2b34:	b6 01       	movw	r22, r12
    2b36:	6f 5f       	subi	r22, 0xFF	; 255
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	4e 15       	cp	r20, r14
    2b3c:	5f 05       	cpc	r21, r15
    2b3e:	24 f0       	brlt	.+8      	; 0x2b48 <dtoa_prf+0x29e>
    2b40:	f6 01       	movw	r30, r12
    2b42:	10 83       	st	Z, r17
    2b44:	6b 01       	movw	r12, r22
    2b46:	da cf       	rjmp	.-76     	; 0x2afc <dtoa_prf+0x252>
    2b48:	48 17       	cp	r20, r24
    2b4a:	59 07       	cpc	r21, r25
    2b4c:	39 f4       	brne	.+14     	; 0x2b5c <dtoa_prf+0x2b2>
    2b4e:	06 33       	cpi	r16, 0x36	; 54
    2b50:	20 f4       	brcc	.+8      	; 0x2b5a <dtoa_prf+0x2b0>
    2b52:	05 33       	cpi	r16, 0x35	; 53
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <dtoa_prf+0x2b2>
    2b56:	a1 10       	cpse	r10, r1
    2b58:	01 c0       	rjmp	.+2      	; 0x2b5c <dtoa_prf+0x2b2>
    2b5a:	11 e3       	ldi	r17, 0x31	; 49
    2b5c:	f6 01       	movw	r30, r12
    2b5e:	10 83       	st	Z, r17
    2b60:	fb 01       	movw	r30, r22
    2b62:	8b 2d       	mov	r24, r11
    2b64:	90 e2       	ldi	r25, 0x20	; 32
    2b66:	88 23       	and	r24, r24
    2b68:	19 f0       	breq	.+6      	; 0x2b70 <dtoa_prf+0x2c6>
    2b6a:	91 93       	st	Z+, r25
    2b6c:	81 50       	subi	r24, 0x01	; 1
    2b6e:	fb cf       	rjmp	.-10     	; 0x2b66 <dtoa_prf+0x2bc>
    2b70:	fb 01       	movw	r30, r22
    2b72:	eb 0d       	add	r30, r11
    2b74:	f1 1d       	adc	r31, r1
    2b76:	10 82       	st	Z, r1
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	29 96       	adiw	r28, 0x09	; 9
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	9f 90       	pop	r9
    2b9e:	7f 90       	pop	r7
    2ba0:	6f 90       	pop	r6
    2ba2:	08 95       	ret

00002ba4 <strtod>:
    2ba4:	8f 92       	push	r8
    2ba6:	9f 92       	push	r9
    2ba8:	af 92       	push	r10
    2baa:	bf 92       	push	r11
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	8b 01       	movw	r16, r22
    2bbe:	61 15       	cp	r22, r1
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	21 f0       	breq	.+8      	; 0x2bcc <strtod+0x28>
    2bc4:	db 01       	movw	r26, r22
    2bc6:	8c 93       	st	X, r24
    2bc8:	11 96       	adiw	r26, 0x01	; 1
    2bca:	9c 93       	st	X, r25
    2bcc:	ec 01       	movw	r28, r24
    2bce:	5e 01       	movw	r10, r28
    2bd0:	bf ef       	ldi	r27, 0xFF	; 255
    2bd2:	ab 1a       	sub	r10, r27
    2bd4:	bb 0a       	sbc	r11, r27
    2bd6:	75 01       	movw	r14, r10
    2bd8:	c8 80       	ld	r12, Y
    2bda:	8c 2d       	mov	r24, r12
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	22 d2       	rcall	.+1092   	; 0x3024 <isspace>
    2be0:	89 2b       	or	r24, r25
    2be2:	11 f0       	breq	.+4      	; 0x2be8 <strtod+0x44>
    2be4:	e5 01       	movw	r28, r10
    2be6:	f3 cf       	rjmp	.-26     	; 0x2bce <strtod+0x2a>
    2be8:	ed e2       	ldi	r30, 0x2D	; 45
    2bea:	ce 12       	cpse	r12, r30
    2bec:	08 c0       	rjmp	.+16     	; 0x2bfe <strtod+0x5a>
    2bee:	7e 01       	movw	r14, r28
    2bf0:	f2 e0       	ldi	r31, 0x02	; 2
    2bf2:	ef 0e       	add	r14, r31
    2bf4:	f1 1c       	adc	r15, r1
    2bf6:	c9 80       	ldd	r12, Y+1	; 0x01
    2bf8:	dd 24       	eor	r13, r13
    2bfa:	d3 94       	inc	r13
    2bfc:	09 c0       	rjmp	.+18     	; 0x2c10 <strtod+0x6c>
    2bfe:	2b e2       	ldi	r18, 0x2B	; 43
    2c00:	c2 12       	cpse	r12, r18
    2c02:	05 c0       	rjmp	.+10     	; 0x2c0e <strtod+0x6a>
    2c04:	7e 01       	movw	r14, r28
    2c06:	42 e0       	ldi	r20, 0x02	; 2
    2c08:	e4 0e       	add	r14, r20
    2c0a:	f1 1c       	adc	r15, r1
    2c0c:	c9 80       	ldd	r12, Y+1	; 0x01
    2c0e:	d1 2c       	mov	r13, r1
    2c10:	e7 01       	movw	r28, r14
    2c12:	21 97       	sbiw	r28, 0x01	; 1
    2c14:	43 e0       	ldi	r20, 0x03	; 3
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	68 e3       	ldi	r22, 0x38	; 56
    2c1a:	71 e0       	ldi	r23, 0x01	; 1
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	0a d2       	rcall	.+1044   	; 0x3034 <strncasecmp_P>
    2c20:	89 2b       	or	r24, r25
    2c22:	b9 f4       	brne	.+46     	; 0x2c52 <strtod+0xae>
    2c24:	23 96       	adiw	r28, 0x03	; 3
    2c26:	45 e0       	ldi	r20, 0x05	; 5
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	63 e3       	ldi	r22, 0x33	; 51
    2c2c:	71 e0       	ldi	r23, 0x01	; 1
    2c2e:	ce 01       	movw	r24, r28
    2c30:	01 d2       	rcall	.+1026   	; 0x3034 <strncasecmp_P>
    2c32:	89 2b       	or	r24, r25
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <strtod+0x94>
    2c36:	25 96       	adiw	r28, 0x05	; 5
    2c38:	01 15       	cp	r16, r1
    2c3a:	11 05       	cpc	r17, r1
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <strtod+0xa0>
    2c3e:	d8 01       	movw	r26, r16
    2c40:	cd 93       	st	X+, r28
    2c42:	dc 93       	st	X, r29
    2c44:	d1 10       	cpse	r13, r1
    2c46:	00 c1       	rjmp	.+512    	; 0x2e48 <strtod+0x2a4>
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	80 e8       	ldi	r24, 0x80	; 128
    2c4e:	9f e7       	ldi	r25, 0x7F	; 127
    2c50:	04 c1       	rjmp	.+520    	; 0x2e5a <strtod+0x2b6>
    2c52:	43 e0       	ldi	r20, 0x03	; 3
    2c54:	50 e0       	ldi	r21, 0x00	; 0
    2c56:	60 e3       	ldi	r22, 0x30	; 48
    2c58:	71 e0       	ldi	r23, 0x01	; 1
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	eb d1       	rcall	.+982    	; 0x3034 <strncasecmp_P>
    2c5e:	89 2b       	or	r24, r25
    2c60:	59 f4       	brne	.+22     	; 0x2c78 <strtod+0xd4>
    2c62:	01 15       	cp	r16, r1
    2c64:	11 05       	cpc	r17, r1
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <strtod+0xc6>
    2c68:	f4 c0       	rjmp	.+488    	; 0x2e52 <strtod+0x2ae>
    2c6a:	b2 e0       	ldi	r27, 0x02	; 2
    2c6c:	eb 0e       	add	r14, r27
    2c6e:	f1 1c       	adc	r15, r1
    2c70:	f8 01       	movw	r30, r16
    2c72:	f1 82       	std	Z+1, r15	; 0x01
    2c74:	e0 82       	st	Z, r14
    2c76:	ed c0       	rjmp	.+474    	; 0x2e52 <strtod+0x2ae>
    2c78:	f7 01       	movw	r30, r14
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	cb 01       	movw	r24, r22
    2c80:	c0 e0       	ldi	r28, 0x00	; 0
    2c82:	d0 e0       	ldi	r29, 0x00	; 0
    2c84:	7f 01       	movw	r14, r30
    2c86:	a0 ed       	ldi	r26, 0xD0	; 208
    2c88:	aa 2e       	mov	r10, r26
    2c8a:	ac 0c       	add	r10, r12
    2c8c:	29 e0       	ldi	r18, 0x09	; 9
    2c8e:	2a 15       	cp	r18, r10
    2c90:	28 f1       	brcs	.+74     	; 0x2cdc <strtod+0x138>
    2c92:	4d 2d       	mov	r20, r13
    2c94:	42 60       	ori	r20, 0x02	; 2
    2c96:	b4 2e       	mov	r11, r20
    2c98:	2d 2d       	mov	r18, r13
    2c9a:	28 70       	andi	r18, 0x08	; 8
    2c9c:	d2 fe       	sbrs	r13, 2
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <strtod+0x104>
    2ca0:	21 11       	cpse	r18, r1
    2ca2:	24 c0       	rjmp	.+72     	; 0x2cec <strtod+0x148>
    2ca4:	21 96       	adiw	r28, 0x01	; 1
    2ca6:	22 c0       	rjmp	.+68     	; 0x2cec <strtod+0x148>
    2ca8:	21 11       	cpse	r18, r1
    2caa:	21 97       	sbiw	r28, 0x01	; 1
    2cac:	a5 e0       	ldi	r26, 0x05	; 5
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	9b 01       	movw	r18, r22
    2cb2:	ac 01       	movw	r20, r24
    2cb4:	ea d1       	rcall	.+980    	; 0x308a <__muluhisi3>
    2cb6:	66 0f       	add	r22, r22
    2cb8:	77 1f       	adc	r23, r23
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	6a 0d       	add	r22, r10
    2cc0:	71 1d       	adc	r23, r1
    2cc2:	81 1d       	adc	r24, r1
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	68 39       	cpi	r22, 0x98	; 152
    2cc8:	a9 e9       	ldi	r26, 0x99	; 153
    2cca:	7a 07       	cpc	r23, r26
    2ccc:	8a 07       	cpc	r24, r26
    2cce:	a9 e1       	ldi	r26, 0x19	; 25
    2cd0:	9a 07       	cpc	r25, r26
    2cd2:	60 f0       	brcs	.+24     	; 0x2cec <strtod+0x148>
    2cd4:	bd 2d       	mov	r27, r13
    2cd6:	b6 60       	ori	r27, 0x06	; 6
    2cd8:	bb 2e       	mov	r11, r27
    2cda:	08 c0       	rjmp	.+16     	; 0x2cec <strtod+0x148>
    2cdc:	2e ef       	ldi	r18, 0xFE	; 254
    2cde:	a2 12       	cpse	r10, r18
    2ce0:	0a c0       	rjmp	.+20     	; 0x2cf6 <strtod+0x152>
    2ce2:	d3 fc       	sbrc	r13, 3
    2ce4:	50 c0       	rjmp	.+160    	; 0x2d86 <strtod+0x1e2>
    2ce6:	4d 2d       	mov	r20, r13
    2ce8:	48 60       	ori	r20, 0x08	; 8
    2cea:	b4 2e       	mov	r11, r20
    2cec:	31 96       	adiw	r30, 0x01	; 1
    2cee:	d7 01       	movw	r26, r14
    2cf0:	cc 90       	ld	r12, X
    2cf2:	db 2c       	mov	r13, r11
    2cf4:	c7 cf       	rjmp	.-114    	; 0x2c84 <strtod+0xe0>
    2cf6:	2c 2d       	mov	r18, r12
    2cf8:	2f 7d       	andi	r18, 0xDF	; 223
    2cfa:	25 34       	cpi	r18, 0x45	; 69
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <strtod+0x15c>
    2cfe:	43 c0       	rjmp	.+134    	; 0x2d86 <strtod+0x1e2>
    2d00:	a0 81       	ld	r26, Z
    2d02:	ad 32       	cpi	r26, 0x2D	; 45
    2d04:	41 f4       	brne	.+16     	; 0x2d16 <strtod+0x172>
    2d06:	bd 2d       	mov	r27, r13
    2d08:	b0 61       	ori	r27, 0x10	; 16
    2d0a:	db 2e       	mov	r13, r27
    2d0c:	7f 01       	movw	r14, r30
    2d0e:	22 e0       	ldi	r18, 0x02	; 2
    2d10:	e2 0e       	add	r14, r18
    2d12:	f1 1c       	adc	r15, r1
    2d14:	0c c0       	rjmp	.+24     	; 0x2d2e <strtod+0x18a>
    2d16:	7f 01       	movw	r14, r30
    2d18:	ab 32       	cpi	r26, 0x2B	; 43
    2d1a:	31 f0       	breq	.+12     	; 0x2d28 <strtod+0x184>
    2d1c:	4f ef       	ldi	r20, 0xFF	; 255
    2d1e:	e4 1a       	sub	r14, r20
    2d20:	f4 0a       	sbc	r15, r20
    2d22:	21 e0       	ldi	r18, 0x01	; 1
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	06 c0       	rjmp	.+12     	; 0x2d34 <strtod+0x190>
    2d28:	a2 e0       	ldi	r26, 0x02	; 2
    2d2a:	ea 0e       	add	r14, r26
    2d2c:	f1 1c       	adc	r15, r1
    2d2e:	a1 81       	ldd	r26, Z+1	; 0x01
    2d30:	22 e0       	ldi	r18, 0x02	; 2
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	a0 53       	subi	r26, 0x30	; 48
    2d36:	aa 30       	cpi	r26, 0x0A	; 10
    2d38:	18 f0       	brcs	.+6      	; 0x2d40 <strtod+0x19c>
    2d3a:	e2 1a       	sub	r14, r18
    2d3c:	f3 0a       	sbc	r15, r19
    2d3e:	23 c0       	rjmp	.+70     	; 0x2d86 <strtod+0x1e2>
    2d40:	f7 01       	movw	r30, r14
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	20 38       	cpi	r18, 0x80	; 128
    2d48:	bc e0       	ldi	r27, 0x0C	; 12
    2d4a:	3b 07       	cpc	r19, r27
    2d4c:	5c f4       	brge	.+22     	; 0x2d64 <strtod+0x1c0>
    2d4e:	a9 01       	movw	r20, r18
    2d50:	44 0f       	add	r20, r20
    2d52:	55 1f       	adc	r21, r21
    2d54:	44 0f       	add	r20, r20
    2d56:	55 1f       	adc	r21, r21
    2d58:	24 0f       	add	r18, r20
    2d5a:	35 1f       	adc	r19, r21
    2d5c:	22 0f       	add	r18, r18
    2d5e:	33 1f       	adc	r19, r19
    2d60:	2a 0f       	add	r18, r26
    2d62:	31 1d       	adc	r19, r1
    2d64:	af 01       	movw	r20, r30
    2d66:	4f 5f       	subi	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	7a 01       	movw	r14, r20
    2d6c:	a0 81       	ld	r26, Z
    2d6e:	a0 53       	subi	r26, 0x30	; 48
    2d70:	aa 30       	cpi	r26, 0x0A	; 10
    2d72:	10 f4       	brcc	.+4      	; 0x2d78 <strtod+0x1d4>
    2d74:	fa 01       	movw	r30, r20
    2d76:	e7 cf       	rjmp	.-50     	; 0x2d46 <strtod+0x1a2>
    2d78:	d4 fe       	sbrs	r13, 4
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <strtod+0x1de>
    2d7c:	31 95       	neg	r19
    2d7e:	21 95       	neg	r18
    2d80:	31 09       	sbc	r19, r1
    2d82:	c2 0f       	add	r28, r18
    2d84:	d3 1f       	adc	r29, r19
    2d86:	d1 fe       	sbrs	r13, 1
    2d88:	09 c0       	rjmp	.+18     	; 0x2d9c <strtod+0x1f8>
    2d8a:	01 15       	cp	r16, r1
    2d8c:	11 05       	cpc	r17, r1
    2d8e:	31 f0       	breq	.+12     	; 0x2d9c <strtod+0x1f8>
    2d90:	e1 e0       	ldi	r30, 0x01	; 1
    2d92:	ee 1a       	sub	r14, r30
    2d94:	f1 08       	sbc	r15, r1
    2d96:	d8 01       	movw	r26, r16
    2d98:	ed 92       	st	X+, r14
    2d9a:	fc 92       	st	X, r15
    2d9c:	b8 da       	rcall	.-2704   	; 0x230e <__floatunsisf>
    2d9e:	2d 2d       	mov	r18, r13
    2da0:	23 70       	andi	r18, 0x03	; 3
    2da2:	23 30       	cpi	r18, 0x03	; 3
    2da4:	19 f0       	breq	.+6      	; 0x2dac <strtod+0x208>
    2da6:	4b 01       	movw	r8, r22
    2da8:	5c 01       	movw	r10, r24
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <strtod+0x214>
    2dac:	4b 01       	movw	r8, r22
    2dae:	5c 01       	movw	r10, r24
    2db0:	b7 fa       	bst	r11, 7
    2db2:	b0 94       	com	r11
    2db4:	b7 f8       	bld	r11, 7
    2db6:	b0 94       	com	r11
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	a9 01       	movw	r20, r18
    2dbe:	c5 01       	movw	r24, r10
    2dc0:	b4 01       	movw	r22, r8
    2dc2:	05 da       	rcall	.-3062   	; 0x21ce <__cmpsf2>
    2dc4:	88 23       	and	r24, r24
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <strtod+0x226>
    2dc8:	3c c0       	rjmp	.+120    	; 0x2e42 <strtod+0x29e>
    2dca:	d7 ff       	sbrs	r29, 7
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <strtod+0x236>
    2dce:	d1 95       	neg	r29
    2dd0:	c1 95       	neg	r28
    2dd2:	d1 09       	sbc	r29, r1
    2dd4:	0f e4       	ldi	r16, 0x4F	; 79
    2dd6:	11 e0       	ldi	r17, 0x01	; 1
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <strtod+0x23a>
    2dda:	07 e6       	ldi	r16, 0x67	; 103
    2ddc:	11 e0       	ldi	r17, 0x01	; 1
    2dde:	68 01       	movw	r12, r16
    2de0:	b8 e1       	ldi	r27, 0x18	; 24
    2de2:	cb 1a       	sub	r12, r27
    2de4:	d1 08       	sbc	r13, r1
    2de6:	90 e2       	ldi	r25, 0x20	; 32
    2de8:	e9 2e       	mov	r14, r25
    2dea:	f1 2c       	mov	r15, r1
    2dec:	ce 15       	cp	r28, r14
    2dee:	df 05       	cpc	r29, r15
    2df0:	6c f0       	brlt	.+26     	; 0x2e0c <strtod+0x268>
    2df2:	f8 01       	movw	r30, r16
    2df4:	25 91       	lpm	r18, Z+
    2df6:	35 91       	lpm	r19, Z+
    2df8:	45 91       	lpm	r20, Z+
    2dfa:	54 91       	lpm	r21, Z
    2dfc:	c5 01       	movw	r24, r10
    2dfe:	b4 01       	movw	r22, r8
    2e00:	f4 db       	rcall	.-2072   	; 0x25ea <__mulsf3>
    2e02:	4b 01       	movw	r8, r22
    2e04:	5c 01       	movw	r10, r24
    2e06:	ce 19       	sub	r28, r14
    2e08:	df 09       	sbc	r29, r15
    2e0a:	f0 cf       	rjmp	.-32     	; 0x2dec <strtod+0x248>
    2e0c:	04 50       	subi	r16, 0x04	; 4
    2e0e:	11 09       	sbc	r17, r1
    2e10:	f5 94       	asr	r15
    2e12:	e7 94       	ror	r14
    2e14:	0c 15       	cp	r16, r12
    2e16:	1d 05       	cpc	r17, r13
    2e18:	49 f7       	brne	.-46     	; 0x2dec <strtod+0x248>
    2e1a:	8a 2d       	mov	r24, r10
    2e1c:	88 0f       	add	r24, r24
    2e1e:	8b 2d       	mov	r24, r11
    2e20:	88 1f       	adc	r24, r24
    2e22:	8f 3f       	cpi	r24, 0xFF	; 255
    2e24:	41 f0       	breq	.+16     	; 0x2e36 <strtod+0x292>
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	a9 01       	movw	r20, r18
    2e2c:	c5 01       	movw	r24, r10
    2e2e:	b4 01       	movw	r22, r8
    2e30:	ce d9       	rcall	.-3172   	; 0x21ce <__cmpsf2>
    2e32:	81 11       	cpse	r24, r1
    2e34:	06 c0       	rjmp	.+12     	; 0x2e42 <strtod+0x29e>
    2e36:	82 e2       	ldi	r24, 0x22	; 34
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	90 93 75 06 	sts	0x0675, r25
    2e3e:	80 93 74 06 	sts	0x0674, r24
    2e42:	c5 01       	movw	r24, r10
    2e44:	b4 01       	movw	r22, r8
    2e46:	09 c0       	rjmp	.+18     	; 0x2e5a <strtod+0x2b6>
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	80 e8       	ldi	r24, 0x80	; 128
    2e4e:	9f ef       	ldi	r25, 0xFF	; 255
    2e50:	04 c0       	rjmp	.+8      	; 0x2e5a <strtod+0x2b6>
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	80 ec       	ldi	r24, 0xC0	; 192
    2e58:	9f e7       	ldi	r25, 0x7F	; 127
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	1f 91       	pop	r17
    2e60:	0f 91       	pop	r16
    2e62:	ff 90       	pop	r15
    2e64:	ef 90       	pop	r14
    2e66:	df 90       	pop	r13
    2e68:	cf 90       	pop	r12
    2e6a:	bf 90       	pop	r11
    2e6c:	af 90       	pop	r10
    2e6e:	9f 90       	pop	r9
    2e70:	8f 90       	pop	r8
    2e72:	08 95       	ret

00002e74 <__ftoa_engine>:
    2e74:	28 30       	cpi	r18, 0x08	; 8
    2e76:	08 f0       	brcs	.+2      	; 0x2e7a <__ftoa_engine+0x6>
    2e78:	27 e0       	ldi	r18, 0x07	; 7
    2e7a:	33 27       	eor	r19, r19
    2e7c:	da 01       	movw	r26, r20
    2e7e:	99 0f       	add	r25, r25
    2e80:	31 1d       	adc	r19, r1
    2e82:	87 fd       	sbrc	r24, 7
    2e84:	91 60       	ori	r25, 0x01	; 1
    2e86:	00 96       	adiw	r24, 0x00	; 0
    2e88:	61 05       	cpc	r22, r1
    2e8a:	71 05       	cpc	r23, r1
    2e8c:	39 f4       	brne	.+14     	; 0x2e9c <__ftoa_engine+0x28>
    2e8e:	32 60       	ori	r19, 0x02	; 2
    2e90:	2e 5f       	subi	r18, 0xFE	; 254
    2e92:	3d 93       	st	X+, r19
    2e94:	30 e3       	ldi	r19, 0x30	; 48
    2e96:	2a 95       	dec	r18
    2e98:	e1 f7       	brne	.-8      	; 0x2e92 <__ftoa_engine+0x1e>
    2e9a:	08 95       	ret
    2e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2e9e:	30 f0       	brcs	.+12     	; 0x2eac <__ftoa_engine+0x38>
    2ea0:	80 38       	cpi	r24, 0x80	; 128
    2ea2:	71 05       	cpc	r23, r1
    2ea4:	61 05       	cpc	r22, r1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <__ftoa_engine+0x36>
    2ea8:	3c 5f       	subi	r19, 0xFC	; 252
    2eaa:	3c 5f       	subi	r19, 0xFC	; 252
    2eac:	3d 93       	st	X+, r19
    2eae:	91 30       	cpi	r25, 0x01	; 1
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <__ftoa_engine+0x40>
    2eb2:	80 68       	ori	r24, 0x80	; 128
    2eb4:	91 1d       	adc	r25, r1
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	1f 93       	push	r17
    2ebc:	0f 93       	push	r16
    2ebe:	ff 92       	push	r15
    2ec0:	ef 92       	push	r14
    2ec2:	19 2f       	mov	r17, r25
    2ec4:	98 7f       	andi	r25, 0xF8	; 248
    2ec6:	96 95       	lsr	r25
    2ec8:	e9 2f       	mov	r30, r25
    2eca:	96 95       	lsr	r25
    2ecc:	96 95       	lsr	r25
    2ece:	e9 0f       	add	r30, r25
    2ed0:	ff 27       	eor	r31, r31
    2ed2:	eb 53       	subi	r30, 0x3B	; 59
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	99 27       	eor	r25, r25
    2ed8:	33 27       	eor	r19, r19
    2eda:	ee 24       	eor	r14, r14
    2edc:	ff 24       	eor	r15, r15
    2ede:	a7 01       	movw	r20, r14
    2ee0:	e7 01       	movw	r28, r14
    2ee2:	05 90       	lpm	r0, Z+
    2ee4:	08 94       	sec
    2ee6:	07 94       	ror	r0
    2ee8:	28 f4       	brcc	.+10     	; 0x2ef4 <__ftoa_engine+0x80>
    2eea:	36 0f       	add	r19, r22
    2eec:	e7 1e       	adc	r14, r23
    2eee:	f8 1e       	adc	r15, r24
    2ef0:	49 1f       	adc	r20, r25
    2ef2:	51 1d       	adc	r21, r1
    2ef4:	66 0f       	add	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	88 1f       	adc	r24, r24
    2efa:	99 1f       	adc	r25, r25
    2efc:	06 94       	lsr	r0
    2efe:	a1 f7       	brne	.-24     	; 0x2ee8 <__ftoa_engine+0x74>
    2f00:	05 90       	lpm	r0, Z+
    2f02:	07 94       	ror	r0
    2f04:	28 f4       	brcc	.+10     	; 0x2f10 <__ftoa_engine+0x9c>
    2f06:	e7 0e       	add	r14, r23
    2f08:	f8 1e       	adc	r15, r24
    2f0a:	49 1f       	adc	r20, r25
    2f0c:	56 1f       	adc	r21, r22
    2f0e:	c1 1d       	adc	r28, r1
    2f10:	77 0f       	add	r23, r23
    2f12:	88 1f       	adc	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	66 1f       	adc	r22, r22
    2f18:	06 94       	lsr	r0
    2f1a:	a1 f7       	brne	.-24     	; 0x2f04 <__ftoa_engine+0x90>
    2f1c:	05 90       	lpm	r0, Z+
    2f1e:	07 94       	ror	r0
    2f20:	28 f4       	brcc	.+10     	; 0x2f2c <__ftoa_engine+0xb8>
    2f22:	f8 0e       	add	r15, r24
    2f24:	49 1f       	adc	r20, r25
    2f26:	56 1f       	adc	r21, r22
    2f28:	c7 1f       	adc	r28, r23
    2f2a:	d1 1d       	adc	r29, r1
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	66 1f       	adc	r22, r22
    2f32:	77 1f       	adc	r23, r23
    2f34:	06 94       	lsr	r0
    2f36:	a1 f7       	brne	.-24     	; 0x2f20 <__ftoa_engine+0xac>
    2f38:	05 90       	lpm	r0, Z+
    2f3a:	07 94       	ror	r0
    2f3c:	20 f4       	brcc	.+8      	; 0x2f46 <__ftoa_engine+0xd2>
    2f3e:	49 0f       	add	r20, r25
    2f40:	56 1f       	adc	r21, r22
    2f42:	c7 1f       	adc	r28, r23
    2f44:	d8 1f       	adc	r29, r24
    2f46:	99 0f       	add	r25, r25
    2f48:	66 1f       	adc	r22, r22
    2f4a:	77 1f       	adc	r23, r23
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	06 94       	lsr	r0
    2f50:	a9 f7       	brne	.-22     	; 0x2f3c <__ftoa_engine+0xc8>
    2f52:	84 91       	lpm	r24, Z
    2f54:	10 95       	com	r17
    2f56:	17 70       	andi	r17, 0x07	; 7
    2f58:	41 f0       	breq	.+16     	; 0x2f6a <__ftoa_engine+0xf6>
    2f5a:	d6 95       	lsr	r29
    2f5c:	c7 95       	ror	r28
    2f5e:	57 95       	ror	r21
    2f60:	47 95       	ror	r20
    2f62:	f7 94       	ror	r15
    2f64:	e7 94       	ror	r14
    2f66:	1a 95       	dec	r17
    2f68:	c1 f7       	brne	.-16     	; 0x2f5a <__ftoa_engine+0xe6>
    2f6a:	eb e6       	ldi	r30, 0x6B	; 107
    2f6c:	f1 e0       	ldi	r31, 0x01	; 1
    2f6e:	68 94       	set
    2f70:	15 90       	lpm	r1, Z+
    2f72:	15 91       	lpm	r17, Z+
    2f74:	35 91       	lpm	r19, Z+
    2f76:	65 91       	lpm	r22, Z+
    2f78:	95 91       	lpm	r25, Z+
    2f7a:	05 90       	lpm	r0, Z+
    2f7c:	7f e2       	ldi	r23, 0x2F	; 47
    2f7e:	73 95       	inc	r23
    2f80:	e1 18       	sub	r14, r1
    2f82:	f1 0a       	sbc	r15, r17
    2f84:	43 0b       	sbc	r20, r19
    2f86:	56 0b       	sbc	r21, r22
    2f88:	c9 0b       	sbc	r28, r25
    2f8a:	d0 09       	sbc	r29, r0
    2f8c:	c0 f7       	brcc	.-16     	; 0x2f7e <__ftoa_engine+0x10a>
    2f8e:	e1 0c       	add	r14, r1
    2f90:	f1 1e       	adc	r15, r17
    2f92:	43 1f       	adc	r20, r19
    2f94:	56 1f       	adc	r21, r22
    2f96:	c9 1f       	adc	r28, r25
    2f98:	d0 1d       	adc	r29, r0
    2f9a:	7e f4       	brtc	.+30     	; 0x2fba <__ftoa_engine+0x146>
    2f9c:	70 33       	cpi	r23, 0x30	; 48
    2f9e:	11 f4       	brne	.+4      	; 0x2fa4 <__ftoa_engine+0x130>
    2fa0:	8a 95       	dec	r24
    2fa2:	e6 cf       	rjmp	.-52     	; 0x2f70 <__ftoa_engine+0xfc>
    2fa4:	e8 94       	clt
    2fa6:	01 50       	subi	r16, 0x01	; 1
    2fa8:	30 f0       	brcs	.+12     	; 0x2fb6 <__ftoa_engine+0x142>
    2faa:	08 0f       	add	r16, r24
    2fac:	0a f4       	brpl	.+2      	; 0x2fb0 <__ftoa_engine+0x13c>
    2fae:	00 27       	eor	r16, r16
    2fb0:	02 17       	cp	r16, r18
    2fb2:	08 f4       	brcc	.+2      	; 0x2fb6 <__ftoa_engine+0x142>
    2fb4:	20 2f       	mov	r18, r16
    2fb6:	23 95       	inc	r18
    2fb8:	02 2f       	mov	r16, r18
    2fba:	7a 33       	cpi	r23, 0x3A	; 58
    2fbc:	28 f0       	brcs	.+10     	; 0x2fc8 <__ftoa_engine+0x154>
    2fbe:	79 e3       	ldi	r23, 0x39	; 57
    2fc0:	7d 93       	st	X+, r23
    2fc2:	2a 95       	dec	r18
    2fc4:	e9 f7       	brne	.-6      	; 0x2fc0 <__ftoa_engine+0x14c>
    2fc6:	10 c0       	rjmp	.+32     	; 0x2fe8 <__ftoa_engine+0x174>
    2fc8:	7d 93       	st	X+, r23
    2fca:	2a 95       	dec	r18
    2fcc:	89 f6       	brne	.-94     	; 0x2f70 <__ftoa_engine+0xfc>
    2fce:	06 94       	lsr	r0
    2fd0:	97 95       	ror	r25
    2fd2:	67 95       	ror	r22
    2fd4:	37 95       	ror	r19
    2fd6:	17 95       	ror	r17
    2fd8:	17 94       	ror	r1
    2fda:	e1 18       	sub	r14, r1
    2fdc:	f1 0a       	sbc	r15, r17
    2fde:	43 0b       	sbc	r20, r19
    2fe0:	56 0b       	sbc	r21, r22
    2fe2:	c9 0b       	sbc	r28, r25
    2fe4:	d0 09       	sbc	r29, r0
    2fe6:	98 f0       	brcs	.+38     	; 0x300e <__ftoa_engine+0x19a>
    2fe8:	23 95       	inc	r18
    2fea:	7e 91       	ld	r23, -X
    2fec:	73 95       	inc	r23
    2fee:	7a 33       	cpi	r23, 0x3A	; 58
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <__ftoa_engine+0x180>
    2ff2:	70 e3       	ldi	r23, 0x30	; 48
    2ff4:	7c 93       	st	X, r23
    2ff6:	20 13       	cpse	r18, r16
    2ff8:	b8 f7       	brcc	.-18     	; 0x2fe8 <__ftoa_engine+0x174>
    2ffa:	7e 91       	ld	r23, -X
    2ffc:	70 61       	ori	r23, 0x10	; 16
    2ffe:	7d 93       	st	X+, r23
    3000:	30 f0       	brcs	.+12     	; 0x300e <__ftoa_engine+0x19a>
    3002:	83 95       	inc	r24
    3004:	71 e3       	ldi	r23, 0x31	; 49
    3006:	7d 93       	st	X+, r23
    3008:	70 e3       	ldi	r23, 0x30	; 48
    300a:	2a 95       	dec	r18
    300c:	e1 f7       	brne	.-8      	; 0x3006 <__ftoa_engine+0x192>
    300e:	11 24       	eor	r1, r1
    3010:	ef 90       	pop	r14
    3012:	ff 90       	pop	r15
    3014:	0f 91       	pop	r16
    3016:	1f 91       	pop	r17
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	99 27       	eor	r25, r25
    301e:	87 fd       	sbrc	r24, 7
    3020:	90 95       	com	r25
    3022:	08 95       	ret

00003024 <isspace>:
    3024:	91 11       	cpse	r25, r1
    3026:	2e c0       	rjmp	.+92     	; 0x3084 <__ctype_isfalse>
    3028:	80 32       	cpi	r24, 0x20	; 32
    302a:	19 f0       	breq	.+6      	; 0x3032 <isspace+0xe>
    302c:	89 50       	subi	r24, 0x09	; 9
    302e:	85 50       	subi	r24, 0x05	; 5
    3030:	d0 f7       	brcc	.-12     	; 0x3026 <isspace+0x2>
    3032:	08 95       	ret

00003034 <strncasecmp_P>:
    3034:	fb 01       	movw	r30, r22
    3036:	dc 01       	movw	r26, r24
    3038:	41 50       	subi	r20, 0x01	; 1
    303a:	50 40       	sbci	r21, 0x00	; 0
    303c:	88 f0       	brcs	.+34     	; 0x3060 <strncasecmp_P+0x2c>
    303e:	8d 91       	ld	r24, X+
    3040:	81 34       	cpi	r24, 0x41	; 65
    3042:	1c f0       	brlt	.+6      	; 0x304a <strncasecmp_P+0x16>
    3044:	8b 35       	cpi	r24, 0x5B	; 91
    3046:	0c f4       	brge	.+2      	; 0x304a <strncasecmp_P+0x16>
    3048:	80 5e       	subi	r24, 0xE0	; 224
    304a:	65 91       	lpm	r22, Z+
    304c:	61 34       	cpi	r22, 0x41	; 65
    304e:	1c f0       	brlt	.+6      	; 0x3056 <strncasecmp_P+0x22>
    3050:	6b 35       	cpi	r22, 0x5B	; 91
    3052:	0c f4       	brge	.+2      	; 0x3056 <strncasecmp_P+0x22>
    3054:	60 5e       	subi	r22, 0xE0	; 224
    3056:	86 1b       	sub	r24, r22
    3058:	61 11       	cpse	r22, r1
    305a:	71 f3       	breq	.-36     	; 0x3038 <strncasecmp_P+0x4>
    305c:	99 0b       	sbc	r25, r25
    305e:	08 95       	ret
    3060:	88 1b       	sub	r24, r24
    3062:	fc cf       	rjmp	.-8      	; 0x305c <strncasecmp_P+0x28>

00003064 <strrev>:
    3064:	dc 01       	movw	r26, r24
    3066:	fc 01       	movw	r30, r24
    3068:	67 2f       	mov	r22, r23
    306a:	71 91       	ld	r23, Z+
    306c:	77 23       	and	r23, r23
    306e:	e1 f7       	brne	.-8      	; 0x3068 <strrev+0x4>
    3070:	32 97       	sbiw	r30, 0x02	; 2
    3072:	04 c0       	rjmp	.+8      	; 0x307c <strrev+0x18>
    3074:	7c 91       	ld	r23, X
    3076:	6d 93       	st	X+, r22
    3078:	70 83       	st	Z, r23
    307a:	62 91       	ld	r22, -Z
    307c:	ae 17       	cp	r26, r30
    307e:	bf 07       	cpc	r27, r31
    3080:	c8 f3       	brcs	.-14     	; 0x3074 <strrev+0x10>
    3082:	08 95       	ret

00003084 <__ctype_isfalse>:
    3084:	99 27       	eor	r25, r25
    3086:	88 27       	eor	r24, r24

00003088 <__ctype_istrue>:
    3088:	08 95       	ret

0000308a <__muluhisi3>:
    308a:	09 d0       	rcall	.+18     	; 0x309e <__umulhisi3>
    308c:	a5 9f       	mul	r26, r21
    308e:	90 0d       	add	r25, r0
    3090:	b4 9f       	mul	r27, r20
    3092:	90 0d       	add	r25, r0
    3094:	a4 9f       	mul	r26, r20
    3096:	80 0d       	add	r24, r0
    3098:	91 1d       	adc	r25, r1
    309a:	11 24       	eor	r1, r1
    309c:	08 95       	ret

0000309e <__umulhisi3>:
    309e:	a2 9f       	mul	r26, r18
    30a0:	b0 01       	movw	r22, r0
    30a2:	b3 9f       	mul	r27, r19
    30a4:	c0 01       	movw	r24, r0
    30a6:	a3 9f       	mul	r26, r19
    30a8:	70 0d       	add	r23, r0
    30aa:	81 1d       	adc	r24, r1
    30ac:	11 24       	eor	r1, r1
    30ae:	91 1d       	adc	r25, r1
    30b0:	b2 9f       	mul	r27, r18
    30b2:	70 0d       	add	r23, r0
    30b4:	81 1d       	adc	r24, r1
    30b6:	11 24       	eor	r1, r1
    30b8:	91 1d       	adc	r25, r1
    30ba:	08 95       	ret

000030bc <_exit>:
    30bc:	f8 94       	cli

000030be <__stop_program>:
    30be:	ff cf       	rjmp	.-2      	; 0x30be <__stop_program>
